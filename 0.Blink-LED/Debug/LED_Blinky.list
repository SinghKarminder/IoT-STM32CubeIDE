
LED_Blinky.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002d64  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000048  08002eec  08002eec  00012eec  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002f34  08002f34  0002000c  2**0
                  CONTENTS
  4 .ARM          00000008  08002f34  08002f34  00012f34  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08002f3c  08002f3c  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002f3c  08002f3c  00012f3c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08002f40  08002f40  00012f40  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08002f44  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000a4  2000000c  08002f50  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200000b0  08002f50  000200b0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000b9a9  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001703  00000000  00000000  0002b9e5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000898  00000000  00000000  0002d0e8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000810  00000000  00000000  0002d980  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002504f  00000000  00000000  0002e190  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000a275  00000000  00000000  000531df  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000e5945  00000000  00000000  0005d454  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  00142d99  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002238  00000000  00000000  00142dec  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	2000000c 	.word	0x2000000c
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08002ed4 	.word	0x08002ed4

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000010 	.word	0x20000010
 80001c4:	08002ed4 	.word	0x08002ed4

080001c8 <__aeabi_uldivmod>:
 80001c8:	b953      	cbnz	r3, 80001e0 <__aeabi_uldivmod+0x18>
 80001ca:	b94a      	cbnz	r2, 80001e0 <__aeabi_uldivmod+0x18>
 80001cc:	2900      	cmp	r1, #0
 80001ce:	bf08      	it	eq
 80001d0:	2800      	cmpeq	r0, #0
 80001d2:	bf1c      	itt	ne
 80001d4:	f04f 31ff 	movne.w	r1, #4294967295
 80001d8:	f04f 30ff 	movne.w	r0, #4294967295
 80001dc:	f000 b96e 	b.w	80004bc <__aeabi_idiv0>
 80001e0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001e4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001e8:	f000 f806 	bl	80001f8 <__udivmoddi4>
 80001ec:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001f4:	b004      	add	sp, #16
 80001f6:	4770      	bx	lr

080001f8 <__udivmoddi4>:
 80001f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001fc:	9d08      	ldr	r5, [sp, #32]
 80001fe:	4604      	mov	r4, r0
 8000200:	468c      	mov	ip, r1
 8000202:	2b00      	cmp	r3, #0
 8000204:	f040 8083 	bne.w	800030e <__udivmoddi4+0x116>
 8000208:	428a      	cmp	r2, r1
 800020a:	4617      	mov	r7, r2
 800020c:	d947      	bls.n	800029e <__udivmoddi4+0xa6>
 800020e:	fab2 f282 	clz	r2, r2
 8000212:	b142      	cbz	r2, 8000226 <__udivmoddi4+0x2e>
 8000214:	f1c2 0020 	rsb	r0, r2, #32
 8000218:	fa24 f000 	lsr.w	r0, r4, r0
 800021c:	4091      	lsls	r1, r2
 800021e:	4097      	lsls	r7, r2
 8000220:	ea40 0c01 	orr.w	ip, r0, r1
 8000224:	4094      	lsls	r4, r2
 8000226:	ea4f 4817 	mov.w	r8, r7, lsr #16
 800022a:	0c23      	lsrs	r3, r4, #16
 800022c:	fbbc f6f8 	udiv	r6, ip, r8
 8000230:	fa1f fe87 	uxth.w	lr, r7
 8000234:	fb08 c116 	mls	r1, r8, r6, ip
 8000238:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800023c:	fb06 f10e 	mul.w	r1, r6, lr
 8000240:	4299      	cmp	r1, r3
 8000242:	d909      	bls.n	8000258 <__udivmoddi4+0x60>
 8000244:	18fb      	adds	r3, r7, r3
 8000246:	f106 30ff 	add.w	r0, r6, #4294967295
 800024a:	f080 8119 	bcs.w	8000480 <__udivmoddi4+0x288>
 800024e:	4299      	cmp	r1, r3
 8000250:	f240 8116 	bls.w	8000480 <__udivmoddi4+0x288>
 8000254:	3e02      	subs	r6, #2
 8000256:	443b      	add	r3, r7
 8000258:	1a5b      	subs	r3, r3, r1
 800025a:	b2a4      	uxth	r4, r4
 800025c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000260:	fb08 3310 	mls	r3, r8, r0, r3
 8000264:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000268:	fb00 fe0e 	mul.w	lr, r0, lr
 800026c:	45a6      	cmp	lr, r4
 800026e:	d909      	bls.n	8000284 <__udivmoddi4+0x8c>
 8000270:	193c      	adds	r4, r7, r4
 8000272:	f100 33ff 	add.w	r3, r0, #4294967295
 8000276:	f080 8105 	bcs.w	8000484 <__udivmoddi4+0x28c>
 800027a:	45a6      	cmp	lr, r4
 800027c:	f240 8102 	bls.w	8000484 <__udivmoddi4+0x28c>
 8000280:	3802      	subs	r0, #2
 8000282:	443c      	add	r4, r7
 8000284:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000288:	eba4 040e 	sub.w	r4, r4, lr
 800028c:	2600      	movs	r6, #0
 800028e:	b11d      	cbz	r5, 8000298 <__udivmoddi4+0xa0>
 8000290:	40d4      	lsrs	r4, r2
 8000292:	2300      	movs	r3, #0
 8000294:	e9c5 4300 	strd	r4, r3, [r5]
 8000298:	4631      	mov	r1, r6
 800029a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800029e:	b902      	cbnz	r2, 80002a2 <__udivmoddi4+0xaa>
 80002a0:	deff      	udf	#255	; 0xff
 80002a2:	fab2 f282 	clz	r2, r2
 80002a6:	2a00      	cmp	r2, #0
 80002a8:	d150      	bne.n	800034c <__udivmoddi4+0x154>
 80002aa:	1bcb      	subs	r3, r1, r7
 80002ac:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80002b0:	fa1f f887 	uxth.w	r8, r7
 80002b4:	2601      	movs	r6, #1
 80002b6:	fbb3 fcfe 	udiv	ip, r3, lr
 80002ba:	0c21      	lsrs	r1, r4, #16
 80002bc:	fb0e 331c 	mls	r3, lr, ip, r3
 80002c0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80002c4:	fb08 f30c 	mul.w	r3, r8, ip
 80002c8:	428b      	cmp	r3, r1
 80002ca:	d907      	bls.n	80002dc <__udivmoddi4+0xe4>
 80002cc:	1879      	adds	r1, r7, r1
 80002ce:	f10c 30ff 	add.w	r0, ip, #4294967295
 80002d2:	d202      	bcs.n	80002da <__udivmoddi4+0xe2>
 80002d4:	428b      	cmp	r3, r1
 80002d6:	f200 80e9 	bhi.w	80004ac <__udivmoddi4+0x2b4>
 80002da:	4684      	mov	ip, r0
 80002dc:	1ac9      	subs	r1, r1, r3
 80002de:	b2a3      	uxth	r3, r4
 80002e0:	fbb1 f0fe 	udiv	r0, r1, lr
 80002e4:	fb0e 1110 	mls	r1, lr, r0, r1
 80002e8:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 80002ec:	fb08 f800 	mul.w	r8, r8, r0
 80002f0:	45a0      	cmp	r8, r4
 80002f2:	d907      	bls.n	8000304 <__udivmoddi4+0x10c>
 80002f4:	193c      	adds	r4, r7, r4
 80002f6:	f100 33ff 	add.w	r3, r0, #4294967295
 80002fa:	d202      	bcs.n	8000302 <__udivmoddi4+0x10a>
 80002fc:	45a0      	cmp	r8, r4
 80002fe:	f200 80d9 	bhi.w	80004b4 <__udivmoddi4+0x2bc>
 8000302:	4618      	mov	r0, r3
 8000304:	eba4 0408 	sub.w	r4, r4, r8
 8000308:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 800030c:	e7bf      	b.n	800028e <__udivmoddi4+0x96>
 800030e:	428b      	cmp	r3, r1
 8000310:	d909      	bls.n	8000326 <__udivmoddi4+0x12e>
 8000312:	2d00      	cmp	r5, #0
 8000314:	f000 80b1 	beq.w	800047a <__udivmoddi4+0x282>
 8000318:	2600      	movs	r6, #0
 800031a:	e9c5 0100 	strd	r0, r1, [r5]
 800031e:	4630      	mov	r0, r6
 8000320:	4631      	mov	r1, r6
 8000322:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000326:	fab3 f683 	clz	r6, r3
 800032a:	2e00      	cmp	r6, #0
 800032c:	d14a      	bne.n	80003c4 <__udivmoddi4+0x1cc>
 800032e:	428b      	cmp	r3, r1
 8000330:	d302      	bcc.n	8000338 <__udivmoddi4+0x140>
 8000332:	4282      	cmp	r2, r0
 8000334:	f200 80b8 	bhi.w	80004a8 <__udivmoddi4+0x2b0>
 8000338:	1a84      	subs	r4, r0, r2
 800033a:	eb61 0103 	sbc.w	r1, r1, r3
 800033e:	2001      	movs	r0, #1
 8000340:	468c      	mov	ip, r1
 8000342:	2d00      	cmp	r5, #0
 8000344:	d0a8      	beq.n	8000298 <__udivmoddi4+0xa0>
 8000346:	e9c5 4c00 	strd	r4, ip, [r5]
 800034a:	e7a5      	b.n	8000298 <__udivmoddi4+0xa0>
 800034c:	f1c2 0320 	rsb	r3, r2, #32
 8000350:	fa20 f603 	lsr.w	r6, r0, r3
 8000354:	4097      	lsls	r7, r2
 8000356:	fa01 f002 	lsl.w	r0, r1, r2
 800035a:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 800035e:	40d9      	lsrs	r1, r3
 8000360:	4330      	orrs	r0, r6
 8000362:	0c03      	lsrs	r3, r0, #16
 8000364:	fbb1 f6fe 	udiv	r6, r1, lr
 8000368:	fa1f f887 	uxth.w	r8, r7
 800036c:	fb0e 1116 	mls	r1, lr, r6, r1
 8000370:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000374:	fb06 f108 	mul.w	r1, r6, r8
 8000378:	4299      	cmp	r1, r3
 800037a:	fa04 f402 	lsl.w	r4, r4, r2
 800037e:	d909      	bls.n	8000394 <__udivmoddi4+0x19c>
 8000380:	18fb      	adds	r3, r7, r3
 8000382:	f106 3cff 	add.w	ip, r6, #4294967295
 8000386:	f080 808d 	bcs.w	80004a4 <__udivmoddi4+0x2ac>
 800038a:	4299      	cmp	r1, r3
 800038c:	f240 808a 	bls.w	80004a4 <__udivmoddi4+0x2ac>
 8000390:	3e02      	subs	r6, #2
 8000392:	443b      	add	r3, r7
 8000394:	1a5b      	subs	r3, r3, r1
 8000396:	b281      	uxth	r1, r0
 8000398:	fbb3 f0fe 	udiv	r0, r3, lr
 800039c:	fb0e 3310 	mls	r3, lr, r0, r3
 80003a0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80003a4:	fb00 f308 	mul.w	r3, r0, r8
 80003a8:	428b      	cmp	r3, r1
 80003aa:	d907      	bls.n	80003bc <__udivmoddi4+0x1c4>
 80003ac:	1879      	adds	r1, r7, r1
 80003ae:	f100 3cff 	add.w	ip, r0, #4294967295
 80003b2:	d273      	bcs.n	800049c <__udivmoddi4+0x2a4>
 80003b4:	428b      	cmp	r3, r1
 80003b6:	d971      	bls.n	800049c <__udivmoddi4+0x2a4>
 80003b8:	3802      	subs	r0, #2
 80003ba:	4439      	add	r1, r7
 80003bc:	1acb      	subs	r3, r1, r3
 80003be:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 80003c2:	e778      	b.n	80002b6 <__udivmoddi4+0xbe>
 80003c4:	f1c6 0c20 	rsb	ip, r6, #32
 80003c8:	fa03 f406 	lsl.w	r4, r3, r6
 80003cc:	fa22 f30c 	lsr.w	r3, r2, ip
 80003d0:	431c      	orrs	r4, r3
 80003d2:	fa20 f70c 	lsr.w	r7, r0, ip
 80003d6:	fa01 f306 	lsl.w	r3, r1, r6
 80003da:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 80003de:	fa21 f10c 	lsr.w	r1, r1, ip
 80003e2:	431f      	orrs	r7, r3
 80003e4:	0c3b      	lsrs	r3, r7, #16
 80003e6:	fbb1 f9fe 	udiv	r9, r1, lr
 80003ea:	fa1f f884 	uxth.w	r8, r4
 80003ee:	fb0e 1119 	mls	r1, lr, r9, r1
 80003f2:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 80003f6:	fb09 fa08 	mul.w	sl, r9, r8
 80003fa:	458a      	cmp	sl, r1
 80003fc:	fa02 f206 	lsl.w	r2, r2, r6
 8000400:	fa00 f306 	lsl.w	r3, r0, r6
 8000404:	d908      	bls.n	8000418 <__udivmoddi4+0x220>
 8000406:	1861      	adds	r1, r4, r1
 8000408:	f109 30ff 	add.w	r0, r9, #4294967295
 800040c:	d248      	bcs.n	80004a0 <__udivmoddi4+0x2a8>
 800040e:	458a      	cmp	sl, r1
 8000410:	d946      	bls.n	80004a0 <__udivmoddi4+0x2a8>
 8000412:	f1a9 0902 	sub.w	r9, r9, #2
 8000416:	4421      	add	r1, r4
 8000418:	eba1 010a 	sub.w	r1, r1, sl
 800041c:	b2bf      	uxth	r7, r7
 800041e:	fbb1 f0fe 	udiv	r0, r1, lr
 8000422:	fb0e 1110 	mls	r1, lr, r0, r1
 8000426:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 800042a:	fb00 f808 	mul.w	r8, r0, r8
 800042e:	45b8      	cmp	r8, r7
 8000430:	d907      	bls.n	8000442 <__udivmoddi4+0x24a>
 8000432:	19e7      	adds	r7, r4, r7
 8000434:	f100 31ff 	add.w	r1, r0, #4294967295
 8000438:	d22e      	bcs.n	8000498 <__udivmoddi4+0x2a0>
 800043a:	45b8      	cmp	r8, r7
 800043c:	d92c      	bls.n	8000498 <__udivmoddi4+0x2a0>
 800043e:	3802      	subs	r0, #2
 8000440:	4427      	add	r7, r4
 8000442:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000446:	eba7 0708 	sub.w	r7, r7, r8
 800044a:	fba0 8902 	umull	r8, r9, r0, r2
 800044e:	454f      	cmp	r7, r9
 8000450:	46c6      	mov	lr, r8
 8000452:	4649      	mov	r1, r9
 8000454:	d31a      	bcc.n	800048c <__udivmoddi4+0x294>
 8000456:	d017      	beq.n	8000488 <__udivmoddi4+0x290>
 8000458:	b15d      	cbz	r5, 8000472 <__udivmoddi4+0x27a>
 800045a:	ebb3 020e 	subs.w	r2, r3, lr
 800045e:	eb67 0701 	sbc.w	r7, r7, r1
 8000462:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000466:	40f2      	lsrs	r2, r6
 8000468:	ea4c 0202 	orr.w	r2, ip, r2
 800046c:	40f7      	lsrs	r7, r6
 800046e:	e9c5 2700 	strd	r2, r7, [r5]
 8000472:	2600      	movs	r6, #0
 8000474:	4631      	mov	r1, r6
 8000476:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800047a:	462e      	mov	r6, r5
 800047c:	4628      	mov	r0, r5
 800047e:	e70b      	b.n	8000298 <__udivmoddi4+0xa0>
 8000480:	4606      	mov	r6, r0
 8000482:	e6e9      	b.n	8000258 <__udivmoddi4+0x60>
 8000484:	4618      	mov	r0, r3
 8000486:	e6fd      	b.n	8000284 <__udivmoddi4+0x8c>
 8000488:	4543      	cmp	r3, r8
 800048a:	d2e5      	bcs.n	8000458 <__udivmoddi4+0x260>
 800048c:	ebb8 0e02 	subs.w	lr, r8, r2
 8000490:	eb69 0104 	sbc.w	r1, r9, r4
 8000494:	3801      	subs	r0, #1
 8000496:	e7df      	b.n	8000458 <__udivmoddi4+0x260>
 8000498:	4608      	mov	r0, r1
 800049a:	e7d2      	b.n	8000442 <__udivmoddi4+0x24a>
 800049c:	4660      	mov	r0, ip
 800049e:	e78d      	b.n	80003bc <__udivmoddi4+0x1c4>
 80004a0:	4681      	mov	r9, r0
 80004a2:	e7b9      	b.n	8000418 <__udivmoddi4+0x220>
 80004a4:	4666      	mov	r6, ip
 80004a6:	e775      	b.n	8000394 <__udivmoddi4+0x19c>
 80004a8:	4630      	mov	r0, r6
 80004aa:	e74a      	b.n	8000342 <__udivmoddi4+0x14a>
 80004ac:	f1ac 0c02 	sub.w	ip, ip, #2
 80004b0:	4439      	add	r1, r7
 80004b2:	e713      	b.n	80002dc <__udivmoddi4+0xe4>
 80004b4:	3802      	subs	r0, #2
 80004b6:	443c      	add	r4, r7
 80004b8:	e724      	b.n	8000304 <__udivmoddi4+0x10c>
 80004ba:	bf00      	nop

080004bc <__aeabi_idiv0>:
 80004bc:	4770      	bx	lr
 80004be:	bf00      	nop

080004c0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80004c0:	b580      	push	{r7, lr}
 80004c2:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80004c4:	f000 f9e4 	bl	8000890 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80004c8:	f000 f80e 	bl	80004e8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80004cc:	f000 f88e 	bl	80005ec <MX_GPIO_Init>
  MX_USART2_UART_Init();
 80004d0:	f000 f85c 	bl	800058c <MX_USART2_UART_Init>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  HAL_GPIO_TogglePin (GPIOA, GPIO_PIN_5);
 80004d4:	2120      	movs	r1, #32
 80004d6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80004da:	f000 fd21 	bl	8000f20 <HAL_GPIO_TogglePin>
	  HAL_Delay (500);   /* Insert delay 500 ms */
 80004de:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80004e2:	f000 fa51 	bl	8000988 <HAL_Delay>
	  HAL_GPIO_TogglePin (GPIOA, GPIO_PIN_5);
 80004e6:	e7f5      	b.n	80004d4 <main+0x14>

080004e8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80004e8:	b580      	push	{r7, lr}
 80004ea:	b096      	sub	sp, #88	; 0x58
 80004ec:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80004ee:	f107 0314 	add.w	r3, r7, #20
 80004f2:	2244      	movs	r2, #68	; 0x44
 80004f4:	2100      	movs	r1, #0
 80004f6:	4618      	mov	r0, r3
 80004f8:	f002 fce4 	bl	8002ec4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80004fc:	463b      	mov	r3, r7
 80004fe:	2200      	movs	r2, #0
 8000500:	601a      	str	r2, [r3, #0]
 8000502:	605a      	str	r2, [r3, #4]
 8000504:	609a      	str	r2, [r3, #8]
 8000506:	60da      	str	r2, [r3, #12]
 8000508:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 800050a:	f44f 7000 	mov.w	r0, #512	; 0x200
 800050e:	f000 fd2f 	bl	8000f70 <HAL_PWREx_ControlVoltageScaling>
 8000512:	4603      	mov	r3, r0
 8000514:	2b00      	cmp	r3, #0
 8000516:	d001      	beq.n	800051c <SystemClock_Config+0x34>
  {
    Error_Handler();
 8000518:	f000 f8ce 	bl	80006b8 <Error_Handler>
  }
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800051c:	2302      	movs	r3, #2
 800051e:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000520:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000524:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000526:	2310      	movs	r3, #16
 8000528:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800052a:	2302      	movs	r3, #2
 800052c:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800052e:	2302      	movs	r3, #2
 8000530:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 8000532:	2301      	movs	r3, #1
 8000534:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 10;
 8000536:	230a      	movs	r3, #10
 8000538:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 800053a:	2307      	movs	r3, #7
 800053c:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 800053e:	2302      	movs	r3, #2
 8000540:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000542:	2302      	movs	r3, #2
 8000544:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000546:	f107 0314 	add.w	r3, r7, #20
 800054a:	4618      	mov	r0, r3
 800054c:	f000 fd66 	bl	800101c <HAL_RCC_OscConfig>
 8000550:	4603      	mov	r3, r0
 8000552:	2b00      	cmp	r3, #0
 8000554:	d001      	beq.n	800055a <SystemClock_Config+0x72>
  {
    Error_Handler();
 8000556:	f000 f8af 	bl	80006b8 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800055a:	230f      	movs	r3, #15
 800055c:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800055e:	2303      	movs	r3, #3
 8000560:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000562:	2300      	movs	r3, #0
 8000564:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000566:	2300      	movs	r3, #0
 8000568:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800056a:	2300      	movs	r3, #0
 800056c:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 800056e:	463b      	mov	r3, r7
 8000570:	2104      	movs	r1, #4
 8000572:	4618      	mov	r0, r3
 8000574:	f001 f938 	bl	80017e8 <HAL_RCC_ClockConfig>
 8000578:	4603      	mov	r3, r0
 800057a:	2b00      	cmp	r3, #0
 800057c:	d001      	beq.n	8000582 <SystemClock_Config+0x9a>
  {
    Error_Handler();
 800057e:	f000 f89b 	bl	80006b8 <Error_Handler>
  }
}
 8000582:	bf00      	nop
 8000584:	3758      	adds	r7, #88	; 0x58
 8000586:	46bd      	mov	sp, r7
 8000588:	bd80      	pop	{r7, pc}
	...

0800058c <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 800058c:	b580      	push	{r7, lr}
 800058e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000590:	4b14      	ldr	r3, [pc, #80]	; (80005e4 <MX_USART2_UART_Init+0x58>)
 8000592:	4a15      	ldr	r2, [pc, #84]	; (80005e8 <MX_USART2_UART_Init+0x5c>)
 8000594:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000596:	4b13      	ldr	r3, [pc, #76]	; (80005e4 <MX_USART2_UART_Init+0x58>)
 8000598:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800059c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800059e:	4b11      	ldr	r3, [pc, #68]	; (80005e4 <MX_USART2_UART_Init+0x58>)
 80005a0:	2200      	movs	r2, #0
 80005a2:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80005a4:	4b0f      	ldr	r3, [pc, #60]	; (80005e4 <MX_USART2_UART_Init+0x58>)
 80005a6:	2200      	movs	r2, #0
 80005a8:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80005aa:	4b0e      	ldr	r3, [pc, #56]	; (80005e4 <MX_USART2_UART_Init+0x58>)
 80005ac:	2200      	movs	r2, #0
 80005ae:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80005b0:	4b0c      	ldr	r3, [pc, #48]	; (80005e4 <MX_USART2_UART_Init+0x58>)
 80005b2:	220c      	movs	r2, #12
 80005b4:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80005b6:	4b0b      	ldr	r3, [pc, #44]	; (80005e4 <MX_USART2_UART_Init+0x58>)
 80005b8:	2200      	movs	r2, #0
 80005ba:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80005bc:	4b09      	ldr	r3, [pc, #36]	; (80005e4 <MX_USART2_UART_Init+0x58>)
 80005be:	2200      	movs	r2, #0
 80005c0:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80005c2:	4b08      	ldr	r3, [pc, #32]	; (80005e4 <MX_USART2_UART_Init+0x58>)
 80005c4:	2200      	movs	r2, #0
 80005c6:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80005c8:	4b06      	ldr	r3, [pc, #24]	; (80005e4 <MX_USART2_UART_Init+0x58>)
 80005ca:	2200      	movs	r2, #0
 80005cc:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80005ce:	4805      	ldr	r0, [pc, #20]	; (80005e4 <MX_USART2_UART_Init+0x58>)
 80005d0:	f001 ffcc 	bl	800256c <HAL_UART_Init>
 80005d4:	4603      	mov	r3, r0
 80005d6:	2b00      	cmp	r3, #0
 80005d8:	d001      	beq.n	80005de <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 80005da:	f000 f86d 	bl	80006b8 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80005de:	bf00      	nop
 80005e0:	bd80      	pop	{r7, pc}
 80005e2:	bf00      	nop
 80005e4:	20000028 	.word	0x20000028
 80005e8:	40004400 	.word	0x40004400

080005ec <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80005ec:	b580      	push	{r7, lr}
 80005ee:	b08a      	sub	sp, #40	; 0x28
 80005f0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80005f2:	f107 0314 	add.w	r3, r7, #20
 80005f6:	2200      	movs	r2, #0
 80005f8:	601a      	str	r2, [r3, #0]
 80005fa:	605a      	str	r2, [r3, #4]
 80005fc:	609a      	str	r2, [r3, #8]
 80005fe:	60da      	str	r2, [r3, #12]
 8000600:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000602:	4b2b      	ldr	r3, [pc, #172]	; (80006b0 <MX_GPIO_Init+0xc4>)
 8000604:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000606:	4a2a      	ldr	r2, [pc, #168]	; (80006b0 <MX_GPIO_Init+0xc4>)
 8000608:	f043 0304 	orr.w	r3, r3, #4
 800060c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800060e:	4b28      	ldr	r3, [pc, #160]	; (80006b0 <MX_GPIO_Init+0xc4>)
 8000610:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000612:	f003 0304 	and.w	r3, r3, #4
 8000616:	613b      	str	r3, [r7, #16]
 8000618:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800061a:	4b25      	ldr	r3, [pc, #148]	; (80006b0 <MX_GPIO_Init+0xc4>)
 800061c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800061e:	4a24      	ldr	r2, [pc, #144]	; (80006b0 <MX_GPIO_Init+0xc4>)
 8000620:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000624:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000626:	4b22      	ldr	r3, [pc, #136]	; (80006b0 <MX_GPIO_Init+0xc4>)
 8000628:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800062a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800062e:	60fb      	str	r3, [r7, #12]
 8000630:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000632:	4b1f      	ldr	r3, [pc, #124]	; (80006b0 <MX_GPIO_Init+0xc4>)
 8000634:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000636:	4a1e      	ldr	r2, [pc, #120]	; (80006b0 <MX_GPIO_Init+0xc4>)
 8000638:	f043 0301 	orr.w	r3, r3, #1
 800063c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800063e:	4b1c      	ldr	r3, [pc, #112]	; (80006b0 <MX_GPIO_Init+0xc4>)
 8000640:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000642:	f003 0301 	and.w	r3, r3, #1
 8000646:	60bb      	str	r3, [r7, #8]
 8000648:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800064a:	4b19      	ldr	r3, [pc, #100]	; (80006b0 <MX_GPIO_Init+0xc4>)
 800064c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800064e:	4a18      	ldr	r2, [pc, #96]	; (80006b0 <MX_GPIO_Init+0xc4>)
 8000650:	f043 0302 	orr.w	r3, r3, #2
 8000654:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000656:	4b16      	ldr	r3, [pc, #88]	; (80006b0 <MX_GPIO_Init+0xc4>)
 8000658:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800065a:	f003 0302 	and.w	r3, r3, #2
 800065e:	607b      	str	r3, [r7, #4]
 8000660:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_SET);
 8000662:	2201      	movs	r2, #1
 8000664:	2120      	movs	r1, #32
 8000666:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800066a:	f000 fc41 	bl	8000ef0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 800066e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000672:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000674:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8000678:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800067a:	2300      	movs	r3, #0
 800067c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 800067e:	f107 0314 	add.w	r3, r7, #20
 8000682:	4619      	mov	r1, r3
 8000684:	480b      	ldr	r0, [pc, #44]	; (80006b4 <MX_GPIO_Init+0xc8>)
 8000686:	f000 fa89 	bl	8000b9c <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 800068a:	2320      	movs	r3, #32
 800068c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800068e:	2301      	movs	r3, #1
 8000690:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000692:	2300      	movs	r3, #0
 8000694:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000696:	2300      	movs	r3, #0
 8000698:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 800069a:	f107 0314 	add.w	r3, r7, #20
 800069e:	4619      	mov	r1, r3
 80006a0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80006a4:	f000 fa7a 	bl	8000b9c <HAL_GPIO_Init>

}
 80006a8:	bf00      	nop
 80006aa:	3728      	adds	r7, #40	; 0x28
 80006ac:	46bd      	mov	sp, r7
 80006ae:	bd80      	pop	{r7, pc}
 80006b0:	40021000 	.word	0x40021000
 80006b4:	48000800 	.word	0x48000800

080006b8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80006b8:	b480      	push	{r7}
 80006ba:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80006bc:	b672      	cpsid	i
}
 80006be:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80006c0:	e7fe      	b.n	80006c0 <Error_Handler+0x8>
	...

080006c4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80006c4:	b480      	push	{r7}
 80006c6:	b083      	sub	sp, #12
 80006c8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80006ca:	4b0f      	ldr	r3, [pc, #60]	; (8000708 <HAL_MspInit+0x44>)
 80006cc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80006ce:	4a0e      	ldr	r2, [pc, #56]	; (8000708 <HAL_MspInit+0x44>)
 80006d0:	f043 0301 	orr.w	r3, r3, #1
 80006d4:	6613      	str	r3, [r2, #96]	; 0x60
 80006d6:	4b0c      	ldr	r3, [pc, #48]	; (8000708 <HAL_MspInit+0x44>)
 80006d8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80006da:	f003 0301 	and.w	r3, r3, #1
 80006de:	607b      	str	r3, [r7, #4]
 80006e0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80006e2:	4b09      	ldr	r3, [pc, #36]	; (8000708 <HAL_MspInit+0x44>)
 80006e4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80006e6:	4a08      	ldr	r2, [pc, #32]	; (8000708 <HAL_MspInit+0x44>)
 80006e8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80006ec:	6593      	str	r3, [r2, #88]	; 0x58
 80006ee:	4b06      	ldr	r3, [pc, #24]	; (8000708 <HAL_MspInit+0x44>)
 80006f0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80006f2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80006f6:	603b      	str	r3, [r7, #0]
 80006f8:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80006fa:	bf00      	nop
 80006fc:	370c      	adds	r7, #12
 80006fe:	46bd      	mov	sp, r7
 8000700:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000704:	4770      	bx	lr
 8000706:	bf00      	nop
 8000708:	40021000 	.word	0x40021000

0800070c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800070c:	b580      	push	{r7, lr}
 800070e:	b0ac      	sub	sp, #176	; 0xb0
 8000710:	af00      	add	r7, sp, #0
 8000712:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000714:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8000718:	2200      	movs	r2, #0
 800071a:	601a      	str	r2, [r3, #0]
 800071c:	605a      	str	r2, [r3, #4]
 800071e:	609a      	str	r2, [r3, #8]
 8000720:	60da      	str	r2, [r3, #12]
 8000722:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000724:	f107 0314 	add.w	r3, r7, #20
 8000728:	2288      	movs	r2, #136	; 0x88
 800072a:	2100      	movs	r1, #0
 800072c:	4618      	mov	r0, r3
 800072e:	f002 fbc9 	bl	8002ec4 <memset>
  if(huart->Instance==USART2)
 8000732:	687b      	ldr	r3, [r7, #4]
 8000734:	681b      	ldr	r3, [r3, #0]
 8000736:	4a21      	ldr	r2, [pc, #132]	; (80007bc <HAL_UART_MspInit+0xb0>)
 8000738:	4293      	cmp	r3, r2
 800073a:	d13b      	bne.n	80007b4 <HAL_UART_MspInit+0xa8>
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 800073c:	2302      	movs	r3, #2
 800073e:	617b      	str	r3, [r7, #20]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8000740:	2300      	movs	r3, #0
 8000742:	653b      	str	r3, [r7, #80]	; 0x50
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000744:	f107 0314 	add.w	r3, r7, #20
 8000748:	4618      	mov	r0, r3
 800074a:	f001 fa53 	bl	8001bf4 <HAL_RCCEx_PeriphCLKConfig>
 800074e:	4603      	mov	r3, r0
 8000750:	2b00      	cmp	r3, #0
 8000752:	d001      	beq.n	8000758 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8000754:	f7ff ffb0 	bl	80006b8 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000758:	4b19      	ldr	r3, [pc, #100]	; (80007c0 <HAL_UART_MspInit+0xb4>)
 800075a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800075c:	4a18      	ldr	r2, [pc, #96]	; (80007c0 <HAL_UART_MspInit+0xb4>)
 800075e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000762:	6593      	str	r3, [r2, #88]	; 0x58
 8000764:	4b16      	ldr	r3, [pc, #88]	; (80007c0 <HAL_UART_MspInit+0xb4>)
 8000766:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000768:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800076c:	613b      	str	r3, [r7, #16]
 800076e:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000770:	4b13      	ldr	r3, [pc, #76]	; (80007c0 <HAL_UART_MspInit+0xb4>)
 8000772:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000774:	4a12      	ldr	r2, [pc, #72]	; (80007c0 <HAL_UART_MspInit+0xb4>)
 8000776:	f043 0301 	orr.w	r3, r3, #1
 800077a:	64d3      	str	r3, [r2, #76]	; 0x4c
 800077c:	4b10      	ldr	r3, [pc, #64]	; (80007c0 <HAL_UART_MspInit+0xb4>)
 800077e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000780:	f003 0301 	and.w	r3, r3, #1
 8000784:	60fb      	str	r3, [r7, #12]
 8000786:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8000788:	230c      	movs	r3, #12
 800078a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800078e:	2302      	movs	r3, #2
 8000790:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000794:	2300      	movs	r3, #0
 8000796:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800079a:	2303      	movs	r3, #3
 800079c:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80007a0:	2307      	movs	r3, #7
 80007a2:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80007a6:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 80007aa:	4619      	mov	r1, r3
 80007ac:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80007b0:	f000 f9f4 	bl	8000b9c <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80007b4:	bf00      	nop
 80007b6:	37b0      	adds	r7, #176	; 0xb0
 80007b8:	46bd      	mov	sp, r7
 80007ba:	bd80      	pop	{r7, pc}
 80007bc:	40004400 	.word	0x40004400
 80007c0:	40021000 	.word	0x40021000

080007c4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80007c4:	b480      	push	{r7}
 80007c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80007c8:	e7fe      	b.n	80007c8 <NMI_Handler+0x4>

080007ca <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80007ca:	b480      	push	{r7}
 80007cc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80007ce:	e7fe      	b.n	80007ce <HardFault_Handler+0x4>

080007d0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80007d0:	b480      	push	{r7}
 80007d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80007d4:	e7fe      	b.n	80007d4 <MemManage_Handler+0x4>

080007d6 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80007d6:	b480      	push	{r7}
 80007d8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80007da:	e7fe      	b.n	80007da <BusFault_Handler+0x4>

080007dc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80007dc:	b480      	push	{r7}
 80007de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80007e0:	e7fe      	b.n	80007e0 <UsageFault_Handler+0x4>

080007e2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80007e2:	b480      	push	{r7}
 80007e4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80007e6:	bf00      	nop
 80007e8:	46bd      	mov	sp, r7
 80007ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007ee:	4770      	bx	lr

080007f0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80007f0:	b480      	push	{r7}
 80007f2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80007f4:	bf00      	nop
 80007f6:	46bd      	mov	sp, r7
 80007f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007fc:	4770      	bx	lr

080007fe <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80007fe:	b480      	push	{r7}
 8000800:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000802:	bf00      	nop
 8000804:	46bd      	mov	sp, r7
 8000806:	f85d 7b04 	ldr.w	r7, [sp], #4
 800080a:	4770      	bx	lr

0800080c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800080c:	b580      	push	{r7, lr}
 800080e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000810:	f000 f89a 	bl	8000948 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000814:	bf00      	nop
 8000816:	bd80      	pop	{r7, pc}

08000818 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8000818:	b480      	push	{r7}
 800081a:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 800081c:	4b06      	ldr	r3, [pc, #24]	; (8000838 <SystemInit+0x20>)
 800081e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000822:	4a05      	ldr	r2, [pc, #20]	; (8000838 <SystemInit+0x20>)
 8000824:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000828:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 800082c:	bf00      	nop
 800082e:	46bd      	mov	sp, r7
 8000830:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000834:	4770      	bx	lr
 8000836:	bf00      	nop
 8000838:	e000ed00 	.word	0xe000ed00

0800083c <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 800083c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000874 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000840:	f7ff ffea 	bl	8000818 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000844:	480c      	ldr	r0, [pc, #48]	; (8000878 <LoopForever+0x6>)
  ldr r1, =_edata
 8000846:	490d      	ldr	r1, [pc, #52]	; (800087c <LoopForever+0xa>)
  ldr r2, =_sidata
 8000848:	4a0d      	ldr	r2, [pc, #52]	; (8000880 <LoopForever+0xe>)
  movs r3, #0
 800084a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800084c:	e002      	b.n	8000854 <LoopCopyDataInit>

0800084e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800084e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000850:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000852:	3304      	adds	r3, #4

08000854 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000854:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000856:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000858:	d3f9      	bcc.n	800084e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800085a:	4a0a      	ldr	r2, [pc, #40]	; (8000884 <LoopForever+0x12>)
  ldr r4, =_ebss
 800085c:	4c0a      	ldr	r4, [pc, #40]	; (8000888 <LoopForever+0x16>)
  movs r3, #0
 800085e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000860:	e001      	b.n	8000866 <LoopFillZerobss>

08000862 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000862:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000864:	3204      	adds	r2, #4

08000866 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000866:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000868:	d3fb      	bcc.n	8000862 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800086a:	f002 fb07 	bl	8002e7c <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800086e:	f7ff fe27 	bl	80004c0 <main>

08000872 <LoopForever>:

LoopForever:
    b LoopForever
 8000872:	e7fe      	b.n	8000872 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8000874:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8000878:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800087c:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8000880:	08002f44 	.word	0x08002f44
  ldr r2, =_sbss
 8000884:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8000888:	200000b0 	.word	0x200000b0

0800088c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 800088c:	e7fe      	b.n	800088c <ADC1_2_IRQHandler>
	...

08000890 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000890:	b580      	push	{r7, lr}
 8000892:	b082      	sub	sp, #8
 8000894:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000896:	2300      	movs	r3, #0
 8000898:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0)
   __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800089a:	4b0c      	ldr	r3, [pc, #48]	; (80008cc <HAL_Init+0x3c>)
 800089c:	681b      	ldr	r3, [r3, #0]
 800089e:	4a0b      	ldr	r2, [pc, #44]	; (80008cc <HAL_Init+0x3c>)
 80008a0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80008a4:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80008a6:	2003      	movs	r0, #3
 80008a8:	f000 f944 	bl	8000b34 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80008ac:	2000      	movs	r0, #0
 80008ae:	f000 f80f 	bl	80008d0 <HAL_InitTick>
 80008b2:	4603      	mov	r3, r0
 80008b4:	2b00      	cmp	r3, #0
 80008b6:	d002      	beq.n	80008be <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 80008b8:	2301      	movs	r3, #1
 80008ba:	71fb      	strb	r3, [r7, #7]
 80008bc:	e001      	b.n	80008c2 <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80008be:	f7ff ff01 	bl	80006c4 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80008c2:	79fb      	ldrb	r3, [r7, #7]
}
 80008c4:	4618      	mov	r0, r3
 80008c6:	3708      	adds	r7, #8
 80008c8:	46bd      	mov	sp, r7
 80008ca:	bd80      	pop	{r7, pc}
 80008cc:	40022000 	.word	0x40022000

080008d0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80008d0:	b580      	push	{r7, lr}
 80008d2:	b084      	sub	sp, #16
 80008d4:	af00      	add	r7, sp, #0
 80008d6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 80008d8:	2300      	movs	r3, #0
 80008da:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 80008dc:	4b17      	ldr	r3, [pc, #92]	; (800093c <HAL_InitTick+0x6c>)
 80008de:	781b      	ldrb	r3, [r3, #0]
 80008e0:	2b00      	cmp	r3, #0
 80008e2:	d023      	beq.n	800092c <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 80008e4:	4b16      	ldr	r3, [pc, #88]	; (8000940 <HAL_InitTick+0x70>)
 80008e6:	681a      	ldr	r2, [r3, #0]
 80008e8:	4b14      	ldr	r3, [pc, #80]	; (800093c <HAL_InitTick+0x6c>)
 80008ea:	781b      	ldrb	r3, [r3, #0]
 80008ec:	4619      	mov	r1, r3
 80008ee:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80008f2:	fbb3 f3f1 	udiv	r3, r3, r1
 80008f6:	fbb2 f3f3 	udiv	r3, r2, r3
 80008fa:	4618      	mov	r0, r3
 80008fc:	f000 f941 	bl	8000b82 <HAL_SYSTICK_Config>
 8000900:	4603      	mov	r3, r0
 8000902:	2b00      	cmp	r3, #0
 8000904:	d10f      	bne.n	8000926 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000906:	687b      	ldr	r3, [r7, #4]
 8000908:	2b0f      	cmp	r3, #15
 800090a:	d809      	bhi.n	8000920 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800090c:	2200      	movs	r2, #0
 800090e:	6879      	ldr	r1, [r7, #4]
 8000910:	f04f 30ff 	mov.w	r0, #4294967295
 8000914:	f000 f919 	bl	8000b4a <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000918:	4a0a      	ldr	r2, [pc, #40]	; (8000944 <HAL_InitTick+0x74>)
 800091a:	687b      	ldr	r3, [r7, #4]
 800091c:	6013      	str	r3, [r2, #0]
 800091e:	e007      	b.n	8000930 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8000920:	2301      	movs	r3, #1
 8000922:	73fb      	strb	r3, [r7, #15]
 8000924:	e004      	b.n	8000930 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000926:	2301      	movs	r3, #1
 8000928:	73fb      	strb	r3, [r7, #15]
 800092a:	e001      	b.n	8000930 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 800092c:	2301      	movs	r3, #1
 800092e:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8000930:	7bfb      	ldrb	r3, [r7, #15]
}
 8000932:	4618      	mov	r0, r3
 8000934:	3710      	adds	r7, #16
 8000936:	46bd      	mov	sp, r7
 8000938:	bd80      	pop	{r7, pc}
 800093a:	bf00      	nop
 800093c:	20000008 	.word	0x20000008
 8000940:	20000000 	.word	0x20000000
 8000944:	20000004 	.word	0x20000004

08000948 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000948:	b480      	push	{r7}
 800094a:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 800094c:	4b06      	ldr	r3, [pc, #24]	; (8000968 <HAL_IncTick+0x20>)
 800094e:	781b      	ldrb	r3, [r3, #0]
 8000950:	461a      	mov	r2, r3
 8000952:	4b06      	ldr	r3, [pc, #24]	; (800096c <HAL_IncTick+0x24>)
 8000954:	681b      	ldr	r3, [r3, #0]
 8000956:	4413      	add	r3, r2
 8000958:	4a04      	ldr	r2, [pc, #16]	; (800096c <HAL_IncTick+0x24>)
 800095a:	6013      	str	r3, [r2, #0]
}
 800095c:	bf00      	nop
 800095e:	46bd      	mov	sp, r7
 8000960:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000964:	4770      	bx	lr
 8000966:	bf00      	nop
 8000968:	20000008 	.word	0x20000008
 800096c:	200000ac 	.word	0x200000ac

08000970 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000970:	b480      	push	{r7}
 8000972:	af00      	add	r7, sp, #0
  return uwTick;
 8000974:	4b03      	ldr	r3, [pc, #12]	; (8000984 <HAL_GetTick+0x14>)
 8000976:	681b      	ldr	r3, [r3, #0]
}
 8000978:	4618      	mov	r0, r3
 800097a:	46bd      	mov	sp, r7
 800097c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000980:	4770      	bx	lr
 8000982:	bf00      	nop
 8000984:	200000ac 	.word	0x200000ac

08000988 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000988:	b580      	push	{r7, lr}
 800098a:	b084      	sub	sp, #16
 800098c:	af00      	add	r7, sp, #0
 800098e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000990:	f7ff ffee 	bl	8000970 <HAL_GetTick>
 8000994:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000996:	687b      	ldr	r3, [r7, #4]
 8000998:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 800099a:	68fb      	ldr	r3, [r7, #12]
 800099c:	f1b3 3fff 	cmp.w	r3, #4294967295
 80009a0:	d005      	beq.n	80009ae <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 80009a2:	4b0a      	ldr	r3, [pc, #40]	; (80009cc <HAL_Delay+0x44>)
 80009a4:	781b      	ldrb	r3, [r3, #0]
 80009a6:	461a      	mov	r2, r3
 80009a8:	68fb      	ldr	r3, [r7, #12]
 80009aa:	4413      	add	r3, r2
 80009ac:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80009ae:	bf00      	nop
 80009b0:	f7ff ffde 	bl	8000970 <HAL_GetTick>
 80009b4:	4602      	mov	r2, r0
 80009b6:	68bb      	ldr	r3, [r7, #8]
 80009b8:	1ad3      	subs	r3, r2, r3
 80009ba:	68fa      	ldr	r2, [r7, #12]
 80009bc:	429a      	cmp	r2, r3
 80009be:	d8f7      	bhi.n	80009b0 <HAL_Delay+0x28>
  {
  }
}
 80009c0:	bf00      	nop
 80009c2:	bf00      	nop
 80009c4:	3710      	adds	r7, #16
 80009c6:	46bd      	mov	sp, r7
 80009c8:	bd80      	pop	{r7, pc}
 80009ca:	bf00      	nop
 80009cc:	20000008 	.word	0x20000008

080009d0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80009d0:	b480      	push	{r7}
 80009d2:	b085      	sub	sp, #20
 80009d4:	af00      	add	r7, sp, #0
 80009d6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80009d8:	687b      	ldr	r3, [r7, #4]
 80009da:	f003 0307 	and.w	r3, r3, #7
 80009de:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80009e0:	4b0c      	ldr	r3, [pc, #48]	; (8000a14 <__NVIC_SetPriorityGrouping+0x44>)
 80009e2:	68db      	ldr	r3, [r3, #12]
 80009e4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80009e6:	68ba      	ldr	r2, [r7, #8]
 80009e8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80009ec:	4013      	ands	r3, r2
 80009ee:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80009f0:	68fb      	ldr	r3, [r7, #12]
 80009f2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80009f4:	68bb      	ldr	r3, [r7, #8]
 80009f6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80009f8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80009fc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000a00:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000a02:	4a04      	ldr	r2, [pc, #16]	; (8000a14 <__NVIC_SetPriorityGrouping+0x44>)
 8000a04:	68bb      	ldr	r3, [r7, #8]
 8000a06:	60d3      	str	r3, [r2, #12]
}
 8000a08:	bf00      	nop
 8000a0a:	3714      	adds	r7, #20
 8000a0c:	46bd      	mov	sp, r7
 8000a0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a12:	4770      	bx	lr
 8000a14:	e000ed00 	.word	0xe000ed00

08000a18 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000a18:	b480      	push	{r7}
 8000a1a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000a1c:	4b04      	ldr	r3, [pc, #16]	; (8000a30 <__NVIC_GetPriorityGrouping+0x18>)
 8000a1e:	68db      	ldr	r3, [r3, #12]
 8000a20:	0a1b      	lsrs	r3, r3, #8
 8000a22:	f003 0307 	and.w	r3, r3, #7
}
 8000a26:	4618      	mov	r0, r3
 8000a28:	46bd      	mov	sp, r7
 8000a2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a2e:	4770      	bx	lr
 8000a30:	e000ed00 	.word	0xe000ed00

08000a34 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000a34:	b480      	push	{r7}
 8000a36:	b083      	sub	sp, #12
 8000a38:	af00      	add	r7, sp, #0
 8000a3a:	4603      	mov	r3, r0
 8000a3c:	6039      	str	r1, [r7, #0]
 8000a3e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000a40:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a44:	2b00      	cmp	r3, #0
 8000a46:	db0a      	blt.n	8000a5e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000a48:	683b      	ldr	r3, [r7, #0]
 8000a4a:	b2da      	uxtb	r2, r3
 8000a4c:	490c      	ldr	r1, [pc, #48]	; (8000a80 <__NVIC_SetPriority+0x4c>)
 8000a4e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a52:	0112      	lsls	r2, r2, #4
 8000a54:	b2d2      	uxtb	r2, r2
 8000a56:	440b      	add	r3, r1
 8000a58:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000a5c:	e00a      	b.n	8000a74 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000a5e:	683b      	ldr	r3, [r7, #0]
 8000a60:	b2da      	uxtb	r2, r3
 8000a62:	4908      	ldr	r1, [pc, #32]	; (8000a84 <__NVIC_SetPriority+0x50>)
 8000a64:	79fb      	ldrb	r3, [r7, #7]
 8000a66:	f003 030f 	and.w	r3, r3, #15
 8000a6a:	3b04      	subs	r3, #4
 8000a6c:	0112      	lsls	r2, r2, #4
 8000a6e:	b2d2      	uxtb	r2, r2
 8000a70:	440b      	add	r3, r1
 8000a72:	761a      	strb	r2, [r3, #24]
}
 8000a74:	bf00      	nop
 8000a76:	370c      	adds	r7, #12
 8000a78:	46bd      	mov	sp, r7
 8000a7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a7e:	4770      	bx	lr
 8000a80:	e000e100 	.word	0xe000e100
 8000a84:	e000ed00 	.word	0xe000ed00

08000a88 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000a88:	b480      	push	{r7}
 8000a8a:	b089      	sub	sp, #36	; 0x24
 8000a8c:	af00      	add	r7, sp, #0
 8000a8e:	60f8      	str	r0, [r7, #12]
 8000a90:	60b9      	str	r1, [r7, #8]
 8000a92:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000a94:	68fb      	ldr	r3, [r7, #12]
 8000a96:	f003 0307 	and.w	r3, r3, #7
 8000a9a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000a9c:	69fb      	ldr	r3, [r7, #28]
 8000a9e:	f1c3 0307 	rsb	r3, r3, #7
 8000aa2:	2b04      	cmp	r3, #4
 8000aa4:	bf28      	it	cs
 8000aa6:	2304      	movcs	r3, #4
 8000aa8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000aaa:	69fb      	ldr	r3, [r7, #28]
 8000aac:	3304      	adds	r3, #4
 8000aae:	2b06      	cmp	r3, #6
 8000ab0:	d902      	bls.n	8000ab8 <NVIC_EncodePriority+0x30>
 8000ab2:	69fb      	ldr	r3, [r7, #28]
 8000ab4:	3b03      	subs	r3, #3
 8000ab6:	e000      	b.n	8000aba <NVIC_EncodePriority+0x32>
 8000ab8:	2300      	movs	r3, #0
 8000aba:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000abc:	f04f 32ff 	mov.w	r2, #4294967295
 8000ac0:	69bb      	ldr	r3, [r7, #24]
 8000ac2:	fa02 f303 	lsl.w	r3, r2, r3
 8000ac6:	43da      	mvns	r2, r3
 8000ac8:	68bb      	ldr	r3, [r7, #8]
 8000aca:	401a      	ands	r2, r3
 8000acc:	697b      	ldr	r3, [r7, #20]
 8000ace:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000ad0:	f04f 31ff 	mov.w	r1, #4294967295
 8000ad4:	697b      	ldr	r3, [r7, #20]
 8000ad6:	fa01 f303 	lsl.w	r3, r1, r3
 8000ada:	43d9      	mvns	r1, r3
 8000adc:	687b      	ldr	r3, [r7, #4]
 8000ade:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000ae0:	4313      	orrs	r3, r2
         );
}
 8000ae2:	4618      	mov	r0, r3
 8000ae4:	3724      	adds	r7, #36	; 0x24
 8000ae6:	46bd      	mov	sp, r7
 8000ae8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000aec:	4770      	bx	lr
	...

08000af0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000af0:	b580      	push	{r7, lr}
 8000af2:	b082      	sub	sp, #8
 8000af4:	af00      	add	r7, sp, #0
 8000af6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000af8:	687b      	ldr	r3, [r7, #4]
 8000afa:	3b01      	subs	r3, #1
 8000afc:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000b00:	d301      	bcc.n	8000b06 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000b02:	2301      	movs	r3, #1
 8000b04:	e00f      	b.n	8000b26 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000b06:	4a0a      	ldr	r2, [pc, #40]	; (8000b30 <SysTick_Config+0x40>)
 8000b08:	687b      	ldr	r3, [r7, #4]
 8000b0a:	3b01      	subs	r3, #1
 8000b0c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000b0e:	210f      	movs	r1, #15
 8000b10:	f04f 30ff 	mov.w	r0, #4294967295
 8000b14:	f7ff ff8e 	bl	8000a34 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000b18:	4b05      	ldr	r3, [pc, #20]	; (8000b30 <SysTick_Config+0x40>)
 8000b1a:	2200      	movs	r2, #0
 8000b1c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000b1e:	4b04      	ldr	r3, [pc, #16]	; (8000b30 <SysTick_Config+0x40>)
 8000b20:	2207      	movs	r2, #7
 8000b22:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000b24:	2300      	movs	r3, #0
}
 8000b26:	4618      	mov	r0, r3
 8000b28:	3708      	adds	r7, #8
 8000b2a:	46bd      	mov	sp, r7
 8000b2c:	bd80      	pop	{r7, pc}
 8000b2e:	bf00      	nop
 8000b30:	e000e010 	.word	0xe000e010

08000b34 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000b34:	b580      	push	{r7, lr}
 8000b36:	b082      	sub	sp, #8
 8000b38:	af00      	add	r7, sp, #0
 8000b3a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000b3c:	6878      	ldr	r0, [r7, #4]
 8000b3e:	f7ff ff47 	bl	80009d0 <__NVIC_SetPriorityGrouping>
}
 8000b42:	bf00      	nop
 8000b44:	3708      	adds	r7, #8
 8000b46:	46bd      	mov	sp, r7
 8000b48:	bd80      	pop	{r7, pc}

08000b4a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000b4a:	b580      	push	{r7, lr}
 8000b4c:	b086      	sub	sp, #24
 8000b4e:	af00      	add	r7, sp, #0
 8000b50:	4603      	mov	r3, r0
 8000b52:	60b9      	str	r1, [r7, #8]
 8000b54:	607a      	str	r2, [r7, #4]
 8000b56:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8000b58:	2300      	movs	r3, #0
 8000b5a:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8000b5c:	f7ff ff5c 	bl	8000a18 <__NVIC_GetPriorityGrouping>
 8000b60:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000b62:	687a      	ldr	r2, [r7, #4]
 8000b64:	68b9      	ldr	r1, [r7, #8]
 8000b66:	6978      	ldr	r0, [r7, #20]
 8000b68:	f7ff ff8e 	bl	8000a88 <NVIC_EncodePriority>
 8000b6c:	4602      	mov	r2, r0
 8000b6e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000b72:	4611      	mov	r1, r2
 8000b74:	4618      	mov	r0, r3
 8000b76:	f7ff ff5d 	bl	8000a34 <__NVIC_SetPriority>
}
 8000b7a:	bf00      	nop
 8000b7c:	3718      	adds	r7, #24
 8000b7e:	46bd      	mov	sp, r7
 8000b80:	bd80      	pop	{r7, pc}

08000b82 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000b82:	b580      	push	{r7, lr}
 8000b84:	b082      	sub	sp, #8
 8000b86:	af00      	add	r7, sp, #0
 8000b88:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000b8a:	6878      	ldr	r0, [r7, #4]
 8000b8c:	f7ff ffb0 	bl	8000af0 <SysTick_Config>
 8000b90:	4603      	mov	r3, r0
}
 8000b92:	4618      	mov	r0, r3
 8000b94:	3708      	adds	r7, #8
 8000b96:	46bd      	mov	sp, r7
 8000b98:	bd80      	pop	{r7, pc}
	...

08000b9c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000b9c:	b480      	push	{r7}
 8000b9e:	b087      	sub	sp, #28
 8000ba0:	af00      	add	r7, sp, #0
 8000ba2:	6078      	str	r0, [r7, #4]
 8000ba4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000ba6:	2300      	movs	r3, #0
 8000ba8:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000baa:	e17f      	b.n	8000eac <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8000bac:	683b      	ldr	r3, [r7, #0]
 8000bae:	681a      	ldr	r2, [r3, #0]
 8000bb0:	2101      	movs	r1, #1
 8000bb2:	697b      	ldr	r3, [r7, #20]
 8000bb4:	fa01 f303 	lsl.w	r3, r1, r3
 8000bb8:	4013      	ands	r3, r2
 8000bba:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8000bbc:	68fb      	ldr	r3, [r7, #12]
 8000bbe:	2b00      	cmp	r3, #0
 8000bc0:	f000 8171 	beq.w	8000ea6 <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000bc4:	683b      	ldr	r3, [r7, #0]
 8000bc6:	685b      	ldr	r3, [r3, #4]
 8000bc8:	f003 0303 	and.w	r3, r3, #3
 8000bcc:	2b01      	cmp	r3, #1
 8000bce:	d005      	beq.n	8000bdc <HAL_GPIO_Init+0x40>
 8000bd0:	683b      	ldr	r3, [r7, #0]
 8000bd2:	685b      	ldr	r3, [r3, #4]
 8000bd4:	f003 0303 	and.w	r3, r3, #3
 8000bd8:	2b02      	cmp	r3, #2
 8000bda:	d130      	bne.n	8000c3e <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000bdc:	687b      	ldr	r3, [r7, #4]
 8000bde:	689b      	ldr	r3, [r3, #8]
 8000be0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8000be2:	697b      	ldr	r3, [r7, #20]
 8000be4:	005b      	lsls	r3, r3, #1
 8000be6:	2203      	movs	r2, #3
 8000be8:	fa02 f303 	lsl.w	r3, r2, r3
 8000bec:	43db      	mvns	r3, r3
 8000bee:	693a      	ldr	r2, [r7, #16]
 8000bf0:	4013      	ands	r3, r2
 8000bf2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8000bf4:	683b      	ldr	r3, [r7, #0]
 8000bf6:	68da      	ldr	r2, [r3, #12]
 8000bf8:	697b      	ldr	r3, [r7, #20]
 8000bfa:	005b      	lsls	r3, r3, #1
 8000bfc:	fa02 f303 	lsl.w	r3, r2, r3
 8000c00:	693a      	ldr	r2, [r7, #16]
 8000c02:	4313      	orrs	r3, r2
 8000c04:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000c06:	687b      	ldr	r3, [r7, #4]
 8000c08:	693a      	ldr	r2, [r7, #16]
 8000c0a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000c0c:	687b      	ldr	r3, [r7, #4]
 8000c0e:	685b      	ldr	r3, [r3, #4]
 8000c10:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8000c12:	2201      	movs	r2, #1
 8000c14:	697b      	ldr	r3, [r7, #20]
 8000c16:	fa02 f303 	lsl.w	r3, r2, r3
 8000c1a:	43db      	mvns	r3, r3
 8000c1c:	693a      	ldr	r2, [r7, #16]
 8000c1e:	4013      	ands	r3, r2
 8000c20:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000c22:	683b      	ldr	r3, [r7, #0]
 8000c24:	685b      	ldr	r3, [r3, #4]
 8000c26:	091b      	lsrs	r3, r3, #4
 8000c28:	f003 0201 	and.w	r2, r3, #1
 8000c2c:	697b      	ldr	r3, [r7, #20]
 8000c2e:	fa02 f303 	lsl.w	r3, r2, r3
 8000c32:	693a      	ldr	r2, [r7, #16]
 8000c34:	4313      	orrs	r3, r2
 8000c36:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000c38:	687b      	ldr	r3, [r7, #4]
 8000c3a:	693a      	ldr	r2, [r7, #16]
 8000c3c:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 8000c3e:	683b      	ldr	r3, [r7, #0]
 8000c40:	685b      	ldr	r3, [r3, #4]
 8000c42:	f003 0303 	and.w	r3, r3, #3
 8000c46:	2b03      	cmp	r3, #3
 8000c48:	d118      	bne.n	8000c7c <HAL_GPIO_Init+0xe0>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 8000c4a:	687b      	ldr	r3, [r7, #4]
 8000c4c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000c4e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 8000c50:	2201      	movs	r2, #1
 8000c52:	697b      	ldr	r3, [r7, #20]
 8000c54:	fa02 f303 	lsl.w	r3, r2, r3
 8000c58:	43db      	mvns	r3, r3
 8000c5a:	693a      	ldr	r2, [r7, #16]
 8000c5c:	4013      	ands	r3, r2
 8000c5e:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 8000c60:	683b      	ldr	r3, [r7, #0]
 8000c62:	685b      	ldr	r3, [r3, #4]
 8000c64:	08db      	lsrs	r3, r3, #3
 8000c66:	f003 0201 	and.w	r2, r3, #1
 8000c6a:	697b      	ldr	r3, [r7, #20]
 8000c6c:	fa02 f303 	lsl.w	r3, r2, r3
 8000c70:	693a      	ldr	r2, [r7, #16]
 8000c72:	4313      	orrs	r3, r2
 8000c74:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 8000c76:	687b      	ldr	r3, [r7, #4]
 8000c78:	693a      	ldr	r2, [r7, #16]
 8000c7a:	62da      	str	r2, [r3, #44]	; 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000c7c:	683b      	ldr	r3, [r7, #0]
 8000c7e:	685b      	ldr	r3, [r3, #4]
 8000c80:	f003 0303 	and.w	r3, r3, #3
 8000c84:	2b03      	cmp	r3, #3
 8000c86:	d017      	beq.n	8000cb8 <HAL_GPIO_Init+0x11c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8000c88:	687b      	ldr	r3, [r7, #4]
 8000c8a:	68db      	ldr	r3, [r3, #12]
 8000c8c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8000c8e:	697b      	ldr	r3, [r7, #20]
 8000c90:	005b      	lsls	r3, r3, #1
 8000c92:	2203      	movs	r2, #3
 8000c94:	fa02 f303 	lsl.w	r3, r2, r3
 8000c98:	43db      	mvns	r3, r3
 8000c9a:	693a      	ldr	r2, [r7, #16]
 8000c9c:	4013      	ands	r3, r2
 8000c9e:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000ca0:	683b      	ldr	r3, [r7, #0]
 8000ca2:	689a      	ldr	r2, [r3, #8]
 8000ca4:	697b      	ldr	r3, [r7, #20]
 8000ca6:	005b      	lsls	r3, r3, #1
 8000ca8:	fa02 f303 	lsl.w	r3, r2, r3
 8000cac:	693a      	ldr	r2, [r7, #16]
 8000cae:	4313      	orrs	r3, r2
 8000cb0:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8000cb2:	687b      	ldr	r3, [r7, #4]
 8000cb4:	693a      	ldr	r2, [r7, #16]
 8000cb6:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000cb8:	683b      	ldr	r3, [r7, #0]
 8000cba:	685b      	ldr	r3, [r3, #4]
 8000cbc:	f003 0303 	and.w	r3, r3, #3
 8000cc0:	2b02      	cmp	r3, #2
 8000cc2:	d123      	bne.n	8000d0c <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8000cc4:	697b      	ldr	r3, [r7, #20]
 8000cc6:	08da      	lsrs	r2, r3, #3
 8000cc8:	687b      	ldr	r3, [r7, #4]
 8000cca:	3208      	adds	r2, #8
 8000ccc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000cd0:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8000cd2:	697b      	ldr	r3, [r7, #20]
 8000cd4:	f003 0307 	and.w	r3, r3, #7
 8000cd8:	009b      	lsls	r3, r3, #2
 8000cda:	220f      	movs	r2, #15
 8000cdc:	fa02 f303 	lsl.w	r3, r2, r3
 8000ce0:	43db      	mvns	r3, r3
 8000ce2:	693a      	ldr	r2, [r7, #16]
 8000ce4:	4013      	ands	r3, r2
 8000ce6:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8000ce8:	683b      	ldr	r3, [r7, #0]
 8000cea:	691a      	ldr	r2, [r3, #16]
 8000cec:	697b      	ldr	r3, [r7, #20]
 8000cee:	f003 0307 	and.w	r3, r3, #7
 8000cf2:	009b      	lsls	r3, r3, #2
 8000cf4:	fa02 f303 	lsl.w	r3, r2, r3
 8000cf8:	693a      	ldr	r2, [r7, #16]
 8000cfa:	4313      	orrs	r3, r2
 8000cfc:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8000cfe:	697b      	ldr	r3, [r7, #20]
 8000d00:	08da      	lsrs	r2, r3, #3
 8000d02:	687b      	ldr	r3, [r7, #4]
 8000d04:	3208      	adds	r2, #8
 8000d06:	6939      	ldr	r1, [r7, #16]
 8000d08:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000d0c:	687b      	ldr	r3, [r7, #4]
 8000d0e:	681b      	ldr	r3, [r3, #0]
 8000d10:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8000d12:	697b      	ldr	r3, [r7, #20]
 8000d14:	005b      	lsls	r3, r3, #1
 8000d16:	2203      	movs	r2, #3
 8000d18:	fa02 f303 	lsl.w	r3, r2, r3
 8000d1c:	43db      	mvns	r3, r3
 8000d1e:	693a      	ldr	r2, [r7, #16]
 8000d20:	4013      	ands	r3, r2
 8000d22:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8000d24:	683b      	ldr	r3, [r7, #0]
 8000d26:	685b      	ldr	r3, [r3, #4]
 8000d28:	f003 0203 	and.w	r2, r3, #3
 8000d2c:	697b      	ldr	r3, [r7, #20]
 8000d2e:	005b      	lsls	r3, r3, #1
 8000d30:	fa02 f303 	lsl.w	r3, r2, r3
 8000d34:	693a      	ldr	r2, [r7, #16]
 8000d36:	4313      	orrs	r3, r2
 8000d38:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8000d3a:	687b      	ldr	r3, [r7, #4]
 8000d3c:	693a      	ldr	r2, [r7, #16]
 8000d3e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8000d40:	683b      	ldr	r3, [r7, #0]
 8000d42:	685b      	ldr	r3, [r3, #4]
 8000d44:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8000d48:	2b00      	cmp	r3, #0
 8000d4a:	f000 80ac 	beq.w	8000ea6 <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000d4e:	4b5f      	ldr	r3, [pc, #380]	; (8000ecc <HAL_GPIO_Init+0x330>)
 8000d50:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000d52:	4a5e      	ldr	r2, [pc, #376]	; (8000ecc <HAL_GPIO_Init+0x330>)
 8000d54:	f043 0301 	orr.w	r3, r3, #1
 8000d58:	6613      	str	r3, [r2, #96]	; 0x60
 8000d5a:	4b5c      	ldr	r3, [pc, #368]	; (8000ecc <HAL_GPIO_Init+0x330>)
 8000d5c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000d5e:	f003 0301 	and.w	r3, r3, #1
 8000d62:	60bb      	str	r3, [r7, #8]
 8000d64:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8000d66:	4a5a      	ldr	r2, [pc, #360]	; (8000ed0 <HAL_GPIO_Init+0x334>)
 8000d68:	697b      	ldr	r3, [r7, #20]
 8000d6a:	089b      	lsrs	r3, r3, #2
 8000d6c:	3302      	adds	r3, #2
 8000d6e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000d72:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8000d74:	697b      	ldr	r3, [r7, #20]
 8000d76:	f003 0303 	and.w	r3, r3, #3
 8000d7a:	009b      	lsls	r3, r3, #2
 8000d7c:	220f      	movs	r2, #15
 8000d7e:	fa02 f303 	lsl.w	r3, r2, r3
 8000d82:	43db      	mvns	r3, r3
 8000d84:	693a      	ldr	r2, [r7, #16]
 8000d86:	4013      	ands	r3, r2
 8000d88:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8000d8a:	687b      	ldr	r3, [r7, #4]
 8000d8c:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8000d90:	d025      	beq.n	8000dde <HAL_GPIO_Init+0x242>
 8000d92:	687b      	ldr	r3, [r7, #4]
 8000d94:	4a4f      	ldr	r2, [pc, #316]	; (8000ed4 <HAL_GPIO_Init+0x338>)
 8000d96:	4293      	cmp	r3, r2
 8000d98:	d01f      	beq.n	8000dda <HAL_GPIO_Init+0x23e>
 8000d9a:	687b      	ldr	r3, [r7, #4]
 8000d9c:	4a4e      	ldr	r2, [pc, #312]	; (8000ed8 <HAL_GPIO_Init+0x33c>)
 8000d9e:	4293      	cmp	r3, r2
 8000da0:	d019      	beq.n	8000dd6 <HAL_GPIO_Init+0x23a>
 8000da2:	687b      	ldr	r3, [r7, #4]
 8000da4:	4a4d      	ldr	r2, [pc, #308]	; (8000edc <HAL_GPIO_Init+0x340>)
 8000da6:	4293      	cmp	r3, r2
 8000da8:	d013      	beq.n	8000dd2 <HAL_GPIO_Init+0x236>
 8000daa:	687b      	ldr	r3, [r7, #4]
 8000dac:	4a4c      	ldr	r2, [pc, #304]	; (8000ee0 <HAL_GPIO_Init+0x344>)
 8000dae:	4293      	cmp	r3, r2
 8000db0:	d00d      	beq.n	8000dce <HAL_GPIO_Init+0x232>
 8000db2:	687b      	ldr	r3, [r7, #4]
 8000db4:	4a4b      	ldr	r2, [pc, #300]	; (8000ee4 <HAL_GPIO_Init+0x348>)
 8000db6:	4293      	cmp	r3, r2
 8000db8:	d007      	beq.n	8000dca <HAL_GPIO_Init+0x22e>
 8000dba:	687b      	ldr	r3, [r7, #4]
 8000dbc:	4a4a      	ldr	r2, [pc, #296]	; (8000ee8 <HAL_GPIO_Init+0x34c>)
 8000dbe:	4293      	cmp	r3, r2
 8000dc0:	d101      	bne.n	8000dc6 <HAL_GPIO_Init+0x22a>
 8000dc2:	2306      	movs	r3, #6
 8000dc4:	e00c      	b.n	8000de0 <HAL_GPIO_Init+0x244>
 8000dc6:	2307      	movs	r3, #7
 8000dc8:	e00a      	b.n	8000de0 <HAL_GPIO_Init+0x244>
 8000dca:	2305      	movs	r3, #5
 8000dcc:	e008      	b.n	8000de0 <HAL_GPIO_Init+0x244>
 8000dce:	2304      	movs	r3, #4
 8000dd0:	e006      	b.n	8000de0 <HAL_GPIO_Init+0x244>
 8000dd2:	2303      	movs	r3, #3
 8000dd4:	e004      	b.n	8000de0 <HAL_GPIO_Init+0x244>
 8000dd6:	2302      	movs	r3, #2
 8000dd8:	e002      	b.n	8000de0 <HAL_GPIO_Init+0x244>
 8000dda:	2301      	movs	r3, #1
 8000ddc:	e000      	b.n	8000de0 <HAL_GPIO_Init+0x244>
 8000dde:	2300      	movs	r3, #0
 8000de0:	697a      	ldr	r2, [r7, #20]
 8000de2:	f002 0203 	and.w	r2, r2, #3
 8000de6:	0092      	lsls	r2, r2, #2
 8000de8:	4093      	lsls	r3, r2
 8000dea:	693a      	ldr	r2, [r7, #16]
 8000dec:	4313      	orrs	r3, r2
 8000dee:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8000df0:	4937      	ldr	r1, [pc, #220]	; (8000ed0 <HAL_GPIO_Init+0x334>)
 8000df2:	697b      	ldr	r3, [r7, #20]
 8000df4:	089b      	lsrs	r3, r3, #2
 8000df6:	3302      	adds	r3, #2
 8000df8:	693a      	ldr	r2, [r7, #16]
 8000dfa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8000dfe:	4b3b      	ldr	r3, [pc, #236]	; (8000eec <HAL_GPIO_Init+0x350>)
 8000e00:	689b      	ldr	r3, [r3, #8]
 8000e02:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000e04:	68fb      	ldr	r3, [r7, #12]
 8000e06:	43db      	mvns	r3, r3
 8000e08:	693a      	ldr	r2, [r7, #16]
 8000e0a:	4013      	ands	r3, r2
 8000e0c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8000e0e:	683b      	ldr	r3, [r7, #0]
 8000e10:	685b      	ldr	r3, [r3, #4]
 8000e12:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000e16:	2b00      	cmp	r3, #0
 8000e18:	d003      	beq.n	8000e22 <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 8000e1a:	693a      	ldr	r2, [r7, #16]
 8000e1c:	68fb      	ldr	r3, [r7, #12]
 8000e1e:	4313      	orrs	r3, r2
 8000e20:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8000e22:	4a32      	ldr	r2, [pc, #200]	; (8000eec <HAL_GPIO_Init+0x350>)
 8000e24:	693b      	ldr	r3, [r7, #16]
 8000e26:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8000e28:	4b30      	ldr	r3, [pc, #192]	; (8000eec <HAL_GPIO_Init+0x350>)
 8000e2a:	68db      	ldr	r3, [r3, #12]
 8000e2c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000e2e:	68fb      	ldr	r3, [r7, #12]
 8000e30:	43db      	mvns	r3, r3
 8000e32:	693a      	ldr	r2, [r7, #16]
 8000e34:	4013      	ands	r3, r2
 8000e36:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8000e38:	683b      	ldr	r3, [r7, #0]
 8000e3a:	685b      	ldr	r3, [r3, #4]
 8000e3c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000e40:	2b00      	cmp	r3, #0
 8000e42:	d003      	beq.n	8000e4c <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8000e44:	693a      	ldr	r2, [r7, #16]
 8000e46:	68fb      	ldr	r3, [r7, #12]
 8000e48:	4313      	orrs	r3, r2
 8000e4a:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8000e4c:	4a27      	ldr	r2, [pc, #156]	; (8000eec <HAL_GPIO_Init+0x350>)
 8000e4e:	693b      	ldr	r3, [r7, #16]
 8000e50:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8000e52:	4b26      	ldr	r3, [pc, #152]	; (8000eec <HAL_GPIO_Init+0x350>)
 8000e54:	685b      	ldr	r3, [r3, #4]
 8000e56:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000e58:	68fb      	ldr	r3, [r7, #12]
 8000e5a:	43db      	mvns	r3, r3
 8000e5c:	693a      	ldr	r2, [r7, #16]
 8000e5e:	4013      	ands	r3, r2
 8000e60:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8000e62:	683b      	ldr	r3, [r7, #0]
 8000e64:	685b      	ldr	r3, [r3, #4]
 8000e66:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000e6a:	2b00      	cmp	r3, #0
 8000e6c:	d003      	beq.n	8000e76 <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 8000e6e:	693a      	ldr	r2, [r7, #16]
 8000e70:	68fb      	ldr	r3, [r7, #12]
 8000e72:	4313      	orrs	r3, r2
 8000e74:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8000e76:	4a1d      	ldr	r2, [pc, #116]	; (8000eec <HAL_GPIO_Init+0x350>)
 8000e78:	693b      	ldr	r3, [r7, #16]
 8000e7a:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8000e7c:	4b1b      	ldr	r3, [pc, #108]	; (8000eec <HAL_GPIO_Init+0x350>)
 8000e7e:	681b      	ldr	r3, [r3, #0]
 8000e80:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000e82:	68fb      	ldr	r3, [r7, #12]
 8000e84:	43db      	mvns	r3, r3
 8000e86:	693a      	ldr	r2, [r7, #16]
 8000e88:	4013      	ands	r3, r2
 8000e8a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8000e8c:	683b      	ldr	r3, [r7, #0]
 8000e8e:	685b      	ldr	r3, [r3, #4]
 8000e90:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000e94:	2b00      	cmp	r3, #0
 8000e96:	d003      	beq.n	8000ea0 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 8000e98:	693a      	ldr	r2, [r7, #16]
 8000e9a:	68fb      	ldr	r3, [r7, #12]
 8000e9c:	4313      	orrs	r3, r2
 8000e9e:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8000ea0:	4a12      	ldr	r2, [pc, #72]	; (8000eec <HAL_GPIO_Init+0x350>)
 8000ea2:	693b      	ldr	r3, [r7, #16]
 8000ea4:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8000ea6:	697b      	ldr	r3, [r7, #20]
 8000ea8:	3301      	adds	r3, #1
 8000eaa:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000eac:	683b      	ldr	r3, [r7, #0]
 8000eae:	681a      	ldr	r2, [r3, #0]
 8000eb0:	697b      	ldr	r3, [r7, #20]
 8000eb2:	fa22 f303 	lsr.w	r3, r2, r3
 8000eb6:	2b00      	cmp	r3, #0
 8000eb8:	f47f ae78 	bne.w	8000bac <HAL_GPIO_Init+0x10>
  }
}
 8000ebc:	bf00      	nop
 8000ebe:	bf00      	nop
 8000ec0:	371c      	adds	r7, #28
 8000ec2:	46bd      	mov	sp, r7
 8000ec4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ec8:	4770      	bx	lr
 8000eca:	bf00      	nop
 8000ecc:	40021000 	.word	0x40021000
 8000ed0:	40010000 	.word	0x40010000
 8000ed4:	48000400 	.word	0x48000400
 8000ed8:	48000800 	.word	0x48000800
 8000edc:	48000c00 	.word	0x48000c00
 8000ee0:	48001000 	.word	0x48001000
 8000ee4:	48001400 	.word	0x48001400
 8000ee8:	48001800 	.word	0x48001800
 8000eec:	40010400 	.word	0x40010400

08000ef0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000ef0:	b480      	push	{r7}
 8000ef2:	b083      	sub	sp, #12
 8000ef4:	af00      	add	r7, sp, #0
 8000ef6:	6078      	str	r0, [r7, #4]
 8000ef8:	460b      	mov	r3, r1
 8000efa:	807b      	strh	r3, [r7, #2]
 8000efc:	4613      	mov	r3, r2
 8000efe:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8000f00:	787b      	ldrb	r3, [r7, #1]
 8000f02:	2b00      	cmp	r3, #0
 8000f04:	d003      	beq.n	8000f0e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8000f06:	887a      	ldrh	r2, [r7, #2]
 8000f08:	687b      	ldr	r3, [r7, #4]
 8000f0a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8000f0c:	e002      	b.n	8000f14 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8000f0e:	887a      	ldrh	r2, [r7, #2]
 8000f10:	687b      	ldr	r3, [r7, #4]
 8000f12:	629a      	str	r2, [r3, #40]	; 0x28
}
 8000f14:	bf00      	nop
 8000f16:	370c      	adds	r7, #12
 8000f18:	46bd      	mov	sp, r7
 8000f1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f1e:	4770      	bx	lr

08000f20 <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..H) to select the GPIO peripheral for STM32L4 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8000f20:	b480      	push	{r7}
 8000f22:	b085      	sub	sp, #20
 8000f24:	af00      	add	r7, sp, #0
 8000f26:	6078      	str	r0, [r7, #4]
 8000f28:	460b      	mov	r3, r1
 8000f2a:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8000f2c:	687b      	ldr	r3, [r7, #4]
 8000f2e:	695b      	ldr	r3, [r3, #20]
 8000f30:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8000f32:	887a      	ldrh	r2, [r7, #2]
 8000f34:	68fb      	ldr	r3, [r7, #12]
 8000f36:	4013      	ands	r3, r2
 8000f38:	041a      	lsls	r2, r3, #16
 8000f3a:	68fb      	ldr	r3, [r7, #12]
 8000f3c:	43d9      	mvns	r1, r3
 8000f3e:	887b      	ldrh	r3, [r7, #2]
 8000f40:	400b      	ands	r3, r1
 8000f42:	431a      	orrs	r2, r3
 8000f44:	687b      	ldr	r3, [r7, #4]
 8000f46:	619a      	str	r2, [r3, #24]
}
 8000f48:	bf00      	nop
 8000f4a:	3714      	adds	r7, #20
 8000f4c:	46bd      	mov	sp, r7
 8000f4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f52:	4770      	bx	lr

08000f54 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8000f54:	b480      	push	{r7}
 8000f56:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8000f58:	4b04      	ldr	r3, [pc, #16]	; (8000f6c <HAL_PWREx_GetVoltageRange+0x18>)
 8000f5a:	681b      	ldr	r3, [r3, #0]
 8000f5c:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8000f60:	4618      	mov	r0, r3
 8000f62:	46bd      	mov	sp, r7
 8000f64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f68:	4770      	bx	lr
 8000f6a:	bf00      	nop
 8000f6c:	40007000 	.word	0x40007000

08000f70 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8000f70:	b480      	push	{r7}
 8000f72:	b085      	sub	sp, #20
 8000f74:	af00      	add	r7, sp, #0
 8000f76:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8000f78:	687b      	ldr	r3, [r7, #4]
 8000f7a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8000f7e:	d130      	bne.n	8000fe2 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8000f80:	4b23      	ldr	r3, [pc, #140]	; (8001010 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8000f82:	681b      	ldr	r3, [r3, #0]
 8000f84:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8000f88:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8000f8c:	d038      	beq.n	8001000 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8000f8e:	4b20      	ldr	r3, [pc, #128]	; (8001010 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8000f90:	681b      	ldr	r3, [r3, #0]
 8000f92:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8000f96:	4a1e      	ldr	r2, [pc, #120]	; (8001010 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8000f98:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000f9c:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8000f9e:	4b1d      	ldr	r3, [pc, #116]	; (8001014 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8000fa0:	681b      	ldr	r3, [r3, #0]
 8000fa2:	2232      	movs	r2, #50	; 0x32
 8000fa4:	fb02 f303 	mul.w	r3, r2, r3
 8000fa8:	4a1b      	ldr	r2, [pc, #108]	; (8001018 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8000faa:	fba2 2303 	umull	r2, r3, r2, r3
 8000fae:	0c9b      	lsrs	r3, r3, #18
 8000fb0:	3301      	adds	r3, #1
 8000fb2:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8000fb4:	e002      	b.n	8000fbc <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8000fb6:	68fb      	ldr	r3, [r7, #12]
 8000fb8:	3b01      	subs	r3, #1
 8000fba:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8000fbc:	4b14      	ldr	r3, [pc, #80]	; (8001010 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8000fbe:	695b      	ldr	r3, [r3, #20]
 8000fc0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000fc4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8000fc8:	d102      	bne.n	8000fd0 <HAL_PWREx_ControlVoltageScaling+0x60>
 8000fca:	68fb      	ldr	r3, [r7, #12]
 8000fcc:	2b00      	cmp	r3, #0
 8000fce:	d1f2      	bne.n	8000fb6 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8000fd0:	4b0f      	ldr	r3, [pc, #60]	; (8001010 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8000fd2:	695b      	ldr	r3, [r3, #20]
 8000fd4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000fd8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8000fdc:	d110      	bne.n	8001000 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8000fde:	2303      	movs	r3, #3
 8000fe0:	e00f      	b.n	8001002 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8000fe2:	4b0b      	ldr	r3, [pc, #44]	; (8001010 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8000fe4:	681b      	ldr	r3, [r3, #0]
 8000fe6:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8000fea:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8000fee:	d007      	beq.n	8001000 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8000ff0:	4b07      	ldr	r3, [pc, #28]	; (8001010 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8000ff2:	681b      	ldr	r3, [r3, #0]
 8000ff4:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8000ff8:	4a05      	ldr	r2, [pc, #20]	; (8001010 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8000ffa:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000ffe:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8001000:	2300      	movs	r3, #0
}
 8001002:	4618      	mov	r0, r3
 8001004:	3714      	adds	r7, #20
 8001006:	46bd      	mov	sp, r7
 8001008:	f85d 7b04 	ldr.w	r7, [sp], #4
 800100c:	4770      	bx	lr
 800100e:	bf00      	nop
 8001010:	40007000 	.word	0x40007000
 8001014:	20000000 	.word	0x20000000
 8001018:	431bde83 	.word	0x431bde83

0800101c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800101c:	b580      	push	{r7, lr}
 800101e:	b088      	sub	sp, #32
 8001020:	af00      	add	r7, sp, #0
 8001022:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001024:	687b      	ldr	r3, [r7, #4]
 8001026:	2b00      	cmp	r3, #0
 8001028:	d101      	bne.n	800102e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800102a:	2301      	movs	r3, #1
 800102c:	e3d4      	b.n	80017d8 <HAL_RCC_OscConfig+0x7bc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800102e:	4ba1      	ldr	r3, [pc, #644]	; (80012b4 <HAL_RCC_OscConfig+0x298>)
 8001030:	689b      	ldr	r3, [r3, #8]
 8001032:	f003 030c 	and.w	r3, r3, #12
 8001036:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001038:	4b9e      	ldr	r3, [pc, #632]	; (80012b4 <HAL_RCC_OscConfig+0x298>)
 800103a:	68db      	ldr	r3, [r3, #12]
 800103c:	f003 0303 	and.w	r3, r3, #3
 8001040:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8001042:	687b      	ldr	r3, [r7, #4]
 8001044:	681b      	ldr	r3, [r3, #0]
 8001046:	f003 0310 	and.w	r3, r3, #16
 800104a:	2b00      	cmp	r3, #0
 800104c:	f000 80e4 	beq.w	8001218 <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8001050:	69bb      	ldr	r3, [r7, #24]
 8001052:	2b00      	cmp	r3, #0
 8001054:	d007      	beq.n	8001066 <HAL_RCC_OscConfig+0x4a>
 8001056:	69bb      	ldr	r3, [r7, #24]
 8001058:	2b0c      	cmp	r3, #12
 800105a:	f040 808b 	bne.w	8001174 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 800105e:	697b      	ldr	r3, [r7, #20]
 8001060:	2b01      	cmp	r3, #1
 8001062:	f040 8087 	bne.w	8001174 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001066:	4b93      	ldr	r3, [pc, #588]	; (80012b4 <HAL_RCC_OscConfig+0x298>)
 8001068:	681b      	ldr	r3, [r3, #0]
 800106a:	f003 0302 	and.w	r3, r3, #2
 800106e:	2b00      	cmp	r3, #0
 8001070:	d005      	beq.n	800107e <HAL_RCC_OscConfig+0x62>
 8001072:	687b      	ldr	r3, [r7, #4]
 8001074:	699b      	ldr	r3, [r3, #24]
 8001076:	2b00      	cmp	r3, #0
 8001078:	d101      	bne.n	800107e <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 800107a:	2301      	movs	r3, #1
 800107c:	e3ac      	b.n	80017d8 <HAL_RCC_OscConfig+0x7bc>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 800107e:	687b      	ldr	r3, [r7, #4]
 8001080:	6a1a      	ldr	r2, [r3, #32]
 8001082:	4b8c      	ldr	r3, [pc, #560]	; (80012b4 <HAL_RCC_OscConfig+0x298>)
 8001084:	681b      	ldr	r3, [r3, #0]
 8001086:	f003 0308 	and.w	r3, r3, #8
 800108a:	2b00      	cmp	r3, #0
 800108c:	d004      	beq.n	8001098 <HAL_RCC_OscConfig+0x7c>
 800108e:	4b89      	ldr	r3, [pc, #548]	; (80012b4 <HAL_RCC_OscConfig+0x298>)
 8001090:	681b      	ldr	r3, [r3, #0]
 8001092:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001096:	e005      	b.n	80010a4 <HAL_RCC_OscConfig+0x88>
 8001098:	4b86      	ldr	r3, [pc, #536]	; (80012b4 <HAL_RCC_OscConfig+0x298>)
 800109a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800109e:	091b      	lsrs	r3, r3, #4
 80010a0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80010a4:	4293      	cmp	r3, r2
 80010a6:	d223      	bcs.n	80010f0 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80010a8:	687b      	ldr	r3, [r7, #4]
 80010aa:	6a1b      	ldr	r3, [r3, #32]
 80010ac:	4618      	mov	r0, r3
 80010ae:	f000 fd41 	bl	8001b34 <RCC_SetFlashLatencyFromMSIRange>
 80010b2:	4603      	mov	r3, r0
 80010b4:	2b00      	cmp	r3, #0
 80010b6:	d001      	beq.n	80010bc <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 80010b8:	2301      	movs	r3, #1
 80010ba:	e38d      	b.n	80017d8 <HAL_RCC_OscConfig+0x7bc>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80010bc:	4b7d      	ldr	r3, [pc, #500]	; (80012b4 <HAL_RCC_OscConfig+0x298>)
 80010be:	681b      	ldr	r3, [r3, #0]
 80010c0:	4a7c      	ldr	r2, [pc, #496]	; (80012b4 <HAL_RCC_OscConfig+0x298>)
 80010c2:	f043 0308 	orr.w	r3, r3, #8
 80010c6:	6013      	str	r3, [r2, #0]
 80010c8:	4b7a      	ldr	r3, [pc, #488]	; (80012b4 <HAL_RCC_OscConfig+0x298>)
 80010ca:	681b      	ldr	r3, [r3, #0]
 80010cc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80010d0:	687b      	ldr	r3, [r7, #4]
 80010d2:	6a1b      	ldr	r3, [r3, #32]
 80010d4:	4977      	ldr	r1, [pc, #476]	; (80012b4 <HAL_RCC_OscConfig+0x298>)
 80010d6:	4313      	orrs	r3, r2
 80010d8:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80010da:	4b76      	ldr	r3, [pc, #472]	; (80012b4 <HAL_RCC_OscConfig+0x298>)
 80010dc:	685b      	ldr	r3, [r3, #4]
 80010de:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80010e2:	687b      	ldr	r3, [r7, #4]
 80010e4:	69db      	ldr	r3, [r3, #28]
 80010e6:	021b      	lsls	r3, r3, #8
 80010e8:	4972      	ldr	r1, [pc, #456]	; (80012b4 <HAL_RCC_OscConfig+0x298>)
 80010ea:	4313      	orrs	r3, r2
 80010ec:	604b      	str	r3, [r1, #4]
 80010ee:	e025      	b.n	800113c <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80010f0:	4b70      	ldr	r3, [pc, #448]	; (80012b4 <HAL_RCC_OscConfig+0x298>)
 80010f2:	681b      	ldr	r3, [r3, #0]
 80010f4:	4a6f      	ldr	r2, [pc, #444]	; (80012b4 <HAL_RCC_OscConfig+0x298>)
 80010f6:	f043 0308 	orr.w	r3, r3, #8
 80010fa:	6013      	str	r3, [r2, #0]
 80010fc:	4b6d      	ldr	r3, [pc, #436]	; (80012b4 <HAL_RCC_OscConfig+0x298>)
 80010fe:	681b      	ldr	r3, [r3, #0]
 8001100:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001104:	687b      	ldr	r3, [r7, #4]
 8001106:	6a1b      	ldr	r3, [r3, #32]
 8001108:	496a      	ldr	r1, [pc, #424]	; (80012b4 <HAL_RCC_OscConfig+0x298>)
 800110a:	4313      	orrs	r3, r2
 800110c:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800110e:	4b69      	ldr	r3, [pc, #420]	; (80012b4 <HAL_RCC_OscConfig+0x298>)
 8001110:	685b      	ldr	r3, [r3, #4]
 8001112:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001116:	687b      	ldr	r3, [r7, #4]
 8001118:	69db      	ldr	r3, [r3, #28]
 800111a:	021b      	lsls	r3, r3, #8
 800111c:	4965      	ldr	r1, [pc, #404]	; (80012b4 <HAL_RCC_OscConfig+0x298>)
 800111e:	4313      	orrs	r3, r2
 8001120:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001122:	69bb      	ldr	r3, [r7, #24]
 8001124:	2b00      	cmp	r3, #0
 8001126:	d109      	bne.n	800113c <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001128:	687b      	ldr	r3, [r7, #4]
 800112a:	6a1b      	ldr	r3, [r3, #32]
 800112c:	4618      	mov	r0, r3
 800112e:	f000 fd01 	bl	8001b34 <RCC_SetFlashLatencyFromMSIRange>
 8001132:	4603      	mov	r3, r0
 8001134:	2b00      	cmp	r3, #0
 8001136:	d001      	beq.n	800113c <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 8001138:	2301      	movs	r3, #1
 800113a:	e34d      	b.n	80017d8 <HAL_RCC_OscConfig+0x7bc>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800113c:	f000 fc36 	bl	80019ac <HAL_RCC_GetSysClockFreq>
 8001140:	4602      	mov	r2, r0
 8001142:	4b5c      	ldr	r3, [pc, #368]	; (80012b4 <HAL_RCC_OscConfig+0x298>)
 8001144:	689b      	ldr	r3, [r3, #8]
 8001146:	091b      	lsrs	r3, r3, #4
 8001148:	f003 030f 	and.w	r3, r3, #15
 800114c:	495a      	ldr	r1, [pc, #360]	; (80012b8 <HAL_RCC_OscConfig+0x29c>)
 800114e:	5ccb      	ldrb	r3, [r1, r3]
 8001150:	f003 031f 	and.w	r3, r3, #31
 8001154:	fa22 f303 	lsr.w	r3, r2, r3
 8001158:	4a58      	ldr	r2, [pc, #352]	; (80012bc <HAL_RCC_OscConfig+0x2a0>)
 800115a:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 800115c:	4b58      	ldr	r3, [pc, #352]	; (80012c0 <HAL_RCC_OscConfig+0x2a4>)
 800115e:	681b      	ldr	r3, [r3, #0]
 8001160:	4618      	mov	r0, r3
 8001162:	f7ff fbb5 	bl	80008d0 <HAL_InitTick>
 8001166:	4603      	mov	r3, r0
 8001168:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 800116a:	7bfb      	ldrb	r3, [r7, #15]
 800116c:	2b00      	cmp	r3, #0
 800116e:	d052      	beq.n	8001216 <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 8001170:	7bfb      	ldrb	r3, [r7, #15]
 8001172:	e331      	b.n	80017d8 <HAL_RCC_OscConfig+0x7bc>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8001174:	687b      	ldr	r3, [r7, #4]
 8001176:	699b      	ldr	r3, [r3, #24]
 8001178:	2b00      	cmp	r3, #0
 800117a:	d032      	beq.n	80011e2 <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 800117c:	4b4d      	ldr	r3, [pc, #308]	; (80012b4 <HAL_RCC_OscConfig+0x298>)
 800117e:	681b      	ldr	r3, [r3, #0]
 8001180:	4a4c      	ldr	r2, [pc, #304]	; (80012b4 <HAL_RCC_OscConfig+0x298>)
 8001182:	f043 0301 	orr.w	r3, r3, #1
 8001186:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001188:	f7ff fbf2 	bl	8000970 <HAL_GetTick>
 800118c:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800118e:	e008      	b.n	80011a2 <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001190:	f7ff fbee 	bl	8000970 <HAL_GetTick>
 8001194:	4602      	mov	r2, r0
 8001196:	693b      	ldr	r3, [r7, #16]
 8001198:	1ad3      	subs	r3, r2, r3
 800119a:	2b02      	cmp	r3, #2
 800119c:	d901      	bls.n	80011a2 <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 800119e:	2303      	movs	r3, #3
 80011a0:	e31a      	b.n	80017d8 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80011a2:	4b44      	ldr	r3, [pc, #272]	; (80012b4 <HAL_RCC_OscConfig+0x298>)
 80011a4:	681b      	ldr	r3, [r3, #0]
 80011a6:	f003 0302 	and.w	r3, r3, #2
 80011aa:	2b00      	cmp	r3, #0
 80011ac:	d0f0      	beq.n	8001190 <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80011ae:	4b41      	ldr	r3, [pc, #260]	; (80012b4 <HAL_RCC_OscConfig+0x298>)
 80011b0:	681b      	ldr	r3, [r3, #0]
 80011b2:	4a40      	ldr	r2, [pc, #256]	; (80012b4 <HAL_RCC_OscConfig+0x298>)
 80011b4:	f043 0308 	orr.w	r3, r3, #8
 80011b8:	6013      	str	r3, [r2, #0]
 80011ba:	4b3e      	ldr	r3, [pc, #248]	; (80012b4 <HAL_RCC_OscConfig+0x298>)
 80011bc:	681b      	ldr	r3, [r3, #0]
 80011be:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80011c2:	687b      	ldr	r3, [r7, #4]
 80011c4:	6a1b      	ldr	r3, [r3, #32]
 80011c6:	493b      	ldr	r1, [pc, #236]	; (80012b4 <HAL_RCC_OscConfig+0x298>)
 80011c8:	4313      	orrs	r3, r2
 80011ca:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80011cc:	4b39      	ldr	r3, [pc, #228]	; (80012b4 <HAL_RCC_OscConfig+0x298>)
 80011ce:	685b      	ldr	r3, [r3, #4]
 80011d0:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80011d4:	687b      	ldr	r3, [r7, #4]
 80011d6:	69db      	ldr	r3, [r3, #28]
 80011d8:	021b      	lsls	r3, r3, #8
 80011da:	4936      	ldr	r1, [pc, #216]	; (80012b4 <HAL_RCC_OscConfig+0x298>)
 80011dc:	4313      	orrs	r3, r2
 80011de:	604b      	str	r3, [r1, #4]
 80011e0:	e01a      	b.n	8001218 <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 80011e2:	4b34      	ldr	r3, [pc, #208]	; (80012b4 <HAL_RCC_OscConfig+0x298>)
 80011e4:	681b      	ldr	r3, [r3, #0]
 80011e6:	4a33      	ldr	r2, [pc, #204]	; (80012b4 <HAL_RCC_OscConfig+0x298>)
 80011e8:	f023 0301 	bic.w	r3, r3, #1
 80011ec:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80011ee:	f7ff fbbf 	bl	8000970 <HAL_GetTick>
 80011f2:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80011f4:	e008      	b.n	8001208 <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80011f6:	f7ff fbbb 	bl	8000970 <HAL_GetTick>
 80011fa:	4602      	mov	r2, r0
 80011fc:	693b      	ldr	r3, [r7, #16]
 80011fe:	1ad3      	subs	r3, r2, r3
 8001200:	2b02      	cmp	r3, #2
 8001202:	d901      	bls.n	8001208 <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 8001204:	2303      	movs	r3, #3
 8001206:	e2e7      	b.n	80017d8 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8001208:	4b2a      	ldr	r3, [pc, #168]	; (80012b4 <HAL_RCC_OscConfig+0x298>)
 800120a:	681b      	ldr	r3, [r3, #0]
 800120c:	f003 0302 	and.w	r3, r3, #2
 8001210:	2b00      	cmp	r3, #0
 8001212:	d1f0      	bne.n	80011f6 <HAL_RCC_OscConfig+0x1da>
 8001214:	e000      	b.n	8001218 <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001216:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001218:	687b      	ldr	r3, [r7, #4]
 800121a:	681b      	ldr	r3, [r3, #0]
 800121c:	f003 0301 	and.w	r3, r3, #1
 8001220:	2b00      	cmp	r3, #0
 8001222:	d074      	beq.n	800130e <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8001224:	69bb      	ldr	r3, [r7, #24]
 8001226:	2b08      	cmp	r3, #8
 8001228:	d005      	beq.n	8001236 <HAL_RCC_OscConfig+0x21a>
 800122a:	69bb      	ldr	r3, [r7, #24]
 800122c:	2b0c      	cmp	r3, #12
 800122e:	d10e      	bne.n	800124e <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8001230:	697b      	ldr	r3, [r7, #20]
 8001232:	2b03      	cmp	r3, #3
 8001234:	d10b      	bne.n	800124e <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001236:	4b1f      	ldr	r3, [pc, #124]	; (80012b4 <HAL_RCC_OscConfig+0x298>)
 8001238:	681b      	ldr	r3, [r3, #0]
 800123a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800123e:	2b00      	cmp	r3, #0
 8001240:	d064      	beq.n	800130c <HAL_RCC_OscConfig+0x2f0>
 8001242:	687b      	ldr	r3, [r7, #4]
 8001244:	685b      	ldr	r3, [r3, #4]
 8001246:	2b00      	cmp	r3, #0
 8001248:	d160      	bne.n	800130c <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 800124a:	2301      	movs	r3, #1
 800124c:	e2c4      	b.n	80017d8 <HAL_RCC_OscConfig+0x7bc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800124e:	687b      	ldr	r3, [r7, #4]
 8001250:	685b      	ldr	r3, [r3, #4]
 8001252:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001256:	d106      	bne.n	8001266 <HAL_RCC_OscConfig+0x24a>
 8001258:	4b16      	ldr	r3, [pc, #88]	; (80012b4 <HAL_RCC_OscConfig+0x298>)
 800125a:	681b      	ldr	r3, [r3, #0]
 800125c:	4a15      	ldr	r2, [pc, #84]	; (80012b4 <HAL_RCC_OscConfig+0x298>)
 800125e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001262:	6013      	str	r3, [r2, #0]
 8001264:	e01d      	b.n	80012a2 <HAL_RCC_OscConfig+0x286>
 8001266:	687b      	ldr	r3, [r7, #4]
 8001268:	685b      	ldr	r3, [r3, #4]
 800126a:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800126e:	d10c      	bne.n	800128a <HAL_RCC_OscConfig+0x26e>
 8001270:	4b10      	ldr	r3, [pc, #64]	; (80012b4 <HAL_RCC_OscConfig+0x298>)
 8001272:	681b      	ldr	r3, [r3, #0]
 8001274:	4a0f      	ldr	r2, [pc, #60]	; (80012b4 <HAL_RCC_OscConfig+0x298>)
 8001276:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800127a:	6013      	str	r3, [r2, #0]
 800127c:	4b0d      	ldr	r3, [pc, #52]	; (80012b4 <HAL_RCC_OscConfig+0x298>)
 800127e:	681b      	ldr	r3, [r3, #0]
 8001280:	4a0c      	ldr	r2, [pc, #48]	; (80012b4 <HAL_RCC_OscConfig+0x298>)
 8001282:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001286:	6013      	str	r3, [r2, #0]
 8001288:	e00b      	b.n	80012a2 <HAL_RCC_OscConfig+0x286>
 800128a:	4b0a      	ldr	r3, [pc, #40]	; (80012b4 <HAL_RCC_OscConfig+0x298>)
 800128c:	681b      	ldr	r3, [r3, #0]
 800128e:	4a09      	ldr	r2, [pc, #36]	; (80012b4 <HAL_RCC_OscConfig+0x298>)
 8001290:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001294:	6013      	str	r3, [r2, #0]
 8001296:	4b07      	ldr	r3, [pc, #28]	; (80012b4 <HAL_RCC_OscConfig+0x298>)
 8001298:	681b      	ldr	r3, [r3, #0]
 800129a:	4a06      	ldr	r2, [pc, #24]	; (80012b4 <HAL_RCC_OscConfig+0x298>)
 800129c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80012a0:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80012a2:	687b      	ldr	r3, [r7, #4]
 80012a4:	685b      	ldr	r3, [r3, #4]
 80012a6:	2b00      	cmp	r3, #0
 80012a8:	d01c      	beq.n	80012e4 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80012aa:	f7ff fb61 	bl	8000970 <HAL_GetTick>
 80012ae:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80012b0:	e011      	b.n	80012d6 <HAL_RCC_OscConfig+0x2ba>
 80012b2:	bf00      	nop
 80012b4:	40021000 	.word	0x40021000
 80012b8:	08002eec 	.word	0x08002eec
 80012bc:	20000000 	.word	0x20000000
 80012c0:	20000004 	.word	0x20000004
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80012c4:	f7ff fb54 	bl	8000970 <HAL_GetTick>
 80012c8:	4602      	mov	r2, r0
 80012ca:	693b      	ldr	r3, [r7, #16]
 80012cc:	1ad3      	subs	r3, r2, r3
 80012ce:	2b64      	cmp	r3, #100	; 0x64
 80012d0:	d901      	bls.n	80012d6 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 80012d2:	2303      	movs	r3, #3
 80012d4:	e280      	b.n	80017d8 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80012d6:	4baf      	ldr	r3, [pc, #700]	; (8001594 <HAL_RCC_OscConfig+0x578>)
 80012d8:	681b      	ldr	r3, [r3, #0]
 80012da:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80012de:	2b00      	cmp	r3, #0
 80012e0:	d0f0      	beq.n	80012c4 <HAL_RCC_OscConfig+0x2a8>
 80012e2:	e014      	b.n	800130e <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80012e4:	f7ff fb44 	bl	8000970 <HAL_GetTick>
 80012e8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80012ea:	e008      	b.n	80012fe <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80012ec:	f7ff fb40 	bl	8000970 <HAL_GetTick>
 80012f0:	4602      	mov	r2, r0
 80012f2:	693b      	ldr	r3, [r7, #16]
 80012f4:	1ad3      	subs	r3, r2, r3
 80012f6:	2b64      	cmp	r3, #100	; 0x64
 80012f8:	d901      	bls.n	80012fe <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 80012fa:	2303      	movs	r3, #3
 80012fc:	e26c      	b.n	80017d8 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80012fe:	4ba5      	ldr	r3, [pc, #660]	; (8001594 <HAL_RCC_OscConfig+0x578>)
 8001300:	681b      	ldr	r3, [r3, #0]
 8001302:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001306:	2b00      	cmp	r3, #0
 8001308:	d1f0      	bne.n	80012ec <HAL_RCC_OscConfig+0x2d0>
 800130a:	e000      	b.n	800130e <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800130c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800130e:	687b      	ldr	r3, [r7, #4]
 8001310:	681b      	ldr	r3, [r3, #0]
 8001312:	f003 0302 	and.w	r3, r3, #2
 8001316:	2b00      	cmp	r3, #0
 8001318:	d060      	beq.n	80013dc <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 800131a:	69bb      	ldr	r3, [r7, #24]
 800131c:	2b04      	cmp	r3, #4
 800131e:	d005      	beq.n	800132c <HAL_RCC_OscConfig+0x310>
 8001320:	69bb      	ldr	r3, [r7, #24]
 8001322:	2b0c      	cmp	r3, #12
 8001324:	d119      	bne.n	800135a <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8001326:	697b      	ldr	r3, [r7, #20]
 8001328:	2b02      	cmp	r3, #2
 800132a:	d116      	bne.n	800135a <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800132c:	4b99      	ldr	r3, [pc, #612]	; (8001594 <HAL_RCC_OscConfig+0x578>)
 800132e:	681b      	ldr	r3, [r3, #0]
 8001330:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001334:	2b00      	cmp	r3, #0
 8001336:	d005      	beq.n	8001344 <HAL_RCC_OscConfig+0x328>
 8001338:	687b      	ldr	r3, [r7, #4]
 800133a:	68db      	ldr	r3, [r3, #12]
 800133c:	2b00      	cmp	r3, #0
 800133e:	d101      	bne.n	8001344 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8001340:	2301      	movs	r3, #1
 8001342:	e249      	b.n	80017d8 <HAL_RCC_OscConfig+0x7bc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001344:	4b93      	ldr	r3, [pc, #588]	; (8001594 <HAL_RCC_OscConfig+0x578>)
 8001346:	685b      	ldr	r3, [r3, #4]
 8001348:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 800134c:	687b      	ldr	r3, [r7, #4]
 800134e:	691b      	ldr	r3, [r3, #16]
 8001350:	061b      	lsls	r3, r3, #24
 8001352:	4990      	ldr	r1, [pc, #576]	; (8001594 <HAL_RCC_OscConfig+0x578>)
 8001354:	4313      	orrs	r3, r2
 8001356:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001358:	e040      	b.n	80013dc <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800135a:	687b      	ldr	r3, [r7, #4]
 800135c:	68db      	ldr	r3, [r3, #12]
 800135e:	2b00      	cmp	r3, #0
 8001360:	d023      	beq.n	80013aa <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001362:	4b8c      	ldr	r3, [pc, #560]	; (8001594 <HAL_RCC_OscConfig+0x578>)
 8001364:	681b      	ldr	r3, [r3, #0]
 8001366:	4a8b      	ldr	r2, [pc, #556]	; (8001594 <HAL_RCC_OscConfig+0x578>)
 8001368:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800136c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800136e:	f7ff faff 	bl	8000970 <HAL_GetTick>
 8001372:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001374:	e008      	b.n	8001388 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001376:	f7ff fafb 	bl	8000970 <HAL_GetTick>
 800137a:	4602      	mov	r2, r0
 800137c:	693b      	ldr	r3, [r7, #16]
 800137e:	1ad3      	subs	r3, r2, r3
 8001380:	2b02      	cmp	r3, #2
 8001382:	d901      	bls.n	8001388 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8001384:	2303      	movs	r3, #3
 8001386:	e227      	b.n	80017d8 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001388:	4b82      	ldr	r3, [pc, #520]	; (8001594 <HAL_RCC_OscConfig+0x578>)
 800138a:	681b      	ldr	r3, [r3, #0]
 800138c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001390:	2b00      	cmp	r3, #0
 8001392:	d0f0      	beq.n	8001376 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001394:	4b7f      	ldr	r3, [pc, #508]	; (8001594 <HAL_RCC_OscConfig+0x578>)
 8001396:	685b      	ldr	r3, [r3, #4]
 8001398:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 800139c:	687b      	ldr	r3, [r7, #4]
 800139e:	691b      	ldr	r3, [r3, #16]
 80013a0:	061b      	lsls	r3, r3, #24
 80013a2:	497c      	ldr	r1, [pc, #496]	; (8001594 <HAL_RCC_OscConfig+0x578>)
 80013a4:	4313      	orrs	r3, r2
 80013a6:	604b      	str	r3, [r1, #4]
 80013a8:	e018      	b.n	80013dc <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80013aa:	4b7a      	ldr	r3, [pc, #488]	; (8001594 <HAL_RCC_OscConfig+0x578>)
 80013ac:	681b      	ldr	r3, [r3, #0]
 80013ae:	4a79      	ldr	r2, [pc, #484]	; (8001594 <HAL_RCC_OscConfig+0x578>)
 80013b0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80013b4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80013b6:	f7ff fadb 	bl	8000970 <HAL_GetTick>
 80013ba:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80013bc:	e008      	b.n	80013d0 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80013be:	f7ff fad7 	bl	8000970 <HAL_GetTick>
 80013c2:	4602      	mov	r2, r0
 80013c4:	693b      	ldr	r3, [r7, #16]
 80013c6:	1ad3      	subs	r3, r2, r3
 80013c8:	2b02      	cmp	r3, #2
 80013ca:	d901      	bls.n	80013d0 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 80013cc:	2303      	movs	r3, #3
 80013ce:	e203      	b.n	80017d8 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80013d0:	4b70      	ldr	r3, [pc, #448]	; (8001594 <HAL_RCC_OscConfig+0x578>)
 80013d2:	681b      	ldr	r3, [r3, #0]
 80013d4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80013d8:	2b00      	cmp	r3, #0
 80013da:	d1f0      	bne.n	80013be <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80013dc:	687b      	ldr	r3, [r7, #4]
 80013de:	681b      	ldr	r3, [r3, #0]
 80013e0:	f003 0308 	and.w	r3, r3, #8
 80013e4:	2b00      	cmp	r3, #0
 80013e6:	d03c      	beq.n	8001462 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80013e8:	687b      	ldr	r3, [r7, #4]
 80013ea:	695b      	ldr	r3, [r3, #20]
 80013ec:	2b00      	cmp	r3, #0
 80013ee:	d01c      	beq.n	800142a <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80013f0:	4b68      	ldr	r3, [pc, #416]	; (8001594 <HAL_RCC_OscConfig+0x578>)
 80013f2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80013f6:	4a67      	ldr	r2, [pc, #412]	; (8001594 <HAL_RCC_OscConfig+0x578>)
 80013f8:	f043 0301 	orr.w	r3, r3, #1
 80013fc:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001400:	f7ff fab6 	bl	8000970 <HAL_GetTick>
 8001404:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001406:	e008      	b.n	800141a <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001408:	f7ff fab2 	bl	8000970 <HAL_GetTick>
 800140c:	4602      	mov	r2, r0
 800140e:	693b      	ldr	r3, [r7, #16]
 8001410:	1ad3      	subs	r3, r2, r3
 8001412:	2b02      	cmp	r3, #2
 8001414:	d901      	bls.n	800141a <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8001416:	2303      	movs	r3, #3
 8001418:	e1de      	b.n	80017d8 <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800141a:	4b5e      	ldr	r3, [pc, #376]	; (8001594 <HAL_RCC_OscConfig+0x578>)
 800141c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001420:	f003 0302 	and.w	r3, r3, #2
 8001424:	2b00      	cmp	r3, #0
 8001426:	d0ef      	beq.n	8001408 <HAL_RCC_OscConfig+0x3ec>
 8001428:	e01b      	b.n	8001462 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800142a:	4b5a      	ldr	r3, [pc, #360]	; (8001594 <HAL_RCC_OscConfig+0x578>)
 800142c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001430:	4a58      	ldr	r2, [pc, #352]	; (8001594 <HAL_RCC_OscConfig+0x578>)
 8001432:	f023 0301 	bic.w	r3, r3, #1
 8001436:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800143a:	f7ff fa99 	bl	8000970 <HAL_GetTick>
 800143e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001440:	e008      	b.n	8001454 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001442:	f7ff fa95 	bl	8000970 <HAL_GetTick>
 8001446:	4602      	mov	r2, r0
 8001448:	693b      	ldr	r3, [r7, #16]
 800144a:	1ad3      	subs	r3, r2, r3
 800144c:	2b02      	cmp	r3, #2
 800144e:	d901      	bls.n	8001454 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8001450:	2303      	movs	r3, #3
 8001452:	e1c1      	b.n	80017d8 <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001454:	4b4f      	ldr	r3, [pc, #316]	; (8001594 <HAL_RCC_OscConfig+0x578>)
 8001456:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800145a:	f003 0302 	and.w	r3, r3, #2
 800145e:	2b00      	cmp	r3, #0
 8001460:	d1ef      	bne.n	8001442 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001462:	687b      	ldr	r3, [r7, #4]
 8001464:	681b      	ldr	r3, [r3, #0]
 8001466:	f003 0304 	and.w	r3, r3, #4
 800146a:	2b00      	cmp	r3, #0
 800146c:	f000 80a6 	beq.w	80015bc <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001470:	2300      	movs	r3, #0
 8001472:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8001474:	4b47      	ldr	r3, [pc, #284]	; (8001594 <HAL_RCC_OscConfig+0x578>)
 8001476:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001478:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800147c:	2b00      	cmp	r3, #0
 800147e:	d10d      	bne.n	800149c <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001480:	4b44      	ldr	r3, [pc, #272]	; (8001594 <HAL_RCC_OscConfig+0x578>)
 8001482:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001484:	4a43      	ldr	r2, [pc, #268]	; (8001594 <HAL_RCC_OscConfig+0x578>)
 8001486:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800148a:	6593      	str	r3, [r2, #88]	; 0x58
 800148c:	4b41      	ldr	r3, [pc, #260]	; (8001594 <HAL_RCC_OscConfig+0x578>)
 800148e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001490:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001494:	60bb      	str	r3, [r7, #8]
 8001496:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001498:	2301      	movs	r3, #1
 800149a:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800149c:	4b3e      	ldr	r3, [pc, #248]	; (8001598 <HAL_RCC_OscConfig+0x57c>)
 800149e:	681b      	ldr	r3, [r3, #0]
 80014a0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80014a4:	2b00      	cmp	r3, #0
 80014a6:	d118      	bne.n	80014da <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80014a8:	4b3b      	ldr	r3, [pc, #236]	; (8001598 <HAL_RCC_OscConfig+0x57c>)
 80014aa:	681b      	ldr	r3, [r3, #0]
 80014ac:	4a3a      	ldr	r2, [pc, #232]	; (8001598 <HAL_RCC_OscConfig+0x57c>)
 80014ae:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80014b2:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80014b4:	f7ff fa5c 	bl	8000970 <HAL_GetTick>
 80014b8:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80014ba:	e008      	b.n	80014ce <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80014bc:	f7ff fa58 	bl	8000970 <HAL_GetTick>
 80014c0:	4602      	mov	r2, r0
 80014c2:	693b      	ldr	r3, [r7, #16]
 80014c4:	1ad3      	subs	r3, r2, r3
 80014c6:	2b02      	cmp	r3, #2
 80014c8:	d901      	bls.n	80014ce <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 80014ca:	2303      	movs	r3, #3
 80014cc:	e184      	b.n	80017d8 <HAL_RCC_OscConfig+0x7bc>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80014ce:	4b32      	ldr	r3, [pc, #200]	; (8001598 <HAL_RCC_OscConfig+0x57c>)
 80014d0:	681b      	ldr	r3, [r3, #0]
 80014d2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80014d6:	2b00      	cmp	r3, #0
 80014d8:	d0f0      	beq.n	80014bc <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80014da:	687b      	ldr	r3, [r7, #4]
 80014dc:	689b      	ldr	r3, [r3, #8]
 80014de:	2b01      	cmp	r3, #1
 80014e0:	d108      	bne.n	80014f4 <HAL_RCC_OscConfig+0x4d8>
 80014e2:	4b2c      	ldr	r3, [pc, #176]	; (8001594 <HAL_RCC_OscConfig+0x578>)
 80014e4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80014e8:	4a2a      	ldr	r2, [pc, #168]	; (8001594 <HAL_RCC_OscConfig+0x578>)
 80014ea:	f043 0301 	orr.w	r3, r3, #1
 80014ee:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80014f2:	e024      	b.n	800153e <HAL_RCC_OscConfig+0x522>
 80014f4:	687b      	ldr	r3, [r7, #4]
 80014f6:	689b      	ldr	r3, [r3, #8]
 80014f8:	2b05      	cmp	r3, #5
 80014fa:	d110      	bne.n	800151e <HAL_RCC_OscConfig+0x502>
 80014fc:	4b25      	ldr	r3, [pc, #148]	; (8001594 <HAL_RCC_OscConfig+0x578>)
 80014fe:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001502:	4a24      	ldr	r2, [pc, #144]	; (8001594 <HAL_RCC_OscConfig+0x578>)
 8001504:	f043 0304 	orr.w	r3, r3, #4
 8001508:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800150c:	4b21      	ldr	r3, [pc, #132]	; (8001594 <HAL_RCC_OscConfig+0x578>)
 800150e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001512:	4a20      	ldr	r2, [pc, #128]	; (8001594 <HAL_RCC_OscConfig+0x578>)
 8001514:	f043 0301 	orr.w	r3, r3, #1
 8001518:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800151c:	e00f      	b.n	800153e <HAL_RCC_OscConfig+0x522>
 800151e:	4b1d      	ldr	r3, [pc, #116]	; (8001594 <HAL_RCC_OscConfig+0x578>)
 8001520:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001524:	4a1b      	ldr	r2, [pc, #108]	; (8001594 <HAL_RCC_OscConfig+0x578>)
 8001526:	f023 0301 	bic.w	r3, r3, #1
 800152a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800152e:	4b19      	ldr	r3, [pc, #100]	; (8001594 <HAL_RCC_OscConfig+0x578>)
 8001530:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001534:	4a17      	ldr	r2, [pc, #92]	; (8001594 <HAL_RCC_OscConfig+0x578>)
 8001536:	f023 0304 	bic.w	r3, r3, #4
 800153a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800153e:	687b      	ldr	r3, [r7, #4]
 8001540:	689b      	ldr	r3, [r3, #8]
 8001542:	2b00      	cmp	r3, #0
 8001544:	d016      	beq.n	8001574 <HAL_RCC_OscConfig+0x558>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001546:	f7ff fa13 	bl	8000970 <HAL_GetTick>
 800154a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800154c:	e00a      	b.n	8001564 <HAL_RCC_OscConfig+0x548>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800154e:	f7ff fa0f 	bl	8000970 <HAL_GetTick>
 8001552:	4602      	mov	r2, r0
 8001554:	693b      	ldr	r3, [r7, #16]
 8001556:	1ad3      	subs	r3, r2, r3
 8001558:	f241 3288 	movw	r2, #5000	; 0x1388
 800155c:	4293      	cmp	r3, r2
 800155e:	d901      	bls.n	8001564 <HAL_RCC_OscConfig+0x548>
        {
          return HAL_TIMEOUT;
 8001560:	2303      	movs	r3, #3
 8001562:	e139      	b.n	80017d8 <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001564:	4b0b      	ldr	r3, [pc, #44]	; (8001594 <HAL_RCC_OscConfig+0x578>)
 8001566:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800156a:	f003 0302 	and.w	r3, r3, #2
 800156e:	2b00      	cmp	r3, #0
 8001570:	d0ed      	beq.n	800154e <HAL_RCC_OscConfig+0x532>
 8001572:	e01a      	b.n	80015aa <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001574:	f7ff f9fc 	bl	8000970 <HAL_GetTick>
 8001578:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800157a:	e00f      	b.n	800159c <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800157c:	f7ff f9f8 	bl	8000970 <HAL_GetTick>
 8001580:	4602      	mov	r2, r0
 8001582:	693b      	ldr	r3, [r7, #16]
 8001584:	1ad3      	subs	r3, r2, r3
 8001586:	f241 3288 	movw	r2, #5000	; 0x1388
 800158a:	4293      	cmp	r3, r2
 800158c:	d906      	bls.n	800159c <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 800158e:	2303      	movs	r3, #3
 8001590:	e122      	b.n	80017d8 <HAL_RCC_OscConfig+0x7bc>
 8001592:	bf00      	nop
 8001594:	40021000 	.word	0x40021000
 8001598:	40007000 	.word	0x40007000
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800159c:	4b90      	ldr	r3, [pc, #576]	; (80017e0 <HAL_RCC_OscConfig+0x7c4>)
 800159e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80015a2:	f003 0302 	and.w	r3, r3, #2
 80015a6:	2b00      	cmp	r3, #0
 80015a8:	d1e8      	bne.n	800157c <HAL_RCC_OscConfig+0x560>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80015aa:	7ffb      	ldrb	r3, [r7, #31]
 80015ac:	2b01      	cmp	r3, #1
 80015ae:	d105      	bne.n	80015bc <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80015b0:	4b8b      	ldr	r3, [pc, #556]	; (80017e0 <HAL_RCC_OscConfig+0x7c4>)
 80015b2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80015b4:	4a8a      	ldr	r2, [pc, #552]	; (80017e0 <HAL_RCC_OscConfig+0x7c4>)
 80015b6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80015ba:	6593      	str	r3, [r2, #88]	; 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80015bc:	687b      	ldr	r3, [r7, #4]
 80015be:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80015c0:	2b00      	cmp	r3, #0
 80015c2:	f000 8108 	beq.w	80017d6 <HAL_RCC_OscConfig+0x7ba>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80015c6:	687b      	ldr	r3, [r7, #4]
 80015c8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80015ca:	2b02      	cmp	r3, #2
 80015cc:	f040 80d0 	bne.w	8001770 <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 80015d0:	4b83      	ldr	r3, [pc, #524]	; (80017e0 <HAL_RCC_OscConfig+0x7c4>)
 80015d2:	68db      	ldr	r3, [r3, #12]
 80015d4:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80015d6:	697b      	ldr	r3, [r7, #20]
 80015d8:	f003 0203 	and.w	r2, r3, #3
 80015dc:	687b      	ldr	r3, [r7, #4]
 80015de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80015e0:	429a      	cmp	r2, r3
 80015e2:	d130      	bne.n	8001646 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80015e4:	697b      	ldr	r3, [r7, #20]
 80015e6:	f003 0270 	and.w	r2, r3, #112	; 0x70
 80015ea:	687b      	ldr	r3, [r7, #4]
 80015ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015ee:	3b01      	subs	r3, #1
 80015f0:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80015f2:	429a      	cmp	r2, r3
 80015f4:	d127      	bne.n	8001646 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80015f6:	697b      	ldr	r3, [r7, #20]
 80015f8:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 80015fc:	687b      	ldr	r3, [r7, #4]
 80015fe:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001600:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001602:	429a      	cmp	r2, r3
 8001604:	d11f      	bne.n	8001646 <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8001606:	697b      	ldr	r3, [r7, #20]
 8001608:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800160c:	687a      	ldr	r2, [r7, #4]
 800160e:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8001610:	2a07      	cmp	r2, #7
 8001612:	bf14      	ite	ne
 8001614:	2201      	movne	r2, #1
 8001616:	2200      	moveq	r2, #0
 8001618:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800161a:	4293      	cmp	r3, r2
 800161c:	d113      	bne.n	8001646 <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800161e:	697b      	ldr	r3, [r7, #20]
 8001620:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8001624:	687b      	ldr	r3, [r7, #4]
 8001626:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001628:	085b      	lsrs	r3, r3, #1
 800162a:	3b01      	subs	r3, #1
 800162c:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 800162e:	429a      	cmp	r2, r3
 8001630:	d109      	bne.n	8001646 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8001632:	697b      	ldr	r3, [r7, #20]
 8001634:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8001638:	687b      	ldr	r3, [r7, #4]
 800163a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800163c:	085b      	lsrs	r3, r3, #1
 800163e:	3b01      	subs	r3, #1
 8001640:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001642:	429a      	cmp	r2, r3
 8001644:	d06e      	beq.n	8001724 <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001646:	69bb      	ldr	r3, [r7, #24]
 8001648:	2b0c      	cmp	r3, #12
 800164a:	d069      	beq.n	8001720 <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 800164c:	4b64      	ldr	r3, [pc, #400]	; (80017e0 <HAL_RCC_OscConfig+0x7c4>)
 800164e:	681b      	ldr	r3, [r3, #0]
 8001650:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8001654:	2b00      	cmp	r3, #0
 8001656:	d105      	bne.n	8001664 <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8001658:	4b61      	ldr	r3, [pc, #388]	; (80017e0 <HAL_RCC_OscConfig+0x7c4>)
 800165a:	681b      	ldr	r3, [r3, #0]
 800165c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001660:	2b00      	cmp	r3, #0
 8001662:	d001      	beq.n	8001668 <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 8001664:	2301      	movs	r3, #1
 8001666:	e0b7      	b.n	80017d8 <HAL_RCC_OscConfig+0x7bc>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8001668:	4b5d      	ldr	r3, [pc, #372]	; (80017e0 <HAL_RCC_OscConfig+0x7c4>)
 800166a:	681b      	ldr	r3, [r3, #0]
 800166c:	4a5c      	ldr	r2, [pc, #368]	; (80017e0 <HAL_RCC_OscConfig+0x7c4>)
 800166e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001672:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8001674:	f7ff f97c 	bl	8000970 <HAL_GetTick>
 8001678:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800167a:	e008      	b.n	800168e <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800167c:	f7ff f978 	bl	8000970 <HAL_GetTick>
 8001680:	4602      	mov	r2, r0
 8001682:	693b      	ldr	r3, [r7, #16]
 8001684:	1ad3      	subs	r3, r2, r3
 8001686:	2b02      	cmp	r3, #2
 8001688:	d901      	bls.n	800168e <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 800168a:	2303      	movs	r3, #3
 800168c:	e0a4      	b.n	80017d8 <HAL_RCC_OscConfig+0x7bc>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800168e:	4b54      	ldr	r3, [pc, #336]	; (80017e0 <HAL_RCC_OscConfig+0x7c4>)
 8001690:	681b      	ldr	r3, [r3, #0]
 8001692:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001696:	2b00      	cmp	r3, #0
 8001698:	d1f0      	bne.n	800167c <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800169a:	4b51      	ldr	r3, [pc, #324]	; (80017e0 <HAL_RCC_OscConfig+0x7c4>)
 800169c:	68da      	ldr	r2, [r3, #12]
 800169e:	4b51      	ldr	r3, [pc, #324]	; (80017e4 <HAL_RCC_OscConfig+0x7c8>)
 80016a0:	4013      	ands	r3, r2
 80016a2:	687a      	ldr	r2, [r7, #4]
 80016a4:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 80016a6:	687a      	ldr	r2, [r7, #4]
 80016a8:	6b12      	ldr	r2, [r2, #48]	; 0x30
 80016aa:	3a01      	subs	r2, #1
 80016ac:	0112      	lsls	r2, r2, #4
 80016ae:	4311      	orrs	r1, r2
 80016b0:	687a      	ldr	r2, [r7, #4]
 80016b2:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80016b4:	0212      	lsls	r2, r2, #8
 80016b6:	4311      	orrs	r1, r2
 80016b8:	687a      	ldr	r2, [r7, #4]
 80016ba:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 80016bc:	0852      	lsrs	r2, r2, #1
 80016be:	3a01      	subs	r2, #1
 80016c0:	0552      	lsls	r2, r2, #21
 80016c2:	4311      	orrs	r1, r2
 80016c4:	687a      	ldr	r2, [r7, #4]
 80016c6:	6c12      	ldr	r2, [r2, #64]	; 0x40
 80016c8:	0852      	lsrs	r2, r2, #1
 80016ca:	3a01      	subs	r2, #1
 80016cc:	0652      	lsls	r2, r2, #25
 80016ce:	4311      	orrs	r1, r2
 80016d0:	687a      	ldr	r2, [r7, #4]
 80016d2:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80016d4:	0912      	lsrs	r2, r2, #4
 80016d6:	0452      	lsls	r2, r2, #17
 80016d8:	430a      	orrs	r2, r1
 80016da:	4941      	ldr	r1, [pc, #260]	; (80017e0 <HAL_RCC_OscConfig+0x7c4>)
 80016dc:	4313      	orrs	r3, r2
 80016de:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 80016e0:	4b3f      	ldr	r3, [pc, #252]	; (80017e0 <HAL_RCC_OscConfig+0x7c4>)
 80016e2:	681b      	ldr	r3, [r3, #0]
 80016e4:	4a3e      	ldr	r2, [pc, #248]	; (80017e0 <HAL_RCC_OscConfig+0x7c4>)
 80016e6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80016ea:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80016ec:	4b3c      	ldr	r3, [pc, #240]	; (80017e0 <HAL_RCC_OscConfig+0x7c4>)
 80016ee:	68db      	ldr	r3, [r3, #12]
 80016f0:	4a3b      	ldr	r2, [pc, #236]	; (80017e0 <HAL_RCC_OscConfig+0x7c4>)
 80016f2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80016f6:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80016f8:	f7ff f93a 	bl	8000970 <HAL_GetTick>
 80016fc:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80016fe:	e008      	b.n	8001712 <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001700:	f7ff f936 	bl	8000970 <HAL_GetTick>
 8001704:	4602      	mov	r2, r0
 8001706:	693b      	ldr	r3, [r7, #16]
 8001708:	1ad3      	subs	r3, r2, r3
 800170a:	2b02      	cmp	r3, #2
 800170c:	d901      	bls.n	8001712 <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 800170e:	2303      	movs	r3, #3
 8001710:	e062      	b.n	80017d8 <HAL_RCC_OscConfig+0x7bc>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001712:	4b33      	ldr	r3, [pc, #204]	; (80017e0 <HAL_RCC_OscConfig+0x7c4>)
 8001714:	681b      	ldr	r3, [r3, #0]
 8001716:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800171a:	2b00      	cmp	r3, #0
 800171c:	d0f0      	beq.n	8001700 <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 800171e:	e05a      	b.n	80017d6 <HAL_RCC_OscConfig+0x7ba>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8001720:	2301      	movs	r3, #1
 8001722:	e059      	b.n	80017d8 <HAL_RCC_OscConfig+0x7bc>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001724:	4b2e      	ldr	r3, [pc, #184]	; (80017e0 <HAL_RCC_OscConfig+0x7c4>)
 8001726:	681b      	ldr	r3, [r3, #0]
 8001728:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800172c:	2b00      	cmp	r3, #0
 800172e:	d152      	bne.n	80017d6 <HAL_RCC_OscConfig+0x7ba>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8001730:	4b2b      	ldr	r3, [pc, #172]	; (80017e0 <HAL_RCC_OscConfig+0x7c4>)
 8001732:	681b      	ldr	r3, [r3, #0]
 8001734:	4a2a      	ldr	r2, [pc, #168]	; (80017e0 <HAL_RCC_OscConfig+0x7c4>)
 8001736:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800173a:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800173c:	4b28      	ldr	r3, [pc, #160]	; (80017e0 <HAL_RCC_OscConfig+0x7c4>)
 800173e:	68db      	ldr	r3, [r3, #12]
 8001740:	4a27      	ldr	r2, [pc, #156]	; (80017e0 <HAL_RCC_OscConfig+0x7c4>)
 8001742:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001746:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8001748:	f7ff f912 	bl	8000970 <HAL_GetTick>
 800174c:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800174e:	e008      	b.n	8001762 <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001750:	f7ff f90e 	bl	8000970 <HAL_GetTick>
 8001754:	4602      	mov	r2, r0
 8001756:	693b      	ldr	r3, [r7, #16]
 8001758:	1ad3      	subs	r3, r2, r3
 800175a:	2b02      	cmp	r3, #2
 800175c:	d901      	bls.n	8001762 <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 800175e:	2303      	movs	r3, #3
 8001760:	e03a      	b.n	80017d8 <HAL_RCC_OscConfig+0x7bc>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001762:	4b1f      	ldr	r3, [pc, #124]	; (80017e0 <HAL_RCC_OscConfig+0x7c4>)
 8001764:	681b      	ldr	r3, [r3, #0]
 8001766:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800176a:	2b00      	cmp	r3, #0
 800176c:	d0f0      	beq.n	8001750 <HAL_RCC_OscConfig+0x734>
 800176e:	e032      	b.n	80017d6 <HAL_RCC_OscConfig+0x7ba>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001770:	69bb      	ldr	r3, [r7, #24]
 8001772:	2b0c      	cmp	r3, #12
 8001774:	d02d      	beq.n	80017d2 <HAL_RCC_OscConfig+0x7b6>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001776:	4b1a      	ldr	r3, [pc, #104]	; (80017e0 <HAL_RCC_OscConfig+0x7c4>)
 8001778:	681b      	ldr	r3, [r3, #0]
 800177a:	4a19      	ldr	r2, [pc, #100]	; (80017e0 <HAL_RCC_OscConfig+0x7c4>)
 800177c:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001780:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
#if defined(RCC_PLLSAI1_SUPPORT) && defined(RCC_CR_PLLSAI2RDY)
        if(READ_BIT(RCC->CR, (RCC_CR_PLLSAI1RDY | RCC_CR_PLLSAI2RDY)) == 0U)
 8001782:	4b17      	ldr	r3, [pc, #92]	; (80017e0 <HAL_RCC_OscConfig+0x7c4>)
 8001784:	681b      	ldr	r3, [r3, #0]
 8001786:	f003 5320 	and.w	r3, r3, #671088640	; 0x28000000
 800178a:	2b00      	cmp	r3, #0
 800178c:	d105      	bne.n	800179a <HAL_RCC_OscConfig+0x77e>
        {
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 800178e:	4b14      	ldr	r3, [pc, #80]	; (80017e0 <HAL_RCC_OscConfig+0x7c4>)
 8001790:	68db      	ldr	r3, [r3, #12]
 8001792:	4a13      	ldr	r2, [pc, #76]	; (80017e0 <HAL_RCC_OscConfig+0x7c4>)
 8001794:	f023 0303 	bic.w	r3, r3, #3
 8001798:	60d3      	str	r3, [r2, #12]
#else
        MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
#endif /* RCC_PLLSAI1_SUPPORT && RCC_CR_PLLSAI2RDY */

#if defined(RCC_PLLSAI2_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 800179a:	4b11      	ldr	r3, [pc, #68]	; (80017e0 <HAL_RCC_OscConfig+0x7c4>)
 800179c:	68db      	ldr	r3, [r3, #12]
 800179e:	4a10      	ldr	r2, [pc, #64]	; (80017e0 <HAL_RCC_OscConfig+0x7c4>)
 80017a0:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 80017a4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80017a8:	60d3      	str	r3, [r2, #12]
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK);
#endif /* RCC_PLLSAI2_SUPPORT */

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80017aa:	f7ff f8e1 	bl	8000970 <HAL_GetTick>
 80017ae:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80017b0:	e008      	b.n	80017c4 <HAL_RCC_OscConfig+0x7a8>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80017b2:	f7ff f8dd 	bl	8000970 <HAL_GetTick>
 80017b6:	4602      	mov	r2, r0
 80017b8:	693b      	ldr	r3, [r7, #16]
 80017ba:	1ad3      	subs	r3, r2, r3
 80017bc:	2b02      	cmp	r3, #2
 80017be:	d901      	bls.n	80017c4 <HAL_RCC_OscConfig+0x7a8>
          {
            return HAL_TIMEOUT;
 80017c0:	2303      	movs	r3, #3
 80017c2:	e009      	b.n	80017d8 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80017c4:	4b06      	ldr	r3, [pc, #24]	; (80017e0 <HAL_RCC_OscConfig+0x7c4>)
 80017c6:	681b      	ldr	r3, [r3, #0]
 80017c8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80017cc:	2b00      	cmp	r3, #0
 80017ce:	d1f0      	bne.n	80017b2 <HAL_RCC_OscConfig+0x796>
 80017d0:	e001      	b.n	80017d6 <HAL_RCC_OscConfig+0x7ba>
        }
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 80017d2:	2301      	movs	r3, #1
 80017d4:	e000      	b.n	80017d8 <HAL_RCC_OscConfig+0x7bc>
      }
    }
  }
  return HAL_OK;
 80017d6:	2300      	movs	r3, #0
}
 80017d8:	4618      	mov	r0, r3
 80017da:	3720      	adds	r7, #32
 80017dc:	46bd      	mov	sp, r7
 80017de:	bd80      	pop	{r7, pc}
 80017e0:	40021000 	.word	0x40021000
 80017e4:	f99d808c 	.word	0xf99d808c

080017e8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80017e8:	b580      	push	{r7, lr}
 80017ea:	b084      	sub	sp, #16
 80017ec:	af00      	add	r7, sp, #0
 80017ee:	6078      	str	r0, [r7, #4]
 80017f0:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80017f2:	687b      	ldr	r3, [r7, #4]
 80017f4:	2b00      	cmp	r3, #0
 80017f6:	d101      	bne.n	80017fc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80017f8:	2301      	movs	r3, #1
 80017fa:	e0c8      	b.n	800198e <HAL_RCC_ClockConfig+0x1a6>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80017fc:	4b66      	ldr	r3, [pc, #408]	; (8001998 <HAL_RCC_ClockConfig+0x1b0>)
 80017fe:	681b      	ldr	r3, [r3, #0]
 8001800:	f003 0307 	and.w	r3, r3, #7
 8001804:	683a      	ldr	r2, [r7, #0]
 8001806:	429a      	cmp	r2, r3
 8001808:	d910      	bls.n	800182c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800180a:	4b63      	ldr	r3, [pc, #396]	; (8001998 <HAL_RCC_ClockConfig+0x1b0>)
 800180c:	681b      	ldr	r3, [r3, #0]
 800180e:	f023 0207 	bic.w	r2, r3, #7
 8001812:	4961      	ldr	r1, [pc, #388]	; (8001998 <HAL_RCC_ClockConfig+0x1b0>)
 8001814:	683b      	ldr	r3, [r7, #0]
 8001816:	4313      	orrs	r3, r2
 8001818:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800181a:	4b5f      	ldr	r3, [pc, #380]	; (8001998 <HAL_RCC_ClockConfig+0x1b0>)
 800181c:	681b      	ldr	r3, [r3, #0]
 800181e:	f003 0307 	and.w	r3, r3, #7
 8001822:	683a      	ldr	r2, [r7, #0]
 8001824:	429a      	cmp	r2, r3
 8001826:	d001      	beq.n	800182c <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8001828:	2301      	movs	r3, #1
 800182a:	e0b0      	b.n	800198e <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800182c:	687b      	ldr	r3, [r7, #4]
 800182e:	681b      	ldr	r3, [r3, #0]
 8001830:	f003 0301 	and.w	r3, r3, #1
 8001834:	2b00      	cmp	r3, #0
 8001836:	d04c      	beq.n	80018d2 <HAL_RCC_ClockConfig+0xea>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001838:	687b      	ldr	r3, [r7, #4]
 800183a:	685b      	ldr	r3, [r3, #4]
 800183c:	2b03      	cmp	r3, #3
 800183e:	d107      	bne.n	8001850 <HAL_RCC_ClockConfig+0x68>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001840:	4b56      	ldr	r3, [pc, #344]	; (800199c <HAL_RCC_ClockConfig+0x1b4>)
 8001842:	681b      	ldr	r3, [r3, #0]
 8001844:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001848:	2b00      	cmp	r3, #0
 800184a:	d121      	bne.n	8001890 <HAL_RCC_ClockConfig+0xa8>
      {
        return HAL_ERROR;
 800184c:	2301      	movs	r3, #1
 800184e:	e09e      	b.n	800198e <HAL_RCC_ClockConfig+0x1a6>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001850:	687b      	ldr	r3, [r7, #4]
 8001852:	685b      	ldr	r3, [r3, #4]
 8001854:	2b02      	cmp	r3, #2
 8001856:	d107      	bne.n	8001868 <HAL_RCC_ClockConfig+0x80>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001858:	4b50      	ldr	r3, [pc, #320]	; (800199c <HAL_RCC_ClockConfig+0x1b4>)
 800185a:	681b      	ldr	r3, [r3, #0]
 800185c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001860:	2b00      	cmp	r3, #0
 8001862:	d115      	bne.n	8001890 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8001864:	2301      	movs	r3, #1
 8001866:	e092      	b.n	800198e <HAL_RCC_ClockConfig+0x1a6>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8001868:	687b      	ldr	r3, [r7, #4]
 800186a:	685b      	ldr	r3, [r3, #4]
 800186c:	2b00      	cmp	r3, #0
 800186e:	d107      	bne.n	8001880 <HAL_RCC_ClockConfig+0x98>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001870:	4b4a      	ldr	r3, [pc, #296]	; (800199c <HAL_RCC_ClockConfig+0x1b4>)
 8001872:	681b      	ldr	r3, [r3, #0]
 8001874:	f003 0302 	and.w	r3, r3, #2
 8001878:	2b00      	cmp	r3, #0
 800187a:	d109      	bne.n	8001890 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 800187c:	2301      	movs	r3, #1
 800187e:	e086      	b.n	800198e <HAL_RCC_ClockConfig+0x1a6>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001880:	4b46      	ldr	r3, [pc, #280]	; (800199c <HAL_RCC_ClockConfig+0x1b4>)
 8001882:	681b      	ldr	r3, [r3, #0]
 8001884:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001888:	2b00      	cmp	r3, #0
 800188a:	d101      	bne.n	8001890 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 800188c:	2301      	movs	r3, #1
 800188e:	e07e      	b.n	800198e <HAL_RCC_ClockConfig+0x1a6>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8001890:	4b42      	ldr	r3, [pc, #264]	; (800199c <HAL_RCC_ClockConfig+0x1b4>)
 8001892:	689b      	ldr	r3, [r3, #8]
 8001894:	f023 0203 	bic.w	r2, r3, #3
 8001898:	687b      	ldr	r3, [r7, #4]
 800189a:	685b      	ldr	r3, [r3, #4]
 800189c:	493f      	ldr	r1, [pc, #252]	; (800199c <HAL_RCC_ClockConfig+0x1b4>)
 800189e:	4313      	orrs	r3, r2
 80018a0:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80018a2:	f7ff f865 	bl	8000970 <HAL_GetTick>
 80018a6:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80018a8:	e00a      	b.n	80018c0 <HAL_RCC_ClockConfig+0xd8>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80018aa:	f7ff f861 	bl	8000970 <HAL_GetTick>
 80018ae:	4602      	mov	r2, r0
 80018b0:	68fb      	ldr	r3, [r7, #12]
 80018b2:	1ad3      	subs	r3, r2, r3
 80018b4:	f241 3288 	movw	r2, #5000	; 0x1388
 80018b8:	4293      	cmp	r3, r2
 80018ba:	d901      	bls.n	80018c0 <HAL_RCC_ClockConfig+0xd8>
      {
        return HAL_TIMEOUT;
 80018bc:	2303      	movs	r3, #3
 80018be:	e066      	b.n	800198e <HAL_RCC_ClockConfig+0x1a6>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80018c0:	4b36      	ldr	r3, [pc, #216]	; (800199c <HAL_RCC_ClockConfig+0x1b4>)
 80018c2:	689b      	ldr	r3, [r3, #8]
 80018c4:	f003 020c 	and.w	r2, r3, #12
 80018c8:	687b      	ldr	r3, [r7, #4]
 80018ca:	685b      	ldr	r3, [r3, #4]
 80018cc:	009b      	lsls	r3, r3, #2
 80018ce:	429a      	cmp	r2, r3
 80018d0:	d1eb      	bne.n	80018aa <HAL_RCC_ClockConfig+0xc2>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80018d2:	687b      	ldr	r3, [r7, #4]
 80018d4:	681b      	ldr	r3, [r3, #0]
 80018d6:	f003 0302 	and.w	r3, r3, #2
 80018da:	2b00      	cmp	r3, #0
 80018dc:	d008      	beq.n	80018f0 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80018de:	4b2f      	ldr	r3, [pc, #188]	; (800199c <HAL_RCC_ClockConfig+0x1b4>)
 80018e0:	689b      	ldr	r3, [r3, #8]
 80018e2:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80018e6:	687b      	ldr	r3, [r7, #4]
 80018e8:	689b      	ldr	r3, [r3, #8]
 80018ea:	492c      	ldr	r1, [pc, #176]	; (800199c <HAL_RCC_ClockConfig+0x1b4>)
 80018ec:	4313      	orrs	r3, r2
 80018ee:	608b      	str	r3, [r1, #8]
    }
  }
#endif

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80018f0:	4b29      	ldr	r3, [pc, #164]	; (8001998 <HAL_RCC_ClockConfig+0x1b0>)
 80018f2:	681b      	ldr	r3, [r3, #0]
 80018f4:	f003 0307 	and.w	r3, r3, #7
 80018f8:	683a      	ldr	r2, [r7, #0]
 80018fa:	429a      	cmp	r2, r3
 80018fc:	d210      	bcs.n	8001920 <HAL_RCC_ClockConfig+0x138>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80018fe:	4b26      	ldr	r3, [pc, #152]	; (8001998 <HAL_RCC_ClockConfig+0x1b0>)
 8001900:	681b      	ldr	r3, [r3, #0]
 8001902:	f023 0207 	bic.w	r2, r3, #7
 8001906:	4924      	ldr	r1, [pc, #144]	; (8001998 <HAL_RCC_ClockConfig+0x1b0>)
 8001908:	683b      	ldr	r3, [r7, #0]
 800190a:	4313      	orrs	r3, r2
 800190c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800190e:	4b22      	ldr	r3, [pc, #136]	; (8001998 <HAL_RCC_ClockConfig+0x1b0>)
 8001910:	681b      	ldr	r3, [r3, #0]
 8001912:	f003 0307 	and.w	r3, r3, #7
 8001916:	683a      	ldr	r2, [r7, #0]
 8001918:	429a      	cmp	r2, r3
 800191a:	d001      	beq.n	8001920 <HAL_RCC_ClockConfig+0x138>
    {
      return HAL_ERROR;
 800191c:	2301      	movs	r3, #1
 800191e:	e036      	b.n	800198e <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001920:	687b      	ldr	r3, [r7, #4]
 8001922:	681b      	ldr	r3, [r3, #0]
 8001924:	f003 0304 	and.w	r3, r3, #4
 8001928:	2b00      	cmp	r3, #0
 800192a:	d008      	beq.n	800193e <HAL_RCC_ClockConfig+0x156>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800192c:	4b1b      	ldr	r3, [pc, #108]	; (800199c <HAL_RCC_ClockConfig+0x1b4>)
 800192e:	689b      	ldr	r3, [r3, #8]
 8001930:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001934:	687b      	ldr	r3, [r7, #4]
 8001936:	68db      	ldr	r3, [r3, #12]
 8001938:	4918      	ldr	r1, [pc, #96]	; (800199c <HAL_RCC_ClockConfig+0x1b4>)
 800193a:	4313      	orrs	r3, r2
 800193c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800193e:	687b      	ldr	r3, [r7, #4]
 8001940:	681b      	ldr	r3, [r3, #0]
 8001942:	f003 0308 	and.w	r3, r3, #8
 8001946:	2b00      	cmp	r3, #0
 8001948:	d009      	beq.n	800195e <HAL_RCC_ClockConfig+0x176>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800194a:	4b14      	ldr	r3, [pc, #80]	; (800199c <HAL_RCC_ClockConfig+0x1b4>)
 800194c:	689b      	ldr	r3, [r3, #8]
 800194e:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8001952:	687b      	ldr	r3, [r7, #4]
 8001954:	691b      	ldr	r3, [r3, #16]
 8001956:	00db      	lsls	r3, r3, #3
 8001958:	4910      	ldr	r1, [pc, #64]	; (800199c <HAL_RCC_ClockConfig+0x1b4>)
 800195a:	4313      	orrs	r3, r2
 800195c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800195e:	f000 f825 	bl	80019ac <HAL_RCC_GetSysClockFreq>
 8001962:	4602      	mov	r2, r0
 8001964:	4b0d      	ldr	r3, [pc, #52]	; (800199c <HAL_RCC_ClockConfig+0x1b4>)
 8001966:	689b      	ldr	r3, [r3, #8]
 8001968:	091b      	lsrs	r3, r3, #4
 800196a:	f003 030f 	and.w	r3, r3, #15
 800196e:	490c      	ldr	r1, [pc, #48]	; (80019a0 <HAL_RCC_ClockConfig+0x1b8>)
 8001970:	5ccb      	ldrb	r3, [r1, r3]
 8001972:	f003 031f 	and.w	r3, r3, #31
 8001976:	fa22 f303 	lsr.w	r3, r2, r3
 800197a:	4a0a      	ldr	r2, [pc, #40]	; (80019a4 <HAL_RCC_ClockConfig+0x1bc>)
 800197c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 800197e:	4b0a      	ldr	r3, [pc, #40]	; (80019a8 <HAL_RCC_ClockConfig+0x1c0>)
 8001980:	681b      	ldr	r3, [r3, #0]
 8001982:	4618      	mov	r0, r3
 8001984:	f7fe ffa4 	bl	80008d0 <HAL_InitTick>
 8001988:	4603      	mov	r3, r0
 800198a:	72fb      	strb	r3, [r7, #11]

  return status;
 800198c:	7afb      	ldrb	r3, [r7, #11]
}
 800198e:	4618      	mov	r0, r3
 8001990:	3710      	adds	r7, #16
 8001992:	46bd      	mov	sp, r7
 8001994:	bd80      	pop	{r7, pc}
 8001996:	bf00      	nop
 8001998:	40022000 	.word	0x40022000
 800199c:	40021000 	.word	0x40021000
 80019a0:	08002eec 	.word	0x08002eec
 80019a4:	20000000 	.word	0x20000000
 80019a8:	20000004 	.word	0x20000004

080019ac <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80019ac:	b480      	push	{r7}
 80019ae:	b089      	sub	sp, #36	; 0x24
 80019b0:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 80019b2:	2300      	movs	r3, #0
 80019b4:	61fb      	str	r3, [r7, #28]
 80019b6:	2300      	movs	r3, #0
 80019b8:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80019ba:	4b3e      	ldr	r3, [pc, #248]	; (8001ab4 <HAL_RCC_GetSysClockFreq+0x108>)
 80019bc:	689b      	ldr	r3, [r3, #8]
 80019be:	f003 030c 	and.w	r3, r3, #12
 80019c2:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 80019c4:	4b3b      	ldr	r3, [pc, #236]	; (8001ab4 <HAL_RCC_GetSysClockFreq+0x108>)
 80019c6:	68db      	ldr	r3, [r3, #12]
 80019c8:	f003 0303 	and.w	r3, r3, #3
 80019cc:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80019ce:	693b      	ldr	r3, [r7, #16]
 80019d0:	2b00      	cmp	r3, #0
 80019d2:	d005      	beq.n	80019e0 <HAL_RCC_GetSysClockFreq+0x34>
 80019d4:	693b      	ldr	r3, [r7, #16]
 80019d6:	2b0c      	cmp	r3, #12
 80019d8:	d121      	bne.n	8001a1e <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 80019da:	68fb      	ldr	r3, [r7, #12]
 80019dc:	2b01      	cmp	r3, #1
 80019de:	d11e      	bne.n	8001a1e <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 80019e0:	4b34      	ldr	r3, [pc, #208]	; (8001ab4 <HAL_RCC_GetSysClockFreq+0x108>)
 80019e2:	681b      	ldr	r3, [r3, #0]
 80019e4:	f003 0308 	and.w	r3, r3, #8
 80019e8:	2b00      	cmp	r3, #0
 80019ea:	d107      	bne.n	80019fc <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 80019ec:	4b31      	ldr	r3, [pc, #196]	; (8001ab4 <HAL_RCC_GetSysClockFreq+0x108>)
 80019ee:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80019f2:	0a1b      	lsrs	r3, r3, #8
 80019f4:	f003 030f 	and.w	r3, r3, #15
 80019f8:	61fb      	str	r3, [r7, #28]
 80019fa:	e005      	b.n	8001a08 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 80019fc:	4b2d      	ldr	r3, [pc, #180]	; (8001ab4 <HAL_RCC_GetSysClockFreq+0x108>)
 80019fe:	681b      	ldr	r3, [r3, #0]
 8001a00:	091b      	lsrs	r3, r3, #4
 8001a02:	f003 030f 	and.w	r3, r3, #15
 8001a06:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8001a08:	4a2b      	ldr	r2, [pc, #172]	; (8001ab8 <HAL_RCC_GetSysClockFreq+0x10c>)
 8001a0a:	69fb      	ldr	r3, [r7, #28]
 8001a0c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001a10:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001a12:	693b      	ldr	r3, [r7, #16]
 8001a14:	2b00      	cmp	r3, #0
 8001a16:	d10d      	bne.n	8001a34 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8001a18:	69fb      	ldr	r3, [r7, #28]
 8001a1a:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001a1c:	e00a      	b.n	8001a34 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8001a1e:	693b      	ldr	r3, [r7, #16]
 8001a20:	2b04      	cmp	r3, #4
 8001a22:	d102      	bne.n	8001a2a <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8001a24:	4b25      	ldr	r3, [pc, #148]	; (8001abc <HAL_RCC_GetSysClockFreq+0x110>)
 8001a26:	61bb      	str	r3, [r7, #24]
 8001a28:	e004      	b.n	8001a34 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8001a2a:	693b      	ldr	r3, [r7, #16]
 8001a2c:	2b08      	cmp	r3, #8
 8001a2e:	d101      	bne.n	8001a34 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8001a30:	4b23      	ldr	r3, [pc, #140]	; (8001ac0 <HAL_RCC_GetSysClockFreq+0x114>)
 8001a32:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8001a34:	693b      	ldr	r3, [r7, #16]
 8001a36:	2b0c      	cmp	r3, #12
 8001a38:	d134      	bne.n	8001aa4 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8001a3a:	4b1e      	ldr	r3, [pc, #120]	; (8001ab4 <HAL_RCC_GetSysClockFreq+0x108>)
 8001a3c:	68db      	ldr	r3, [r3, #12]
 8001a3e:	f003 0303 	and.w	r3, r3, #3
 8001a42:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8001a44:	68bb      	ldr	r3, [r7, #8]
 8001a46:	2b02      	cmp	r3, #2
 8001a48:	d003      	beq.n	8001a52 <HAL_RCC_GetSysClockFreq+0xa6>
 8001a4a:	68bb      	ldr	r3, [r7, #8]
 8001a4c:	2b03      	cmp	r3, #3
 8001a4e:	d003      	beq.n	8001a58 <HAL_RCC_GetSysClockFreq+0xac>
 8001a50:	e005      	b.n	8001a5e <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8001a52:	4b1a      	ldr	r3, [pc, #104]	; (8001abc <HAL_RCC_GetSysClockFreq+0x110>)
 8001a54:	617b      	str	r3, [r7, #20]
      break;
 8001a56:	e005      	b.n	8001a64 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8001a58:	4b19      	ldr	r3, [pc, #100]	; (8001ac0 <HAL_RCC_GetSysClockFreq+0x114>)
 8001a5a:	617b      	str	r3, [r7, #20]
      break;
 8001a5c:	e002      	b.n	8001a64 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8001a5e:	69fb      	ldr	r3, [r7, #28]
 8001a60:	617b      	str	r3, [r7, #20]
      break;
 8001a62:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8001a64:	4b13      	ldr	r3, [pc, #76]	; (8001ab4 <HAL_RCC_GetSysClockFreq+0x108>)
 8001a66:	68db      	ldr	r3, [r3, #12]
 8001a68:	091b      	lsrs	r3, r3, #4
 8001a6a:	f003 0307 	and.w	r3, r3, #7
 8001a6e:	3301      	adds	r3, #1
 8001a70:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8001a72:	4b10      	ldr	r3, [pc, #64]	; (8001ab4 <HAL_RCC_GetSysClockFreq+0x108>)
 8001a74:	68db      	ldr	r3, [r3, #12]
 8001a76:	0a1b      	lsrs	r3, r3, #8
 8001a78:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8001a7c:	697a      	ldr	r2, [r7, #20]
 8001a7e:	fb02 f203 	mul.w	r2, r2, r3
 8001a82:	687b      	ldr	r3, [r7, #4]
 8001a84:	fbb2 f3f3 	udiv	r3, r2, r3
 8001a88:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8001a8a:	4b0a      	ldr	r3, [pc, #40]	; (8001ab4 <HAL_RCC_GetSysClockFreq+0x108>)
 8001a8c:	68db      	ldr	r3, [r3, #12]
 8001a8e:	0e5b      	lsrs	r3, r3, #25
 8001a90:	f003 0303 	and.w	r3, r3, #3
 8001a94:	3301      	adds	r3, #1
 8001a96:	005b      	lsls	r3, r3, #1
 8001a98:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8001a9a:	697a      	ldr	r2, [r7, #20]
 8001a9c:	683b      	ldr	r3, [r7, #0]
 8001a9e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001aa2:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8001aa4:	69bb      	ldr	r3, [r7, #24]
}
 8001aa6:	4618      	mov	r0, r3
 8001aa8:	3724      	adds	r7, #36	; 0x24
 8001aaa:	46bd      	mov	sp, r7
 8001aac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ab0:	4770      	bx	lr
 8001ab2:	bf00      	nop
 8001ab4:	40021000 	.word	0x40021000
 8001ab8:	08002f04 	.word	0x08002f04
 8001abc:	00f42400 	.word	0x00f42400
 8001ac0:	007a1200 	.word	0x007a1200

08001ac4 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001ac4:	b480      	push	{r7}
 8001ac6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001ac8:	4b03      	ldr	r3, [pc, #12]	; (8001ad8 <HAL_RCC_GetHCLKFreq+0x14>)
 8001aca:	681b      	ldr	r3, [r3, #0]
}
 8001acc:	4618      	mov	r0, r3
 8001ace:	46bd      	mov	sp, r7
 8001ad0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ad4:	4770      	bx	lr
 8001ad6:	bf00      	nop
 8001ad8:	20000000 	.word	0x20000000

08001adc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001adc:	b580      	push	{r7, lr}
 8001ade:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8001ae0:	f7ff fff0 	bl	8001ac4 <HAL_RCC_GetHCLKFreq>
 8001ae4:	4602      	mov	r2, r0
 8001ae6:	4b06      	ldr	r3, [pc, #24]	; (8001b00 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001ae8:	689b      	ldr	r3, [r3, #8]
 8001aea:	0a1b      	lsrs	r3, r3, #8
 8001aec:	f003 0307 	and.w	r3, r3, #7
 8001af0:	4904      	ldr	r1, [pc, #16]	; (8001b04 <HAL_RCC_GetPCLK1Freq+0x28>)
 8001af2:	5ccb      	ldrb	r3, [r1, r3]
 8001af4:	f003 031f 	and.w	r3, r3, #31
 8001af8:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001afc:	4618      	mov	r0, r3
 8001afe:	bd80      	pop	{r7, pc}
 8001b00:	40021000 	.word	0x40021000
 8001b04:	08002efc 	.word	0x08002efc

08001b08 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001b08:	b580      	push	{r7, lr}
 8001b0a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8001b0c:	f7ff ffda 	bl	8001ac4 <HAL_RCC_GetHCLKFreq>
 8001b10:	4602      	mov	r2, r0
 8001b12:	4b06      	ldr	r3, [pc, #24]	; (8001b2c <HAL_RCC_GetPCLK2Freq+0x24>)
 8001b14:	689b      	ldr	r3, [r3, #8]
 8001b16:	0adb      	lsrs	r3, r3, #11
 8001b18:	f003 0307 	and.w	r3, r3, #7
 8001b1c:	4904      	ldr	r1, [pc, #16]	; (8001b30 <HAL_RCC_GetPCLK2Freq+0x28>)
 8001b1e:	5ccb      	ldrb	r3, [r1, r3]
 8001b20:	f003 031f 	and.w	r3, r3, #31
 8001b24:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001b28:	4618      	mov	r0, r3
 8001b2a:	bd80      	pop	{r7, pc}
 8001b2c:	40021000 	.word	0x40021000
 8001b30:	08002efc 	.word	0x08002efc

08001b34 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8001b34:	b580      	push	{r7, lr}
 8001b36:	b086      	sub	sp, #24
 8001b38:	af00      	add	r7, sp, #0
 8001b3a:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8001b3c:	2300      	movs	r3, #0
 8001b3e:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8001b40:	4b2a      	ldr	r3, [pc, #168]	; (8001bec <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001b42:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001b44:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001b48:	2b00      	cmp	r3, #0
 8001b4a:	d003      	beq.n	8001b54 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8001b4c:	f7ff fa02 	bl	8000f54 <HAL_PWREx_GetVoltageRange>
 8001b50:	6178      	str	r0, [r7, #20]
 8001b52:	e014      	b.n	8001b7e <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8001b54:	4b25      	ldr	r3, [pc, #148]	; (8001bec <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001b56:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001b58:	4a24      	ldr	r2, [pc, #144]	; (8001bec <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001b5a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001b5e:	6593      	str	r3, [r2, #88]	; 0x58
 8001b60:	4b22      	ldr	r3, [pc, #136]	; (8001bec <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001b62:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001b64:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001b68:	60fb      	str	r3, [r7, #12]
 8001b6a:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8001b6c:	f7ff f9f2 	bl	8000f54 <HAL_PWREx_GetVoltageRange>
 8001b70:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8001b72:	4b1e      	ldr	r3, [pc, #120]	; (8001bec <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001b74:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001b76:	4a1d      	ldr	r2, [pc, #116]	; (8001bec <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001b78:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001b7c:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001b7e:	697b      	ldr	r3, [r7, #20]
 8001b80:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001b84:	d10b      	bne.n	8001b9e <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8001b86:	687b      	ldr	r3, [r7, #4]
 8001b88:	2b80      	cmp	r3, #128	; 0x80
 8001b8a:	d919      	bls.n	8001bc0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8001b8c:	687b      	ldr	r3, [r7, #4]
 8001b8e:	2ba0      	cmp	r3, #160	; 0xa0
 8001b90:	d902      	bls.n	8001b98 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8001b92:	2302      	movs	r3, #2
 8001b94:	613b      	str	r3, [r7, #16]
 8001b96:	e013      	b.n	8001bc0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8001b98:	2301      	movs	r3, #1
 8001b9a:	613b      	str	r3, [r7, #16]
 8001b9c:	e010      	b.n	8001bc0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8001b9e:	687b      	ldr	r3, [r7, #4]
 8001ba0:	2b80      	cmp	r3, #128	; 0x80
 8001ba2:	d902      	bls.n	8001baa <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8001ba4:	2303      	movs	r3, #3
 8001ba6:	613b      	str	r3, [r7, #16]
 8001ba8:	e00a      	b.n	8001bc0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8001baa:	687b      	ldr	r3, [r7, #4]
 8001bac:	2b80      	cmp	r3, #128	; 0x80
 8001bae:	d102      	bne.n	8001bb6 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8001bb0:	2302      	movs	r3, #2
 8001bb2:	613b      	str	r3, [r7, #16]
 8001bb4:	e004      	b.n	8001bc0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8001bb6:	687b      	ldr	r3, [r7, #4]
 8001bb8:	2b70      	cmp	r3, #112	; 0x70
 8001bba:	d101      	bne.n	8001bc0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8001bbc:	2301      	movs	r3, #1
 8001bbe:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8001bc0:	4b0b      	ldr	r3, [pc, #44]	; (8001bf0 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8001bc2:	681b      	ldr	r3, [r3, #0]
 8001bc4:	f023 0207 	bic.w	r2, r3, #7
 8001bc8:	4909      	ldr	r1, [pc, #36]	; (8001bf0 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8001bca:	693b      	ldr	r3, [r7, #16]
 8001bcc:	4313      	orrs	r3, r2
 8001bce:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8001bd0:	4b07      	ldr	r3, [pc, #28]	; (8001bf0 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8001bd2:	681b      	ldr	r3, [r3, #0]
 8001bd4:	f003 0307 	and.w	r3, r3, #7
 8001bd8:	693a      	ldr	r2, [r7, #16]
 8001bda:	429a      	cmp	r2, r3
 8001bdc:	d001      	beq.n	8001be2 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8001bde:	2301      	movs	r3, #1
 8001be0:	e000      	b.n	8001be4 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8001be2:	2300      	movs	r3, #0
}
 8001be4:	4618      	mov	r0, r3
 8001be6:	3718      	adds	r7, #24
 8001be8:	46bd      	mov	sp, r7
 8001bea:	bd80      	pop	{r7, pc}
 8001bec:	40021000 	.word	0x40021000
 8001bf0:	40022000 	.word	0x40022000

08001bf4 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8001bf4:	b580      	push	{r7, lr}
 8001bf6:	b086      	sub	sp, #24
 8001bf8:	af00      	add	r7, sp, #0
 8001bfa:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8001bfc:	2300      	movs	r3, #0
 8001bfe:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8001c00:	2300      	movs	r3, #0
 8001c02:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8001c04:	687b      	ldr	r3, [r7, #4]
 8001c06:	681b      	ldr	r3, [r3, #0]
 8001c08:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001c0c:	2b00      	cmp	r3, #0
 8001c0e:	d041      	beq.n	8001c94 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8001c14:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8001c18:	d02a      	beq.n	8001c70 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 8001c1a:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8001c1e:	d824      	bhi.n	8001c6a <HAL_RCCEx_PeriphCLKConfig+0x76>
 8001c20:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8001c24:	d008      	beq.n	8001c38 <HAL_RCCEx_PeriphCLKConfig+0x44>
 8001c26:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8001c2a:	d81e      	bhi.n	8001c6a <HAL_RCCEx_PeriphCLKConfig+0x76>
 8001c2c:	2b00      	cmp	r3, #0
 8001c2e:	d00a      	beq.n	8001c46 <HAL_RCCEx_PeriphCLKConfig+0x52>
 8001c30:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001c34:	d010      	beq.n	8001c58 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8001c36:	e018      	b.n	8001c6a <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8001c38:	4b86      	ldr	r3, [pc, #536]	; (8001e54 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001c3a:	68db      	ldr	r3, [r3, #12]
 8001c3c:	4a85      	ldr	r2, [pc, #532]	; (8001e54 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001c3e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001c42:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8001c44:	e015      	b.n	8001c72 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8001c46:	687b      	ldr	r3, [r7, #4]
 8001c48:	3304      	adds	r3, #4
 8001c4a:	2100      	movs	r1, #0
 8001c4c:	4618      	mov	r0, r3
 8001c4e:	f000 fabb 	bl	80021c8 <RCCEx_PLLSAI1_Config>
 8001c52:	4603      	mov	r3, r0
 8001c54:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8001c56:	e00c      	b.n	8001c72 <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	3320      	adds	r3, #32
 8001c5c:	2100      	movs	r1, #0
 8001c5e:	4618      	mov	r0, r3
 8001c60:	f000 fba6 	bl	80023b0 <RCCEx_PLLSAI2_Config>
 8001c64:	4603      	mov	r3, r0
 8001c66:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8001c68:	e003      	b.n	8001c72 <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8001c6a:	2301      	movs	r3, #1
 8001c6c:	74fb      	strb	r3, [r7, #19]
      break;
 8001c6e:	e000      	b.n	8001c72 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8001c70:	bf00      	nop
    }

    if(ret == HAL_OK)
 8001c72:	7cfb      	ldrb	r3, [r7, #19]
 8001c74:	2b00      	cmp	r3, #0
 8001c76:	d10b      	bne.n	8001c90 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8001c78:	4b76      	ldr	r3, [pc, #472]	; (8001e54 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001c7a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001c7e:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8001c82:	687b      	ldr	r3, [r7, #4]
 8001c84:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8001c86:	4973      	ldr	r1, [pc, #460]	; (8001e54 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001c88:	4313      	orrs	r3, r2
 8001c8a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8001c8e:	e001      	b.n	8001c94 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8001c90:	7cfb      	ldrb	r3, [r7, #19]
 8001c92:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8001c94:	687b      	ldr	r3, [r7, #4]
 8001c96:	681b      	ldr	r3, [r3, #0]
 8001c98:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001c9c:	2b00      	cmp	r3, #0
 8001c9e:	d041      	beq.n	8001d24 <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8001ca4:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8001ca8:	d02a      	beq.n	8001d00 <HAL_RCCEx_PeriphCLKConfig+0x10c>
 8001caa:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8001cae:	d824      	bhi.n	8001cfa <HAL_RCCEx_PeriphCLKConfig+0x106>
 8001cb0:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8001cb4:	d008      	beq.n	8001cc8 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8001cb6:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8001cba:	d81e      	bhi.n	8001cfa <HAL_RCCEx_PeriphCLKConfig+0x106>
 8001cbc:	2b00      	cmp	r3, #0
 8001cbe:	d00a      	beq.n	8001cd6 <HAL_RCCEx_PeriphCLKConfig+0xe2>
 8001cc0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001cc4:	d010      	beq.n	8001ce8 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8001cc6:	e018      	b.n	8001cfa <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8001cc8:	4b62      	ldr	r3, [pc, #392]	; (8001e54 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001cca:	68db      	ldr	r3, [r3, #12]
 8001ccc:	4a61      	ldr	r2, [pc, #388]	; (8001e54 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001cce:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001cd2:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8001cd4:	e015      	b.n	8001d02 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8001cd6:	687b      	ldr	r3, [r7, #4]
 8001cd8:	3304      	adds	r3, #4
 8001cda:	2100      	movs	r1, #0
 8001cdc:	4618      	mov	r0, r3
 8001cde:	f000 fa73 	bl	80021c8 <RCCEx_PLLSAI1_Config>
 8001ce2:	4603      	mov	r3, r0
 8001ce4:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8001ce6:	e00c      	b.n	8001d02 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8001ce8:	687b      	ldr	r3, [r7, #4]
 8001cea:	3320      	adds	r3, #32
 8001cec:	2100      	movs	r1, #0
 8001cee:	4618      	mov	r0, r3
 8001cf0:	f000 fb5e 	bl	80023b0 <RCCEx_PLLSAI2_Config>
 8001cf4:	4603      	mov	r3, r0
 8001cf6:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8001cf8:	e003      	b.n	8001d02 <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8001cfa:	2301      	movs	r3, #1
 8001cfc:	74fb      	strb	r3, [r7, #19]
      break;
 8001cfe:	e000      	b.n	8001d02 <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 8001d00:	bf00      	nop
    }

    if(ret == HAL_OK)
 8001d02:	7cfb      	ldrb	r3, [r7, #19]
 8001d04:	2b00      	cmp	r3, #0
 8001d06:	d10b      	bne.n	8001d20 <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8001d08:	4b52      	ldr	r3, [pc, #328]	; (8001e54 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001d0a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001d0e:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8001d12:	687b      	ldr	r3, [r7, #4]
 8001d14:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8001d16:	494f      	ldr	r1, [pc, #316]	; (8001e54 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001d18:	4313      	orrs	r3, r2
 8001d1a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8001d1e:	e001      	b.n	8001d24 <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8001d20:	7cfb      	ldrb	r3, [r7, #19]
 8001d22:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8001d24:	687b      	ldr	r3, [r7, #4]
 8001d26:	681b      	ldr	r3, [r3, #0]
 8001d28:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001d2c:	2b00      	cmp	r3, #0
 8001d2e:	f000 80a0 	beq.w	8001e72 <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001d32:	2300      	movs	r3, #0
 8001d34:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8001d36:	4b47      	ldr	r3, [pc, #284]	; (8001e54 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001d38:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001d3a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001d3e:	2b00      	cmp	r3, #0
 8001d40:	d101      	bne.n	8001d46 <HAL_RCCEx_PeriphCLKConfig+0x152>
 8001d42:	2301      	movs	r3, #1
 8001d44:	e000      	b.n	8001d48 <HAL_RCCEx_PeriphCLKConfig+0x154>
 8001d46:	2300      	movs	r3, #0
 8001d48:	2b00      	cmp	r3, #0
 8001d4a:	d00d      	beq.n	8001d68 <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001d4c:	4b41      	ldr	r3, [pc, #260]	; (8001e54 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001d4e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001d50:	4a40      	ldr	r2, [pc, #256]	; (8001e54 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001d52:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001d56:	6593      	str	r3, [r2, #88]	; 0x58
 8001d58:	4b3e      	ldr	r3, [pc, #248]	; (8001e54 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001d5a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001d5c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001d60:	60bb      	str	r3, [r7, #8]
 8001d62:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001d64:	2301      	movs	r3, #1
 8001d66:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001d68:	4b3b      	ldr	r3, [pc, #236]	; (8001e58 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8001d6a:	681b      	ldr	r3, [r3, #0]
 8001d6c:	4a3a      	ldr	r2, [pc, #232]	; (8001e58 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8001d6e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001d72:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8001d74:	f7fe fdfc 	bl	8000970 <HAL_GetTick>
 8001d78:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8001d7a:	e009      	b.n	8001d90 <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001d7c:	f7fe fdf8 	bl	8000970 <HAL_GetTick>
 8001d80:	4602      	mov	r2, r0
 8001d82:	68fb      	ldr	r3, [r7, #12]
 8001d84:	1ad3      	subs	r3, r2, r3
 8001d86:	2b02      	cmp	r3, #2
 8001d88:	d902      	bls.n	8001d90 <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 8001d8a:	2303      	movs	r3, #3
 8001d8c:	74fb      	strb	r3, [r7, #19]
        break;
 8001d8e:	e005      	b.n	8001d9c <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8001d90:	4b31      	ldr	r3, [pc, #196]	; (8001e58 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8001d92:	681b      	ldr	r3, [r3, #0]
 8001d94:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001d98:	2b00      	cmp	r3, #0
 8001d9a:	d0ef      	beq.n	8001d7c <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 8001d9c:	7cfb      	ldrb	r3, [r7, #19]
 8001d9e:	2b00      	cmp	r3, #0
 8001da0:	d15c      	bne.n	8001e5c <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8001da2:	4b2c      	ldr	r3, [pc, #176]	; (8001e54 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001da4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001da8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001dac:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8001dae:	697b      	ldr	r3, [r7, #20]
 8001db0:	2b00      	cmp	r3, #0
 8001db2:	d01f      	beq.n	8001df4 <HAL_RCCEx_PeriphCLKConfig+0x200>
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8001dba:	697a      	ldr	r2, [r7, #20]
 8001dbc:	429a      	cmp	r2, r3
 8001dbe:	d019      	beq.n	8001df4 <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8001dc0:	4b24      	ldr	r3, [pc, #144]	; (8001e54 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001dc2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001dc6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001dca:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8001dcc:	4b21      	ldr	r3, [pc, #132]	; (8001e54 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001dce:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001dd2:	4a20      	ldr	r2, [pc, #128]	; (8001e54 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001dd4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001dd8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8001ddc:	4b1d      	ldr	r3, [pc, #116]	; (8001e54 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001dde:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001de2:	4a1c      	ldr	r2, [pc, #112]	; (8001e54 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001de4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001de8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8001dec:	4a19      	ldr	r2, [pc, #100]	; (8001e54 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001dee:	697b      	ldr	r3, [r7, #20]
 8001df0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8001df4:	697b      	ldr	r3, [r7, #20]
 8001df6:	f003 0301 	and.w	r3, r3, #1
 8001dfa:	2b00      	cmp	r3, #0
 8001dfc:	d016      	beq.n	8001e2c <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001dfe:	f7fe fdb7 	bl	8000970 <HAL_GetTick>
 8001e02:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001e04:	e00b      	b.n	8001e1e <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001e06:	f7fe fdb3 	bl	8000970 <HAL_GetTick>
 8001e0a:	4602      	mov	r2, r0
 8001e0c:	68fb      	ldr	r3, [r7, #12]
 8001e0e:	1ad3      	subs	r3, r2, r3
 8001e10:	f241 3288 	movw	r2, #5000	; 0x1388
 8001e14:	4293      	cmp	r3, r2
 8001e16:	d902      	bls.n	8001e1e <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 8001e18:	2303      	movs	r3, #3
 8001e1a:	74fb      	strb	r3, [r7, #19]
            break;
 8001e1c:	e006      	b.n	8001e2c <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001e1e:	4b0d      	ldr	r3, [pc, #52]	; (8001e54 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001e20:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001e24:	f003 0302 	and.w	r3, r3, #2
 8001e28:	2b00      	cmp	r3, #0
 8001e2a:	d0ec      	beq.n	8001e06 <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 8001e2c:	7cfb      	ldrb	r3, [r7, #19]
 8001e2e:	2b00      	cmp	r3, #0
 8001e30:	d10c      	bne.n	8001e4c <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8001e32:	4b08      	ldr	r3, [pc, #32]	; (8001e54 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001e34:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001e38:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8001e42:	4904      	ldr	r1, [pc, #16]	; (8001e54 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001e44:	4313      	orrs	r3, r2
 8001e46:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8001e4a:	e009      	b.n	8001e60 <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8001e4c:	7cfb      	ldrb	r3, [r7, #19]
 8001e4e:	74bb      	strb	r3, [r7, #18]
 8001e50:	e006      	b.n	8001e60 <HAL_RCCEx_PeriphCLKConfig+0x26c>
 8001e52:	bf00      	nop
 8001e54:	40021000 	.word	0x40021000
 8001e58:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8001e5c:	7cfb      	ldrb	r3, [r7, #19]
 8001e5e:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001e60:	7c7b      	ldrb	r3, [r7, #17]
 8001e62:	2b01      	cmp	r3, #1
 8001e64:	d105      	bne.n	8001e72 <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001e66:	4b9e      	ldr	r3, [pc, #632]	; (80020e0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8001e68:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001e6a:	4a9d      	ldr	r2, [pc, #628]	; (80020e0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8001e6c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001e70:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	681b      	ldr	r3, [r3, #0]
 8001e76:	f003 0301 	and.w	r3, r3, #1
 8001e7a:	2b00      	cmp	r3, #0
 8001e7c:	d00a      	beq.n	8001e94 <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8001e7e:	4b98      	ldr	r3, [pc, #608]	; (80020e0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8001e80:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001e84:	f023 0203 	bic.w	r2, r3, #3
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001e8c:	4994      	ldr	r1, [pc, #592]	; (80020e0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8001e8e:	4313      	orrs	r3, r2
 8001e90:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	681b      	ldr	r3, [r3, #0]
 8001e98:	f003 0302 	and.w	r3, r3, #2
 8001e9c:	2b00      	cmp	r3, #0
 8001e9e:	d00a      	beq.n	8001eb6 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8001ea0:	4b8f      	ldr	r3, [pc, #572]	; (80020e0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8001ea2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001ea6:	f023 020c 	bic.w	r2, r3, #12
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001eae:	498c      	ldr	r1, [pc, #560]	; (80020e0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8001eb0:	4313      	orrs	r3, r2
 8001eb2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	681b      	ldr	r3, [r3, #0]
 8001eba:	f003 0304 	and.w	r3, r3, #4
 8001ebe:	2b00      	cmp	r3, #0
 8001ec0:	d00a      	beq.n	8001ed8 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8001ec2:	4b87      	ldr	r3, [pc, #540]	; (80020e0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8001ec4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001ec8:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ed0:	4983      	ldr	r1, [pc, #524]	; (80020e0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8001ed2:	4313      	orrs	r3, r2
 8001ed4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	681b      	ldr	r3, [r3, #0]
 8001edc:	f003 0308 	and.w	r3, r3, #8
 8001ee0:	2b00      	cmp	r3, #0
 8001ee2:	d00a      	beq.n	8001efa <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8001ee4:	4b7e      	ldr	r3, [pc, #504]	; (80020e0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8001ee6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001eea:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001ef2:	497b      	ldr	r1, [pc, #492]	; (80020e0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8001ef4:	4313      	orrs	r3, r2
 8001ef6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	681b      	ldr	r3, [r3, #0]
 8001efe:	f003 0310 	and.w	r3, r3, #16
 8001f02:	2b00      	cmp	r3, #0
 8001f04:	d00a      	beq.n	8001f1c <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8001f06:	4b76      	ldr	r3, [pc, #472]	; (80020e0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8001f08:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001f0c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001f14:	4972      	ldr	r1, [pc, #456]	; (80020e0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8001f16:	4313      	orrs	r3, r2
 8001f18:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	681b      	ldr	r3, [r3, #0]
 8001f20:	f003 0320 	and.w	r3, r3, #32
 8001f24:	2b00      	cmp	r3, #0
 8001f26:	d00a      	beq.n	8001f3e <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8001f28:	4b6d      	ldr	r3, [pc, #436]	; (80020e0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8001f2a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001f2e:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001f36:	496a      	ldr	r1, [pc, #424]	; (80020e0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8001f38:	4313      	orrs	r3, r2
 8001f3a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	681b      	ldr	r3, [r3, #0]
 8001f42:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001f46:	2b00      	cmp	r3, #0
 8001f48:	d00a      	beq.n	8001f60 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8001f4a:	4b65      	ldr	r3, [pc, #404]	; (80020e0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8001f4c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001f50:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001f58:	4961      	ldr	r1, [pc, #388]	; (80020e0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8001f5a:	4313      	orrs	r3, r2
 8001f5c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	681b      	ldr	r3, [r3, #0]
 8001f64:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001f68:	2b00      	cmp	r3, #0
 8001f6a:	d00a      	beq.n	8001f82 <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8001f6c:	4b5c      	ldr	r3, [pc, #368]	; (80020e0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8001f6e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001f72:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001f7a:	4959      	ldr	r1, [pc, #356]	; (80020e0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8001f7c:	4313      	orrs	r3, r2
 8001f7e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	681b      	ldr	r3, [r3, #0]
 8001f86:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001f8a:	2b00      	cmp	r3, #0
 8001f8c:	d00a      	beq.n	8001fa4 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8001f8e:	4b54      	ldr	r3, [pc, #336]	; (80020e0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8001f90:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001f94:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001f9c:	4950      	ldr	r1, [pc, #320]	; (80020e0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8001f9e:	4313      	orrs	r3, r2
 8001fa0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	681b      	ldr	r3, [r3, #0]
 8001fa8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001fac:	2b00      	cmp	r3, #0
 8001fae:	d00a      	beq.n	8001fc6 <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8001fb0:	4b4b      	ldr	r3, [pc, #300]	; (80020e0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8001fb2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001fb6:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001fbe:	4948      	ldr	r1, [pc, #288]	; (80020e0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8001fc0:	4313      	orrs	r3, r2
 8001fc2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	681b      	ldr	r3, [r3, #0]
 8001fca:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001fce:	2b00      	cmp	r3, #0
 8001fd0:	d00a      	beq.n	8001fe8 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8001fd2:	4b43      	ldr	r3, [pc, #268]	; (80020e0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8001fd4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001fd8:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001fe0:	493f      	ldr	r1, [pc, #252]	; (80020e0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8001fe2:	4313      	orrs	r3, r2
 8001fe4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	681b      	ldr	r3, [r3, #0]
 8001fec:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001ff0:	2b00      	cmp	r3, #0
 8001ff2:	d028      	beq.n	8002046 <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8001ff4:	4b3a      	ldr	r3, [pc, #232]	; (80020e0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8001ff6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001ffa:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002002:	4937      	ldr	r1, [pc, #220]	; (80020e0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002004:	4313      	orrs	r3, r2
 8002006:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 800200a:	687b      	ldr	r3, [r7, #4]
 800200c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800200e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002012:	d106      	bne.n	8002022 <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002014:	4b32      	ldr	r3, [pc, #200]	; (80020e0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002016:	68db      	ldr	r3, [r3, #12]
 8002018:	4a31      	ldr	r2, [pc, #196]	; (80020e0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800201a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800201e:	60d3      	str	r3, [r2, #12]
 8002020:	e011      	b.n	8002046 <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002026:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800202a:	d10c      	bne.n	8002046 <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	3304      	adds	r3, #4
 8002030:	2101      	movs	r1, #1
 8002032:	4618      	mov	r0, r3
 8002034:	f000 f8c8 	bl	80021c8 <RCCEx_PLLSAI1_Config>
 8002038:	4603      	mov	r3, r0
 800203a:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 800203c:	7cfb      	ldrb	r3, [r7, #19]
 800203e:	2b00      	cmp	r3, #0
 8002040:	d001      	beq.n	8002046 <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 8002042:	7cfb      	ldrb	r3, [r7, #19]
 8002044:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	681b      	ldr	r3, [r3, #0]
 800204a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800204e:	2b00      	cmp	r3, #0
 8002050:	d028      	beq.n	80020a4 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8002052:	4b23      	ldr	r3, [pc, #140]	; (80020e0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002054:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002058:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002060:	491f      	ldr	r1, [pc, #124]	; (80020e0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002062:	4313      	orrs	r3, r2
 8002064:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800206c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002070:	d106      	bne.n	8002080 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002072:	4b1b      	ldr	r3, [pc, #108]	; (80020e0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002074:	68db      	ldr	r3, [r3, #12]
 8002076:	4a1a      	ldr	r2, [pc, #104]	; (80020e0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002078:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800207c:	60d3      	str	r3, [r2, #12]
 800207e:	e011      	b.n	80020a4 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002084:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002088:	d10c      	bne.n	80020a4 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	3304      	adds	r3, #4
 800208e:	2101      	movs	r1, #1
 8002090:	4618      	mov	r0, r3
 8002092:	f000 f899 	bl	80021c8 <RCCEx_PLLSAI1_Config>
 8002096:	4603      	mov	r3, r0
 8002098:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800209a:	7cfb      	ldrb	r3, [r7, #19]
 800209c:	2b00      	cmp	r3, #0
 800209e:	d001      	beq.n	80020a4 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 80020a0:	7cfb      	ldrb	r3, [r7, #19]
 80020a2:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	681b      	ldr	r3, [r3, #0]
 80020a8:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80020ac:	2b00      	cmp	r3, #0
 80020ae:	d02b      	beq.n	8002108 <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80020b0:	4b0b      	ldr	r3, [pc, #44]	; (80020e0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80020b2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80020b6:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80020be:	4908      	ldr	r1, [pc, #32]	; (80020e0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80020c0:	4313      	orrs	r3, r2
 80020c2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80020ca:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80020ce:	d109      	bne.n	80020e4 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80020d0:	4b03      	ldr	r3, [pc, #12]	; (80020e0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80020d2:	68db      	ldr	r3, [r3, #12]
 80020d4:	4a02      	ldr	r2, [pc, #8]	; (80020e0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80020d6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80020da:	60d3      	str	r3, [r2, #12]
 80020dc:	e014      	b.n	8002108 <HAL_RCCEx_PeriphCLKConfig+0x514>
 80020de:	bf00      	nop
 80020e0:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80020e8:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80020ec:	d10c      	bne.n	8002108 <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	3304      	adds	r3, #4
 80020f2:	2101      	movs	r1, #1
 80020f4:	4618      	mov	r0, r3
 80020f6:	f000 f867 	bl	80021c8 <RCCEx_PLLSAI1_Config>
 80020fa:	4603      	mov	r3, r0
 80020fc:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80020fe:	7cfb      	ldrb	r3, [r7, #19]
 8002100:	2b00      	cmp	r3, #0
 8002102:	d001      	beq.n	8002108 <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 8002104:	7cfb      	ldrb	r3, [r7, #19]
 8002106:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	681b      	ldr	r3, [r3, #0]
 800210c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002110:	2b00      	cmp	r3, #0
 8002112:	d02f      	beq.n	8002174 <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8002114:	4b2b      	ldr	r3, [pc, #172]	; (80021c4 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002116:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800211a:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002122:	4928      	ldr	r1, [pc, #160]	; (80021c4 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002124:	4313      	orrs	r3, r2
 8002126:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800212e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8002132:	d10d      	bne.n	8002150 <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	3304      	adds	r3, #4
 8002138:	2102      	movs	r1, #2
 800213a:	4618      	mov	r0, r3
 800213c:	f000 f844 	bl	80021c8 <RCCEx_PLLSAI1_Config>
 8002140:	4603      	mov	r3, r0
 8002142:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002144:	7cfb      	ldrb	r3, [r7, #19]
 8002146:	2b00      	cmp	r3, #0
 8002148:	d014      	beq.n	8002174 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 800214a:	7cfb      	ldrb	r3, [r7, #19]
 800214c:	74bb      	strb	r3, [r7, #18]
 800214e:	e011      	b.n	8002174 <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002154:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002158:	d10c      	bne.n	8002174 <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	3320      	adds	r3, #32
 800215e:	2102      	movs	r1, #2
 8002160:	4618      	mov	r0, r3
 8002162:	f000 f925 	bl	80023b0 <RCCEx_PLLSAI2_Config>
 8002166:	4603      	mov	r3, r0
 8002168:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800216a:	7cfb      	ldrb	r3, [r7, #19]
 800216c:	2b00      	cmp	r3, #0
 800216e:	d001      	beq.n	8002174 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8002170:	7cfb      	ldrb	r3, [r7, #19]
 8002172:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	681b      	ldr	r3, [r3, #0]
 8002178:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800217c:	2b00      	cmp	r3, #0
 800217e:	d00a      	beq.n	8002196 <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8002180:	4b10      	ldr	r3, [pc, #64]	; (80021c4 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002182:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002186:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800218e:	490d      	ldr	r1, [pc, #52]	; (80021c4 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002190:	4313      	orrs	r3, r2
 8002192:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	681b      	ldr	r3, [r3, #0]
 800219a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800219e:	2b00      	cmp	r3, #0
 80021a0:	d00b      	beq.n	80021ba <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80021a2:	4b08      	ldr	r3, [pc, #32]	; (80021c4 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80021a4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80021a8:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80021b2:	4904      	ldr	r1, [pc, #16]	; (80021c4 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80021b4:	4313      	orrs	r3, r2
 80021b6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 80021ba:	7cbb      	ldrb	r3, [r7, #18]
}
 80021bc:	4618      	mov	r0, r3
 80021be:	3718      	adds	r7, #24
 80021c0:	46bd      	mov	sp, r7
 80021c2:	bd80      	pop	{r7, pc}
 80021c4:	40021000 	.word	0x40021000

080021c8 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 80021c8:	b580      	push	{r7, lr}
 80021ca:	b084      	sub	sp, #16
 80021cc:	af00      	add	r7, sp, #0
 80021ce:	6078      	str	r0, [r7, #4]
 80021d0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80021d2:	2300      	movs	r3, #0
 80021d4:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80021d6:	4b75      	ldr	r3, [pc, #468]	; (80023ac <RCCEx_PLLSAI1_Config+0x1e4>)
 80021d8:	68db      	ldr	r3, [r3, #12]
 80021da:	f003 0303 	and.w	r3, r3, #3
 80021de:	2b00      	cmp	r3, #0
 80021e0:	d018      	beq.n	8002214 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 80021e2:	4b72      	ldr	r3, [pc, #456]	; (80023ac <RCCEx_PLLSAI1_Config+0x1e4>)
 80021e4:	68db      	ldr	r3, [r3, #12]
 80021e6:	f003 0203 	and.w	r2, r3, #3
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	681b      	ldr	r3, [r3, #0]
 80021ee:	429a      	cmp	r2, r3
 80021f0:	d10d      	bne.n	800220e <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	681b      	ldr	r3, [r3, #0]
       ||
 80021f6:	2b00      	cmp	r3, #0
 80021f8:	d009      	beq.n	800220e <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 80021fa:	4b6c      	ldr	r3, [pc, #432]	; (80023ac <RCCEx_PLLSAI1_Config+0x1e4>)
 80021fc:	68db      	ldr	r3, [r3, #12]
 80021fe:	091b      	lsrs	r3, r3, #4
 8002200:	f003 0307 	and.w	r3, r3, #7
 8002204:	1c5a      	adds	r2, r3, #1
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	685b      	ldr	r3, [r3, #4]
       ||
 800220a:	429a      	cmp	r2, r3
 800220c:	d047      	beq.n	800229e <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 800220e:	2301      	movs	r3, #1
 8002210:	73fb      	strb	r3, [r7, #15]
 8002212:	e044      	b.n	800229e <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	681b      	ldr	r3, [r3, #0]
 8002218:	2b03      	cmp	r3, #3
 800221a:	d018      	beq.n	800224e <RCCEx_PLLSAI1_Config+0x86>
 800221c:	2b03      	cmp	r3, #3
 800221e:	d825      	bhi.n	800226c <RCCEx_PLLSAI1_Config+0xa4>
 8002220:	2b01      	cmp	r3, #1
 8002222:	d002      	beq.n	800222a <RCCEx_PLLSAI1_Config+0x62>
 8002224:	2b02      	cmp	r3, #2
 8002226:	d009      	beq.n	800223c <RCCEx_PLLSAI1_Config+0x74>
 8002228:	e020      	b.n	800226c <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 800222a:	4b60      	ldr	r3, [pc, #384]	; (80023ac <RCCEx_PLLSAI1_Config+0x1e4>)
 800222c:	681b      	ldr	r3, [r3, #0]
 800222e:	f003 0302 	and.w	r3, r3, #2
 8002232:	2b00      	cmp	r3, #0
 8002234:	d11d      	bne.n	8002272 <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 8002236:	2301      	movs	r3, #1
 8002238:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800223a:	e01a      	b.n	8002272 <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 800223c:	4b5b      	ldr	r3, [pc, #364]	; (80023ac <RCCEx_PLLSAI1_Config+0x1e4>)
 800223e:	681b      	ldr	r3, [r3, #0]
 8002240:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002244:	2b00      	cmp	r3, #0
 8002246:	d116      	bne.n	8002276 <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8002248:	2301      	movs	r3, #1
 800224a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800224c:	e013      	b.n	8002276 <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 800224e:	4b57      	ldr	r3, [pc, #348]	; (80023ac <RCCEx_PLLSAI1_Config+0x1e4>)
 8002250:	681b      	ldr	r3, [r3, #0]
 8002252:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002256:	2b00      	cmp	r3, #0
 8002258:	d10f      	bne.n	800227a <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 800225a:	4b54      	ldr	r3, [pc, #336]	; (80023ac <RCCEx_PLLSAI1_Config+0x1e4>)
 800225c:	681b      	ldr	r3, [r3, #0]
 800225e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002262:	2b00      	cmp	r3, #0
 8002264:	d109      	bne.n	800227a <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 8002266:	2301      	movs	r3, #1
 8002268:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800226a:	e006      	b.n	800227a <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 800226c:	2301      	movs	r3, #1
 800226e:	73fb      	strb	r3, [r7, #15]
      break;
 8002270:	e004      	b.n	800227c <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8002272:	bf00      	nop
 8002274:	e002      	b.n	800227c <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8002276:	bf00      	nop
 8002278:	e000      	b.n	800227c <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800227a:	bf00      	nop
    }

    if(status == HAL_OK)
 800227c:	7bfb      	ldrb	r3, [r7, #15]
 800227e:	2b00      	cmp	r3, #0
 8002280:	d10d      	bne.n	800229e <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8002282:	4b4a      	ldr	r3, [pc, #296]	; (80023ac <RCCEx_PLLSAI1_Config+0x1e4>)
 8002284:	68db      	ldr	r3, [r3, #12]
 8002286:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	6819      	ldr	r1, [r3, #0]
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	685b      	ldr	r3, [r3, #4]
 8002292:	3b01      	subs	r3, #1
 8002294:	011b      	lsls	r3, r3, #4
 8002296:	430b      	orrs	r3, r1
 8002298:	4944      	ldr	r1, [pc, #272]	; (80023ac <RCCEx_PLLSAI1_Config+0x1e4>)
 800229a:	4313      	orrs	r3, r2
 800229c:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 800229e:	7bfb      	ldrb	r3, [r7, #15]
 80022a0:	2b00      	cmp	r3, #0
 80022a2:	d17d      	bne.n	80023a0 <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 80022a4:	4b41      	ldr	r3, [pc, #260]	; (80023ac <RCCEx_PLLSAI1_Config+0x1e4>)
 80022a6:	681b      	ldr	r3, [r3, #0]
 80022a8:	4a40      	ldr	r2, [pc, #256]	; (80023ac <RCCEx_PLLSAI1_Config+0x1e4>)
 80022aa:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80022ae:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80022b0:	f7fe fb5e 	bl	8000970 <HAL_GetTick>
 80022b4:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80022b6:	e009      	b.n	80022cc <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80022b8:	f7fe fb5a 	bl	8000970 <HAL_GetTick>
 80022bc:	4602      	mov	r2, r0
 80022be:	68bb      	ldr	r3, [r7, #8]
 80022c0:	1ad3      	subs	r3, r2, r3
 80022c2:	2b02      	cmp	r3, #2
 80022c4:	d902      	bls.n	80022cc <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 80022c6:	2303      	movs	r3, #3
 80022c8:	73fb      	strb	r3, [r7, #15]
        break;
 80022ca:	e005      	b.n	80022d8 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80022cc:	4b37      	ldr	r3, [pc, #220]	; (80023ac <RCCEx_PLLSAI1_Config+0x1e4>)
 80022ce:	681b      	ldr	r3, [r3, #0]
 80022d0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80022d4:	2b00      	cmp	r3, #0
 80022d6:	d1ef      	bne.n	80022b8 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 80022d8:	7bfb      	ldrb	r3, [r7, #15]
 80022da:	2b00      	cmp	r3, #0
 80022dc:	d160      	bne.n	80023a0 <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 80022de:	683b      	ldr	r3, [r7, #0]
 80022e0:	2b00      	cmp	r3, #0
 80022e2:	d111      	bne.n	8002308 <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80022e4:	4b31      	ldr	r3, [pc, #196]	; (80023ac <RCCEx_PLLSAI1_Config+0x1e4>)
 80022e6:	691b      	ldr	r3, [r3, #16]
 80022e8:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 80022ec:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80022f0:	687a      	ldr	r2, [r7, #4]
 80022f2:	6892      	ldr	r2, [r2, #8]
 80022f4:	0211      	lsls	r1, r2, #8
 80022f6:	687a      	ldr	r2, [r7, #4]
 80022f8:	68d2      	ldr	r2, [r2, #12]
 80022fa:	0912      	lsrs	r2, r2, #4
 80022fc:	0452      	lsls	r2, r2, #17
 80022fe:	430a      	orrs	r2, r1
 8002300:	492a      	ldr	r1, [pc, #168]	; (80023ac <RCCEx_PLLSAI1_Config+0x1e4>)
 8002302:	4313      	orrs	r3, r2
 8002304:	610b      	str	r3, [r1, #16]
 8002306:	e027      	b.n	8002358 <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8002308:	683b      	ldr	r3, [r7, #0]
 800230a:	2b01      	cmp	r3, #1
 800230c:	d112      	bne.n	8002334 <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800230e:	4b27      	ldr	r3, [pc, #156]	; (80023ac <RCCEx_PLLSAI1_Config+0x1e4>)
 8002310:	691b      	ldr	r3, [r3, #16]
 8002312:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 8002316:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 800231a:	687a      	ldr	r2, [r7, #4]
 800231c:	6892      	ldr	r2, [r2, #8]
 800231e:	0211      	lsls	r1, r2, #8
 8002320:	687a      	ldr	r2, [r7, #4]
 8002322:	6912      	ldr	r2, [r2, #16]
 8002324:	0852      	lsrs	r2, r2, #1
 8002326:	3a01      	subs	r2, #1
 8002328:	0552      	lsls	r2, r2, #21
 800232a:	430a      	orrs	r2, r1
 800232c:	491f      	ldr	r1, [pc, #124]	; (80023ac <RCCEx_PLLSAI1_Config+0x1e4>)
 800232e:	4313      	orrs	r3, r2
 8002330:	610b      	str	r3, [r1, #16]
 8002332:	e011      	b.n	8002358 <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002334:	4b1d      	ldr	r3, [pc, #116]	; (80023ac <RCCEx_PLLSAI1_Config+0x1e4>)
 8002336:	691b      	ldr	r3, [r3, #16]
 8002338:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 800233c:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8002340:	687a      	ldr	r2, [r7, #4]
 8002342:	6892      	ldr	r2, [r2, #8]
 8002344:	0211      	lsls	r1, r2, #8
 8002346:	687a      	ldr	r2, [r7, #4]
 8002348:	6952      	ldr	r2, [r2, #20]
 800234a:	0852      	lsrs	r2, r2, #1
 800234c:	3a01      	subs	r2, #1
 800234e:	0652      	lsls	r2, r2, #25
 8002350:	430a      	orrs	r2, r1
 8002352:	4916      	ldr	r1, [pc, #88]	; (80023ac <RCCEx_PLLSAI1_Config+0x1e4>)
 8002354:	4313      	orrs	r3, r2
 8002356:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8002358:	4b14      	ldr	r3, [pc, #80]	; (80023ac <RCCEx_PLLSAI1_Config+0x1e4>)
 800235a:	681b      	ldr	r3, [r3, #0]
 800235c:	4a13      	ldr	r2, [pc, #76]	; (80023ac <RCCEx_PLLSAI1_Config+0x1e4>)
 800235e:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8002362:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002364:	f7fe fb04 	bl	8000970 <HAL_GetTick>
 8002368:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 800236a:	e009      	b.n	8002380 <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800236c:	f7fe fb00 	bl	8000970 <HAL_GetTick>
 8002370:	4602      	mov	r2, r0
 8002372:	68bb      	ldr	r3, [r7, #8]
 8002374:	1ad3      	subs	r3, r2, r3
 8002376:	2b02      	cmp	r3, #2
 8002378:	d902      	bls.n	8002380 <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 800237a:	2303      	movs	r3, #3
 800237c:	73fb      	strb	r3, [r7, #15]
          break;
 800237e:	e005      	b.n	800238c <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8002380:	4b0a      	ldr	r3, [pc, #40]	; (80023ac <RCCEx_PLLSAI1_Config+0x1e4>)
 8002382:	681b      	ldr	r3, [r3, #0]
 8002384:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002388:	2b00      	cmp	r3, #0
 800238a:	d0ef      	beq.n	800236c <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 800238c:	7bfb      	ldrb	r3, [r7, #15]
 800238e:	2b00      	cmp	r3, #0
 8002390:	d106      	bne.n	80023a0 <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8002392:	4b06      	ldr	r3, [pc, #24]	; (80023ac <RCCEx_PLLSAI1_Config+0x1e4>)
 8002394:	691a      	ldr	r2, [r3, #16]
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	699b      	ldr	r3, [r3, #24]
 800239a:	4904      	ldr	r1, [pc, #16]	; (80023ac <RCCEx_PLLSAI1_Config+0x1e4>)
 800239c:	4313      	orrs	r3, r2
 800239e:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 80023a0:	7bfb      	ldrb	r3, [r7, #15]
}
 80023a2:	4618      	mov	r0, r3
 80023a4:	3710      	adds	r7, #16
 80023a6:	46bd      	mov	sp, r7
 80023a8:	bd80      	pop	{r7, pc}
 80023aa:	bf00      	nop
 80023ac:	40021000 	.word	0x40021000

080023b0 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 80023b0:	b580      	push	{r7, lr}
 80023b2:	b084      	sub	sp, #16
 80023b4:	af00      	add	r7, sp, #0
 80023b6:	6078      	str	r0, [r7, #4]
 80023b8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80023ba:	2300      	movs	r3, #0
 80023bc:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80023be:	4b6a      	ldr	r3, [pc, #424]	; (8002568 <RCCEx_PLLSAI2_Config+0x1b8>)
 80023c0:	68db      	ldr	r3, [r3, #12]
 80023c2:	f003 0303 	and.w	r3, r3, #3
 80023c6:	2b00      	cmp	r3, #0
 80023c8:	d018      	beq.n	80023fc <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 80023ca:	4b67      	ldr	r3, [pc, #412]	; (8002568 <RCCEx_PLLSAI2_Config+0x1b8>)
 80023cc:	68db      	ldr	r3, [r3, #12]
 80023ce:	f003 0203 	and.w	r2, r3, #3
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	681b      	ldr	r3, [r3, #0]
 80023d6:	429a      	cmp	r2, r3
 80023d8:	d10d      	bne.n	80023f6 <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	681b      	ldr	r3, [r3, #0]
       ||
 80023de:	2b00      	cmp	r3, #0
 80023e0:	d009      	beq.n	80023f6 <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 80023e2:	4b61      	ldr	r3, [pc, #388]	; (8002568 <RCCEx_PLLSAI2_Config+0x1b8>)
 80023e4:	68db      	ldr	r3, [r3, #12]
 80023e6:	091b      	lsrs	r3, r3, #4
 80023e8:	f003 0307 	and.w	r3, r3, #7
 80023ec:	1c5a      	adds	r2, r3, #1
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	685b      	ldr	r3, [r3, #4]
       ||
 80023f2:	429a      	cmp	r2, r3
 80023f4:	d047      	beq.n	8002486 <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 80023f6:	2301      	movs	r3, #1
 80023f8:	73fb      	strb	r3, [r7, #15]
 80023fa:	e044      	b.n	8002486 <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	681b      	ldr	r3, [r3, #0]
 8002400:	2b03      	cmp	r3, #3
 8002402:	d018      	beq.n	8002436 <RCCEx_PLLSAI2_Config+0x86>
 8002404:	2b03      	cmp	r3, #3
 8002406:	d825      	bhi.n	8002454 <RCCEx_PLLSAI2_Config+0xa4>
 8002408:	2b01      	cmp	r3, #1
 800240a:	d002      	beq.n	8002412 <RCCEx_PLLSAI2_Config+0x62>
 800240c:	2b02      	cmp	r3, #2
 800240e:	d009      	beq.n	8002424 <RCCEx_PLLSAI2_Config+0x74>
 8002410:	e020      	b.n	8002454 <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8002412:	4b55      	ldr	r3, [pc, #340]	; (8002568 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002414:	681b      	ldr	r3, [r3, #0]
 8002416:	f003 0302 	and.w	r3, r3, #2
 800241a:	2b00      	cmp	r3, #0
 800241c:	d11d      	bne.n	800245a <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 800241e:	2301      	movs	r3, #1
 8002420:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002422:	e01a      	b.n	800245a <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8002424:	4b50      	ldr	r3, [pc, #320]	; (8002568 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002426:	681b      	ldr	r3, [r3, #0]
 8002428:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800242c:	2b00      	cmp	r3, #0
 800242e:	d116      	bne.n	800245e <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 8002430:	2301      	movs	r3, #1
 8002432:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002434:	e013      	b.n	800245e <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8002436:	4b4c      	ldr	r3, [pc, #304]	; (8002568 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002438:	681b      	ldr	r3, [r3, #0]
 800243a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800243e:	2b00      	cmp	r3, #0
 8002440:	d10f      	bne.n	8002462 <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8002442:	4b49      	ldr	r3, [pc, #292]	; (8002568 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002444:	681b      	ldr	r3, [r3, #0]
 8002446:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800244a:	2b00      	cmp	r3, #0
 800244c:	d109      	bne.n	8002462 <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 800244e:	2301      	movs	r3, #1
 8002450:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8002452:	e006      	b.n	8002462 <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 8002454:	2301      	movs	r3, #1
 8002456:	73fb      	strb	r3, [r7, #15]
      break;
 8002458:	e004      	b.n	8002464 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 800245a:	bf00      	nop
 800245c:	e002      	b.n	8002464 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 800245e:	bf00      	nop
 8002460:	e000      	b.n	8002464 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8002462:	bf00      	nop
    }

    if(status == HAL_OK)
 8002464:	7bfb      	ldrb	r3, [r7, #15]
 8002466:	2b00      	cmp	r3, #0
 8002468:	d10d      	bne.n	8002486 <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 800246a:	4b3f      	ldr	r3, [pc, #252]	; (8002568 <RCCEx_PLLSAI2_Config+0x1b8>)
 800246c:	68db      	ldr	r3, [r3, #12]
 800246e:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	6819      	ldr	r1, [r3, #0]
 8002476:	687b      	ldr	r3, [r7, #4]
 8002478:	685b      	ldr	r3, [r3, #4]
 800247a:	3b01      	subs	r3, #1
 800247c:	011b      	lsls	r3, r3, #4
 800247e:	430b      	orrs	r3, r1
 8002480:	4939      	ldr	r1, [pc, #228]	; (8002568 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002482:	4313      	orrs	r3, r2
 8002484:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8002486:	7bfb      	ldrb	r3, [r7, #15]
 8002488:	2b00      	cmp	r3, #0
 800248a:	d167      	bne.n	800255c <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 800248c:	4b36      	ldr	r3, [pc, #216]	; (8002568 <RCCEx_PLLSAI2_Config+0x1b8>)
 800248e:	681b      	ldr	r3, [r3, #0]
 8002490:	4a35      	ldr	r2, [pc, #212]	; (8002568 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002492:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002496:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002498:	f7fe fa6a 	bl	8000970 <HAL_GetTick>
 800249c:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 800249e:	e009      	b.n	80024b4 <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 80024a0:	f7fe fa66 	bl	8000970 <HAL_GetTick>
 80024a4:	4602      	mov	r2, r0
 80024a6:	68bb      	ldr	r3, [r7, #8]
 80024a8:	1ad3      	subs	r3, r2, r3
 80024aa:	2b02      	cmp	r3, #2
 80024ac:	d902      	bls.n	80024b4 <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 80024ae:	2303      	movs	r3, #3
 80024b0:	73fb      	strb	r3, [r7, #15]
        break;
 80024b2:	e005      	b.n	80024c0 <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 80024b4:	4b2c      	ldr	r3, [pc, #176]	; (8002568 <RCCEx_PLLSAI2_Config+0x1b8>)
 80024b6:	681b      	ldr	r3, [r3, #0]
 80024b8:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80024bc:	2b00      	cmp	r3, #0
 80024be:	d1ef      	bne.n	80024a0 <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 80024c0:	7bfb      	ldrb	r3, [r7, #15]
 80024c2:	2b00      	cmp	r3, #0
 80024c4:	d14a      	bne.n	800255c <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 80024c6:	683b      	ldr	r3, [r7, #0]
 80024c8:	2b00      	cmp	r3, #0
 80024ca:	d111      	bne.n	80024f0 <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 80024cc:	4b26      	ldr	r3, [pc, #152]	; (8002568 <RCCEx_PLLSAI2_Config+0x1b8>)
 80024ce:	695b      	ldr	r3, [r3, #20]
 80024d0:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 80024d4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80024d8:	687a      	ldr	r2, [r7, #4]
 80024da:	6892      	ldr	r2, [r2, #8]
 80024dc:	0211      	lsls	r1, r2, #8
 80024de:	687a      	ldr	r2, [r7, #4]
 80024e0:	68d2      	ldr	r2, [r2, #12]
 80024e2:	0912      	lsrs	r2, r2, #4
 80024e4:	0452      	lsls	r2, r2, #17
 80024e6:	430a      	orrs	r2, r1
 80024e8:	491f      	ldr	r1, [pc, #124]	; (8002568 <RCCEx_PLLSAI2_Config+0x1b8>)
 80024ea:	4313      	orrs	r3, r2
 80024ec:	614b      	str	r3, [r1, #20]
 80024ee:	e011      	b.n	8002514 <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 80024f0:	4b1d      	ldr	r3, [pc, #116]	; (8002568 <RCCEx_PLLSAI2_Config+0x1b8>)
 80024f2:	695b      	ldr	r3, [r3, #20]
 80024f4:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 80024f8:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80024fc:	687a      	ldr	r2, [r7, #4]
 80024fe:	6892      	ldr	r2, [r2, #8]
 8002500:	0211      	lsls	r1, r2, #8
 8002502:	687a      	ldr	r2, [r7, #4]
 8002504:	6912      	ldr	r2, [r2, #16]
 8002506:	0852      	lsrs	r2, r2, #1
 8002508:	3a01      	subs	r2, #1
 800250a:	0652      	lsls	r2, r2, #25
 800250c:	430a      	orrs	r2, r1
 800250e:	4916      	ldr	r1, [pc, #88]	; (8002568 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002510:	4313      	orrs	r3, r2
 8002512:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8002514:	4b14      	ldr	r3, [pc, #80]	; (8002568 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002516:	681b      	ldr	r3, [r3, #0]
 8002518:	4a13      	ldr	r2, [pc, #76]	; (8002568 <RCCEx_PLLSAI2_Config+0x1b8>)
 800251a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800251e:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002520:	f7fe fa26 	bl	8000970 <HAL_GetTick>
 8002524:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8002526:	e009      	b.n	800253c <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8002528:	f7fe fa22 	bl	8000970 <HAL_GetTick>
 800252c:	4602      	mov	r2, r0
 800252e:	68bb      	ldr	r3, [r7, #8]
 8002530:	1ad3      	subs	r3, r2, r3
 8002532:	2b02      	cmp	r3, #2
 8002534:	d902      	bls.n	800253c <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 8002536:	2303      	movs	r3, #3
 8002538:	73fb      	strb	r3, [r7, #15]
          break;
 800253a:	e005      	b.n	8002548 <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 800253c:	4b0a      	ldr	r3, [pc, #40]	; (8002568 <RCCEx_PLLSAI2_Config+0x1b8>)
 800253e:	681b      	ldr	r3, [r3, #0]
 8002540:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002544:	2b00      	cmp	r3, #0
 8002546:	d0ef      	beq.n	8002528 <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 8002548:	7bfb      	ldrb	r3, [r7, #15]
 800254a:	2b00      	cmp	r3, #0
 800254c:	d106      	bne.n	800255c <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 800254e:	4b06      	ldr	r3, [pc, #24]	; (8002568 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002550:	695a      	ldr	r2, [r3, #20]
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	695b      	ldr	r3, [r3, #20]
 8002556:	4904      	ldr	r1, [pc, #16]	; (8002568 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002558:	4313      	orrs	r3, r2
 800255a:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 800255c:	7bfb      	ldrb	r3, [r7, #15]
}
 800255e:	4618      	mov	r0, r3
 8002560:	3710      	adds	r7, #16
 8002562:	46bd      	mov	sp, r7
 8002564:	bd80      	pop	{r7, pc}
 8002566:	bf00      	nop
 8002568:	40021000 	.word	0x40021000

0800256c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800256c:	b580      	push	{r7, lr}
 800256e:	b082      	sub	sp, #8
 8002570:	af00      	add	r7, sp, #0
 8002572:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	2b00      	cmp	r3, #0
 8002578:	d101      	bne.n	800257e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800257a:	2301      	movs	r3, #1
 800257c:	e040      	b.n	8002600 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002582:	2b00      	cmp	r3, #0
 8002584:	d106      	bne.n	8002594 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	2200      	movs	r2, #0
 800258a:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800258e:	6878      	ldr	r0, [r7, #4]
 8002590:	f7fe f8bc 	bl	800070c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	2224      	movs	r2, #36	; 0x24
 8002598:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	681b      	ldr	r3, [r3, #0]
 800259e:	681a      	ldr	r2, [r3, #0]
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	681b      	ldr	r3, [r3, #0]
 80025a4:	f022 0201 	bic.w	r2, r2, #1
 80025a8:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80025aa:	6878      	ldr	r0, [r7, #4]
 80025ac:	f000 f82c 	bl	8002608 <UART_SetConfig>
 80025b0:	4603      	mov	r3, r0
 80025b2:	2b01      	cmp	r3, #1
 80025b4:	d101      	bne.n	80025ba <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 80025b6:	2301      	movs	r3, #1
 80025b8:	e022      	b.n	8002600 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80025be:	2b00      	cmp	r3, #0
 80025c0:	d002      	beq.n	80025c8 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 80025c2:	6878      	ldr	r0, [r7, #4]
 80025c4:	f000 faaa 	bl	8002b1c <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	681b      	ldr	r3, [r3, #0]
 80025cc:	685a      	ldr	r2, [r3, #4]
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	681b      	ldr	r3, [r3, #0]
 80025d2:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80025d6:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	681b      	ldr	r3, [r3, #0]
 80025dc:	689a      	ldr	r2, [r3, #8]
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	681b      	ldr	r3, [r3, #0]
 80025e2:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80025e6:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	681b      	ldr	r3, [r3, #0]
 80025ec:	681a      	ldr	r2, [r3, #0]
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	681b      	ldr	r3, [r3, #0]
 80025f2:	f042 0201 	orr.w	r2, r2, #1
 80025f6:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80025f8:	6878      	ldr	r0, [r7, #4]
 80025fa:	f000 fb31 	bl	8002c60 <UART_CheckIdleState>
 80025fe:	4603      	mov	r3, r0
}
 8002600:	4618      	mov	r0, r3
 8002602:	3708      	adds	r7, #8
 8002604:	46bd      	mov	sp, r7
 8002606:	bd80      	pop	{r7, pc}

08002608 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002608:	b5b0      	push	{r4, r5, r7, lr}
 800260a:	b088      	sub	sp, #32
 800260c:	af00      	add	r7, sp, #0
 800260e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8002610:	2300      	movs	r3, #0
 8002612:	76bb      	strb	r3, [r7, #26]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	689a      	ldr	r2, [r3, #8]
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	691b      	ldr	r3, [r3, #16]
 800261c:	431a      	orrs	r2, r3
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	695b      	ldr	r3, [r3, #20]
 8002622:	431a      	orrs	r2, r3
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	69db      	ldr	r3, [r3, #28]
 8002628:	4313      	orrs	r3, r2
 800262a:	61fb      	str	r3, [r7, #28]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	681b      	ldr	r3, [r3, #0]
 8002630:	681a      	ldr	r2, [r3, #0]
 8002632:	4bad      	ldr	r3, [pc, #692]	; (80028e8 <UART_SetConfig+0x2e0>)
 8002634:	4013      	ands	r3, r2
 8002636:	687a      	ldr	r2, [r7, #4]
 8002638:	6812      	ldr	r2, [r2, #0]
 800263a:	69f9      	ldr	r1, [r7, #28]
 800263c:	430b      	orrs	r3, r1
 800263e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	681b      	ldr	r3, [r3, #0]
 8002644:	685b      	ldr	r3, [r3, #4]
 8002646:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	68da      	ldr	r2, [r3, #12]
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	681b      	ldr	r3, [r3, #0]
 8002652:	430a      	orrs	r2, r1
 8002654:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	699b      	ldr	r3, [r3, #24]
 800265a:	61fb      	str	r3, [r7, #28]

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	681b      	ldr	r3, [r3, #0]
 8002660:	4aa2      	ldr	r2, [pc, #648]	; (80028ec <UART_SetConfig+0x2e4>)
 8002662:	4293      	cmp	r3, r2
 8002664:	d004      	beq.n	8002670 <UART_SetConfig+0x68>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	6a1b      	ldr	r3, [r3, #32]
 800266a:	69fa      	ldr	r2, [r7, #28]
 800266c:	4313      	orrs	r3, r2
 800266e:	61fb      	str	r3, [r7, #28]
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	681b      	ldr	r3, [r3, #0]
 8002674:	689b      	ldr	r3, [r3, #8]
 8002676:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	681b      	ldr	r3, [r3, #0]
 800267e:	69fa      	ldr	r2, [r7, #28]
 8002680:	430a      	orrs	r2, r1
 8002682:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	681b      	ldr	r3, [r3, #0]
 8002688:	4a99      	ldr	r2, [pc, #612]	; (80028f0 <UART_SetConfig+0x2e8>)
 800268a:	4293      	cmp	r3, r2
 800268c:	d121      	bne.n	80026d2 <UART_SetConfig+0xca>
 800268e:	4b99      	ldr	r3, [pc, #612]	; (80028f4 <UART_SetConfig+0x2ec>)
 8002690:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002694:	f003 0303 	and.w	r3, r3, #3
 8002698:	2b03      	cmp	r3, #3
 800269a:	d817      	bhi.n	80026cc <UART_SetConfig+0xc4>
 800269c:	a201      	add	r2, pc, #4	; (adr r2, 80026a4 <UART_SetConfig+0x9c>)
 800269e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80026a2:	bf00      	nop
 80026a4:	080026b5 	.word	0x080026b5
 80026a8:	080026c1 	.word	0x080026c1
 80026ac:	080026bb 	.word	0x080026bb
 80026b0:	080026c7 	.word	0x080026c7
 80026b4:	2301      	movs	r3, #1
 80026b6:	76fb      	strb	r3, [r7, #27]
 80026b8:	e0e7      	b.n	800288a <UART_SetConfig+0x282>
 80026ba:	2302      	movs	r3, #2
 80026bc:	76fb      	strb	r3, [r7, #27]
 80026be:	e0e4      	b.n	800288a <UART_SetConfig+0x282>
 80026c0:	2304      	movs	r3, #4
 80026c2:	76fb      	strb	r3, [r7, #27]
 80026c4:	e0e1      	b.n	800288a <UART_SetConfig+0x282>
 80026c6:	2308      	movs	r3, #8
 80026c8:	76fb      	strb	r3, [r7, #27]
 80026ca:	e0de      	b.n	800288a <UART_SetConfig+0x282>
 80026cc:	2310      	movs	r3, #16
 80026ce:	76fb      	strb	r3, [r7, #27]
 80026d0:	e0db      	b.n	800288a <UART_SetConfig+0x282>
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	681b      	ldr	r3, [r3, #0]
 80026d6:	4a88      	ldr	r2, [pc, #544]	; (80028f8 <UART_SetConfig+0x2f0>)
 80026d8:	4293      	cmp	r3, r2
 80026da:	d132      	bne.n	8002742 <UART_SetConfig+0x13a>
 80026dc:	4b85      	ldr	r3, [pc, #532]	; (80028f4 <UART_SetConfig+0x2ec>)
 80026de:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80026e2:	f003 030c 	and.w	r3, r3, #12
 80026e6:	2b0c      	cmp	r3, #12
 80026e8:	d828      	bhi.n	800273c <UART_SetConfig+0x134>
 80026ea:	a201      	add	r2, pc, #4	; (adr r2, 80026f0 <UART_SetConfig+0xe8>)
 80026ec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80026f0:	08002725 	.word	0x08002725
 80026f4:	0800273d 	.word	0x0800273d
 80026f8:	0800273d 	.word	0x0800273d
 80026fc:	0800273d 	.word	0x0800273d
 8002700:	08002731 	.word	0x08002731
 8002704:	0800273d 	.word	0x0800273d
 8002708:	0800273d 	.word	0x0800273d
 800270c:	0800273d 	.word	0x0800273d
 8002710:	0800272b 	.word	0x0800272b
 8002714:	0800273d 	.word	0x0800273d
 8002718:	0800273d 	.word	0x0800273d
 800271c:	0800273d 	.word	0x0800273d
 8002720:	08002737 	.word	0x08002737
 8002724:	2300      	movs	r3, #0
 8002726:	76fb      	strb	r3, [r7, #27]
 8002728:	e0af      	b.n	800288a <UART_SetConfig+0x282>
 800272a:	2302      	movs	r3, #2
 800272c:	76fb      	strb	r3, [r7, #27]
 800272e:	e0ac      	b.n	800288a <UART_SetConfig+0x282>
 8002730:	2304      	movs	r3, #4
 8002732:	76fb      	strb	r3, [r7, #27]
 8002734:	e0a9      	b.n	800288a <UART_SetConfig+0x282>
 8002736:	2308      	movs	r3, #8
 8002738:	76fb      	strb	r3, [r7, #27]
 800273a:	e0a6      	b.n	800288a <UART_SetConfig+0x282>
 800273c:	2310      	movs	r3, #16
 800273e:	76fb      	strb	r3, [r7, #27]
 8002740:	e0a3      	b.n	800288a <UART_SetConfig+0x282>
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	681b      	ldr	r3, [r3, #0]
 8002746:	4a6d      	ldr	r2, [pc, #436]	; (80028fc <UART_SetConfig+0x2f4>)
 8002748:	4293      	cmp	r3, r2
 800274a:	d120      	bne.n	800278e <UART_SetConfig+0x186>
 800274c:	4b69      	ldr	r3, [pc, #420]	; (80028f4 <UART_SetConfig+0x2ec>)
 800274e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002752:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8002756:	2b30      	cmp	r3, #48	; 0x30
 8002758:	d013      	beq.n	8002782 <UART_SetConfig+0x17a>
 800275a:	2b30      	cmp	r3, #48	; 0x30
 800275c:	d814      	bhi.n	8002788 <UART_SetConfig+0x180>
 800275e:	2b20      	cmp	r3, #32
 8002760:	d009      	beq.n	8002776 <UART_SetConfig+0x16e>
 8002762:	2b20      	cmp	r3, #32
 8002764:	d810      	bhi.n	8002788 <UART_SetConfig+0x180>
 8002766:	2b00      	cmp	r3, #0
 8002768:	d002      	beq.n	8002770 <UART_SetConfig+0x168>
 800276a:	2b10      	cmp	r3, #16
 800276c:	d006      	beq.n	800277c <UART_SetConfig+0x174>
 800276e:	e00b      	b.n	8002788 <UART_SetConfig+0x180>
 8002770:	2300      	movs	r3, #0
 8002772:	76fb      	strb	r3, [r7, #27]
 8002774:	e089      	b.n	800288a <UART_SetConfig+0x282>
 8002776:	2302      	movs	r3, #2
 8002778:	76fb      	strb	r3, [r7, #27]
 800277a:	e086      	b.n	800288a <UART_SetConfig+0x282>
 800277c:	2304      	movs	r3, #4
 800277e:	76fb      	strb	r3, [r7, #27]
 8002780:	e083      	b.n	800288a <UART_SetConfig+0x282>
 8002782:	2308      	movs	r3, #8
 8002784:	76fb      	strb	r3, [r7, #27]
 8002786:	e080      	b.n	800288a <UART_SetConfig+0x282>
 8002788:	2310      	movs	r3, #16
 800278a:	76fb      	strb	r3, [r7, #27]
 800278c:	e07d      	b.n	800288a <UART_SetConfig+0x282>
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	681b      	ldr	r3, [r3, #0]
 8002792:	4a5b      	ldr	r2, [pc, #364]	; (8002900 <UART_SetConfig+0x2f8>)
 8002794:	4293      	cmp	r3, r2
 8002796:	d120      	bne.n	80027da <UART_SetConfig+0x1d2>
 8002798:	4b56      	ldr	r3, [pc, #344]	; (80028f4 <UART_SetConfig+0x2ec>)
 800279a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800279e:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 80027a2:	2bc0      	cmp	r3, #192	; 0xc0
 80027a4:	d013      	beq.n	80027ce <UART_SetConfig+0x1c6>
 80027a6:	2bc0      	cmp	r3, #192	; 0xc0
 80027a8:	d814      	bhi.n	80027d4 <UART_SetConfig+0x1cc>
 80027aa:	2b80      	cmp	r3, #128	; 0x80
 80027ac:	d009      	beq.n	80027c2 <UART_SetConfig+0x1ba>
 80027ae:	2b80      	cmp	r3, #128	; 0x80
 80027b0:	d810      	bhi.n	80027d4 <UART_SetConfig+0x1cc>
 80027b2:	2b00      	cmp	r3, #0
 80027b4:	d002      	beq.n	80027bc <UART_SetConfig+0x1b4>
 80027b6:	2b40      	cmp	r3, #64	; 0x40
 80027b8:	d006      	beq.n	80027c8 <UART_SetConfig+0x1c0>
 80027ba:	e00b      	b.n	80027d4 <UART_SetConfig+0x1cc>
 80027bc:	2300      	movs	r3, #0
 80027be:	76fb      	strb	r3, [r7, #27]
 80027c0:	e063      	b.n	800288a <UART_SetConfig+0x282>
 80027c2:	2302      	movs	r3, #2
 80027c4:	76fb      	strb	r3, [r7, #27]
 80027c6:	e060      	b.n	800288a <UART_SetConfig+0x282>
 80027c8:	2304      	movs	r3, #4
 80027ca:	76fb      	strb	r3, [r7, #27]
 80027cc:	e05d      	b.n	800288a <UART_SetConfig+0x282>
 80027ce:	2308      	movs	r3, #8
 80027d0:	76fb      	strb	r3, [r7, #27]
 80027d2:	e05a      	b.n	800288a <UART_SetConfig+0x282>
 80027d4:	2310      	movs	r3, #16
 80027d6:	76fb      	strb	r3, [r7, #27]
 80027d8:	e057      	b.n	800288a <UART_SetConfig+0x282>
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	681b      	ldr	r3, [r3, #0]
 80027de:	4a49      	ldr	r2, [pc, #292]	; (8002904 <UART_SetConfig+0x2fc>)
 80027e0:	4293      	cmp	r3, r2
 80027e2:	d125      	bne.n	8002830 <UART_SetConfig+0x228>
 80027e4:	4b43      	ldr	r3, [pc, #268]	; (80028f4 <UART_SetConfig+0x2ec>)
 80027e6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80027ea:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80027ee:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80027f2:	d017      	beq.n	8002824 <UART_SetConfig+0x21c>
 80027f4:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80027f8:	d817      	bhi.n	800282a <UART_SetConfig+0x222>
 80027fa:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80027fe:	d00b      	beq.n	8002818 <UART_SetConfig+0x210>
 8002800:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002804:	d811      	bhi.n	800282a <UART_SetConfig+0x222>
 8002806:	2b00      	cmp	r3, #0
 8002808:	d003      	beq.n	8002812 <UART_SetConfig+0x20a>
 800280a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800280e:	d006      	beq.n	800281e <UART_SetConfig+0x216>
 8002810:	e00b      	b.n	800282a <UART_SetConfig+0x222>
 8002812:	2300      	movs	r3, #0
 8002814:	76fb      	strb	r3, [r7, #27]
 8002816:	e038      	b.n	800288a <UART_SetConfig+0x282>
 8002818:	2302      	movs	r3, #2
 800281a:	76fb      	strb	r3, [r7, #27]
 800281c:	e035      	b.n	800288a <UART_SetConfig+0x282>
 800281e:	2304      	movs	r3, #4
 8002820:	76fb      	strb	r3, [r7, #27]
 8002822:	e032      	b.n	800288a <UART_SetConfig+0x282>
 8002824:	2308      	movs	r3, #8
 8002826:	76fb      	strb	r3, [r7, #27]
 8002828:	e02f      	b.n	800288a <UART_SetConfig+0x282>
 800282a:	2310      	movs	r3, #16
 800282c:	76fb      	strb	r3, [r7, #27]
 800282e:	e02c      	b.n	800288a <UART_SetConfig+0x282>
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	681b      	ldr	r3, [r3, #0]
 8002834:	4a2d      	ldr	r2, [pc, #180]	; (80028ec <UART_SetConfig+0x2e4>)
 8002836:	4293      	cmp	r3, r2
 8002838:	d125      	bne.n	8002886 <UART_SetConfig+0x27e>
 800283a:	4b2e      	ldr	r3, [pc, #184]	; (80028f4 <UART_SetConfig+0x2ec>)
 800283c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002840:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8002844:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8002848:	d017      	beq.n	800287a <UART_SetConfig+0x272>
 800284a:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800284e:	d817      	bhi.n	8002880 <UART_SetConfig+0x278>
 8002850:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002854:	d00b      	beq.n	800286e <UART_SetConfig+0x266>
 8002856:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800285a:	d811      	bhi.n	8002880 <UART_SetConfig+0x278>
 800285c:	2b00      	cmp	r3, #0
 800285e:	d003      	beq.n	8002868 <UART_SetConfig+0x260>
 8002860:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002864:	d006      	beq.n	8002874 <UART_SetConfig+0x26c>
 8002866:	e00b      	b.n	8002880 <UART_SetConfig+0x278>
 8002868:	2300      	movs	r3, #0
 800286a:	76fb      	strb	r3, [r7, #27]
 800286c:	e00d      	b.n	800288a <UART_SetConfig+0x282>
 800286e:	2302      	movs	r3, #2
 8002870:	76fb      	strb	r3, [r7, #27]
 8002872:	e00a      	b.n	800288a <UART_SetConfig+0x282>
 8002874:	2304      	movs	r3, #4
 8002876:	76fb      	strb	r3, [r7, #27]
 8002878:	e007      	b.n	800288a <UART_SetConfig+0x282>
 800287a:	2308      	movs	r3, #8
 800287c:	76fb      	strb	r3, [r7, #27]
 800287e:	e004      	b.n	800288a <UART_SetConfig+0x282>
 8002880:	2310      	movs	r3, #16
 8002882:	76fb      	strb	r3, [r7, #27]
 8002884:	e001      	b.n	800288a <UART_SetConfig+0x282>
 8002886:	2310      	movs	r3, #16
 8002888:	76fb      	strb	r3, [r7, #27]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	681b      	ldr	r3, [r3, #0]
 800288e:	4a17      	ldr	r2, [pc, #92]	; (80028ec <UART_SetConfig+0x2e4>)
 8002890:	4293      	cmp	r3, r2
 8002892:	f040 8087 	bne.w	80029a4 <UART_SetConfig+0x39c>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8002896:	7efb      	ldrb	r3, [r7, #27]
 8002898:	2b08      	cmp	r3, #8
 800289a:	d837      	bhi.n	800290c <UART_SetConfig+0x304>
 800289c:	a201      	add	r2, pc, #4	; (adr r2, 80028a4 <UART_SetConfig+0x29c>)
 800289e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80028a2:	bf00      	nop
 80028a4:	080028c9 	.word	0x080028c9
 80028a8:	0800290d 	.word	0x0800290d
 80028ac:	080028d1 	.word	0x080028d1
 80028b0:	0800290d 	.word	0x0800290d
 80028b4:	080028d7 	.word	0x080028d7
 80028b8:	0800290d 	.word	0x0800290d
 80028bc:	0800290d 	.word	0x0800290d
 80028c0:	0800290d 	.word	0x0800290d
 80028c4:	080028df 	.word	0x080028df
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80028c8:	f7ff f908 	bl	8001adc <HAL_RCC_GetPCLK1Freq>
 80028cc:	6178      	str	r0, [r7, #20]
        break;
 80028ce:	e022      	b.n	8002916 <UART_SetConfig+0x30e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80028d0:	4b0d      	ldr	r3, [pc, #52]	; (8002908 <UART_SetConfig+0x300>)
 80028d2:	617b      	str	r3, [r7, #20]
        break;
 80028d4:	e01f      	b.n	8002916 <UART_SetConfig+0x30e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80028d6:	f7ff f869 	bl	80019ac <HAL_RCC_GetSysClockFreq>
 80028da:	6178      	str	r0, [r7, #20]
        break;
 80028dc:	e01b      	b.n	8002916 <UART_SetConfig+0x30e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80028de:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80028e2:	617b      	str	r3, [r7, #20]
        break;
 80028e4:	e017      	b.n	8002916 <UART_SetConfig+0x30e>
 80028e6:	bf00      	nop
 80028e8:	efff69f3 	.word	0xefff69f3
 80028ec:	40008000 	.word	0x40008000
 80028f0:	40013800 	.word	0x40013800
 80028f4:	40021000 	.word	0x40021000
 80028f8:	40004400 	.word	0x40004400
 80028fc:	40004800 	.word	0x40004800
 8002900:	40004c00 	.word	0x40004c00
 8002904:	40005000 	.word	0x40005000
 8002908:	00f42400 	.word	0x00f42400
      default:
        pclk = 0U;
 800290c:	2300      	movs	r3, #0
 800290e:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8002910:	2301      	movs	r3, #1
 8002912:	76bb      	strb	r3, [r7, #26]
        break;
 8002914:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8002916:	697b      	ldr	r3, [r7, #20]
 8002918:	2b00      	cmp	r3, #0
 800291a:	f000 80f1 	beq.w	8002b00 <UART_SetConfig+0x4f8>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	685a      	ldr	r2, [r3, #4]
 8002922:	4613      	mov	r3, r2
 8002924:	005b      	lsls	r3, r3, #1
 8002926:	4413      	add	r3, r2
 8002928:	697a      	ldr	r2, [r7, #20]
 800292a:	429a      	cmp	r2, r3
 800292c:	d305      	bcc.n	800293a <UART_SetConfig+0x332>
          (pclk > (4096U * huart->Init.BaudRate)))
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	685b      	ldr	r3, [r3, #4]
 8002932:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8002934:	697a      	ldr	r2, [r7, #20]
 8002936:	429a      	cmp	r2, r3
 8002938:	d902      	bls.n	8002940 <UART_SetConfig+0x338>
      {
        ret = HAL_ERROR;
 800293a:	2301      	movs	r3, #1
 800293c:	76bb      	strb	r3, [r7, #26]
 800293e:	e0df      	b.n	8002b00 <UART_SetConfig+0x4f8>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8002940:	697b      	ldr	r3, [r7, #20]
 8002942:	4618      	mov	r0, r3
 8002944:	f04f 0100 	mov.w	r1, #0
 8002948:	f04f 0200 	mov.w	r2, #0
 800294c:	f04f 0300 	mov.w	r3, #0
 8002950:	020b      	lsls	r3, r1, #8
 8002952:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8002956:	0202      	lsls	r2, r0, #8
 8002958:	6879      	ldr	r1, [r7, #4]
 800295a:	6849      	ldr	r1, [r1, #4]
 800295c:	0849      	lsrs	r1, r1, #1
 800295e:	4608      	mov	r0, r1
 8002960:	f04f 0100 	mov.w	r1, #0
 8002964:	1814      	adds	r4, r2, r0
 8002966:	eb43 0501 	adc.w	r5, r3, r1
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	685b      	ldr	r3, [r3, #4]
 800296e:	461a      	mov	r2, r3
 8002970:	f04f 0300 	mov.w	r3, #0
 8002974:	4620      	mov	r0, r4
 8002976:	4629      	mov	r1, r5
 8002978:	f7fd fc26 	bl	80001c8 <__aeabi_uldivmod>
 800297c:	4602      	mov	r2, r0
 800297e:	460b      	mov	r3, r1
 8002980:	4613      	mov	r3, r2
 8002982:	613b      	str	r3, [r7, #16]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8002984:	693b      	ldr	r3, [r7, #16]
 8002986:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800298a:	d308      	bcc.n	800299e <UART_SetConfig+0x396>
 800298c:	693b      	ldr	r3, [r7, #16]
 800298e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002992:	d204      	bcs.n	800299e <UART_SetConfig+0x396>
        {
          huart->Instance->BRR = usartdiv;
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	681b      	ldr	r3, [r3, #0]
 8002998:	693a      	ldr	r2, [r7, #16]
 800299a:	60da      	str	r2, [r3, #12]
 800299c:	e0b0      	b.n	8002b00 <UART_SetConfig+0x4f8>
        }
        else
        {
          ret = HAL_ERROR;
 800299e:	2301      	movs	r3, #1
 80029a0:	76bb      	strb	r3, [r7, #26]
 80029a2:	e0ad      	b.n	8002b00 <UART_SetConfig+0x4f8>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	69db      	ldr	r3, [r3, #28]
 80029a8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80029ac:	d15b      	bne.n	8002a66 <UART_SetConfig+0x45e>
  {
    switch (clocksource)
 80029ae:	7efb      	ldrb	r3, [r7, #27]
 80029b0:	2b08      	cmp	r3, #8
 80029b2:	d828      	bhi.n	8002a06 <UART_SetConfig+0x3fe>
 80029b4:	a201      	add	r2, pc, #4	; (adr r2, 80029bc <UART_SetConfig+0x3b4>)
 80029b6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80029ba:	bf00      	nop
 80029bc:	080029e1 	.word	0x080029e1
 80029c0:	080029e9 	.word	0x080029e9
 80029c4:	080029f1 	.word	0x080029f1
 80029c8:	08002a07 	.word	0x08002a07
 80029cc:	080029f7 	.word	0x080029f7
 80029d0:	08002a07 	.word	0x08002a07
 80029d4:	08002a07 	.word	0x08002a07
 80029d8:	08002a07 	.word	0x08002a07
 80029dc:	080029ff 	.word	0x080029ff
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80029e0:	f7ff f87c 	bl	8001adc <HAL_RCC_GetPCLK1Freq>
 80029e4:	6178      	str	r0, [r7, #20]
        break;
 80029e6:	e013      	b.n	8002a10 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80029e8:	f7ff f88e 	bl	8001b08 <HAL_RCC_GetPCLK2Freq>
 80029ec:	6178      	str	r0, [r7, #20]
        break;
 80029ee:	e00f      	b.n	8002a10 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80029f0:	4b49      	ldr	r3, [pc, #292]	; (8002b18 <UART_SetConfig+0x510>)
 80029f2:	617b      	str	r3, [r7, #20]
        break;
 80029f4:	e00c      	b.n	8002a10 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80029f6:	f7fe ffd9 	bl	80019ac <HAL_RCC_GetSysClockFreq>
 80029fa:	6178      	str	r0, [r7, #20]
        break;
 80029fc:	e008      	b.n	8002a10 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80029fe:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002a02:	617b      	str	r3, [r7, #20]
        break;
 8002a04:	e004      	b.n	8002a10 <UART_SetConfig+0x408>
      default:
        pclk = 0U;
 8002a06:	2300      	movs	r3, #0
 8002a08:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8002a0a:	2301      	movs	r3, #1
 8002a0c:	76bb      	strb	r3, [r7, #26]
        break;
 8002a0e:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8002a10:	697b      	ldr	r3, [r7, #20]
 8002a12:	2b00      	cmp	r3, #0
 8002a14:	d074      	beq.n	8002b00 <UART_SetConfig+0x4f8>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8002a16:	697b      	ldr	r3, [r7, #20]
 8002a18:	005a      	lsls	r2, r3, #1
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	685b      	ldr	r3, [r3, #4]
 8002a1e:	085b      	lsrs	r3, r3, #1
 8002a20:	441a      	add	r2, r3
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	685b      	ldr	r3, [r3, #4]
 8002a26:	fbb2 f3f3 	udiv	r3, r2, r3
 8002a2a:	613b      	str	r3, [r7, #16]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8002a2c:	693b      	ldr	r3, [r7, #16]
 8002a2e:	2b0f      	cmp	r3, #15
 8002a30:	d916      	bls.n	8002a60 <UART_SetConfig+0x458>
 8002a32:	693b      	ldr	r3, [r7, #16]
 8002a34:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002a38:	d212      	bcs.n	8002a60 <UART_SetConfig+0x458>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8002a3a:	693b      	ldr	r3, [r7, #16]
 8002a3c:	b29b      	uxth	r3, r3
 8002a3e:	f023 030f 	bic.w	r3, r3, #15
 8002a42:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8002a44:	693b      	ldr	r3, [r7, #16]
 8002a46:	085b      	lsrs	r3, r3, #1
 8002a48:	b29b      	uxth	r3, r3
 8002a4a:	f003 0307 	and.w	r3, r3, #7
 8002a4e:	b29a      	uxth	r2, r3
 8002a50:	89fb      	ldrh	r3, [r7, #14]
 8002a52:	4313      	orrs	r3, r2
 8002a54:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	681b      	ldr	r3, [r3, #0]
 8002a5a:	89fa      	ldrh	r2, [r7, #14]
 8002a5c:	60da      	str	r2, [r3, #12]
 8002a5e:	e04f      	b.n	8002b00 <UART_SetConfig+0x4f8>
      }
      else
      {
        ret = HAL_ERROR;
 8002a60:	2301      	movs	r3, #1
 8002a62:	76bb      	strb	r3, [r7, #26]
 8002a64:	e04c      	b.n	8002b00 <UART_SetConfig+0x4f8>
      }
    }
  }
  else
  {
    switch (clocksource)
 8002a66:	7efb      	ldrb	r3, [r7, #27]
 8002a68:	2b08      	cmp	r3, #8
 8002a6a:	d828      	bhi.n	8002abe <UART_SetConfig+0x4b6>
 8002a6c:	a201      	add	r2, pc, #4	; (adr r2, 8002a74 <UART_SetConfig+0x46c>)
 8002a6e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002a72:	bf00      	nop
 8002a74:	08002a99 	.word	0x08002a99
 8002a78:	08002aa1 	.word	0x08002aa1
 8002a7c:	08002aa9 	.word	0x08002aa9
 8002a80:	08002abf 	.word	0x08002abf
 8002a84:	08002aaf 	.word	0x08002aaf
 8002a88:	08002abf 	.word	0x08002abf
 8002a8c:	08002abf 	.word	0x08002abf
 8002a90:	08002abf 	.word	0x08002abf
 8002a94:	08002ab7 	.word	0x08002ab7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8002a98:	f7ff f820 	bl	8001adc <HAL_RCC_GetPCLK1Freq>
 8002a9c:	6178      	str	r0, [r7, #20]
        break;
 8002a9e:	e013      	b.n	8002ac8 <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8002aa0:	f7ff f832 	bl	8001b08 <HAL_RCC_GetPCLK2Freq>
 8002aa4:	6178      	str	r0, [r7, #20]
        break;
 8002aa6:	e00f      	b.n	8002ac8 <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8002aa8:	4b1b      	ldr	r3, [pc, #108]	; (8002b18 <UART_SetConfig+0x510>)
 8002aaa:	617b      	str	r3, [r7, #20]
        break;
 8002aac:	e00c      	b.n	8002ac8 <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8002aae:	f7fe ff7d 	bl	80019ac <HAL_RCC_GetSysClockFreq>
 8002ab2:	6178      	str	r0, [r7, #20]
        break;
 8002ab4:	e008      	b.n	8002ac8 <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8002ab6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002aba:	617b      	str	r3, [r7, #20]
        break;
 8002abc:	e004      	b.n	8002ac8 <UART_SetConfig+0x4c0>
      default:
        pclk = 0U;
 8002abe:	2300      	movs	r3, #0
 8002ac0:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8002ac2:	2301      	movs	r3, #1
 8002ac4:	76bb      	strb	r3, [r7, #26]
        break;
 8002ac6:	bf00      	nop
    }

    if (pclk != 0U)
 8002ac8:	697b      	ldr	r3, [r7, #20]
 8002aca:	2b00      	cmp	r3, #0
 8002acc:	d018      	beq.n	8002b00 <UART_SetConfig+0x4f8>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	685b      	ldr	r3, [r3, #4]
 8002ad2:	085a      	lsrs	r2, r3, #1
 8002ad4:	697b      	ldr	r3, [r7, #20]
 8002ad6:	441a      	add	r2, r3
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	685b      	ldr	r3, [r3, #4]
 8002adc:	fbb2 f3f3 	udiv	r3, r2, r3
 8002ae0:	613b      	str	r3, [r7, #16]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8002ae2:	693b      	ldr	r3, [r7, #16]
 8002ae4:	2b0f      	cmp	r3, #15
 8002ae6:	d909      	bls.n	8002afc <UART_SetConfig+0x4f4>
 8002ae8:	693b      	ldr	r3, [r7, #16]
 8002aea:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002aee:	d205      	bcs.n	8002afc <UART_SetConfig+0x4f4>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8002af0:	693b      	ldr	r3, [r7, #16]
 8002af2:	b29a      	uxth	r2, r3
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	681b      	ldr	r3, [r3, #0]
 8002af8:	60da      	str	r2, [r3, #12]
 8002afa:	e001      	b.n	8002b00 <UART_SetConfig+0x4f8>
      }
      else
      {
        ret = HAL_ERROR;
 8002afc:	2301      	movs	r3, #1
 8002afe:	76bb      	strb	r3, [r7, #26]
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	2200      	movs	r2, #0
 8002b04:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	2200      	movs	r2, #0
 8002b0a:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8002b0c:	7ebb      	ldrb	r3, [r7, #26]
}
 8002b0e:	4618      	mov	r0, r3
 8002b10:	3720      	adds	r7, #32
 8002b12:	46bd      	mov	sp, r7
 8002b14:	bdb0      	pop	{r4, r5, r7, pc}
 8002b16:	bf00      	nop
 8002b18:	00f42400 	.word	0x00f42400

08002b1c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8002b1c:	b480      	push	{r7}
 8002b1e:	b083      	sub	sp, #12
 8002b20:	af00      	add	r7, sp, #0
 8002b22:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b28:	f003 0301 	and.w	r3, r3, #1
 8002b2c:	2b00      	cmp	r3, #0
 8002b2e:	d00a      	beq.n	8002b46 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	681b      	ldr	r3, [r3, #0]
 8002b34:	685b      	ldr	r3, [r3, #4]
 8002b36:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	681b      	ldr	r3, [r3, #0]
 8002b42:	430a      	orrs	r2, r1
 8002b44:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b4a:	f003 0302 	and.w	r3, r3, #2
 8002b4e:	2b00      	cmp	r3, #0
 8002b50:	d00a      	beq.n	8002b68 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	681b      	ldr	r3, [r3, #0]
 8002b56:	685b      	ldr	r3, [r3, #4]
 8002b58:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	681b      	ldr	r3, [r3, #0]
 8002b64:	430a      	orrs	r2, r1
 8002b66:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b6c:	f003 0304 	and.w	r3, r3, #4
 8002b70:	2b00      	cmp	r3, #0
 8002b72:	d00a      	beq.n	8002b8a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	681b      	ldr	r3, [r3, #0]
 8002b78:	685b      	ldr	r3, [r3, #4]
 8002b7a:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	681b      	ldr	r3, [r3, #0]
 8002b86:	430a      	orrs	r2, r1
 8002b88:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b8e:	f003 0308 	and.w	r3, r3, #8
 8002b92:	2b00      	cmp	r3, #0
 8002b94:	d00a      	beq.n	8002bac <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	681b      	ldr	r3, [r3, #0]
 8002b9a:	685b      	ldr	r3, [r3, #4]
 8002b9c:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	681b      	ldr	r3, [r3, #0]
 8002ba8:	430a      	orrs	r2, r1
 8002baa:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002bb0:	f003 0310 	and.w	r3, r3, #16
 8002bb4:	2b00      	cmp	r3, #0
 8002bb6:	d00a      	beq.n	8002bce <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	681b      	ldr	r3, [r3, #0]
 8002bbc:	689b      	ldr	r3, [r3, #8]
 8002bbe:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	681b      	ldr	r3, [r3, #0]
 8002bca:	430a      	orrs	r2, r1
 8002bcc:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002bd2:	f003 0320 	and.w	r3, r3, #32
 8002bd6:	2b00      	cmp	r3, #0
 8002bd8:	d00a      	beq.n	8002bf0 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	681b      	ldr	r3, [r3, #0]
 8002bde:	689b      	ldr	r3, [r3, #8]
 8002be0:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	681b      	ldr	r3, [r3, #0]
 8002bec:	430a      	orrs	r2, r1
 8002bee:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002bf4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002bf8:	2b00      	cmp	r3, #0
 8002bfa:	d01a      	beq.n	8002c32 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	681b      	ldr	r3, [r3, #0]
 8002c00:	685b      	ldr	r3, [r3, #4]
 8002c02:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	681b      	ldr	r3, [r3, #0]
 8002c0e:	430a      	orrs	r2, r1
 8002c10:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c16:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002c1a:	d10a      	bne.n	8002c32 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	681b      	ldr	r3, [r3, #0]
 8002c20:	685b      	ldr	r3, [r3, #4]
 8002c22:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	681b      	ldr	r3, [r3, #0]
 8002c2e:	430a      	orrs	r2, r1
 8002c30:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c36:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002c3a:	2b00      	cmp	r3, #0
 8002c3c:	d00a      	beq.n	8002c54 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	681b      	ldr	r3, [r3, #0]
 8002c42:	685b      	ldr	r3, [r3, #4]
 8002c44:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	681b      	ldr	r3, [r3, #0]
 8002c50:	430a      	orrs	r2, r1
 8002c52:	605a      	str	r2, [r3, #4]
  }
}
 8002c54:	bf00      	nop
 8002c56:	370c      	adds	r7, #12
 8002c58:	46bd      	mov	sp, r7
 8002c5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c5e:	4770      	bx	lr

08002c60 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8002c60:	b580      	push	{r7, lr}
 8002c62:	b086      	sub	sp, #24
 8002c64:	af02      	add	r7, sp, #8
 8002c66:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	2200      	movs	r2, #0
 8002c6c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8002c70:	f7fd fe7e 	bl	8000970 <HAL_GetTick>
 8002c74:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	681b      	ldr	r3, [r3, #0]
 8002c7a:	681b      	ldr	r3, [r3, #0]
 8002c7c:	f003 0308 	and.w	r3, r3, #8
 8002c80:	2b08      	cmp	r3, #8
 8002c82:	d10e      	bne.n	8002ca2 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8002c84:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8002c88:	9300      	str	r3, [sp, #0]
 8002c8a:	68fb      	ldr	r3, [r7, #12]
 8002c8c:	2200      	movs	r2, #0
 8002c8e:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8002c92:	6878      	ldr	r0, [r7, #4]
 8002c94:	f000 f82d 	bl	8002cf2 <UART_WaitOnFlagUntilTimeout>
 8002c98:	4603      	mov	r3, r0
 8002c9a:	2b00      	cmp	r3, #0
 8002c9c:	d001      	beq.n	8002ca2 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8002c9e:	2303      	movs	r3, #3
 8002ca0:	e023      	b.n	8002cea <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	681b      	ldr	r3, [r3, #0]
 8002ca6:	681b      	ldr	r3, [r3, #0]
 8002ca8:	f003 0304 	and.w	r3, r3, #4
 8002cac:	2b04      	cmp	r3, #4
 8002cae:	d10e      	bne.n	8002cce <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8002cb0:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8002cb4:	9300      	str	r3, [sp, #0]
 8002cb6:	68fb      	ldr	r3, [r7, #12]
 8002cb8:	2200      	movs	r2, #0
 8002cba:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8002cbe:	6878      	ldr	r0, [r7, #4]
 8002cc0:	f000 f817 	bl	8002cf2 <UART_WaitOnFlagUntilTimeout>
 8002cc4:	4603      	mov	r3, r0
 8002cc6:	2b00      	cmp	r3, #0
 8002cc8:	d001      	beq.n	8002cce <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8002cca:	2303      	movs	r3, #3
 8002ccc:	e00d      	b.n	8002cea <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	2220      	movs	r2, #32
 8002cd2:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	2220      	movs	r2, #32
 8002cd8:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	2200      	movs	r2, #0
 8002cde:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	2200      	movs	r2, #0
 8002ce4:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 8002ce8:	2300      	movs	r3, #0
}
 8002cea:	4618      	mov	r0, r3
 8002cec:	3710      	adds	r7, #16
 8002cee:	46bd      	mov	sp, r7
 8002cf0:	bd80      	pop	{r7, pc}

08002cf2 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8002cf2:	b580      	push	{r7, lr}
 8002cf4:	b09c      	sub	sp, #112	; 0x70
 8002cf6:	af00      	add	r7, sp, #0
 8002cf8:	60f8      	str	r0, [r7, #12]
 8002cfa:	60b9      	str	r1, [r7, #8]
 8002cfc:	603b      	str	r3, [r7, #0]
 8002cfe:	4613      	mov	r3, r2
 8002d00:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002d02:	e0a5      	b.n	8002e50 <UART_WaitOnFlagUntilTimeout+0x15e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002d04:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002d06:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002d0a:	f000 80a1 	beq.w	8002e50 <UART_WaitOnFlagUntilTimeout+0x15e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002d0e:	f7fd fe2f 	bl	8000970 <HAL_GetTick>
 8002d12:	4602      	mov	r2, r0
 8002d14:	683b      	ldr	r3, [r7, #0]
 8002d16:	1ad3      	subs	r3, r2, r3
 8002d18:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8002d1a:	429a      	cmp	r2, r3
 8002d1c:	d302      	bcc.n	8002d24 <UART_WaitOnFlagUntilTimeout+0x32>
 8002d1e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002d20:	2b00      	cmp	r3, #0
 8002d22:	d13e      	bne.n	8002da2 <UART_WaitOnFlagUntilTimeout+0xb0>
           interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                USART_CR1_TXEIE_TXFNFIE));
#else
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8002d24:	68fb      	ldr	r3, [r7, #12]
 8002d26:	681b      	ldr	r3, [r3, #0]
 8002d28:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002d2a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002d2c:	e853 3f00 	ldrex	r3, [r3]
 8002d30:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8002d32:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002d34:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8002d38:	667b      	str	r3, [r7, #100]	; 0x64
 8002d3a:	68fb      	ldr	r3, [r7, #12]
 8002d3c:	681b      	ldr	r3, [r3, #0]
 8002d3e:	461a      	mov	r2, r3
 8002d40:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8002d42:	65fb      	str	r3, [r7, #92]	; 0x5c
 8002d44:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002d46:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8002d48:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8002d4a:	e841 2300 	strex	r3, r2, [r1]
 8002d4e:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8002d50:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002d52:	2b00      	cmp	r3, #0
 8002d54:	d1e6      	bne.n	8002d24 <UART_WaitOnFlagUntilTimeout+0x32>
#endif /* USART_CR1_FIFOEN */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002d56:	68fb      	ldr	r3, [r7, #12]
 8002d58:	681b      	ldr	r3, [r3, #0]
 8002d5a:	3308      	adds	r3, #8
 8002d5c:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002d5e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002d60:	e853 3f00 	ldrex	r3, [r3]
 8002d64:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8002d66:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002d68:	f023 0301 	bic.w	r3, r3, #1
 8002d6c:	663b      	str	r3, [r7, #96]	; 0x60
 8002d6e:	68fb      	ldr	r3, [r7, #12]
 8002d70:	681b      	ldr	r3, [r3, #0]
 8002d72:	3308      	adds	r3, #8
 8002d74:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8002d76:	64ba      	str	r2, [r7, #72]	; 0x48
 8002d78:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002d7a:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8002d7c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8002d7e:	e841 2300 	strex	r3, r2, [r1]
 8002d82:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8002d84:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002d86:	2b00      	cmp	r3, #0
 8002d88:	d1e5      	bne.n	8002d56 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8002d8a:	68fb      	ldr	r3, [r7, #12]
 8002d8c:	2220      	movs	r2, #32
 8002d8e:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8002d90:	68fb      	ldr	r3, [r7, #12]
 8002d92:	2220      	movs	r2, #32
 8002d94:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 8002d96:	68fb      	ldr	r3, [r7, #12]
 8002d98:	2200      	movs	r2, #0
 8002d9a:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 8002d9e:	2303      	movs	r3, #3
 8002da0:	e067      	b.n	8002e72 <UART_WaitOnFlagUntilTimeout+0x180>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8002da2:	68fb      	ldr	r3, [r7, #12]
 8002da4:	681b      	ldr	r3, [r3, #0]
 8002da6:	681b      	ldr	r3, [r3, #0]
 8002da8:	f003 0304 	and.w	r3, r3, #4
 8002dac:	2b00      	cmp	r3, #0
 8002dae:	d04f      	beq.n	8002e50 <UART_WaitOnFlagUntilTimeout+0x15e>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8002db0:	68fb      	ldr	r3, [r7, #12]
 8002db2:	681b      	ldr	r3, [r3, #0]
 8002db4:	69db      	ldr	r3, [r3, #28]
 8002db6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002dba:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002dbe:	d147      	bne.n	8002e50 <UART_WaitOnFlagUntilTimeout+0x15e>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8002dc0:	68fb      	ldr	r3, [r7, #12]
 8002dc2:	681b      	ldr	r3, [r3, #0]
 8002dc4:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002dc8:	621a      	str	r2, [r3, #32]
             interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                  USART_CR1_TXEIE_TXFNFIE));
#else
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8002dca:	68fb      	ldr	r3, [r7, #12]
 8002dcc:	681b      	ldr	r3, [r3, #0]
 8002dce:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002dd0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002dd2:	e853 3f00 	ldrex	r3, [r3]
 8002dd6:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8002dd8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002dda:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8002dde:	66fb      	str	r3, [r7, #108]	; 0x6c
 8002de0:	68fb      	ldr	r3, [r7, #12]
 8002de2:	681b      	ldr	r3, [r3, #0]
 8002de4:	461a      	mov	r2, r3
 8002de6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002de8:	637b      	str	r3, [r7, #52]	; 0x34
 8002dea:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002dec:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8002dee:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002df0:	e841 2300 	strex	r3, r2, [r1]
 8002df4:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8002df6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002df8:	2b00      	cmp	r3, #0
 8002dfa:	d1e6      	bne.n	8002dca <UART_WaitOnFlagUntilTimeout+0xd8>
#endif
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002dfc:	68fb      	ldr	r3, [r7, #12]
 8002dfe:	681b      	ldr	r3, [r3, #0]
 8002e00:	3308      	adds	r3, #8
 8002e02:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002e04:	697b      	ldr	r3, [r7, #20]
 8002e06:	e853 3f00 	ldrex	r3, [r3]
 8002e0a:	613b      	str	r3, [r7, #16]
   return(result);
 8002e0c:	693b      	ldr	r3, [r7, #16]
 8002e0e:	f023 0301 	bic.w	r3, r3, #1
 8002e12:	66bb      	str	r3, [r7, #104]	; 0x68
 8002e14:	68fb      	ldr	r3, [r7, #12]
 8002e16:	681b      	ldr	r3, [r3, #0]
 8002e18:	3308      	adds	r3, #8
 8002e1a:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8002e1c:	623a      	str	r2, [r7, #32]
 8002e1e:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002e20:	69f9      	ldr	r1, [r7, #28]
 8002e22:	6a3a      	ldr	r2, [r7, #32]
 8002e24:	e841 2300 	strex	r3, r2, [r1]
 8002e28:	61bb      	str	r3, [r7, #24]
   return(result);
 8002e2a:	69bb      	ldr	r3, [r7, #24]
 8002e2c:	2b00      	cmp	r3, #0
 8002e2e:	d1e5      	bne.n	8002dfc <UART_WaitOnFlagUntilTimeout+0x10a>

          huart->gState = HAL_UART_STATE_READY;
 8002e30:	68fb      	ldr	r3, [r7, #12]
 8002e32:	2220      	movs	r2, #32
 8002e34:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 8002e36:	68fb      	ldr	r3, [r7, #12]
 8002e38:	2220      	movs	r2, #32
 8002e3a:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8002e3c:	68fb      	ldr	r3, [r7, #12]
 8002e3e:	2220      	movs	r2, #32
 8002e40:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8002e44:	68fb      	ldr	r3, [r7, #12]
 8002e46:	2200      	movs	r2, #0
 8002e48:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 8002e4c:	2303      	movs	r3, #3
 8002e4e:	e010      	b.n	8002e72 <UART_WaitOnFlagUntilTimeout+0x180>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002e50:	68fb      	ldr	r3, [r7, #12]
 8002e52:	681b      	ldr	r3, [r3, #0]
 8002e54:	69da      	ldr	r2, [r3, #28]
 8002e56:	68bb      	ldr	r3, [r7, #8]
 8002e58:	4013      	ands	r3, r2
 8002e5a:	68ba      	ldr	r2, [r7, #8]
 8002e5c:	429a      	cmp	r2, r3
 8002e5e:	bf0c      	ite	eq
 8002e60:	2301      	moveq	r3, #1
 8002e62:	2300      	movne	r3, #0
 8002e64:	b2db      	uxtb	r3, r3
 8002e66:	461a      	mov	r2, r3
 8002e68:	79fb      	ldrb	r3, [r7, #7]
 8002e6a:	429a      	cmp	r2, r3
 8002e6c:	f43f af4a 	beq.w	8002d04 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8002e70:	2300      	movs	r3, #0
}
 8002e72:	4618      	mov	r0, r3
 8002e74:	3770      	adds	r7, #112	; 0x70
 8002e76:	46bd      	mov	sp, r7
 8002e78:	bd80      	pop	{r7, pc}
	...

08002e7c <__libc_init_array>:
 8002e7c:	b570      	push	{r4, r5, r6, lr}
 8002e7e:	4d0d      	ldr	r5, [pc, #52]	; (8002eb4 <__libc_init_array+0x38>)
 8002e80:	4c0d      	ldr	r4, [pc, #52]	; (8002eb8 <__libc_init_array+0x3c>)
 8002e82:	1b64      	subs	r4, r4, r5
 8002e84:	10a4      	asrs	r4, r4, #2
 8002e86:	2600      	movs	r6, #0
 8002e88:	42a6      	cmp	r6, r4
 8002e8a:	d109      	bne.n	8002ea0 <__libc_init_array+0x24>
 8002e8c:	4d0b      	ldr	r5, [pc, #44]	; (8002ebc <__libc_init_array+0x40>)
 8002e8e:	4c0c      	ldr	r4, [pc, #48]	; (8002ec0 <__libc_init_array+0x44>)
 8002e90:	f000 f820 	bl	8002ed4 <_init>
 8002e94:	1b64      	subs	r4, r4, r5
 8002e96:	10a4      	asrs	r4, r4, #2
 8002e98:	2600      	movs	r6, #0
 8002e9a:	42a6      	cmp	r6, r4
 8002e9c:	d105      	bne.n	8002eaa <__libc_init_array+0x2e>
 8002e9e:	bd70      	pop	{r4, r5, r6, pc}
 8002ea0:	f855 3b04 	ldr.w	r3, [r5], #4
 8002ea4:	4798      	blx	r3
 8002ea6:	3601      	adds	r6, #1
 8002ea8:	e7ee      	b.n	8002e88 <__libc_init_array+0xc>
 8002eaa:	f855 3b04 	ldr.w	r3, [r5], #4
 8002eae:	4798      	blx	r3
 8002eb0:	3601      	adds	r6, #1
 8002eb2:	e7f2      	b.n	8002e9a <__libc_init_array+0x1e>
 8002eb4:	08002f3c 	.word	0x08002f3c
 8002eb8:	08002f3c 	.word	0x08002f3c
 8002ebc:	08002f3c 	.word	0x08002f3c
 8002ec0:	08002f40 	.word	0x08002f40

08002ec4 <memset>:
 8002ec4:	4402      	add	r2, r0
 8002ec6:	4603      	mov	r3, r0
 8002ec8:	4293      	cmp	r3, r2
 8002eca:	d100      	bne.n	8002ece <memset+0xa>
 8002ecc:	4770      	bx	lr
 8002ece:	f803 1b01 	strb.w	r1, [r3], #1
 8002ed2:	e7f9      	b.n	8002ec8 <memset+0x4>

08002ed4 <_init>:
 8002ed4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002ed6:	bf00      	nop
 8002ed8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002eda:	bc08      	pop	{r3}
 8002edc:	469e      	mov	lr, r3
 8002ede:	4770      	bx	lr

08002ee0 <_fini>:
 8002ee0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002ee2:	bf00      	nop
 8002ee4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002ee6:	bc08      	pop	{r3}
 8002ee8:	469e      	mov	lr, r3
 8002eea:	4770      	bx	lr
