
Temperature.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004bc4  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000a0  08004d54  08004d54  00014d54  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004df4  08004df4  00020070  2**0
                  CONTENTS
  4 .ARM          00000008  08004df4  08004df4  00014df4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08004dfc  08004dfc  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004dfc  08004dfc  00014dfc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004e00  08004e00  00014e00  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  08004e04  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000010c  20000070  08004e74  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000017c  08004e74  0002017c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001032a  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001d90  00000000  00000000  000303ca  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000ba8  00000000  00000000  00032160  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000af0  00000000  00000000  00032d08  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00026431  00000000  00000000  000337f8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000e676  00000000  00000000  00059c29  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000eaf89  00000000  00000000  0006829f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  00153228  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000034b8  00000000  00000000  0015327c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000070 	.word	0x20000070
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08004d3c 	.word	0x08004d3c

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000074 	.word	0x20000074
 80001cc:	08004d3c 	.word	0x08004d3c

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_dmul>:
 8000280:	b570      	push	{r4, r5, r6, lr}
 8000282:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000286:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800028a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800028e:	bf1d      	ittte	ne
 8000290:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000294:	ea94 0f0c 	teqne	r4, ip
 8000298:	ea95 0f0c 	teqne	r5, ip
 800029c:	f000 f8de 	bleq	800045c <__aeabi_dmul+0x1dc>
 80002a0:	442c      	add	r4, r5
 80002a2:	ea81 0603 	eor.w	r6, r1, r3
 80002a6:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80002aa:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80002ae:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80002b2:	bf18      	it	ne
 80002b4:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80002b8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80002bc:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80002c0:	d038      	beq.n	8000334 <__aeabi_dmul+0xb4>
 80002c2:	fba0 ce02 	umull	ip, lr, r0, r2
 80002c6:	f04f 0500 	mov.w	r5, #0
 80002ca:	fbe1 e502 	umlal	lr, r5, r1, r2
 80002ce:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80002d2:	fbe0 e503 	umlal	lr, r5, r0, r3
 80002d6:	f04f 0600 	mov.w	r6, #0
 80002da:	fbe1 5603 	umlal	r5, r6, r1, r3
 80002de:	f09c 0f00 	teq	ip, #0
 80002e2:	bf18      	it	ne
 80002e4:	f04e 0e01 	orrne.w	lr, lr, #1
 80002e8:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80002ec:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80002f0:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80002f4:	d204      	bcs.n	8000300 <__aeabi_dmul+0x80>
 80002f6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80002fa:	416d      	adcs	r5, r5
 80002fc:	eb46 0606 	adc.w	r6, r6, r6
 8000300:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000304:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000308:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 800030c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000310:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000314:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000318:	bf88      	it	hi
 800031a:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800031e:	d81e      	bhi.n	800035e <__aeabi_dmul+0xde>
 8000320:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8000324:	bf08      	it	eq
 8000326:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800032a:	f150 0000 	adcs.w	r0, r0, #0
 800032e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000332:	bd70      	pop	{r4, r5, r6, pc}
 8000334:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000338:	ea46 0101 	orr.w	r1, r6, r1
 800033c:	ea40 0002 	orr.w	r0, r0, r2
 8000340:	ea81 0103 	eor.w	r1, r1, r3
 8000344:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000348:	bfc2      	ittt	gt
 800034a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800034e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000352:	bd70      	popgt	{r4, r5, r6, pc}
 8000354:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000358:	f04f 0e00 	mov.w	lr, #0
 800035c:	3c01      	subs	r4, #1
 800035e:	f300 80ab 	bgt.w	80004b8 <__aeabi_dmul+0x238>
 8000362:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000366:	bfde      	ittt	le
 8000368:	2000      	movle	r0, #0
 800036a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800036e:	bd70      	pople	{r4, r5, r6, pc}
 8000370:	f1c4 0400 	rsb	r4, r4, #0
 8000374:	3c20      	subs	r4, #32
 8000376:	da35      	bge.n	80003e4 <__aeabi_dmul+0x164>
 8000378:	340c      	adds	r4, #12
 800037a:	dc1b      	bgt.n	80003b4 <__aeabi_dmul+0x134>
 800037c:	f104 0414 	add.w	r4, r4, #20
 8000380:	f1c4 0520 	rsb	r5, r4, #32
 8000384:	fa00 f305 	lsl.w	r3, r0, r5
 8000388:	fa20 f004 	lsr.w	r0, r0, r4
 800038c:	fa01 f205 	lsl.w	r2, r1, r5
 8000390:	ea40 0002 	orr.w	r0, r0, r2
 8000394:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000398:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800039c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80003a0:	fa21 f604 	lsr.w	r6, r1, r4
 80003a4:	eb42 0106 	adc.w	r1, r2, r6
 80003a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80003ac:	bf08      	it	eq
 80003ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80003b2:	bd70      	pop	{r4, r5, r6, pc}
 80003b4:	f1c4 040c 	rsb	r4, r4, #12
 80003b8:	f1c4 0520 	rsb	r5, r4, #32
 80003bc:	fa00 f304 	lsl.w	r3, r0, r4
 80003c0:	fa20 f005 	lsr.w	r0, r0, r5
 80003c4:	fa01 f204 	lsl.w	r2, r1, r4
 80003c8:	ea40 0002 	orr.w	r0, r0, r2
 80003cc:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80003d0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80003d4:	f141 0100 	adc.w	r1, r1, #0
 80003d8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80003dc:	bf08      	it	eq
 80003de:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80003e2:	bd70      	pop	{r4, r5, r6, pc}
 80003e4:	f1c4 0520 	rsb	r5, r4, #32
 80003e8:	fa00 f205 	lsl.w	r2, r0, r5
 80003ec:	ea4e 0e02 	orr.w	lr, lr, r2
 80003f0:	fa20 f304 	lsr.w	r3, r0, r4
 80003f4:	fa01 f205 	lsl.w	r2, r1, r5
 80003f8:	ea43 0302 	orr.w	r3, r3, r2
 80003fc:	fa21 f004 	lsr.w	r0, r1, r4
 8000400:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000404:	fa21 f204 	lsr.w	r2, r1, r4
 8000408:	ea20 0002 	bic.w	r0, r0, r2
 800040c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000410:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000414:	bf08      	it	eq
 8000416:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800041a:	bd70      	pop	{r4, r5, r6, pc}
 800041c:	f094 0f00 	teq	r4, #0
 8000420:	d10f      	bne.n	8000442 <__aeabi_dmul+0x1c2>
 8000422:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 8000426:	0040      	lsls	r0, r0, #1
 8000428:	eb41 0101 	adc.w	r1, r1, r1
 800042c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000430:	bf08      	it	eq
 8000432:	3c01      	subeq	r4, #1
 8000434:	d0f7      	beq.n	8000426 <__aeabi_dmul+0x1a6>
 8000436:	ea41 0106 	orr.w	r1, r1, r6
 800043a:	f095 0f00 	teq	r5, #0
 800043e:	bf18      	it	ne
 8000440:	4770      	bxne	lr
 8000442:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000446:	0052      	lsls	r2, r2, #1
 8000448:	eb43 0303 	adc.w	r3, r3, r3
 800044c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000450:	bf08      	it	eq
 8000452:	3d01      	subeq	r5, #1
 8000454:	d0f7      	beq.n	8000446 <__aeabi_dmul+0x1c6>
 8000456:	ea43 0306 	orr.w	r3, r3, r6
 800045a:	4770      	bx	lr
 800045c:	ea94 0f0c 	teq	r4, ip
 8000460:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000464:	bf18      	it	ne
 8000466:	ea95 0f0c 	teqne	r5, ip
 800046a:	d00c      	beq.n	8000486 <__aeabi_dmul+0x206>
 800046c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000470:	bf18      	it	ne
 8000472:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000476:	d1d1      	bne.n	800041c <__aeabi_dmul+0x19c>
 8000478:	ea81 0103 	eor.w	r1, r1, r3
 800047c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000480:	f04f 0000 	mov.w	r0, #0
 8000484:	bd70      	pop	{r4, r5, r6, pc}
 8000486:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800048a:	bf06      	itte	eq
 800048c:	4610      	moveq	r0, r2
 800048e:	4619      	moveq	r1, r3
 8000490:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000494:	d019      	beq.n	80004ca <__aeabi_dmul+0x24a>
 8000496:	ea94 0f0c 	teq	r4, ip
 800049a:	d102      	bne.n	80004a2 <__aeabi_dmul+0x222>
 800049c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80004a0:	d113      	bne.n	80004ca <__aeabi_dmul+0x24a>
 80004a2:	ea95 0f0c 	teq	r5, ip
 80004a6:	d105      	bne.n	80004b4 <__aeabi_dmul+0x234>
 80004a8:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80004ac:	bf1c      	itt	ne
 80004ae:	4610      	movne	r0, r2
 80004b0:	4619      	movne	r1, r3
 80004b2:	d10a      	bne.n	80004ca <__aeabi_dmul+0x24a>
 80004b4:	ea81 0103 	eor.w	r1, r1, r3
 80004b8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80004bc:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80004c0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004c4:	f04f 0000 	mov.w	r0, #0
 80004c8:	bd70      	pop	{r4, r5, r6, pc}
 80004ca:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80004ce:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80004d2:	bd70      	pop	{r4, r5, r6, pc}

080004d4 <__aeabi_drsub>:
 80004d4:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80004d8:	e002      	b.n	80004e0 <__adddf3>
 80004da:	bf00      	nop

080004dc <__aeabi_dsub>:
 80004dc:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080004e0 <__adddf3>:
 80004e0:	b530      	push	{r4, r5, lr}
 80004e2:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80004e6:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80004ea:	ea94 0f05 	teq	r4, r5
 80004ee:	bf08      	it	eq
 80004f0:	ea90 0f02 	teqeq	r0, r2
 80004f4:	bf1f      	itttt	ne
 80004f6:	ea54 0c00 	orrsne.w	ip, r4, r0
 80004fa:	ea55 0c02 	orrsne.w	ip, r5, r2
 80004fe:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000502:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000506:	f000 80e2 	beq.w	80006ce <__adddf3+0x1ee>
 800050a:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800050e:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000512:	bfb8      	it	lt
 8000514:	426d      	neglt	r5, r5
 8000516:	dd0c      	ble.n	8000532 <__adddf3+0x52>
 8000518:	442c      	add	r4, r5
 800051a:	ea80 0202 	eor.w	r2, r0, r2
 800051e:	ea81 0303 	eor.w	r3, r1, r3
 8000522:	ea82 0000 	eor.w	r0, r2, r0
 8000526:	ea83 0101 	eor.w	r1, r3, r1
 800052a:	ea80 0202 	eor.w	r2, r0, r2
 800052e:	ea81 0303 	eor.w	r3, r1, r3
 8000532:	2d36      	cmp	r5, #54	; 0x36
 8000534:	bf88      	it	hi
 8000536:	bd30      	pophi	{r4, r5, pc}
 8000538:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 800053c:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000540:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000544:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000548:	d002      	beq.n	8000550 <__adddf3+0x70>
 800054a:	4240      	negs	r0, r0
 800054c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000550:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000554:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000558:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 800055c:	d002      	beq.n	8000564 <__adddf3+0x84>
 800055e:	4252      	negs	r2, r2
 8000560:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000564:	ea94 0f05 	teq	r4, r5
 8000568:	f000 80a7 	beq.w	80006ba <__adddf3+0x1da>
 800056c:	f1a4 0401 	sub.w	r4, r4, #1
 8000570:	f1d5 0e20 	rsbs	lr, r5, #32
 8000574:	db0d      	blt.n	8000592 <__adddf3+0xb2>
 8000576:	fa02 fc0e 	lsl.w	ip, r2, lr
 800057a:	fa22 f205 	lsr.w	r2, r2, r5
 800057e:	1880      	adds	r0, r0, r2
 8000580:	f141 0100 	adc.w	r1, r1, #0
 8000584:	fa03 f20e 	lsl.w	r2, r3, lr
 8000588:	1880      	adds	r0, r0, r2
 800058a:	fa43 f305 	asr.w	r3, r3, r5
 800058e:	4159      	adcs	r1, r3
 8000590:	e00e      	b.n	80005b0 <__adddf3+0xd0>
 8000592:	f1a5 0520 	sub.w	r5, r5, #32
 8000596:	f10e 0e20 	add.w	lr, lr, #32
 800059a:	2a01      	cmp	r2, #1
 800059c:	fa03 fc0e 	lsl.w	ip, r3, lr
 80005a0:	bf28      	it	cs
 80005a2:	f04c 0c02 	orrcs.w	ip, ip, #2
 80005a6:	fa43 f305 	asr.w	r3, r3, r5
 80005aa:	18c0      	adds	r0, r0, r3
 80005ac:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80005b0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005b4:	d507      	bpl.n	80005c6 <__adddf3+0xe6>
 80005b6:	f04f 0e00 	mov.w	lr, #0
 80005ba:	f1dc 0c00 	rsbs	ip, ip, #0
 80005be:	eb7e 0000 	sbcs.w	r0, lr, r0
 80005c2:	eb6e 0101 	sbc.w	r1, lr, r1
 80005c6:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80005ca:	d31b      	bcc.n	8000604 <__adddf3+0x124>
 80005cc:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80005d0:	d30c      	bcc.n	80005ec <__adddf3+0x10c>
 80005d2:	0849      	lsrs	r1, r1, #1
 80005d4:	ea5f 0030 	movs.w	r0, r0, rrx
 80005d8:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80005dc:	f104 0401 	add.w	r4, r4, #1
 80005e0:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80005e4:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80005e8:	f080 809a 	bcs.w	8000720 <__adddf3+0x240>
 80005ec:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80005f0:	bf08      	it	eq
 80005f2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80005f6:	f150 0000 	adcs.w	r0, r0, #0
 80005fa:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80005fe:	ea41 0105 	orr.w	r1, r1, r5
 8000602:	bd30      	pop	{r4, r5, pc}
 8000604:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000608:	4140      	adcs	r0, r0
 800060a:	eb41 0101 	adc.w	r1, r1, r1
 800060e:	3c01      	subs	r4, #1
 8000610:	bf28      	it	cs
 8000612:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000616:	d2e9      	bcs.n	80005ec <__adddf3+0x10c>
 8000618:	f091 0f00 	teq	r1, #0
 800061c:	bf04      	itt	eq
 800061e:	4601      	moveq	r1, r0
 8000620:	2000      	moveq	r0, #0
 8000622:	fab1 f381 	clz	r3, r1
 8000626:	bf08      	it	eq
 8000628:	3320      	addeq	r3, #32
 800062a:	f1a3 030b 	sub.w	r3, r3, #11
 800062e:	f1b3 0220 	subs.w	r2, r3, #32
 8000632:	da0c      	bge.n	800064e <__adddf3+0x16e>
 8000634:	320c      	adds	r2, #12
 8000636:	dd08      	ble.n	800064a <__adddf3+0x16a>
 8000638:	f102 0c14 	add.w	ip, r2, #20
 800063c:	f1c2 020c 	rsb	r2, r2, #12
 8000640:	fa01 f00c 	lsl.w	r0, r1, ip
 8000644:	fa21 f102 	lsr.w	r1, r1, r2
 8000648:	e00c      	b.n	8000664 <__adddf3+0x184>
 800064a:	f102 0214 	add.w	r2, r2, #20
 800064e:	bfd8      	it	le
 8000650:	f1c2 0c20 	rsble	ip, r2, #32
 8000654:	fa01 f102 	lsl.w	r1, r1, r2
 8000658:	fa20 fc0c 	lsr.w	ip, r0, ip
 800065c:	bfdc      	itt	le
 800065e:	ea41 010c 	orrle.w	r1, r1, ip
 8000662:	4090      	lslle	r0, r2
 8000664:	1ae4      	subs	r4, r4, r3
 8000666:	bfa2      	ittt	ge
 8000668:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 800066c:	4329      	orrge	r1, r5
 800066e:	bd30      	popge	{r4, r5, pc}
 8000670:	ea6f 0404 	mvn.w	r4, r4
 8000674:	3c1f      	subs	r4, #31
 8000676:	da1c      	bge.n	80006b2 <__adddf3+0x1d2>
 8000678:	340c      	adds	r4, #12
 800067a:	dc0e      	bgt.n	800069a <__adddf3+0x1ba>
 800067c:	f104 0414 	add.w	r4, r4, #20
 8000680:	f1c4 0220 	rsb	r2, r4, #32
 8000684:	fa20 f004 	lsr.w	r0, r0, r4
 8000688:	fa01 f302 	lsl.w	r3, r1, r2
 800068c:	ea40 0003 	orr.w	r0, r0, r3
 8000690:	fa21 f304 	lsr.w	r3, r1, r4
 8000694:	ea45 0103 	orr.w	r1, r5, r3
 8000698:	bd30      	pop	{r4, r5, pc}
 800069a:	f1c4 040c 	rsb	r4, r4, #12
 800069e:	f1c4 0220 	rsb	r2, r4, #32
 80006a2:	fa20 f002 	lsr.w	r0, r0, r2
 80006a6:	fa01 f304 	lsl.w	r3, r1, r4
 80006aa:	ea40 0003 	orr.w	r0, r0, r3
 80006ae:	4629      	mov	r1, r5
 80006b0:	bd30      	pop	{r4, r5, pc}
 80006b2:	fa21 f004 	lsr.w	r0, r1, r4
 80006b6:	4629      	mov	r1, r5
 80006b8:	bd30      	pop	{r4, r5, pc}
 80006ba:	f094 0f00 	teq	r4, #0
 80006be:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80006c2:	bf06      	itte	eq
 80006c4:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80006c8:	3401      	addeq	r4, #1
 80006ca:	3d01      	subne	r5, #1
 80006cc:	e74e      	b.n	800056c <__adddf3+0x8c>
 80006ce:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80006d2:	bf18      	it	ne
 80006d4:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80006d8:	d029      	beq.n	800072e <__adddf3+0x24e>
 80006da:	ea94 0f05 	teq	r4, r5
 80006de:	bf08      	it	eq
 80006e0:	ea90 0f02 	teqeq	r0, r2
 80006e4:	d005      	beq.n	80006f2 <__adddf3+0x212>
 80006e6:	ea54 0c00 	orrs.w	ip, r4, r0
 80006ea:	bf04      	itt	eq
 80006ec:	4619      	moveq	r1, r3
 80006ee:	4610      	moveq	r0, r2
 80006f0:	bd30      	pop	{r4, r5, pc}
 80006f2:	ea91 0f03 	teq	r1, r3
 80006f6:	bf1e      	ittt	ne
 80006f8:	2100      	movne	r1, #0
 80006fa:	2000      	movne	r0, #0
 80006fc:	bd30      	popne	{r4, r5, pc}
 80006fe:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000702:	d105      	bne.n	8000710 <__adddf3+0x230>
 8000704:	0040      	lsls	r0, r0, #1
 8000706:	4149      	adcs	r1, r1
 8000708:	bf28      	it	cs
 800070a:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800070e:	bd30      	pop	{r4, r5, pc}
 8000710:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000714:	bf3c      	itt	cc
 8000716:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800071a:	bd30      	popcc	{r4, r5, pc}
 800071c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000720:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000724:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000728:	f04f 0000 	mov.w	r0, #0
 800072c:	bd30      	pop	{r4, r5, pc}
 800072e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000732:	bf1a      	itte	ne
 8000734:	4619      	movne	r1, r3
 8000736:	4610      	movne	r0, r2
 8000738:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 800073c:	bf1c      	itt	ne
 800073e:	460b      	movne	r3, r1
 8000740:	4602      	movne	r2, r0
 8000742:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000746:	bf06      	itte	eq
 8000748:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 800074c:	ea91 0f03 	teqeq	r1, r3
 8000750:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000754:	bd30      	pop	{r4, r5, pc}
 8000756:	bf00      	nop

08000758 <__aeabi_ui2d>:
 8000758:	f090 0f00 	teq	r0, #0
 800075c:	bf04      	itt	eq
 800075e:	2100      	moveq	r1, #0
 8000760:	4770      	bxeq	lr
 8000762:	b530      	push	{r4, r5, lr}
 8000764:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000768:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800076c:	f04f 0500 	mov.w	r5, #0
 8000770:	f04f 0100 	mov.w	r1, #0
 8000774:	e750      	b.n	8000618 <__adddf3+0x138>
 8000776:	bf00      	nop

08000778 <__aeabi_i2d>:
 8000778:	f090 0f00 	teq	r0, #0
 800077c:	bf04      	itt	eq
 800077e:	2100      	moveq	r1, #0
 8000780:	4770      	bxeq	lr
 8000782:	b530      	push	{r4, r5, lr}
 8000784:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000788:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800078c:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000790:	bf48      	it	mi
 8000792:	4240      	negmi	r0, r0
 8000794:	f04f 0100 	mov.w	r1, #0
 8000798:	e73e      	b.n	8000618 <__adddf3+0x138>
 800079a:	bf00      	nop

0800079c <__aeabi_f2d>:
 800079c:	0042      	lsls	r2, r0, #1
 800079e:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80007a2:	ea4f 0131 	mov.w	r1, r1, rrx
 80007a6:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80007aa:	bf1f      	itttt	ne
 80007ac:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80007b0:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80007b4:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80007b8:	4770      	bxne	lr
 80007ba:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80007be:	bf08      	it	eq
 80007c0:	4770      	bxeq	lr
 80007c2:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80007c6:	bf04      	itt	eq
 80007c8:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80007cc:	4770      	bxeq	lr
 80007ce:	b530      	push	{r4, r5, lr}
 80007d0:	f44f 7460 	mov.w	r4, #896	; 0x380
 80007d4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80007d8:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80007dc:	e71c      	b.n	8000618 <__adddf3+0x138>
 80007de:	bf00      	nop

080007e0 <__aeabi_ul2d>:
 80007e0:	ea50 0201 	orrs.w	r2, r0, r1
 80007e4:	bf08      	it	eq
 80007e6:	4770      	bxeq	lr
 80007e8:	b530      	push	{r4, r5, lr}
 80007ea:	f04f 0500 	mov.w	r5, #0
 80007ee:	e00a      	b.n	8000806 <__aeabi_l2d+0x16>

080007f0 <__aeabi_l2d>:
 80007f0:	ea50 0201 	orrs.w	r2, r0, r1
 80007f4:	bf08      	it	eq
 80007f6:	4770      	bxeq	lr
 80007f8:	b530      	push	{r4, r5, lr}
 80007fa:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80007fe:	d502      	bpl.n	8000806 <__aeabi_l2d+0x16>
 8000800:	4240      	negs	r0, r0
 8000802:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000806:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800080a:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800080e:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000812:	f43f aed8 	beq.w	80005c6 <__adddf3+0xe6>
 8000816:	f04f 0203 	mov.w	r2, #3
 800081a:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800081e:	bf18      	it	ne
 8000820:	3203      	addne	r2, #3
 8000822:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000826:	bf18      	it	ne
 8000828:	3203      	addne	r2, #3
 800082a:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800082e:	f1c2 0320 	rsb	r3, r2, #32
 8000832:	fa00 fc03 	lsl.w	ip, r0, r3
 8000836:	fa20 f002 	lsr.w	r0, r0, r2
 800083a:	fa01 fe03 	lsl.w	lr, r1, r3
 800083e:	ea40 000e 	orr.w	r0, r0, lr
 8000842:	fa21 f102 	lsr.w	r1, r1, r2
 8000846:	4414      	add	r4, r2
 8000848:	e6bd      	b.n	80005c6 <__adddf3+0xe6>
 800084a:	bf00      	nop

0800084c <__aeabi_d2f>:
 800084c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000850:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000854:	bf24      	itt	cs
 8000856:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 800085a:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 800085e:	d90d      	bls.n	800087c <__aeabi_d2f+0x30>
 8000860:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000864:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000868:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 800086c:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000870:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000874:	bf08      	it	eq
 8000876:	f020 0001 	biceq.w	r0, r0, #1
 800087a:	4770      	bx	lr
 800087c:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000880:	d121      	bne.n	80008c6 <__aeabi_d2f+0x7a>
 8000882:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000886:	bfbc      	itt	lt
 8000888:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 800088c:	4770      	bxlt	lr
 800088e:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000892:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000896:	f1c2 0218 	rsb	r2, r2, #24
 800089a:	f1c2 0c20 	rsb	ip, r2, #32
 800089e:	fa10 f30c 	lsls.w	r3, r0, ip
 80008a2:	fa20 f002 	lsr.w	r0, r0, r2
 80008a6:	bf18      	it	ne
 80008a8:	f040 0001 	orrne.w	r0, r0, #1
 80008ac:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 80008b0:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 80008b4:	fa03 fc0c 	lsl.w	ip, r3, ip
 80008b8:	ea40 000c 	orr.w	r0, r0, ip
 80008bc:	fa23 f302 	lsr.w	r3, r3, r2
 80008c0:	ea4f 0343 	mov.w	r3, r3, lsl #1
 80008c4:	e7cc      	b.n	8000860 <__aeabi_d2f+0x14>
 80008c6:	ea7f 5362 	mvns.w	r3, r2, asr #21
 80008ca:	d107      	bne.n	80008dc <__aeabi_d2f+0x90>
 80008cc:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 80008d0:	bf1e      	ittt	ne
 80008d2:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 80008d6:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 80008da:	4770      	bxne	lr
 80008dc:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 80008e0:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 80008e4:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80008e8:	4770      	bx	lr
 80008ea:	bf00      	nop

080008ec <__aeabi_uldivmod>:
 80008ec:	b953      	cbnz	r3, 8000904 <__aeabi_uldivmod+0x18>
 80008ee:	b94a      	cbnz	r2, 8000904 <__aeabi_uldivmod+0x18>
 80008f0:	2900      	cmp	r1, #0
 80008f2:	bf08      	it	eq
 80008f4:	2800      	cmpeq	r0, #0
 80008f6:	bf1c      	itt	ne
 80008f8:	f04f 31ff 	movne.w	r1, #4294967295
 80008fc:	f04f 30ff 	movne.w	r0, #4294967295
 8000900:	f000 b96e 	b.w	8000be0 <__aeabi_idiv0>
 8000904:	f1ad 0c08 	sub.w	ip, sp, #8
 8000908:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 800090c:	f000 f806 	bl	800091c <__udivmoddi4>
 8000910:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000914:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000918:	b004      	add	sp, #16
 800091a:	4770      	bx	lr

0800091c <__udivmoddi4>:
 800091c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000920:	9d08      	ldr	r5, [sp, #32]
 8000922:	4604      	mov	r4, r0
 8000924:	468c      	mov	ip, r1
 8000926:	2b00      	cmp	r3, #0
 8000928:	f040 8083 	bne.w	8000a32 <__udivmoddi4+0x116>
 800092c:	428a      	cmp	r2, r1
 800092e:	4617      	mov	r7, r2
 8000930:	d947      	bls.n	80009c2 <__udivmoddi4+0xa6>
 8000932:	fab2 f282 	clz	r2, r2
 8000936:	b142      	cbz	r2, 800094a <__udivmoddi4+0x2e>
 8000938:	f1c2 0020 	rsb	r0, r2, #32
 800093c:	fa24 f000 	lsr.w	r0, r4, r0
 8000940:	4091      	lsls	r1, r2
 8000942:	4097      	lsls	r7, r2
 8000944:	ea40 0c01 	orr.w	ip, r0, r1
 8000948:	4094      	lsls	r4, r2
 800094a:	ea4f 4817 	mov.w	r8, r7, lsr #16
 800094e:	0c23      	lsrs	r3, r4, #16
 8000950:	fbbc f6f8 	udiv	r6, ip, r8
 8000954:	fa1f fe87 	uxth.w	lr, r7
 8000958:	fb08 c116 	mls	r1, r8, r6, ip
 800095c:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000960:	fb06 f10e 	mul.w	r1, r6, lr
 8000964:	4299      	cmp	r1, r3
 8000966:	d909      	bls.n	800097c <__udivmoddi4+0x60>
 8000968:	18fb      	adds	r3, r7, r3
 800096a:	f106 30ff 	add.w	r0, r6, #4294967295
 800096e:	f080 8119 	bcs.w	8000ba4 <__udivmoddi4+0x288>
 8000972:	4299      	cmp	r1, r3
 8000974:	f240 8116 	bls.w	8000ba4 <__udivmoddi4+0x288>
 8000978:	3e02      	subs	r6, #2
 800097a:	443b      	add	r3, r7
 800097c:	1a5b      	subs	r3, r3, r1
 800097e:	b2a4      	uxth	r4, r4
 8000980:	fbb3 f0f8 	udiv	r0, r3, r8
 8000984:	fb08 3310 	mls	r3, r8, r0, r3
 8000988:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800098c:	fb00 fe0e 	mul.w	lr, r0, lr
 8000990:	45a6      	cmp	lr, r4
 8000992:	d909      	bls.n	80009a8 <__udivmoddi4+0x8c>
 8000994:	193c      	adds	r4, r7, r4
 8000996:	f100 33ff 	add.w	r3, r0, #4294967295
 800099a:	f080 8105 	bcs.w	8000ba8 <__udivmoddi4+0x28c>
 800099e:	45a6      	cmp	lr, r4
 80009a0:	f240 8102 	bls.w	8000ba8 <__udivmoddi4+0x28c>
 80009a4:	3802      	subs	r0, #2
 80009a6:	443c      	add	r4, r7
 80009a8:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80009ac:	eba4 040e 	sub.w	r4, r4, lr
 80009b0:	2600      	movs	r6, #0
 80009b2:	b11d      	cbz	r5, 80009bc <__udivmoddi4+0xa0>
 80009b4:	40d4      	lsrs	r4, r2
 80009b6:	2300      	movs	r3, #0
 80009b8:	e9c5 4300 	strd	r4, r3, [r5]
 80009bc:	4631      	mov	r1, r6
 80009be:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80009c2:	b902      	cbnz	r2, 80009c6 <__udivmoddi4+0xaa>
 80009c4:	deff      	udf	#255	; 0xff
 80009c6:	fab2 f282 	clz	r2, r2
 80009ca:	2a00      	cmp	r2, #0
 80009cc:	d150      	bne.n	8000a70 <__udivmoddi4+0x154>
 80009ce:	1bcb      	subs	r3, r1, r7
 80009d0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80009d4:	fa1f f887 	uxth.w	r8, r7
 80009d8:	2601      	movs	r6, #1
 80009da:	fbb3 fcfe 	udiv	ip, r3, lr
 80009de:	0c21      	lsrs	r1, r4, #16
 80009e0:	fb0e 331c 	mls	r3, lr, ip, r3
 80009e4:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80009e8:	fb08 f30c 	mul.w	r3, r8, ip
 80009ec:	428b      	cmp	r3, r1
 80009ee:	d907      	bls.n	8000a00 <__udivmoddi4+0xe4>
 80009f0:	1879      	adds	r1, r7, r1
 80009f2:	f10c 30ff 	add.w	r0, ip, #4294967295
 80009f6:	d202      	bcs.n	80009fe <__udivmoddi4+0xe2>
 80009f8:	428b      	cmp	r3, r1
 80009fa:	f200 80e9 	bhi.w	8000bd0 <__udivmoddi4+0x2b4>
 80009fe:	4684      	mov	ip, r0
 8000a00:	1ac9      	subs	r1, r1, r3
 8000a02:	b2a3      	uxth	r3, r4
 8000a04:	fbb1 f0fe 	udiv	r0, r1, lr
 8000a08:	fb0e 1110 	mls	r1, lr, r0, r1
 8000a0c:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000a10:	fb08 f800 	mul.w	r8, r8, r0
 8000a14:	45a0      	cmp	r8, r4
 8000a16:	d907      	bls.n	8000a28 <__udivmoddi4+0x10c>
 8000a18:	193c      	adds	r4, r7, r4
 8000a1a:	f100 33ff 	add.w	r3, r0, #4294967295
 8000a1e:	d202      	bcs.n	8000a26 <__udivmoddi4+0x10a>
 8000a20:	45a0      	cmp	r8, r4
 8000a22:	f200 80d9 	bhi.w	8000bd8 <__udivmoddi4+0x2bc>
 8000a26:	4618      	mov	r0, r3
 8000a28:	eba4 0408 	sub.w	r4, r4, r8
 8000a2c:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000a30:	e7bf      	b.n	80009b2 <__udivmoddi4+0x96>
 8000a32:	428b      	cmp	r3, r1
 8000a34:	d909      	bls.n	8000a4a <__udivmoddi4+0x12e>
 8000a36:	2d00      	cmp	r5, #0
 8000a38:	f000 80b1 	beq.w	8000b9e <__udivmoddi4+0x282>
 8000a3c:	2600      	movs	r6, #0
 8000a3e:	e9c5 0100 	strd	r0, r1, [r5]
 8000a42:	4630      	mov	r0, r6
 8000a44:	4631      	mov	r1, r6
 8000a46:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000a4a:	fab3 f683 	clz	r6, r3
 8000a4e:	2e00      	cmp	r6, #0
 8000a50:	d14a      	bne.n	8000ae8 <__udivmoddi4+0x1cc>
 8000a52:	428b      	cmp	r3, r1
 8000a54:	d302      	bcc.n	8000a5c <__udivmoddi4+0x140>
 8000a56:	4282      	cmp	r2, r0
 8000a58:	f200 80b8 	bhi.w	8000bcc <__udivmoddi4+0x2b0>
 8000a5c:	1a84      	subs	r4, r0, r2
 8000a5e:	eb61 0103 	sbc.w	r1, r1, r3
 8000a62:	2001      	movs	r0, #1
 8000a64:	468c      	mov	ip, r1
 8000a66:	2d00      	cmp	r5, #0
 8000a68:	d0a8      	beq.n	80009bc <__udivmoddi4+0xa0>
 8000a6a:	e9c5 4c00 	strd	r4, ip, [r5]
 8000a6e:	e7a5      	b.n	80009bc <__udivmoddi4+0xa0>
 8000a70:	f1c2 0320 	rsb	r3, r2, #32
 8000a74:	fa20 f603 	lsr.w	r6, r0, r3
 8000a78:	4097      	lsls	r7, r2
 8000a7a:	fa01 f002 	lsl.w	r0, r1, r2
 8000a7e:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000a82:	40d9      	lsrs	r1, r3
 8000a84:	4330      	orrs	r0, r6
 8000a86:	0c03      	lsrs	r3, r0, #16
 8000a88:	fbb1 f6fe 	udiv	r6, r1, lr
 8000a8c:	fa1f f887 	uxth.w	r8, r7
 8000a90:	fb0e 1116 	mls	r1, lr, r6, r1
 8000a94:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000a98:	fb06 f108 	mul.w	r1, r6, r8
 8000a9c:	4299      	cmp	r1, r3
 8000a9e:	fa04 f402 	lsl.w	r4, r4, r2
 8000aa2:	d909      	bls.n	8000ab8 <__udivmoddi4+0x19c>
 8000aa4:	18fb      	adds	r3, r7, r3
 8000aa6:	f106 3cff 	add.w	ip, r6, #4294967295
 8000aaa:	f080 808d 	bcs.w	8000bc8 <__udivmoddi4+0x2ac>
 8000aae:	4299      	cmp	r1, r3
 8000ab0:	f240 808a 	bls.w	8000bc8 <__udivmoddi4+0x2ac>
 8000ab4:	3e02      	subs	r6, #2
 8000ab6:	443b      	add	r3, r7
 8000ab8:	1a5b      	subs	r3, r3, r1
 8000aba:	b281      	uxth	r1, r0
 8000abc:	fbb3 f0fe 	udiv	r0, r3, lr
 8000ac0:	fb0e 3310 	mls	r3, lr, r0, r3
 8000ac4:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000ac8:	fb00 f308 	mul.w	r3, r0, r8
 8000acc:	428b      	cmp	r3, r1
 8000ace:	d907      	bls.n	8000ae0 <__udivmoddi4+0x1c4>
 8000ad0:	1879      	adds	r1, r7, r1
 8000ad2:	f100 3cff 	add.w	ip, r0, #4294967295
 8000ad6:	d273      	bcs.n	8000bc0 <__udivmoddi4+0x2a4>
 8000ad8:	428b      	cmp	r3, r1
 8000ada:	d971      	bls.n	8000bc0 <__udivmoddi4+0x2a4>
 8000adc:	3802      	subs	r0, #2
 8000ade:	4439      	add	r1, r7
 8000ae0:	1acb      	subs	r3, r1, r3
 8000ae2:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8000ae6:	e778      	b.n	80009da <__udivmoddi4+0xbe>
 8000ae8:	f1c6 0c20 	rsb	ip, r6, #32
 8000aec:	fa03 f406 	lsl.w	r4, r3, r6
 8000af0:	fa22 f30c 	lsr.w	r3, r2, ip
 8000af4:	431c      	orrs	r4, r3
 8000af6:	fa20 f70c 	lsr.w	r7, r0, ip
 8000afa:	fa01 f306 	lsl.w	r3, r1, r6
 8000afe:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000b02:	fa21 f10c 	lsr.w	r1, r1, ip
 8000b06:	431f      	orrs	r7, r3
 8000b08:	0c3b      	lsrs	r3, r7, #16
 8000b0a:	fbb1 f9fe 	udiv	r9, r1, lr
 8000b0e:	fa1f f884 	uxth.w	r8, r4
 8000b12:	fb0e 1119 	mls	r1, lr, r9, r1
 8000b16:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000b1a:	fb09 fa08 	mul.w	sl, r9, r8
 8000b1e:	458a      	cmp	sl, r1
 8000b20:	fa02 f206 	lsl.w	r2, r2, r6
 8000b24:	fa00 f306 	lsl.w	r3, r0, r6
 8000b28:	d908      	bls.n	8000b3c <__udivmoddi4+0x220>
 8000b2a:	1861      	adds	r1, r4, r1
 8000b2c:	f109 30ff 	add.w	r0, r9, #4294967295
 8000b30:	d248      	bcs.n	8000bc4 <__udivmoddi4+0x2a8>
 8000b32:	458a      	cmp	sl, r1
 8000b34:	d946      	bls.n	8000bc4 <__udivmoddi4+0x2a8>
 8000b36:	f1a9 0902 	sub.w	r9, r9, #2
 8000b3a:	4421      	add	r1, r4
 8000b3c:	eba1 010a 	sub.w	r1, r1, sl
 8000b40:	b2bf      	uxth	r7, r7
 8000b42:	fbb1 f0fe 	udiv	r0, r1, lr
 8000b46:	fb0e 1110 	mls	r1, lr, r0, r1
 8000b4a:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000b4e:	fb00 f808 	mul.w	r8, r0, r8
 8000b52:	45b8      	cmp	r8, r7
 8000b54:	d907      	bls.n	8000b66 <__udivmoddi4+0x24a>
 8000b56:	19e7      	adds	r7, r4, r7
 8000b58:	f100 31ff 	add.w	r1, r0, #4294967295
 8000b5c:	d22e      	bcs.n	8000bbc <__udivmoddi4+0x2a0>
 8000b5e:	45b8      	cmp	r8, r7
 8000b60:	d92c      	bls.n	8000bbc <__udivmoddi4+0x2a0>
 8000b62:	3802      	subs	r0, #2
 8000b64:	4427      	add	r7, r4
 8000b66:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000b6a:	eba7 0708 	sub.w	r7, r7, r8
 8000b6e:	fba0 8902 	umull	r8, r9, r0, r2
 8000b72:	454f      	cmp	r7, r9
 8000b74:	46c6      	mov	lr, r8
 8000b76:	4649      	mov	r1, r9
 8000b78:	d31a      	bcc.n	8000bb0 <__udivmoddi4+0x294>
 8000b7a:	d017      	beq.n	8000bac <__udivmoddi4+0x290>
 8000b7c:	b15d      	cbz	r5, 8000b96 <__udivmoddi4+0x27a>
 8000b7e:	ebb3 020e 	subs.w	r2, r3, lr
 8000b82:	eb67 0701 	sbc.w	r7, r7, r1
 8000b86:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000b8a:	40f2      	lsrs	r2, r6
 8000b8c:	ea4c 0202 	orr.w	r2, ip, r2
 8000b90:	40f7      	lsrs	r7, r6
 8000b92:	e9c5 2700 	strd	r2, r7, [r5]
 8000b96:	2600      	movs	r6, #0
 8000b98:	4631      	mov	r1, r6
 8000b9a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000b9e:	462e      	mov	r6, r5
 8000ba0:	4628      	mov	r0, r5
 8000ba2:	e70b      	b.n	80009bc <__udivmoddi4+0xa0>
 8000ba4:	4606      	mov	r6, r0
 8000ba6:	e6e9      	b.n	800097c <__udivmoddi4+0x60>
 8000ba8:	4618      	mov	r0, r3
 8000baa:	e6fd      	b.n	80009a8 <__udivmoddi4+0x8c>
 8000bac:	4543      	cmp	r3, r8
 8000bae:	d2e5      	bcs.n	8000b7c <__udivmoddi4+0x260>
 8000bb0:	ebb8 0e02 	subs.w	lr, r8, r2
 8000bb4:	eb69 0104 	sbc.w	r1, r9, r4
 8000bb8:	3801      	subs	r0, #1
 8000bba:	e7df      	b.n	8000b7c <__udivmoddi4+0x260>
 8000bbc:	4608      	mov	r0, r1
 8000bbe:	e7d2      	b.n	8000b66 <__udivmoddi4+0x24a>
 8000bc0:	4660      	mov	r0, ip
 8000bc2:	e78d      	b.n	8000ae0 <__udivmoddi4+0x1c4>
 8000bc4:	4681      	mov	r9, r0
 8000bc6:	e7b9      	b.n	8000b3c <__udivmoddi4+0x220>
 8000bc8:	4666      	mov	r6, ip
 8000bca:	e775      	b.n	8000ab8 <__udivmoddi4+0x19c>
 8000bcc:	4630      	mov	r0, r6
 8000bce:	e74a      	b.n	8000a66 <__udivmoddi4+0x14a>
 8000bd0:	f1ac 0c02 	sub.w	ip, ip, #2
 8000bd4:	4439      	add	r1, r7
 8000bd6:	e713      	b.n	8000a00 <__udivmoddi4+0xe4>
 8000bd8:	3802      	subs	r0, #2
 8000bda:	443c      	add	r4, r7
 8000bdc:	e724      	b.n	8000a28 <__udivmoddi4+0x10c>
 8000bde:	bf00      	nop

08000be0 <__aeabi_idiv0>:
 8000be0:	4770      	bx	lr
 8000be2:	bf00      	nop

08000be4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000be4:	b580      	push	{r7, lr}
 8000be6:	b088      	sub	sp, #32
 8000be8:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000bea:	f000 fb4d 	bl	8001288 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000bee:	f000 f8a3 	bl	8000d38 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000bf2:	f000 f963 	bl	8000ebc <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000bf6:	f000 f931 	bl	8000e5c <MX_USART2_UART_Init>
  MX_I2C1_Init();
 8000bfa:	f000 f8ef 	bl	8000ddc <MX_I2C1_Init>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  // Tell STTS751 that we want to read from the temperature register
	     buf[0] = REG_TEMP;
 8000bfe:	2300      	movs	r3, #0
 8000c00:	713b      	strb	r3, [r7, #4]
	     ret = HAL_I2C_Master_Transmit(&hi2c1, STTS751_ADDR, buf, 1, HAL_MAX_DELAY);
 8000c02:	2390      	movs	r3, #144	; 0x90
 8000c04:	b299      	uxth	r1, r3
 8000c06:	1d3a      	adds	r2, r7, #4
 8000c08:	f04f 33ff 	mov.w	r3, #4294967295
 8000c0c:	9300      	str	r3, [sp, #0]
 8000c0e:	2301      	movs	r3, #1
 8000c10:	4841      	ldr	r0, [pc, #260]	; (8000d18 <main+0x134>)
 8000c12:	f000 ff11 	bl	8001a38 <HAL_I2C_Master_Transmit>
 8000c16:	4603      	mov	r3, r0
 8000c18:	757b      	strb	r3, [r7, #21]
	     if ( ret != HAL_OK ) {
 8000c1a:	7d7b      	ldrb	r3, [r7, #21]
 8000c1c:	2b00      	cmp	r3, #0
 8000c1e:	d008      	beq.n	8000c32 <main+0x4e>
	       strcpy((char*)buf, "Error Tx\r\n");
 8000c20:	1d3b      	adds	r3, r7, #4
 8000c22:	4a3e      	ldr	r2, [pc, #248]	; (8000d1c <main+0x138>)
 8000c24:	ca07      	ldmia	r2, {r0, r1, r2}
 8000c26:	c303      	stmia	r3!, {r0, r1}
 8000c28:	801a      	strh	r2, [r3, #0]
 8000c2a:	3302      	adds	r3, #2
 8000c2c:	0c12      	lsrs	r2, r2, #16
 8000c2e:	701a      	strb	r2, [r3, #0]
 8000c30:	e061      	b.n	8000cf6 <main+0x112>
	     } else {

	       // Read 2 bytes from the temperature register
	       ret = HAL_I2C_Master_Receive(&hi2c1, STTS751_ADDR, buf, 2, HAL_MAX_DELAY);
 8000c32:	2390      	movs	r3, #144	; 0x90
 8000c34:	b299      	uxth	r1, r3
 8000c36:	1d3a      	adds	r2, r7, #4
 8000c38:	f04f 33ff 	mov.w	r3, #4294967295
 8000c3c:	9300      	str	r3, [sp, #0]
 8000c3e:	2302      	movs	r3, #2
 8000c40:	4835      	ldr	r0, [pc, #212]	; (8000d18 <main+0x134>)
 8000c42:	f000 ffed 	bl	8001c20 <HAL_I2C_Master_Receive>
 8000c46:	4603      	mov	r3, r0
 8000c48:	757b      	strb	r3, [r7, #21]
	       if ( ret != HAL_OK ) {
 8000c4a:	7d7b      	ldrb	r3, [r7, #21]
 8000c4c:	2b00      	cmp	r3, #0
 8000c4e:	d008      	beq.n	8000c62 <main+0x7e>
	         strcpy((char*)buf, "Error Rx\r\n");
 8000c50:	1d3b      	adds	r3, r7, #4
 8000c52:	4a33      	ldr	r2, [pc, #204]	; (8000d20 <main+0x13c>)
 8000c54:	ca07      	ldmia	r2, {r0, r1, r2}
 8000c56:	c303      	stmia	r3!, {r0, r1}
 8000c58:	801a      	strh	r2, [r3, #0]
 8000c5a:	3302      	adds	r3, #2
 8000c5c:	0c12      	lsrs	r2, r2, #16
 8000c5e:	701a      	strb	r2, [r3, #0]
 8000c60:	e049      	b.n	8000cf6 <main+0x112>
	       } else {

	           //Combine the bytes
	           val = ((int16_t)buf[0] << 4) | (buf[1] >> 4);
 8000c62:	793b      	ldrb	r3, [r7, #4]
 8000c64:	011b      	lsls	r3, r3, #4
 8000c66:	b21a      	sxth	r2, r3
 8000c68:	797b      	ldrb	r3, [r7, #5]
 8000c6a:	091b      	lsrs	r3, r3, #4
 8000c6c:	b2db      	uxtb	r3, r3
 8000c6e:	b21b      	sxth	r3, r3
 8000c70:	4313      	orrs	r3, r2
 8000c72:	82fb      	strh	r3, [r7, #22]

	           // Convert to 2's complement, since temperature can be negative
	           if ( val > 0x7FF ) {
 8000c74:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8000c78:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8000c7c:	db05      	blt.n	8000c8a <main+0xa6>
	             val |= 0xF000;
 8000c7e:	8afb      	ldrh	r3, [r7, #22]
 8000c80:	ea6f 5303 	mvn.w	r3, r3, lsl #20
 8000c84:	ea6f 5313 	mvn.w	r3, r3, lsr #20
 8000c88:	82fb      	strh	r3, [r7, #22]
	           }

	           // Convert to float temperature value (Celsius)
	           temp_c = val * 0.0625;
 8000c8a:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8000c8e:	4618      	mov	r0, r3
 8000c90:	f7ff fd72 	bl	8000778 <__aeabi_i2d>
 8000c94:	f04f 0200 	mov.w	r2, #0
 8000c98:	4b22      	ldr	r3, [pc, #136]	; (8000d24 <main+0x140>)
 8000c9a:	f7ff faf1 	bl	8000280 <__aeabi_dmul>
 8000c9e:	4602      	mov	r2, r0
 8000ca0:	460b      	mov	r3, r1
 8000ca2:	4610      	mov	r0, r2
 8000ca4:	4619      	mov	r1, r3
 8000ca6:	f7ff fdd1 	bl	800084c <__aeabi_d2f>
 8000caa:	4603      	mov	r3, r0
 8000cac:	613b      	str	r3, [r7, #16]

	           // Convert temperature to decimal format
	           temp_c *= 100;
 8000cae:	edd7 7a04 	vldr	s15, [r7, #16]
 8000cb2:	ed9f 7a1d 	vldr	s14, [pc, #116]	; 8000d28 <main+0x144>
 8000cb6:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000cba:	edc7 7a04 	vstr	s15, [r7, #16]
	           sprintf((char*)buf,
	                 "%u.%02u C\r\n",
	                 ((unsigned int)temp_c / 100),
 8000cbe:	edd7 7a04 	vldr	s15, [r7, #16]
 8000cc2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8000cc6:	ee17 2a90 	vmov	r2, s15
	           sprintf((char*)buf,
 8000cca:	4b18      	ldr	r3, [pc, #96]	; (8000d2c <main+0x148>)
 8000ccc:	fba3 2302 	umull	r2, r3, r3, r2
 8000cd0:	095a      	lsrs	r2, r3, #5
	                 ((unsigned int)temp_c % 100));
 8000cd2:	edd7 7a04 	vldr	s15, [r7, #16]
 8000cd6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8000cda:	ee17 1a90 	vmov	r1, s15
	           sprintf((char*)buf,
 8000cde:	4b13      	ldr	r3, [pc, #76]	; (8000d2c <main+0x148>)
 8000ce0:	fba3 0301 	umull	r0, r3, r3, r1
 8000ce4:	095b      	lsrs	r3, r3, #5
 8000ce6:	2064      	movs	r0, #100	; 0x64
 8000ce8:	fb00 f303 	mul.w	r3, r0, r3
 8000cec:	1acb      	subs	r3, r1, r3
 8000cee:	1d38      	adds	r0, r7, #4
 8000cf0:	490f      	ldr	r1, [pc, #60]	; (8000d30 <main+0x14c>)
 8000cf2:	f003 fbf5 	bl	80044e0 <siprintf>
	         }
	       }

	       // Send out buffer (temperature or error message)
	       HAL_UART_Transmit(&huart2, buf, strlen((char*)buf), HAL_MAX_DELAY);
 8000cf6:	1d3b      	adds	r3, r7, #4
 8000cf8:	4618      	mov	r0, r3
 8000cfa:	f7ff fa69 	bl	80001d0 <strlen>
 8000cfe:	4603      	mov	r3, r0
 8000d00:	b29a      	uxth	r2, r3
 8000d02:	1d39      	adds	r1, r7, #4
 8000d04:	f04f 33ff 	mov.w	r3, #4294967295
 8000d08:	480a      	ldr	r0, [pc, #40]	; (8000d34 <main+0x150>)
 8000d0a:	f002 fee9 	bl	8003ae0 <HAL_UART_Transmit>

	       // Wait
	       HAL_Delay(500);
 8000d0e:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000d12:	f000 fb35 	bl	8001380 <HAL_Delay>
	     buf[0] = REG_TEMP;
 8000d16:	e772      	b.n	8000bfe <main+0x1a>
 8000d18:	20000098 	.word	0x20000098
 8000d1c:	08004d54 	.word	0x08004d54
 8000d20:	08004d60 	.word	0x08004d60
 8000d24:	3fb00000 	.word	0x3fb00000
 8000d28:	42c80000 	.word	0x42c80000
 8000d2c:	51eb851f 	.word	0x51eb851f
 8000d30:	08004d6c 	.word	0x08004d6c
 8000d34:	200000e4 	.word	0x200000e4

08000d38 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000d38:	b580      	push	{r7, lr}
 8000d3a:	b096      	sub	sp, #88	; 0x58
 8000d3c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000d3e:	f107 0314 	add.w	r3, r7, #20
 8000d42:	2244      	movs	r2, #68	; 0x44
 8000d44:	2100      	movs	r1, #0
 8000d46:	4618      	mov	r0, r3
 8000d48:	f003 fbc2 	bl	80044d0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000d4c:	463b      	mov	r3, r7
 8000d4e:	2200      	movs	r2, #0
 8000d50:	601a      	str	r2, [r3, #0]
 8000d52:	605a      	str	r2, [r3, #4]
 8000d54:	609a      	str	r2, [r3, #8]
 8000d56:	60da      	str	r2, [r3, #12]
 8000d58:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8000d5a:	f44f 7000 	mov.w	r0, #512	; 0x200
 8000d5e:	f001 fb73 	bl	8002448 <HAL_PWREx_ControlVoltageScaling>
 8000d62:	4603      	mov	r3, r0
 8000d64:	2b00      	cmp	r3, #0
 8000d66:	d001      	beq.n	8000d6c <SystemClock_Config+0x34>
  {
    Error_Handler();
 8000d68:	f000 f90e 	bl	8000f88 <Error_Handler>
  }
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000d6c:	2302      	movs	r3, #2
 8000d6e:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000d70:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000d74:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000d76:	2310      	movs	r3, #16
 8000d78:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000d7a:	2302      	movs	r3, #2
 8000d7c:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000d7e:	2302      	movs	r3, #2
 8000d80:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 8000d82:	2301      	movs	r3, #1
 8000d84:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 10;
 8000d86:	230a      	movs	r3, #10
 8000d88:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8000d8a:	2307      	movs	r3, #7
 8000d8c:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000d8e:	2302      	movs	r3, #2
 8000d90:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000d92:	2302      	movs	r3, #2
 8000d94:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000d96:	f107 0314 	add.w	r3, r7, #20
 8000d9a:	4618      	mov	r0, r3
 8000d9c:	f001 fbaa 	bl	80024f4 <HAL_RCC_OscConfig>
 8000da0:	4603      	mov	r3, r0
 8000da2:	2b00      	cmp	r3, #0
 8000da4:	d001      	beq.n	8000daa <SystemClock_Config+0x72>
  {
    Error_Handler();
 8000da6:	f000 f8ef 	bl	8000f88 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000daa:	230f      	movs	r3, #15
 8000dac:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000dae:	2303      	movs	r3, #3
 8000db0:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000db2:	2300      	movs	r3, #0
 8000db4:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000db6:	2300      	movs	r3, #0
 8000db8:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000dba:	2300      	movs	r3, #0
 8000dbc:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8000dbe:	463b      	mov	r3, r7
 8000dc0:	2104      	movs	r1, #4
 8000dc2:	4618      	mov	r0, r3
 8000dc4:	f001 ff7c 	bl	8002cc0 <HAL_RCC_ClockConfig>
 8000dc8:	4603      	mov	r3, r0
 8000dca:	2b00      	cmp	r3, #0
 8000dcc:	d001      	beq.n	8000dd2 <SystemClock_Config+0x9a>
  {
    Error_Handler();
 8000dce:	f000 f8db 	bl	8000f88 <Error_Handler>
  }
}
 8000dd2:	bf00      	nop
 8000dd4:	3758      	adds	r7, #88	; 0x58
 8000dd6:	46bd      	mov	sp, r7
 8000dd8:	bd80      	pop	{r7, pc}
	...

08000ddc <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000ddc:	b580      	push	{r7, lr}
 8000dde:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000de0:	4b1b      	ldr	r3, [pc, #108]	; (8000e50 <MX_I2C1_Init+0x74>)
 8000de2:	4a1c      	ldr	r2, [pc, #112]	; (8000e54 <MX_I2C1_Init+0x78>)
 8000de4:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x10909CEC;
 8000de6:	4b1a      	ldr	r3, [pc, #104]	; (8000e50 <MX_I2C1_Init+0x74>)
 8000de8:	4a1b      	ldr	r2, [pc, #108]	; (8000e58 <MX_I2C1_Init+0x7c>)
 8000dea:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8000dec:	4b18      	ldr	r3, [pc, #96]	; (8000e50 <MX_I2C1_Init+0x74>)
 8000dee:	2200      	movs	r2, #0
 8000df0:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000df2:	4b17      	ldr	r3, [pc, #92]	; (8000e50 <MX_I2C1_Init+0x74>)
 8000df4:	2201      	movs	r2, #1
 8000df6:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000df8:	4b15      	ldr	r3, [pc, #84]	; (8000e50 <MX_I2C1_Init+0x74>)
 8000dfa:	2200      	movs	r2, #0
 8000dfc:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8000dfe:	4b14      	ldr	r3, [pc, #80]	; (8000e50 <MX_I2C1_Init+0x74>)
 8000e00:	2200      	movs	r2, #0
 8000e02:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000e04:	4b12      	ldr	r3, [pc, #72]	; (8000e50 <MX_I2C1_Init+0x74>)
 8000e06:	2200      	movs	r2, #0
 8000e08:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000e0a:	4b11      	ldr	r3, [pc, #68]	; (8000e50 <MX_I2C1_Init+0x74>)
 8000e0c:	2200      	movs	r2, #0
 8000e0e:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000e10:	4b0f      	ldr	r3, [pc, #60]	; (8000e50 <MX_I2C1_Init+0x74>)
 8000e12:	2200      	movs	r2, #0
 8000e14:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000e16:	480e      	ldr	r0, [pc, #56]	; (8000e50 <MX_I2C1_Init+0x74>)
 8000e18:	f000 fd7e 	bl	8001918 <HAL_I2C_Init>
 8000e1c:	4603      	mov	r3, r0
 8000e1e:	2b00      	cmp	r3, #0
 8000e20:	d001      	beq.n	8000e26 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8000e22:	f000 f8b1 	bl	8000f88 <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000e26:	2100      	movs	r1, #0
 8000e28:	4809      	ldr	r0, [pc, #36]	; (8000e50 <MX_I2C1_Init+0x74>)
 8000e2a:	f001 fa67 	bl	80022fc <HAL_I2CEx_ConfigAnalogFilter>
 8000e2e:	4603      	mov	r3, r0
 8000e30:	2b00      	cmp	r3, #0
 8000e32:	d001      	beq.n	8000e38 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8000e34:	f000 f8a8 	bl	8000f88 <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8000e38:	2100      	movs	r1, #0
 8000e3a:	4805      	ldr	r0, [pc, #20]	; (8000e50 <MX_I2C1_Init+0x74>)
 8000e3c:	f001 faa9 	bl	8002392 <HAL_I2CEx_ConfigDigitalFilter>
 8000e40:	4603      	mov	r3, r0
 8000e42:	2b00      	cmp	r3, #0
 8000e44:	d001      	beq.n	8000e4a <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8000e46:	f000 f89f 	bl	8000f88 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000e4a:	bf00      	nop
 8000e4c:	bd80      	pop	{r7, pc}
 8000e4e:	bf00      	nop
 8000e50:	20000098 	.word	0x20000098
 8000e54:	40005400 	.word	0x40005400
 8000e58:	10909cec 	.word	0x10909cec

08000e5c <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000e5c:	b580      	push	{r7, lr}
 8000e5e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000e60:	4b14      	ldr	r3, [pc, #80]	; (8000eb4 <MX_USART2_UART_Init+0x58>)
 8000e62:	4a15      	ldr	r2, [pc, #84]	; (8000eb8 <MX_USART2_UART_Init+0x5c>)
 8000e64:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000e66:	4b13      	ldr	r3, [pc, #76]	; (8000eb4 <MX_USART2_UART_Init+0x58>)
 8000e68:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000e6c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000e6e:	4b11      	ldr	r3, [pc, #68]	; (8000eb4 <MX_USART2_UART_Init+0x58>)
 8000e70:	2200      	movs	r2, #0
 8000e72:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000e74:	4b0f      	ldr	r3, [pc, #60]	; (8000eb4 <MX_USART2_UART_Init+0x58>)
 8000e76:	2200      	movs	r2, #0
 8000e78:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000e7a:	4b0e      	ldr	r3, [pc, #56]	; (8000eb4 <MX_USART2_UART_Init+0x58>)
 8000e7c:	2200      	movs	r2, #0
 8000e7e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000e80:	4b0c      	ldr	r3, [pc, #48]	; (8000eb4 <MX_USART2_UART_Init+0x58>)
 8000e82:	220c      	movs	r2, #12
 8000e84:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000e86:	4b0b      	ldr	r3, [pc, #44]	; (8000eb4 <MX_USART2_UART_Init+0x58>)
 8000e88:	2200      	movs	r2, #0
 8000e8a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000e8c:	4b09      	ldr	r3, [pc, #36]	; (8000eb4 <MX_USART2_UART_Init+0x58>)
 8000e8e:	2200      	movs	r2, #0
 8000e90:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000e92:	4b08      	ldr	r3, [pc, #32]	; (8000eb4 <MX_USART2_UART_Init+0x58>)
 8000e94:	2200      	movs	r2, #0
 8000e96:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000e98:	4b06      	ldr	r3, [pc, #24]	; (8000eb4 <MX_USART2_UART_Init+0x58>)
 8000e9a:	2200      	movs	r2, #0
 8000e9c:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000e9e:	4805      	ldr	r0, [pc, #20]	; (8000eb4 <MX_USART2_UART_Init+0x58>)
 8000ea0:	f002 fdd0 	bl	8003a44 <HAL_UART_Init>
 8000ea4:	4603      	mov	r3, r0
 8000ea6:	2b00      	cmp	r3, #0
 8000ea8:	d001      	beq.n	8000eae <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8000eaa:	f000 f86d 	bl	8000f88 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000eae:	bf00      	nop
 8000eb0:	bd80      	pop	{r7, pc}
 8000eb2:	bf00      	nop
 8000eb4:	200000e4 	.word	0x200000e4
 8000eb8:	40004400 	.word	0x40004400

08000ebc <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000ebc:	b580      	push	{r7, lr}
 8000ebe:	b08a      	sub	sp, #40	; 0x28
 8000ec0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ec2:	f107 0314 	add.w	r3, r7, #20
 8000ec6:	2200      	movs	r2, #0
 8000ec8:	601a      	str	r2, [r3, #0]
 8000eca:	605a      	str	r2, [r3, #4]
 8000ecc:	609a      	str	r2, [r3, #8]
 8000ece:	60da      	str	r2, [r3, #12]
 8000ed0:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000ed2:	4b2b      	ldr	r3, [pc, #172]	; (8000f80 <MX_GPIO_Init+0xc4>)
 8000ed4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000ed6:	4a2a      	ldr	r2, [pc, #168]	; (8000f80 <MX_GPIO_Init+0xc4>)
 8000ed8:	f043 0304 	orr.w	r3, r3, #4
 8000edc:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000ede:	4b28      	ldr	r3, [pc, #160]	; (8000f80 <MX_GPIO_Init+0xc4>)
 8000ee0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000ee2:	f003 0304 	and.w	r3, r3, #4
 8000ee6:	613b      	str	r3, [r7, #16]
 8000ee8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000eea:	4b25      	ldr	r3, [pc, #148]	; (8000f80 <MX_GPIO_Init+0xc4>)
 8000eec:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000eee:	4a24      	ldr	r2, [pc, #144]	; (8000f80 <MX_GPIO_Init+0xc4>)
 8000ef0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000ef4:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000ef6:	4b22      	ldr	r3, [pc, #136]	; (8000f80 <MX_GPIO_Init+0xc4>)
 8000ef8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000efa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000efe:	60fb      	str	r3, [r7, #12]
 8000f00:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f02:	4b1f      	ldr	r3, [pc, #124]	; (8000f80 <MX_GPIO_Init+0xc4>)
 8000f04:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000f06:	4a1e      	ldr	r2, [pc, #120]	; (8000f80 <MX_GPIO_Init+0xc4>)
 8000f08:	f043 0301 	orr.w	r3, r3, #1
 8000f0c:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000f0e:	4b1c      	ldr	r3, [pc, #112]	; (8000f80 <MX_GPIO_Init+0xc4>)
 8000f10:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000f12:	f003 0301 	and.w	r3, r3, #1
 8000f16:	60bb      	str	r3, [r7, #8]
 8000f18:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000f1a:	4b19      	ldr	r3, [pc, #100]	; (8000f80 <MX_GPIO_Init+0xc4>)
 8000f1c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000f1e:	4a18      	ldr	r2, [pc, #96]	; (8000f80 <MX_GPIO_Init+0xc4>)
 8000f20:	f043 0302 	orr.w	r3, r3, #2
 8000f24:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000f26:	4b16      	ldr	r3, [pc, #88]	; (8000f80 <MX_GPIO_Init+0xc4>)
 8000f28:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000f2a:	f003 0302 	and.w	r3, r3, #2
 8000f2e:	607b      	str	r3, [r7, #4]
 8000f30:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8000f32:	2200      	movs	r2, #0
 8000f34:	2120      	movs	r1, #32
 8000f36:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000f3a:	f000 fcd5 	bl	80018e8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000f3e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000f42:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000f44:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8000f48:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f4a:	2300      	movs	r3, #0
 8000f4c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000f4e:	f107 0314 	add.w	r3, r7, #20
 8000f52:	4619      	mov	r1, r3
 8000f54:	480b      	ldr	r0, [pc, #44]	; (8000f84 <MX_GPIO_Init+0xc8>)
 8000f56:	f000 fb1d 	bl	8001594 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8000f5a:	2320      	movs	r3, #32
 8000f5c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000f5e:	2301      	movs	r3, #1
 8000f60:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f62:	2300      	movs	r3, #0
 8000f64:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f66:	2300      	movs	r3, #0
 8000f68:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000f6a:	f107 0314 	add.w	r3, r7, #20
 8000f6e:	4619      	mov	r1, r3
 8000f70:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000f74:	f000 fb0e 	bl	8001594 <HAL_GPIO_Init>

}
 8000f78:	bf00      	nop
 8000f7a:	3728      	adds	r7, #40	; 0x28
 8000f7c:	46bd      	mov	sp, r7
 8000f7e:	bd80      	pop	{r7, pc}
 8000f80:	40021000 	.word	0x40021000
 8000f84:	48000800 	.word	0x48000800

08000f88 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000f88:	b480      	push	{r7}
 8000f8a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000f8c:	b672      	cpsid	i
}
 8000f8e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000f90:	e7fe      	b.n	8000f90 <Error_Handler+0x8>
	...

08000f94 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000f94:	b480      	push	{r7}
 8000f96:	b083      	sub	sp, #12
 8000f98:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000f9a:	4b0f      	ldr	r3, [pc, #60]	; (8000fd8 <HAL_MspInit+0x44>)
 8000f9c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000f9e:	4a0e      	ldr	r2, [pc, #56]	; (8000fd8 <HAL_MspInit+0x44>)
 8000fa0:	f043 0301 	orr.w	r3, r3, #1
 8000fa4:	6613      	str	r3, [r2, #96]	; 0x60
 8000fa6:	4b0c      	ldr	r3, [pc, #48]	; (8000fd8 <HAL_MspInit+0x44>)
 8000fa8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000faa:	f003 0301 	and.w	r3, r3, #1
 8000fae:	607b      	str	r3, [r7, #4]
 8000fb0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000fb2:	4b09      	ldr	r3, [pc, #36]	; (8000fd8 <HAL_MspInit+0x44>)
 8000fb4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000fb6:	4a08      	ldr	r2, [pc, #32]	; (8000fd8 <HAL_MspInit+0x44>)
 8000fb8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000fbc:	6593      	str	r3, [r2, #88]	; 0x58
 8000fbe:	4b06      	ldr	r3, [pc, #24]	; (8000fd8 <HAL_MspInit+0x44>)
 8000fc0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000fc2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000fc6:	603b      	str	r3, [r7, #0]
 8000fc8:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000fca:	bf00      	nop
 8000fcc:	370c      	adds	r7, #12
 8000fce:	46bd      	mov	sp, r7
 8000fd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fd4:	4770      	bx	lr
 8000fd6:	bf00      	nop
 8000fd8:	40021000 	.word	0x40021000

08000fdc <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000fdc:	b580      	push	{r7, lr}
 8000fde:	b0ac      	sub	sp, #176	; 0xb0
 8000fe0:	af00      	add	r7, sp, #0
 8000fe2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000fe4:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8000fe8:	2200      	movs	r2, #0
 8000fea:	601a      	str	r2, [r3, #0]
 8000fec:	605a      	str	r2, [r3, #4]
 8000fee:	609a      	str	r2, [r3, #8]
 8000ff0:	60da      	str	r2, [r3, #12]
 8000ff2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000ff4:	f107 0314 	add.w	r3, r7, #20
 8000ff8:	2288      	movs	r2, #136	; 0x88
 8000ffa:	2100      	movs	r1, #0
 8000ffc:	4618      	mov	r0, r3
 8000ffe:	f003 fa67 	bl	80044d0 <memset>
  if(hi2c->Instance==I2C1)
 8001002:	687b      	ldr	r3, [r7, #4]
 8001004:	681b      	ldr	r3, [r3, #0]
 8001006:	4a21      	ldr	r2, [pc, #132]	; (800108c <HAL_I2C_MspInit+0xb0>)
 8001008:	4293      	cmp	r3, r2
 800100a:	d13b      	bne.n	8001084 <HAL_I2C_MspInit+0xa8>
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 800100c:	2340      	movs	r3, #64	; 0x40
 800100e:	617b      	str	r3, [r7, #20]
    PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8001010:	2300      	movs	r3, #0
 8001012:	667b      	str	r3, [r7, #100]	; 0x64
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001014:	f107 0314 	add.w	r3, r7, #20
 8001018:	4618      	mov	r0, r3
 800101a:	f002 f857 	bl	80030cc <HAL_RCCEx_PeriphCLKConfig>
 800101e:	4603      	mov	r3, r0
 8001020:	2b00      	cmp	r3, #0
 8001022:	d001      	beq.n	8001028 <HAL_I2C_MspInit+0x4c>
    {
      Error_Handler();
 8001024:	f7ff ffb0 	bl	8000f88 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001028:	4b19      	ldr	r3, [pc, #100]	; (8001090 <HAL_I2C_MspInit+0xb4>)
 800102a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800102c:	4a18      	ldr	r2, [pc, #96]	; (8001090 <HAL_I2C_MspInit+0xb4>)
 800102e:	f043 0302 	orr.w	r3, r3, #2
 8001032:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001034:	4b16      	ldr	r3, [pc, #88]	; (8001090 <HAL_I2C_MspInit+0xb4>)
 8001036:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001038:	f003 0302 	and.w	r3, r3, #2
 800103c:	613b      	str	r3, [r7, #16]
 800103e:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8001040:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001044:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001048:	2312      	movs	r3, #18
 800104a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800104e:	2300      	movs	r3, #0
 8001050:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001054:	2303      	movs	r3, #3
 8001056:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800105a:	2304      	movs	r3, #4
 800105c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001060:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8001064:	4619      	mov	r1, r3
 8001066:	480b      	ldr	r0, [pc, #44]	; (8001094 <HAL_I2C_MspInit+0xb8>)
 8001068:	f000 fa94 	bl	8001594 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800106c:	4b08      	ldr	r3, [pc, #32]	; (8001090 <HAL_I2C_MspInit+0xb4>)
 800106e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001070:	4a07      	ldr	r2, [pc, #28]	; (8001090 <HAL_I2C_MspInit+0xb4>)
 8001072:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001076:	6593      	str	r3, [r2, #88]	; 0x58
 8001078:	4b05      	ldr	r3, [pc, #20]	; (8001090 <HAL_I2C_MspInit+0xb4>)
 800107a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800107c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001080:	60fb      	str	r3, [r7, #12]
 8001082:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8001084:	bf00      	nop
 8001086:	37b0      	adds	r7, #176	; 0xb0
 8001088:	46bd      	mov	sp, r7
 800108a:	bd80      	pop	{r7, pc}
 800108c:	40005400 	.word	0x40005400
 8001090:	40021000 	.word	0x40021000
 8001094:	48000400 	.word	0x48000400

08001098 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001098:	b580      	push	{r7, lr}
 800109a:	b0ac      	sub	sp, #176	; 0xb0
 800109c:	af00      	add	r7, sp, #0
 800109e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80010a0:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 80010a4:	2200      	movs	r2, #0
 80010a6:	601a      	str	r2, [r3, #0]
 80010a8:	605a      	str	r2, [r3, #4]
 80010aa:	609a      	str	r2, [r3, #8]
 80010ac:	60da      	str	r2, [r3, #12]
 80010ae:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80010b0:	f107 0314 	add.w	r3, r7, #20
 80010b4:	2288      	movs	r2, #136	; 0x88
 80010b6:	2100      	movs	r1, #0
 80010b8:	4618      	mov	r0, r3
 80010ba:	f003 fa09 	bl	80044d0 <memset>
  if(huart->Instance==USART2)
 80010be:	687b      	ldr	r3, [r7, #4]
 80010c0:	681b      	ldr	r3, [r3, #0]
 80010c2:	4a21      	ldr	r2, [pc, #132]	; (8001148 <HAL_UART_MspInit+0xb0>)
 80010c4:	4293      	cmp	r3, r2
 80010c6:	d13b      	bne.n	8001140 <HAL_UART_MspInit+0xa8>
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 80010c8:	2302      	movs	r3, #2
 80010ca:	617b      	str	r3, [r7, #20]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 80010cc:	2300      	movs	r3, #0
 80010ce:	653b      	str	r3, [r7, #80]	; 0x50
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80010d0:	f107 0314 	add.w	r3, r7, #20
 80010d4:	4618      	mov	r0, r3
 80010d6:	f001 fff9 	bl	80030cc <HAL_RCCEx_PeriphCLKConfig>
 80010da:	4603      	mov	r3, r0
 80010dc:	2b00      	cmp	r3, #0
 80010de:	d001      	beq.n	80010e4 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 80010e0:	f7ff ff52 	bl	8000f88 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80010e4:	4b19      	ldr	r3, [pc, #100]	; (800114c <HAL_UART_MspInit+0xb4>)
 80010e6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80010e8:	4a18      	ldr	r2, [pc, #96]	; (800114c <HAL_UART_MspInit+0xb4>)
 80010ea:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80010ee:	6593      	str	r3, [r2, #88]	; 0x58
 80010f0:	4b16      	ldr	r3, [pc, #88]	; (800114c <HAL_UART_MspInit+0xb4>)
 80010f2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80010f4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80010f8:	613b      	str	r3, [r7, #16]
 80010fa:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80010fc:	4b13      	ldr	r3, [pc, #76]	; (800114c <HAL_UART_MspInit+0xb4>)
 80010fe:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001100:	4a12      	ldr	r2, [pc, #72]	; (800114c <HAL_UART_MspInit+0xb4>)
 8001102:	f043 0301 	orr.w	r3, r3, #1
 8001106:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001108:	4b10      	ldr	r3, [pc, #64]	; (800114c <HAL_UART_MspInit+0xb4>)
 800110a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800110c:	f003 0301 	and.w	r3, r3, #1
 8001110:	60fb      	str	r3, [r7, #12]
 8001112:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8001114:	230c      	movs	r3, #12
 8001116:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800111a:	2302      	movs	r3, #2
 800111c:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001120:	2300      	movs	r3, #0
 8001122:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001126:	2303      	movs	r3, #3
 8001128:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800112c:	2307      	movs	r3, #7
 800112e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001132:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8001136:	4619      	mov	r1, r3
 8001138:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800113c:	f000 fa2a 	bl	8001594 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8001140:	bf00      	nop
 8001142:	37b0      	adds	r7, #176	; 0xb0
 8001144:	46bd      	mov	sp, r7
 8001146:	bd80      	pop	{r7, pc}
 8001148:	40004400 	.word	0x40004400
 800114c:	40021000 	.word	0x40021000

08001150 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001150:	b480      	push	{r7}
 8001152:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001154:	e7fe      	b.n	8001154 <NMI_Handler+0x4>

08001156 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001156:	b480      	push	{r7}
 8001158:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800115a:	e7fe      	b.n	800115a <HardFault_Handler+0x4>

0800115c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800115c:	b480      	push	{r7}
 800115e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001160:	e7fe      	b.n	8001160 <MemManage_Handler+0x4>

08001162 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001162:	b480      	push	{r7}
 8001164:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001166:	e7fe      	b.n	8001166 <BusFault_Handler+0x4>

08001168 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001168:	b480      	push	{r7}
 800116a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800116c:	e7fe      	b.n	800116c <UsageFault_Handler+0x4>

0800116e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800116e:	b480      	push	{r7}
 8001170:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001172:	bf00      	nop
 8001174:	46bd      	mov	sp, r7
 8001176:	f85d 7b04 	ldr.w	r7, [sp], #4
 800117a:	4770      	bx	lr

0800117c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800117c:	b480      	push	{r7}
 800117e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001180:	bf00      	nop
 8001182:	46bd      	mov	sp, r7
 8001184:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001188:	4770      	bx	lr

0800118a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800118a:	b480      	push	{r7}
 800118c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800118e:	bf00      	nop
 8001190:	46bd      	mov	sp, r7
 8001192:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001196:	4770      	bx	lr

08001198 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001198:	b580      	push	{r7, lr}
 800119a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800119c:	f000 f8d0 	bl	8001340 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80011a0:	bf00      	nop
 80011a2:	bd80      	pop	{r7, pc}

080011a4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80011a4:	b580      	push	{r7, lr}
 80011a6:	b086      	sub	sp, #24
 80011a8:	af00      	add	r7, sp, #0
 80011aa:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80011ac:	4a14      	ldr	r2, [pc, #80]	; (8001200 <_sbrk+0x5c>)
 80011ae:	4b15      	ldr	r3, [pc, #84]	; (8001204 <_sbrk+0x60>)
 80011b0:	1ad3      	subs	r3, r2, r3
 80011b2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80011b4:	697b      	ldr	r3, [r7, #20]
 80011b6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80011b8:	4b13      	ldr	r3, [pc, #76]	; (8001208 <_sbrk+0x64>)
 80011ba:	681b      	ldr	r3, [r3, #0]
 80011bc:	2b00      	cmp	r3, #0
 80011be:	d102      	bne.n	80011c6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80011c0:	4b11      	ldr	r3, [pc, #68]	; (8001208 <_sbrk+0x64>)
 80011c2:	4a12      	ldr	r2, [pc, #72]	; (800120c <_sbrk+0x68>)
 80011c4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80011c6:	4b10      	ldr	r3, [pc, #64]	; (8001208 <_sbrk+0x64>)
 80011c8:	681a      	ldr	r2, [r3, #0]
 80011ca:	687b      	ldr	r3, [r7, #4]
 80011cc:	4413      	add	r3, r2
 80011ce:	693a      	ldr	r2, [r7, #16]
 80011d0:	429a      	cmp	r2, r3
 80011d2:	d207      	bcs.n	80011e4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80011d4:	f003 f952 	bl	800447c <__errno>
 80011d8:	4603      	mov	r3, r0
 80011da:	220c      	movs	r2, #12
 80011dc:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80011de:	f04f 33ff 	mov.w	r3, #4294967295
 80011e2:	e009      	b.n	80011f8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80011e4:	4b08      	ldr	r3, [pc, #32]	; (8001208 <_sbrk+0x64>)
 80011e6:	681b      	ldr	r3, [r3, #0]
 80011e8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80011ea:	4b07      	ldr	r3, [pc, #28]	; (8001208 <_sbrk+0x64>)
 80011ec:	681a      	ldr	r2, [r3, #0]
 80011ee:	687b      	ldr	r3, [r7, #4]
 80011f0:	4413      	add	r3, r2
 80011f2:	4a05      	ldr	r2, [pc, #20]	; (8001208 <_sbrk+0x64>)
 80011f4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80011f6:	68fb      	ldr	r3, [r7, #12]
}
 80011f8:	4618      	mov	r0, r3
 80011fa:	3718      	adds	r7, #24
 80011fc:	46bd      	mov	sp, r7
 80011fe:	bd80      	pop	{r7, pc}
 8001200:	20018000 	.word	0x20018000
 8001204:	00000400 	.word	0x00000400
 8001208:	2000008c 	.word	0x2000008c
 800120c:	20000180 	.word	0x20000180

08001210 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8001210:	b480      	push	{r7}
 8001212:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8001214:	4b06      	ldr	r3, [pc, #24]	; (8001230 <SystemInit+0x20>)
 8001216:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800121a:	4a05      	ldr	r2, [pc, #20]	; (8001230 <SystemInit+0x20>)
 800121c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001220:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 8001224:	bf00      	nop
 8001226:	46bd      	mov	sp, r7
 8001228:	f85d 7b04 	ldr.w	r7, [sp], #4
 800122c:	4770      	bx	lr
 800122e:	bf00      	nop
 8001230:	e000ed00 	.word	0xe000ed00

08001234 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8001234:	f8df d034 	ldr.w	sp, [pc, #52]	; 800126c <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001238:	f7ff ffea 	bl	8001210 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800123c:	480c      	ldr	r0, [pc, #48]	; (8001270 <LoopForever+0x6>)
  ldr r1, =_edata
 800123e:	490d      	ldr	r1, [pc, #52]	; (8001274 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001240:	4a0d      	ldr	r2, [pc, #52]	; (8001278 <LoopForever+0xe>)
  movs r3, #0
 8001242:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001244:	e002      	b.n	800124c <LoopCopyDataInit>

08001246 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001246:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001248:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800124a:	3304      	adds	r3, #4

0800124c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800124c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800124e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001250:	d3f9      	bcc.n	8001246 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001252:	4a0a      	ldr	r2, [pc, #40]	; (800127c <LoopForever+0x12>)
  ldr r4, =_ebss
 8001254:	4c0a      	ldr	r4, [pc, #40]	; (8001280 <LoopForever+0x16>)
  movs r3, #0
 8001256:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001258:	e001      	b.n	800125e <LoopFillZerobss>

0800125a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800125a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800125c:	3204      	adds	r2, #4

0800125e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800125e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001260:	d3fb      	bcc.n	800125a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001262:	f003 f911 	bl	8004488 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001266:	f7ff fcbd 	bl	8000be4 <main>

0800126a <LoopForever>:

LoopForever:
    b LoopForever
 800126a:	e7fe      	b.n	800126a <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 800126c:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8001270:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001274:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 8001278:	08004e04 	.word	0x08004e04
  ldr r2, =_sbss
 800127c:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 8001280:	2000017c 	.word	0x2000017c

08001284 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001284:	e7fe      	b.n	8001284 <ADC1_2_IRQHandler>
	...

08001288 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001288:	b580      	push	{r7, lr}
 800128a:	b082      	sub	sp, #8
 800128c:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 800128e:	2300      	movs	r3, #0
 8001290:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0)
   __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001292:	4b0c      	ldr	r3, [pc, #48]	; (80012c4 <HAL_Init+0x3c>)
 8001294:	681b      	ldr	r3, [r3, #0]
 8001296:	4a0b      	ldr	r2, [pc, #44]	; (80012c4 <HAL_Init+0x3c>)
 8001298:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800129c:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800129e:	2003      	movs	r0, #3
 80012a0:	f000 f944 	bl	800152c <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80012a4:	2000      	movs	r0, #0
 80012a6:	f000 f80f 	bl	80012c8 <HAL_InitTick>
 80012aa:	4603      	mov	r3, r0
 80012ac:	2b00      	cmp	r3, #0
 80012ae:	d002      	beq.n	80012b6 <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 80012b0:	2301      	movs	r3, #1
 80012b2:	71fb      	strb	r3, [r7, #7]
 80012b4:	e001      	b.n	80012ba <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80012b6:	f7ff fe6d 	bl	8000f94 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80012ba:	79fb      	ldrb	r3, [r7, #7]
}
 80012bc:	4618      	mov	r0, r3
 80012be:	3708      	adds	r7, #8
 80012c0:	46bd      	mov	sp, r7
 80012c2:	bd80      	pop	{r7, pc}
 80012c4:	40022000 	.word	0x40022000

080012c8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80012c8:	b580      	push	{r7, lr}
 80012ca:	b084      	sub	sp, #16
 80012cc:	af00      	add	r7, sp, #0
 80012ce:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 80012d0:	2300      	movs	r3, #0
 80012d2:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 80012d4:	4b17      	ldr	r3, [pc, #92]	; (8001334 <HAL_InitTick+0x6c>)
 80012d6:	781b      	ldrb	r3, [r3, #0]
 80012d8:	2b00      	cmp	r3, #0
 80012da:	d023      	beq.n	8001324 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 80012dc:	4b16      	ldr	r3, [pc, #88]	; (8001338 <HAL_InitTick+0x70>)
 80012de:	681a      	ldr	r2, [r3, #0]
 80012e0:	4b14      	ldr	r3, [pc, #80]	; (8001334 <HAL_InitTick+0x6c>)
 80012e2:	781b      	ldrb	r3, [r3, #0]
 80012e4:	4619      	mov	r1, r3
 80012e6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80012ea:	fbb3 f3f1 	udiv	r3, r3, r1
 80012ee:	fbb2 f3f3 	udiv	r3, r2, r3
 80012f2:	4618      	mov	r0, r3
 80012f4:	f000 f941 	bl	800157a <HAL_SYSTICK_Config>
 80012f8:	4603      	mov	r3, r0
 80012fa:	2b00      	cmp	r3, #0
 80012fc:	d10f      	bne.n	800131e <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80012fe:	687b      	ldr	r3, [r7, #4]
 8001300:	2b0f      	cmp	r3, #15
 8001302:	d809      	bhi.n	8001318 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001304:	2200      	movs	r2, #0
 8001306:	6879      	ldr	r1, [r7, #4]
 8001308:	f04f 30ff 	mov.w	r0, #4294967295
 800130c:	f000 f919 	bl	8001542 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001310:	4a0a      	ldr	r2, [pc, #40]	; (800133c <HAL_InitTick+0x74>)
 8001312:	687b      	ldr	r3, [r7, #4]
 8001314:	6013      	str	r3, [r2, #0]
 8001316:	e007      	b.n	8001328 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8001318:	2301      	movs	r3, #1
 800131a:	73fb      	strb	r3, [r7, #15]
 800131c:	e004      	b.n	8001328 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 800131e:	2301      	movs	r3, #1
 8001320:	73fb      	strb	r3, [r7, #15]
 8001322:	e001      	b.n	8001328 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8001324:	2301      	movs	r3, #1
 8001326:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8001328:	7bfb      	ldrb	r3, [r7, #15]
}
 800132a:	4618      	mov	r0, r3
 800132c:	3710      	adds	r7, #16
 800132e:	46bd      	mov	sp, r7
 8001330:	bd80      	pop	{r7, pc}
 8001332:	bf00      	nop
 8001334:	20000008 	.word	0x20000008
 8001338:	20000000 	.word	0x20000000
 800133c:	20000004 	.word	0x20000004

08001340 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001340:	b480      	push	{r7}
 8001342:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001344:	4b06      	ldr	r3, [pc, #24]	; (8001360 <HAL_IncTick+0x20>)
 8001346:	781b      	ldrb	r3, [r3, #0]
 8001348:	461a      	mov	r2, r3
 800134a:	4b06      	ldr	r3, [pc, #24]	; (8001364 <HAL_IncTick+0x24>)
 800134c:	681b      	ldr	r3, [r3, #0]
 800134e:	4413      	add	r3, r2
 8001350:	4a04      	ldr	r2, [pc, #16]	; (8001364 <HAL_IncTick+0x24>)
 8001352:	6013      	str	r3, [r2, #0]
}
 8001354:	bf00      	nop
 8001356:	46bd      	mov	sp, r7
 8001358:	f85d 7b04 	ldr.w	r7, [sp], #4
 800135c:	4770      	bx	lr
 800135e:	bf00      	nop
 8001360:	20000008 	.word	0x20000008
 8001364:	20000168 	.word	0x20000168

08001368 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001368:	b480      	push	{r7}
 800136a:	af00      	add	r7, sp, #0
  return uwTick;
 800136c:	4b03      	ldr	r3, [pc, #12]	; (800137c <HAL_GetTick+0x14>)
 800136e:	681b      	ldr	r3, [r3, #0]
}
 8001370:	4618      	mov	r0, r3
 8001372:	46bd      	mov	sp, r7
 8001374:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001378:	4770      	bx	lr
 800137a:	bf00      	nop
 800137c:	20000168 	.word	0x20000168

08001380 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001380:	b580      	push	{r7, lr}
 8001382:	b084      	sub	sp, #16
 8001384:	af00      	add	r7, sp, #0
 8001386:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001388:	f7ff ffee 	bl	8001368 <HAL_GetTick>
 800138c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800138e:	687b      	ldr	r3, [r7, #4]
 8001390:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001392:	68fb      	ldr	r3, [r7, #12]
 8001394:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001398:	d005      	beq.n	80013a6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 800139a:	4b0a      	ldr	r3, [pc, #40]	; (80013c4 <HAL_Delay+0x44>)
 800139c:	781b      	ldrb	r3, [r3, #0]
 800139e:	461a      	mov	r2, r3
 80013a0:	68fb      	ldr	r3, [r7, #12]
 80013a2:	4413      	add	r3, r2
 80013a4:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80013a6:	bf00      	nop
 80013a8:	f7ff ffde 	bl	8001368 <HAL_GetTick>
 80013ac:	4602      	mov	r2, r0
 80013ae:	68bb      	ldr	r3, [r7, #8]
 80013b0:	1ad3      	subs	r3, r2, r3
 80013b2:	68fa      	ldr	r2, [r7, #12]
 80013b4:	429a      	cmp	r2, r3
 80013b6:	d8f7      	bhi.n	80013a8 <HAL_Delay+0x28>
  {
  }
}
 80013b8:	bf00      	nop
 80013ba:	bf00      	nop
 80013bc:	3710      	adds	r7, #16
 80013be:	46bd      	mov	sp, r7
 80013c0:	bd80      	pop	{r7, pc}
 80013c2:	bf00      	nop
 80013c4:	20000008 	.word	0x20000008

080013c8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80013c8:	b480      	push	{r7}
 80013ca:	b085      	sub	sp, #20
 80013cc:	af00      	add	r7, sp, #0
 80013ce:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80013d0:	687b      	ldr	r3, [r7, #4]
 80013d2:	f003 0307 	and.w	r3, r3, #7
 80013d6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80013d8:	4b0c      	ldr	r3, [pc, #48]	; (800140c <__NVIC_SetPriorityGrouping+0x44>)
 80013da:	68db      	ldr	r3, [r3, #12]
 80013dc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80013de:	68ba      	ldr	r2, [r7, #8]
 80013e0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80013e4:	4013      	ands	r3, r2
 80013e6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80013e8:	68fb      	ldr	r3, [r7, #12]
 80013ea:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80013ec:	68bb      	ldr	r3, [r7, #8]
 80013ee:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80013f0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80013f4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80013f8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80013fa:	4a04      	ldr	r2, [pc, #16]	; (800140c <__NVIC_SetPriorityGrouping+0x44>)
 80013fc:	68bb      	ldr	r3, [r7, #8]
 80013fe:	60d3      	str	r3, [r2, #12]
}
 8001400:	bf00      	nop
 8001402:	3714      	adds	r7, #20
 8001404:	46bd      	mov	sp, r7
 8001406:	f85d 7b04 	ldr.w	r7, [sp], #4
 800140a:	4770      	bx	lr
 800140c:	e000ed00 	.word	0xe000ed00

08001410 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001410:	b480      	push	{r7}
 8001412:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001414:	4b04      	ldr	r3, [pc, #16]	; (8001428 <__NVIC_GetPriorityGrouping+0x18>)
 8001416:	68db      	ldr	r3, [r3, #12]
 8001418:	0a1b      	lsrs	r3, r3, #8
 800141a:	f003 0307 	and.w	r3, r3, #7
}
 800141e:	4618      	mov	r0, r3
 8001420:	46bd      	mov	sp, r7
 8001422:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001426:	4770      	bx	lr
 8001428:	e000ed00 	.word	0xe000ed00

0800142c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800142c:	b480      	push	{r7}
 800142e:	b083      	sub	sp, #12
 8001430:	af00      	add	r7, sp, #0
 8001432:	4603      	mov	r3, r0
 8001434:	6039      	str	r1, [r7, #0]
 8001436:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001438:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800143c:	2b00      	cmp	r3, #0
 800143e:	db0a      	blt.n	8001456 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001440:	683b      	ldr	r3, [r7, #0]
 8001442:	b2da      	uxtb	r2, r3
 8001444:	490c      	ldr	r1, [pc, #48]	; (8001478 <__NVIC_SetPriority+0x4c>)
 8001446:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800144a:	0112      	lsls	r2, r2, #4
 800144c:	b2d2      	uxtb	r2, r2
 800144e:	440b      	add	r3, r1
 8001450:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001454:	e00a      	b.n	800146c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001456:	683b      	ldr	r3, [r7, #0]
 8001458:	b2da      	uxtb	r2, r3
 800145a:	4908      	ldr	r1, [pc, #32]	; (800147c <__NVIC_SetPriority+0x50>)
 800145c:	79fb      	ldrb	r3, [r7, #7]
 800145e:	f003 030f 	and.w	r3, r3, #15
 8001462:	3b04      	subs	r3, #4
 8001464:	0112      	lsls	r2, r2, #4
 8001466:	b2d2      	uxtb	r2, r2
 8001468:	440b      	add	r3, r1
 800146a:	761a      	strb	r2, [r3, #24]
}
 800146c:	bf00      	nop
 800146e:	370c      	adds	r7, #12
 8001470:	46bd      	mov	sp, r7
 8001472:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001476:	4770      	bx	lr
 8001478:	e000e100 	.word	0xe000e100
 800147c:	e000ed00 	.word	0xe000ed00

08001480 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001480:	b480      	push	{r7}
 8001482:	b089      	sub	sp, #36	; 0x24
 8001484:	af00      	add	r7, sp, #0
 8001486:	60f8      	str	r0, [r7, #12]
 8001488:	60b9      	str	r1, [r7, #8]
 800148a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800148c:	68fb      	ldr	r3, [r7, #12]
 800148e:	f003 0307 	and.w	r3, r3, #7
 8001492:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001494:	69fb      	ldr	r3, [r7, #28]
 8001496:	f1c3 0307 	rsb	r3, r3, #7
 800149a:	2b04      	cmp	r3, #4
 800149c:	bf28      	it	cs
 800149e:	2304      	movcs	r3, #4
 80014a0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80014a2:	69fb      	ldr	r3, [r7, #28]
 80014a4:	3304      	adds	r3, #4
 80014a6:	2b06      	cmp	r3, #6
 80014a8:	d902      	bls.n	80014b0 <NVIC_EncodePriority+0x30>
 80014aa:	69fb      	ldr	r3, [r7, #28]
 80014ac:	3b03      	subs	r3, #3
 80014ae:	e000      	b.n	80014b2 <NVIC_EncodePriority+0x32>
 80014b0:	2300      	movs	r3, #0
 80014b2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80014b4:	f04f 32ff 	mov.w	r2, #4294967295
 80014b8:	69bb      	ldr	r3, [r7, #24]
 80014ba:	fa02 f303 	lsl.w	r3, r2, r3
 80014be:	43da      	mvns	r2, r3
 80014c0:	68bb      	ldr	r3, [r7, #8]
 80014c2:	401a      	ands	r2, r3
 80014c4:	697b      	ldr	r3, [r7, #20]
 80014c6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80014c8:	f04f 31ff 	mov.w	r1, #4294967295
 80014cc:	697b      	ldr	r3, [r7, #20]
 80014ce:	fa01 f303 	lsl.w	r3, r1, r3
 80014d2:	43d9      	mvns	r1, r3
 80014d4:	687b      	ldr	r3, [r7, #4]
 80014d6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80014d8:	4313      	orrs	r3, r2
         );
}
 80014da:	4618      	mov	r0, r3
 80014dc:	3724      	adds	r7, #36	; 0x24
 80014de:	46bd      	mov	sp, r7
 80014e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014e4:	4770      	bx	lr
	...

080014e8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80014e8:	b580      	push	{r7, lr}
 80014ea:	b082      	sub	sp, #8
 80014ec:	af00      	add	r7, sp, #0
 80014ee:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80014f0:	687b      	ldr	r3, [r7, #4]
 80014f2:	3b01      	subs	r3, #1
 80014f4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80014f8:	d301      	bcc.n	80014fe <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80014fa:	2301      	movs	r3, #1
 80014fc:	e00f      	b.n	800151e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80014fe:	4a0a      	ldr	r2, [pc, #40]	; (8001528 <SysTick_Config+0x40>)
 8001500:	687b      	ldr	r3, [r7, #4]
 8001502:	3b01      	subs	r3, #1
 8001504:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001506:	210f      	movs	r1, #15
 8001508:	f04f 30ff 	mov.w	r0, #4294967295
 800150c:	f7ff ff8e 	bl	800142c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001510:	4b05      	ldr	r3, [pc, #20]	; (8001528 <SysTick_Config+0x40>)
 8001512:	2200      	movs	r2, #0
 8001514:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001516:	4b04      	ldr	r3, [pc, #16]	; (8001528 <SysTick_Config+0x40>)
 8001518:	2207      	movs	r2, #7
 800151a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800151c:	2300      	movs	r3, #0
}
 800151e:	4618      	mov	r0, r3
 8001520:	3708      	adds	r7, #8
 8001522:	46bd      	mov	sp, r7
 8001524:	bd80      	pop	{r7, pc}
 8001526:	bf00      	nop
 8001528:	e000e010 	.word	0xe000e010

0800152c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800152c:	b580      	push	{r7, lr}
 800152e:	b082      	sub	sp, #8
 8001530:	af00      	add	r7, sp, #0
 8001532:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001534:	6878      	ldr	r0, [r7, #4]
 8001536:	f7ff ff47 	bl	80013c8 <__NVIC_SetPriorityGrouping>
}
 800153a:	bf00      	nop
 800153c:	3708      	adds	r7, #8
 800153e:	46bd      	mov	sp, r7
 8001540:	bd80      	pop	{r7, pc}

08001542 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001542:	b580      	push	{r7, lr}
 8001544:	b086      	sub	sp, #24
 8001546:	af00      	add	r7, sp, #0
 8001548:	4603      	mov	r3, r0
 800154a:	60b9      	str	r1, [r7, #8]
 800154c:	607a      	str	r2, [r7, #4]
 800154e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8001550:	2300      	movs	r3, #0
 8001552:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001554:	f7ff ff5c 	bl	8001410 <__NVIC_GetPriorityGrouping>
 8001558:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800155a:	687a      	ldr	r2, [r7, #4]
 800155c:	68b9      	ldr	r1, [r7, #8]
 800155e:	6978      	ldr	r0, [r7, #20]
 8001560:	f7ff ff8e 	bl	8001480 <NVIC_EncodePriority>
 8001564:	4602      	mov	r2, r0
 8001566:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800156a:	4611      	mov	r1, r2
 800156c:	4618      	mov	r0, r3
 800156e:	f7ff ff5d 	bl	800142c <__NVIC_SetPriority>
}
 8001572:	bf00      	nop
 8001574:	3718      	adds	r7, #24
 8001576:	46bd      	mov	sp, r7
 8001578:	bd80      	pop	{r7, pc}

0800157a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800157a:	b580      	push	{r7, lr}
 800157c:	b082      	sub	sp, #8
 800157e:	af00      	add	r7, sp, #0
 8001580:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001582:	6878      	ldr	r0, [r7, #4]
 8001584:	f7ff ffb0 	bl	80014e8 <SysTick_Config>
 8001588:	4603      	mov	r3, r0
}
 800158a:	4618      	mov	r0, r3
 800158c:	3708      	adds	r7, #8
 800158e:	46bd      	mov	sp, r7
 8001590:	bd80      	pop	{r7, pc}
	...

08001594 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001594:	b480      	push	{r7}
 8001596:	b087      	sub	sp, #28
 8001598:	af00      	add	r7, sp, #0
 800159a:	6078      	str	r0, [r7, #4]
 800159c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800159e:	2300      	movs	r3, #0
 80015a0:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80015a2:	e17f      	b.n	80018a4 <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80015a4:	683b      	ldr	r3, [r7, #0]
 80015a6:	681a      	ldr	r2, [r3, #0]
 80015a8:	2101      	movs	r1, #1
 80015aa:	697b      	ldr	r3, [r7, #20]
 80015ac:	fa01 f303 	lsl.w	r3, r1, r3
 80015b0:	4013      	ands	r3, r2
 80015b2:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80015b4:	68fb      	ldr	r3, [r7, #12]
 80015b6:	2b00      	cmp	r3, #0
 80015b8:	f000 8171 	beq.w	800189e <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80015bc:	683b      	ldr	r3, [r7, #0]
 80015be:	685b      	ldr	r3, [r3, #4]
 80015c0:	f003 0303 	and.w	r3, r3, #3
 80015c4:	2b01      	cmp	r3, #1
 80015c6:	d005      	beq.n	80015d4 <HAL_GPIO_Init+0x40>
 80015c8:	683b      	ldr	r3, [r7, #0]
 80015ca:	685b      	ldr	r3, [r3, #4]
 80015cc:	f003 0303 	and.w	r3, r3, #3
 80015d0:	2b02      	cmp	r3, #2
 80015d2:	d130      	bne.n	8001636 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80015d4:	687b      	ldr	r3, [r7, #4]
 80015d6:	689b      	ldr	r3, [r3, #8]
 80015d8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80015da:	697b      	ldr	r3, [r7, #20]
 80015dc:	005b      	lsls	r3, r3, #1
 80015de:	2203      	movs	r2, #3
 80015e0:	fa02 f303 	lsl.w	r3, r2, r3
 80015e4:	43db      	mvns	r3, r3
 80015e6:	693a      	ldr	r2, [r7, #16]
 80015e8:	4013      	ands	r3, r2
 80015ea:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80015ec:	683b      	ldr	r3, [r7, #0]
 80015ee:	68da      	ldr	r2, [r3, #12]
 80015f0:	697b      	ldr	r3, [r7, #20]
 80015f2:	005b      	lsls	r3, r3, #1
 80015f4:	fa02 f303 	lsl.w	r3, r2, r3
 80015f8:	693a      	ldr	r2, [r7, #16]
 80015fa:	4313      	orrs	r3, r2
 80015fc:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80015fe:	687b      	ldr	r3, [r7, #4]
 8001600:	693a      	ldr	r2, [r7, #16]
 8001602:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001604:	687b      	ldr	r3, [r7, #4]
 8001606:	685b      	ldr	r3, [r3, #4]
 8001608:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800160a:	2201      	movs	r2, #1
 800160c:	697b      	ldr	r3, [r7, #20]
 800160e:	fa02 f303 	lsl.w	r3, r2, r3
 8001612:	43db      	mvns	r3, r3
 8001614:	693a      	ldr	r2, [r7, #16]
 8001616:	4013      	ands	r3, r2
 8001618:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800161a:	683b      	ldr	r3, [r7, #0]
 800161c:	685b      	ldr	r3, [r3, #4]
 800161e:	091b      	lsrs	r3, r3, #4
 8001620:	f003 0201 	and.w	r2, r3, #1
 8001624:	697b      	ldr	r3, [r7, #20]
 8001626:	fa02 f303 	lsl.w	r3, r2, r3
 800162a:	693a      	ldr	r2, [r7, #16]
 800162c:	4313      	orrs	r3, r2
 800162e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001630:	687b      	ldr	r3, [r7, #4]
 8001632:	693a      	ldr	r2, [r7, #16]
 8001634:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 8001636:	683b      	ldr	r3, [r7, #0]
 8001638:	685b      	ldr	r3, [r3, #4]
 800163a:	f003 0303 	and.w	r3, r3, #3
 800163e:	2b03      	cmp	r3, #3
 8001640:	d118      	bne.n	8001674 <HAL_GPIO_Init+0xe0>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 8001642:	687b      	ldr	r3, [r7, #4]
 8001644:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001646:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 8001648:	2201      	movs	r2, #1
 800164a:	697b      	ldr	r3, [r7, #20]
 800164c:	fa02 f303 	lsl.w	r3, r2, r3
 8001650:	43db      	mvns	r3, r3
 8001652:	693a      	ldr	r2, [r7, #16]
 8001654:	4013      	ands	r3, r2
 8001656:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 8001658:	683b      	ldr	r3, [r7, #0]
 800165a:	685b      	ldr	r3, [r3, #4]
 800165c:	08db      	lsrs	r3, r3, #3
 800165e:	f003 0201 	and.w	r2, r3, #1
 8001662:	697b      	ldr	r3, [r7, #20]
 8001664:	fa02 f303 	lsl.w	r3, r2, r3
 8001668:	693a      	ldr	r2, [r7, #16]
 800166a:	4313      	orrs	r3, r2
 800166c:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 800166e:	687b      	ldr	r3, [r7, #4]
 8001670:	693a      	ldr	r2, [r7, #16]
 8001672:	62da      	str	r2, [r3, #44]	; 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001674:	683b      	ldr	r3, [r7, #0]
 8001676:	685b      	ldr	r3, [r3, #4]
 8001678:	f003 0303 	and.w	r3, r3, #3
 800167c:	2b03      	cmp	r3, #3
 800167e:	d017      	beq.n	80016b0 <HAL_GPIO_Init+0x11c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8001680:	687b      	ldr	r3, [r7, #4]
 8001682:	68db      	ldr	r3, [r3, #12]
 8001684:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001686:	697b      	ldr	r3, [r7, #20]
 8001688:	005b      	lsls	r3, r3, #1
 800168a:	2203      	movs	r2, #3
 800168c:	fa02 f303 	lsl.w	r3, r2, r3
 8001690:	43db      	mvns	r3, r3
 8001692:	693a      	ldr	r2, [r7, #16]
 8001694:	4013      	ands	r3, r2
 8001696:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001698:	683b      	ldr	r3, [r7, #0]
 800169a:	689a      	ldr	r2, [r3, #8]
 800169c:	697b      	ldr	r3, [r7, #20]
 800169e:	005b      	lsls	r3, r3, #1
 80016a0:	fa02 f303 	lsl.w	r3, r2, r3
 80016a4:	693a      	ldr	r2, [r7, #16]
 80016a6:	4313      	orrs	r3, r2
 80016a8:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80016aa:	687b      	ldr	r3, [r7, #4]
 80016ac:	693a      	ldr	r2, [r7, #16]
 80016ae:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80016b0:	683b      	ldr	r3, [r7, #0]
 80016b2:	685b      	ldr	r3, [r3, #4]
 80016b4:	f003 0303 	and.w	r3, r3, #3
 80016b8:	2b02      	cmp	r3, #2
 80016ba:	d123      	bne.n	8001704 <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80016bc:	697b      	ldr	r3, [r7, #20]
 80016be:	08da      	lsrs	r2, r3, #3
 80016c0:	687b      	ldr	r3, [r7, #4]
 80016c2:	3208      	adds	r2, #8
 80016c4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80016c8:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80016ca:	697b      	ldr	r3, [r7, #20]
 80016cc:	f003 0307 	and.w	r3, r3, #7
 80016d0:	009b      	lsls	r3, r3, #2
 80016d2:	220f      	movs	r2, #15
 80016d4:	fa02 f303 	lsl.w	r3, r2, r3
 80016d8:	43db      	mvns	r3, r3
 80016da:	693a      	ldr	r2, [r7, #16]
 80016dc:	4013      	ands	r3, r2
 80016de:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80016e0:	683b      	ldr	r3, [r7, #0]
 80016e2:	691a      	ldr	r2, [r3, #16]
 80016e4:	697b      	ldr	r3, [r7, #20]
 80016e6:	f003 0307 	and.w	r3, r3, #7
 80016ea:	009b      	lsls	r3, r3, #2
 80016ec:	fa02 f303 	lsl.w	r3, r2, r3
 80016f0:	693a      	ldr	r2, [r7, #16]
 80016f2:	4313      	orrs	r3, r2
 80016f4:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80016f6:	697b      	ldr	r3, [r7, #20]
 80016f8:	08da      	lsrs	r2, r3, #3
 80016fa:	687b      	ldr	r3, [r7, #4]
 80016fc:	3208      	adds	r2, #8
 80016fe:	6939      	ldr	r1, [r7, #16]
 8001700:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001704:	687b      	ldr	r3, [r7, #4]
 8001706:	681b      	ldr	r3, [r3, #0]
 8001708:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 800170a:	697b      	ldr	r3, [r7, #20]
 800170c:	005b      	lsls	r3, r3, #1
 800170e:	2203      	movs	r2, #3
 8001710:	fa02 f303 	lsl.w	r3, r2, r3
 8001714:	43db      	mvns	r3, r3
 8001716:	693a      	ldr	r2, [r7, #16]
 8001718:	4013      	ands	r3, r2
 800171a:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800171c:	683b      	ldr	r3, [r7, #0]
 800171e:	685b      	ldr	r3, [r3, #4]
 8001720:	f003 0203 	and.w	r2, r3, #3
 8001724:	697b      	ldr	r3, [r7, #20]
 8001726:	005b      	lsls	r3, r3, #1
 8001728:	fa02 f303 	lsl.w	r3, r2, r3
 800172c:	693a      	ldr	r2, [r7, #16]
 800172e:	4313      	orrs	r3, r2
 8001730:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001732:	687b      	ldr	r3, [r7, #4]
 8001734:	693a      	ldr	r2, [r7, #16]
 8001736:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001738:	683b      	ldr	r3, [r7, #0]
 800173a:	685b      	ldr	r3, [r3, #4]
 800173c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001740:	2b00      	cmp	r3, #0
 8001742:	f000 80ac 	beq.w	800189e <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001746:	4b5f      	ldr	r3, [pc, #380]	; (80018c4 <HAL_GPIO_Init+0x330>)
 8001748:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800174a:	4a5e      	ldr	r2, [pc, #376]	; (80018c4 <HAL_GPIO_Init+0x330>)
 800174c:	f043 0301 	orr.w	r3, r3, #1
 8001750:	6613      	str	r3, [r2, #96]	; 0x60
 8001752:	4b5c      	ldr	r3, [pc, #368]	; (80018c4 <HAL_GPIO_Init+0x330>)
 8001754:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001756:	f003 0301 	and.w	r3, r3, #1
 800175a:	60bb      	str	r3, [r7, #8]
 800175c:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 800175e:	4a5a      	ldr	r2, [pc, #360]	; (80018c8 <HAL_GPIO_Init+0x334>)
 8001760:	697b      	ldr	r3, [r7, #20]
 8001762:	089b      	lsrs	r3, r3, #2
 8001764:	3302      	adds	r3, #2
 8001766:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800176a:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 800176c:	697b      	ldr	r3, [r7, #20]
 800176e:	f003 0303 	and.w	r3, r3, #3
 8001772:	009b      	lsls	r3, r3, #2
 8001774:	220f      	movs	r2, #15
 8001776:	fa02 f303 	lsl.w	r3, r2, r3
 800177a:	43db      	mvns	r3, r3
 800177c:	693a      	ldr	r2, [r7, #16]
 800177e:	4013      	ands	r3, r2
 8001780:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001782:	687b      	ldr	r3, [r7, #4]
 8001784:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8001788:	d025      	beq.n	80017d6 <HAL_GPIO_Init+0x242>
 800178a:	687b      	ldr	r3, [r7, #4]
 800178c:	4a4f      	ldr	r2, [pc, #316]	; (80018cc <HAL_GPIO_Init+0x338>)
 800178e:	4293      	cmp	r3, r2
 8001790:	d01f      	beq.n	80017d2 <HAL_GPIO_Init+0x23e>
 8001792:	687b      	ldr	r3, [r7, #4]
 8001794:	4a4e      	ldr	r2, [pc, #312]	; (80018d0 <HAL_GPIO_Init+0x33c>)
 8001796:	4293      	cmp	r3, r2
 8001798:	d019      	beq.n	80017ce <HAL_GPIO_Init+0x23a>
 800179a:	687b      	ldr	r3, [r7, #4]
 800179c:	4a4d      	ldr	r2, [pc, #308]	; (80018d4 <HAL_GPIO_Init+0x340>)
 800179e:	4293      	cmp	r3, r2
 80017a0:	d013      	beq.n	80017ca <HAL_GPIO_Init+0x236>
 80017a2:	687b      	ldr	r3, [r7, #4]
 80017a4:	4a4c      	ldr	r2, [pc, #304]	; (80018d8 <HAL_GPIO_Init+0x344>)
 80017a6:	4293      	cmp	r3, r2
 80017a8:	d00d      	beq.n	80017c6 <HAL_GPIO_Init+0x232>
 80017aa:	687b      	ldr	r3, [r7, #4]
 80017ac:	4a4b      	ldr	r2, [pc, #300]	; (80018dc <HAL_GPIO_Init+0x348>)
 80017ae:	4293      	cmp	r3, r2
 80017b0:	d007      	beq.n	80017c2 <HAL_GPIO_Init+0x22e>
 80017b2:	687b      	ldr	r3, [r7, #4]
 80017b4:	4a4a      	ldr	r2, [pc, #296]	; (80018e0 <HAL_GPIO_Init+0x34c>)
 80017b6:	4293      	cmp	r3, r2
 80017b8:	d101      	bne.n	80017be <HAL_GPIO_Init+0x22a>
 80017ba:	2306      	movs	r3, #6
 80017bc:	e00c      	b.n	80017d8 <HAL_GPIO_Init+0x244>
 80017be:	2307      	movs	r3, #7
 80017c0:	e00a      	b.n	80017d8 <HAL_GPIO_Init+0x244>
 80017c2:	2305      	movs	r3, #5
 80017c4:	e008      	b.n	80017d8 <HAL_GPIO_Init+0x244>
 80017c6:	2304      	movs	r3, #4
 80017c8:	e006      	b.n	80017d8 <HAL_GPIO_Init+0x244>
 80017ca:	2303      	movs	r3, #3
 80017cc:	e004      	b.n	80017d8 <HAL_GPIO_Init+0x244>
 80017ce:	2302      	movs	r3, #2
 80017d0:	e002      	b.n	80017d8 <HAL_GPIO_Init+0x244>
 80017d2:	2301      	movs	r3, #1
 80017d4:	e000      	b.n	80017d8 <HAL_GPIO_Init+0x244>
 80017d6:	2300      	movs	r3, #0
 80017d8:	697a      	ldr	r2, [r7, #20]
 80017da:	f002 0203 	and.w	r2, r2, #3
 80017de:	0092      	lsls	r2, r2, #2
 80017e0:	4093      	lsls	r3, r2
 80017e2:	693a      	ldr	r2, [r7, #16]
 80017e4:	4313      	orrs	r3, r2
 80017e6:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80017e8:	4937      	ldr	r1, [pc, #220]	; (80018c8 <HAL_GPIO_Init+0x334>)
 80017ea:	697b      	ldr	r3, [r7, #20]
 80017ec:	089b      	lsrs	r3, r3, #2
 80017ee:	3302      	adds	r3, #2
 80017f0:	693a      	ldr	r2, [r7, #16]
 80017f2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80017f6:	4b3b      	ldr	r3, [pc, #236]	; (80018e4 <HAL_GPIO_Init+0x350>)
 80017f8:	689b      	ldr	r3, [r3, #8]
 80017fa:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80017fc:	68fb      	ldr	r3, [r7, #12]
 80017fe:	43db      	mvns	r3, r3
 8001800:	693a      	ldr	r2, [r7, #16]
 8001802:	4013      	ands	r3, r2
 8001804:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001806:	683b      	ldr	r3, [r7, #0]
 8001808:	685b      	ldr	r3, [r3, #4]
 800180a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800180e:	2b00      	cmp	r3, #0
 8001810:	d003      	beq.n	800181a <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 8001812:	693a      	ldr	r2, [r7, #16]
 8001814:	68fb      	ldr	r3, [r7, #12]
 8001816:	4313      	orrs	r3, r2
 8001818:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 800181a:	4a32      	ldr	r2, [pc, #200]	; (80018e4 <HAL_GPIO_Init+0x350>)
 800181c:	693b      	ldr	r3, [r7, #16]
 800181e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8001820:	4b30      	ldr	r3, [pc, #192]	; (80018e4 <HAL_GPIO_Init+0x350>)
 8001822:	68db      	ldr	r3, [r3, #12]
 8001824:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001826:	68fb      	ldr	r3, [r7, #12]
 8001828:	43db      	mvns	r3, r3
 800182a:	693a      	ldr	r2, [r7, #16]
 800182c:	4013      	ands	r3, r2
 800182e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001830:	683b      	ldr	r3, [r7, #0]
 8001832:	685b      	ldr	r3, [r3, #4]
 8001834:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001838:	2b00      	cmp	r3, #0
 800183a:	d003      	beq.n	8001844 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 800183c:	693a      	ldr	r2, [r7, #16]
 800183e:	68fb      	ldr	r3, [r7, #12]
 8001840:	4313      	orrs	r3, r2
 8001842:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8001844:	4a27      	ldr	r2, [pc, #156]	; (80018e4 <HAL_GPIO_Init+0x350>)
 8001846:	693b      	ldr	r3, [r7, #16]
 8001848:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 800184a:	4b26      	ldr	r3, [pc, #152]	; (80018e4 <HAL_GPIO_Init+0x350>)
 800184c:	685b      	ldr	r3, [r3, #4]
 800184e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001850:	68fb      	ldr	r3, [r7, #12]
 8001852:	43db      	mvns	r3, r3
 8001854:	693a      	ldr	r2, [r7, #16]
 8001856:	4013      	ands	r3, r2
 8001858:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 800185a:	683b      	ldr	r3, [r7, #0]
 800185c:	685b      	ldr	r3, [r3, #4]
 800185e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001862:	2b00      	cmp	r3, #0
 8001864:	d003      	beq.n	800186e <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 8001866:	693a      	ldr	r2, [r7, #16]
 8001868:	68fb      	ldr	r3, [r7, #12]
 800186a:	4313      	orrs	r3, r2
 800186c:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 800186e:	4a1d      	ldr	r2, [pc, #116]	; (80018e4 <HAL_GPIO_Init+0x350>)
 8001870:	693b      	ldr	r3, [r7, #16]
 8001872:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8001874:	4b1b      	ldr	r3, [pc, #108]	; (80018e4 <HAL_GPIO_Init+0x350>)
 8001876:	681b      	ldr	r3, [r3, #0]
 8001878:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800187a:	68fb      	ldr	r3, [r7, #12]
 800187c:	43db      	mvns	r3, r3
 800187e:	693a      	ldr	r2, [r7, #16]
 8001880:	4013      	ands	r3, r2
 8001882:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001884:	683b      	ldr	r3, [r7, #0]
 8001886:	685b      	ldr	r3, [r3, #4]
 8001888:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800188c:	2b00      	cmp	r3, #0
 800188e:	d003      	beq.n	8001898 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 8001890:	693a      	ldr	r2, [r7, #16]
 8001892:	68fb      	ldr	r3, [r7, #12]
 8001894:	4313      	orrs	r3, r2
 8001896:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8001898:	4a12      	ldr	r2, [pc, #72]	; (80018e4 <HAL_GPIO_Init+0x350>)
 800189a:	693b      	ldr	r3, [r7, #16]
 800189c:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 800189e:	697b      	ldr	r3, [r7, #20]
 80018a0:	3301      	adds	r3, #1
 80018a2:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80018a4:	683b      	ldr	r3, [r7, #0]
 80018a6:	681a      	ldr	r2, [r3, #0]
 80018a8:	697b      	ldr	r3, [r7, #20]
 80018aa:	fa22 f303 	lsr.w	r3, r2, r3
 80018ae:	2b00      	cmp	r3, #0
 80018b0:	f47f ae78 	bne.w	80015a4 <HAL_GPIO_Init+0x10>
  }
}
 80018b4:	bf00      	nop
 80018b6:	bf00      	nop
 80018b8:	371c      	adds	r7, #28
 80018ba:	46bd      	mov	sp, r7
 80018bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018c0:	4770      	bx	lr
 80018c2:	bf00      	nop
 80018c4:	40021000 	.word	0x40021000
 80018c8:	40010000 	.word	0x40010000
 80018cc:	48000400 	.word	0x48000400
 80018d0:	48000800 	.word	0x48000800
 80018d4:	48000c00 	.word	0x48000c00
 80018d8:	48001000 	.word	0x48001000
 80018dc:	48001400 	.word	0x48001400
 80018e0:	48001800 	.word	0x48001800
 80018e4:	40010400 	.word	0x40010400

080018e8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80018e8:	b480      	push	{r7}
 80018ea:	b083      	sub	sp, #12
 80018ec:	af00      	add	r7, sp, #0
 80018ee:	6078      	str	r0, [r7, #4]
 80018f0:	460b      	mov	r3, r1
 80018f2:	807b      	strh	r3, [r7, #2]
 80018f4:	4613      	mov	r3, r2
 80018f6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80018f8:	787b      	ldrb	r3, [r7, #1]
 80018fa:	2b00      	cmp	r3, #0
 80018fc:	d003      	beq.n	8001906 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80018fe:	887a      	ldrh	r2, [r7, #2]
 8001900:	687b      	ldr	r3, [r7, #4]
 8001902:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001904:	e002      	b.n	800190c <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001906:	887a      	ldrh	r2, [r7, #2]
 8001908:	687b      	ldr	r3, [r7, #4]
 800190a:	629a      	str	r2, [r3, #40]	; 0x28
}
 800190c:	bf00      	nop
 800190e:	370c      	adds	r7, #12
 8001910:	46bd      	mov	sp, r7
 8001912:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001916:	4770      	bx	lr

08001918 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001918:	b580      	push	{r7, lr}
 800191a:	b082      	sub	sp, #8
 800191c:	af00      	add	r7, sp, #0
 800191e:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001920:	687b      	ldr	r3, [r7, #4]
 8001922:	2b00      	cmp	r3, #0
 8001924:	d101      	bne.n	800192a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001926:	2301      	movs	r3, #1
 8001928:	e081      	b.n	8001a2e <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800192a:	687b      	ldr	r3, [r7, #4]
 800192c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001930:	b2db      	uxtb	r3, r3
 8001932:	2b00      	cmp	r3, #0
 8001934:	d106      	bne.n	8001944 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001936:	687b      	ldr	r3, [r7, #4]
 8001938:	2200      	movs	r2, #0
 800193a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 800193e:	6878      	ldr	r0, [r7, #4]
 8001940:	f7ff fb4c 	bl	8000fdc <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001944:	687b      	ldr	r3, [r7, #4]
 8001946:	2224      	movs	r2, #36	; 0x24
 8001948:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800194c:	687b      	ldr	r3, [r7, #4]
 800194e:	681b      	ldr	r3, [r3, #0]
 8001950:	681a      	ldr	r2, [r3, #0]
 8001952:	687b      	ldr	r3, [r7, #4]
 8001954:	681b      	ldr	r3, [r3, #0]
 8001956:	f022 0201 	bic.w	r2, r2, #1
 800195a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 800195c:	687b      	ldr	r3, [r7, #4]
 800195e:	685a      	ldr	r2, [r3, #4]
 8001960:	687b      	ldr	r3, [r7, #4]
 8001962:	681b      	ldr	r3, [r3, #0]
 8001964:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8001968:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 800196a:	687b      	ldr	r3, [r7, #4]
 800196c:	681b      	ldr	r3, [r3, #0]
 800196e:	689a      	ldr	r2, [r3, #8]
 8001970:	687b      	ldr	r3, [r7, #4]
 8001972:	681b      	ldr	r3, [r3, #0]
 8001974:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001978:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800197a:	687b      	ldr	r3, [r7, #4]
 800197c:	68db      	ldr	r3, [r3, #12]
 800197e:	2b01      	cmp	r3, #1
 8001980:	d107      	bne.n	8001992 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8001982:	687b      	ldr	r3, [r7, #4]
 8001984:	689a      	ldr	r2, [r3, #8]
 8001986:	687b      	ldr	r3, [r7, #4]
 8001988:	681b      	ldr	r3, [r3, #0]
 800198a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800198e:	609a      	str	r2, [r3, #8]
 8001990:	e006      	b.n	80019a0 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8001992:	687b      	ldr	r3, [r7, #4]
 8001994:	689a      	ldr	r2, [r3, #8]
 8001996:	687b      	ldr	r3, [r7, #4]
 8001998:	681b      	ldr	r3, [r3, #0]
 800199a:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 800199e:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80019a0:	687b      	ldr	r3, [r7, #4]
 80019a2:	68db      	ldr	r3, [r3, #12]
 80019a4:	2b02      	cmp	r3, #2
 80019a6:	d104      	bne.n	80019b2 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 80019a8:	687b      	ldr	r3, [r7, #4]
 80019aa:	681b      	ldr	r3, [r3, #0]
 80019ac:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80019b0:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 80019b2:	687b      	ldr	r3, [r7, #4]
 80019b4:	681b      	ldr	r3, [r3, #0]
 80019b6:	685b      	ldr	r3, [r3, #4]
 80019b8:	687a      	ldr	r2, [r7, #4]
 80019ba:	6812      	ldr	r2, [r2, #0]
 80019bc:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80019c0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80019c4:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 80019c6:	687b      	ldr	r3, [r7, #4]
 80019c8:	681b      	ldr	r3, [r3, #0]
 80019ca:	68da      	ldr	r2, [r3, #12]
 80019cc:	687b      	ldr	r3, [r7, #4]
 80019ce:	681b      	ldr	r3, [r3, #0]
 80019d0:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80019d4:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80019d6:	687b      	ldr	r3, [r7, #4]
 80019d8:	691a      	ldr	r2, [r3, #16]
 80019da:	687b      	ldr	r3, [r7, #4]
 80019dc:	695b      	ldr	r3, [r3, #20]
 80019de:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 80019e2:	687b      	ldr	r3, [r7, #4]
 80019e4:	699b      	ldr	r3, [r3, #24]
 80019e6:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80019e8:	687b      	ldr	r3, [r7, #4]
 80019ea:	681b      	ldr	r3, [r3, #0]
 80019ec:	430a      	orrs	r2, r1
 80019ee:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80019f0:	687b      	ldr	r3, [r7, #4]
 80019f2:	69d9      	ldr	r1, [r3, #28]
 80019f4:	687b      	ldr	r3, [r7, #4]
 80019f6:	6a1a      	ldr	r2, [r3, #32]
 80019f8:	687b      	ldr	r3, [r7, #4]
 80019fa:	681b      	ldr	r3, [r3, #0]
 80019fc:	430a      	orrs	r2, r1
 80019fe:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001a00:	687b      	ldr	r3, [r7, #4]
 8001a02:	681b      	ldr	r3, [r3, #0]
 8001a04:	681a      	ldr	r2, [r3, #0]
 8001a06:	687b      	ldr	r3, [r7, #4]
 8001a08:	681b      	ldr	r3, [r3, #0]
 8001a0a:	f042 0201 	orr.w	r2, r2, #1
 8001a0e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001a10:	687b      	ldr	r3, [r7, #4]
 8001a12:	2200      	movs	r2, #0
 8001a14:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8001a16:	687b      	ldr	r3, [r7, #4]
 8001a18:	2220      	movs	r2, #32
 8001a1a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8001a1e:	687b      	ldr	r3, [r7, #4]
 8001a20:	2200      	movs	r2, #0
 8001a22:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001a24:	687b      	ldr	r3, [r7, #4]
 8001a26:	2200      	movs	r2, #0
 8001a28:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8001a2c:	2300      	movs	r3, #0
}
 8001a2e:	4618      	mov	r0, r3
 8001a30:	3708      	adds	r7, #8
 8001a32:	46bd      	mov	sp, r7
 8001a34:	bd80      	pop	{r7, pc}
	...

08001a38 <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 8001a38:	b580      	push	{r7, lr}
 8001a3a:	b088      	sub	sp, #32
 8001a3c:	af02      	add	r7, sp, #8
 8001a3e:	60f8      	str	r0, [r7, #12]
 8001a40:	607a      	str	r2, [r7, #4]
 8001a42:	461a      	mov	r2, r3
 8001a44:	460b      	mov	r3, r1
 8001a46:	817b      	strh	r3, [r7, #10]
 8001a48:	4613      	mov	r3, r2
 8001a4a:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001a4c:	68fb      	ldr	r3, [r7, #12]
 8001a4e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001a52:	b2db      	uxtb	r3, r3
 8001a54:	2b20      	cmp	r3, #32
 8001a56:	f040 80da 	bne.w	8001c0e <HAL_I2C_Master_Transmit+0x1d6>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001a5a:	68fb      	ldr	r3, [r7, #12]
 8001a5c:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8001a60:	2b01      	cmp	r3, #1
 8001a62:	d101      	bne.n	8001a68 <HAL_I2C_Master_Transmit+0x30>
 8001a64:	2302      	movs	r3, #2
 8001a66:	e0d3      	b.n	8001c10 <HAL_I2C_Master_Transmit+0x1d8>
 8001a68:	68fb      	ldr	r3, [r7, #12]
 8001a6a:	2201      	movs	r2, #1
 8001a6c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8001a70:	f7ff fc7a 	bl	8001368 <HAL_GetTick>
 8001a74:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8001a76:	697b      	ldr	r3, [r7, #20]
 8001a78:	9300      	str	r3, [sp, #0]
 8001a7a:	2319      	movs	r3, #25
 8001a7c:	2201      	movs	r2, #1
 8001a7e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001a82:	68f8      	ldr	r0, [r7, #12]
 8001a84:	f000 f9e6 	bl	8001e54 <I2C_WaitOnFlagUntilTimeout>
 8001a88:	4603      	mov	r3, r0
 8001a8a:	2b00      	cmp	r3, #0
 8001a8c:	d001      	beq.n	8001a92 <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 8001a8e:	2301      	movs	r3, #1
 8001a90:	e0be      	b.n	8001c10 <HAL_I2C_Master_Transmit+0x1d8>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8001a92:	68fb      	ldr	r3, [r7, #12]
 8001a94:	2221      	movs	r2, #33	; 0x21
 8001a96:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8001a9a:	68fb      	ldr	r3, [r7, #12]
 8001a9c:	2210      	movs	r2, #16
 8001a9e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001aa2:	68fb      	ldr	r3, [r7, #12]
 8001aa4:	2200      	movs	r2, #0
 8001aa6:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8001aa8:	68fb      	ldr	r3, [r7, #12]
 8001aaa:	687a      	ldr	r2, [r7, #4]
 8001aac:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8001aae:	68fb      	ldr	r3, [r7, #12]
 8001ab0:	893a      	ldrh	r2, [r7, #8]
 8001ab2:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8001ab4:	68fb      	ldr	r3, [r7, #12]
 8001ab6:	2200      	movs	r2, #0
 8001ab8:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001aba:	68fb      	ldr	r3, [r7, #12]
 8001abc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001abe:	b29b      	uxth	r3, r3
 8001ac0:	2bff      	cmp	r3, #255	; 0xff
 8001ac2:	d90e      	bls.n	8001ae2 <HAL_I2C_Master_Transmit+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8001ac4:	68fb      	ldr	r3, [r7, #12]
 8001ac6:	22ff      	movs	r2, #255	; 0xff
 8001ac8:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8001aca:	68fb      	ldr	r3, [r7, #12]
 8001acc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001ace:	b2da      	uxtb	r2, r3
 8001ad0:	8979      	ldrh	r1, [r7, #10]
 8001ad2:	4b51      	ldr	r3, [pc, #324]	; (8001c18 <HAL_I2C_Master_Transmit+0x1e0>)
 8001ad4:	9300      	str	r3, [sp, #0]
 8001ad6:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001ada:	68f8      	ldr	r0, [r7, #12]
 8001adc:	f000 fbdc 	bl	8002298 <I2C_TransferConfig>
 8001ae0:	e06c      	b.n	8001bbc <HAL_I2C_Master_Transmit+0x184>
                         I2C_GENERATE_START_WRITE);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8001ae2:	68fb      	ldr	r3, [r7, #12]
 8001ae4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001ae6:	b29a      	uxth	r2, r3
 8001ae8:	68fb      	ldr	r3, [r7, #12]
 8001aea:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8001aec:	68fb      	ldr	r3, [r7, #12]
 8001aee:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001af0:	b2da      	uxtb	r2, r3
 8001af2:	8979      	ldrh	r1, [r7, #10]
 8001af4:	4b48      	ldr	r3, [pc, #288]	; (8001c18 <HAL_I2C_Master_Transmit+0x1e0>)
 8001af6:	9300      	str	r3, [sp, #0]
 8001af8:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001afc:	68f8      	ldr	r0, [r7, #12]
 8001afe:	f000 fbcb 	bl	8002298 <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 8001b02:	e05b      	b.n	8001bbc <HAL_I2C_Master_Transmit+0x184>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001b04:	697a      	ldr	r2, [r7, #20]
 8001b06:	6a39      	ldr	r1, [r7, #32]
 8001b08:	68f8      	ldr	r0, [r7, #12]
 8001b0a:	f000 f9e3 	bl	8001ed4 <I2C_WaitOnTXISFlagUntilTimeout>
 8001b0e:	4603      	mov	r3, r0
 8001b10:	2b00      	cmp	r3, #0
 8001b12:	d001      	beq.n	8001b18 <HAL_I2C_Master_Transmit+0xe0>
      {
        return HAL_ERROR;
 8001b14:	2301      	movs	r3, #1
 8001b16:	e07b      	b.n	8001c10 <HAL_I2C_Master_Transmit+0x1d8>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8001b18:	68fb      	ldr	r3, [r7, #12]
 8001b1a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b1c:	781a      	ldrb	r2, [r3, #0]
 8001b1e:	68fb      	ldr	r3, [r7, #12]
 8001b20:	681b      	ldr	r3, [r3, #0]
 8001b22:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8001b24:	68fb      	ldr	r3, [r7, #12]
 8001b26:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b28:	1c5a      	adds	r2, r3, #1
 8001b2a:	68fb      	ldr	r3, [r7, #12]
 8001b2c:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8001b2e:	68fb      	ldr	r3, [r7, #12]
 8001b30:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001b32:	b29b      	uxth	r3, r3
 8001b34:	3b01      	subs	r3, #1
 8001b36:	b29a      	uxth	r2, r3
 8001b38:	68fb      	ldr	r3, [r7, #12]
 8001b3a:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8001b3c:	68fb      	ldr	r3, [r7, #12]
 8001b3e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001b40:	3b01      	subs	r3, #1
 8001b42:	b29a      	uxth	r2, r3
 8001b44:	68fb      	ldr	r3, [r7, #12]
 8001b46:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8001b48:	68fb      	ldr	r3, [r7, #12]
 8001b4a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001b4c:	b29b      	uxth	r3, r3
 8001b4e:	2b00      	cmp	r3, #0
 8001b50:	d034      	beq.n	8001bbc <HAL_I2C_Master_Transmit+0x184>
 8001b52:	68fb      	ldr	r3, [r7, #12]
 8001b54:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001b56:	2b00      	cmp	r3, #0
 8001b58:	d130      	bne.n	8001bbc <HAL_I2C_Master_Transmit+0x184>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8001b5a:	697b      	ldr	r3, [r7, #20]
 8001b5c:	9300      	str	r3, [sp, #0]
 8001b5e:	6a3b      	ldr	r3, [r7, #32]
 8001b60:	2200      	movs	r2, #0
 8001b62:	2180      	movs	r1, #128	; 0x80
 8001b64:	68f8      	ldr	r0, [r7, #12]
 8001b66:	f000 f975 	bl	8001e54 <I2C_WaitOnFlagUntilTimeout>
 8001b6a:	4603      	mov	r3, r0
 8001b6c:	2b00      	cmp	r3, #0
 8001b6e:	d001      	beq.n	8001b74 <HAL_I2C_Master_Transmit+0x13c>
        {
          return HAL_ERROR;
 8001b70:	2301      	movs	r3, #1
 8001b72:	e04d      	b.n	8001c10 <HAL_I2C_Master_Transmit+0x1d8>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001b74:	68fb      	ldr	r3, [r7, #12]
 8001b76:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001b78:	b29b      	uxth	r3, r3
 8001b7a:	2bff      	cmp	r3, #255	; 0xff
 8001b7c:	d90e      	bls.n	8001b9c <HAL_I2C_Master_Transmit+0x164>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8001b7e:	68fb      	ldr	r3, [r7, #12]
 8001b80:	22ff      	movs	r2, #255	; 0xff
 8001b82:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8001b84:	68fb      	ldr	r3, [r7, #12]
 8001b86:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001b88:	b2da      	uxtb	r2, r3
 8001b8a:	8979      	ldrh	r1, [r7, #10]
 8001b8c:	2300      	movs	r3, #0
 8001b8e:	9300      	str	r3, [sp, #0]
 8001b90:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001b94:	68f8      	ldr	r0, [r7, #12]
 8001b96:	f000 fb7f 	bl	8002298 <I2C_TransferConfig>
 8001b9a:	e00f      	b.n	8001bbc <HAL_I2C_Master_Transmit+0x184>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8001b9c:	68fb      	ldr	r3, [r7, #12]
 8001b9e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001ba0:	b29a      	uxth	r2, r3
 8001ba2:	68fb      	ldr	r3, [r7, #12]
 8001ba4:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8001ba6:	68fb      	ldr	r3, [r7, #12]
 8001ba8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001baa:	b2da      	uxtb	r2, r3
 8001bac:	8979      	ldrh	r1, [r7, #10]
 8001bae:	2300      	movs	r3, #0
 8001bb0:	9300      	str	r3, [sp, #0]
 8001bb2:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001bb6:	68f8      	ldr	r0, [r7, #12]
 8001bb8:	f000 fb6e 	bl	8002298 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8001bbc:	68fb      	ldr	r3, [r7, #12]
 8001bbe:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001bc0:	b29b      	uxth	r3, r3
 8001bc2:	2b00      	cmp	r3, #0
 8001bc4:	d19e      	bne.n	8001b04 <HAL_I2C_Master_Transmit+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001bc6:	697a      	ldr	r2, [r7, #20]
 8001bc8:	6a39      	ldr	r1, [r7, #32]
 8001bca:	68f8      	ldr	r0, [r7, #12]
 8001bcc:	f000 f9c2 	bl	8001f54 <I2C_WaitOnSTOPFlagUntilTimeout>
 8001bd0:	4603      	mov	r3, r0
 8001bd2:	2b00      	cmp	r3, #0
 8001bd4:	d001      	beq.n	8001bda <HAL_I2C_Master_Transmit+0x1a2>
    {
      return HAL_ERROR;
 8001bd6:	2301      	movs	r3, #1
 8001bd8:	e01a      	b.n	8001c10 <HAL_I2C_Master_Transmit+0x1d8>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001bda:	68fb      	ldr	r3, [r7, #12]
 8001bdc:	681b      	ldr	r3, [r3, #0]
 8001bde:	2220      	movs	r2, #32
 8001be0:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8001be2:	68fb      	ldr	r3, [r7, #12]
 8001be4:	681b      	ldr	r3, [r3, #0]
 8001be6:	6859      	ldr	r1, [r3, #4]
 8001be8:	68fb      	ldr	r3, [r7, #12]
 8001bea:	681a      	ldr	r2, [r3, #0]
 8001bec:	4b0b      	ldr	r3, [pc, #44]	; (8001c1c <HAL_I2C_Master_Transmit+0x1e4>)
 8001bee:	400b      	ands	r3, r1
 8001bf0:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8001bf2:	68fb      	ldr	r3, [r7, #12]
 8001bf4:	2220      	movs	r2, #32
 8001bf6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8001bfa:	68fb      	ldr	r3, [r7, #12]
 8001bfc:	2200      	movs	r2, #0
 8001bfe:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001c02:	68fb      	ldr	r3, [r7, #12]
 8001c04:	2200      	movs	r2, #0
 8001c06:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8001c0a:	2300      	movs	r3, #0
 8001c0c:	e000      	b.n	8001c10 <HAL_I2C_Master_Transmit+0x1d8>
  }
  else
  {
    return HAL_BUSY;
 8001c0e:	2302      	movs	r3, #2
  }
}
 8001c10:	4618      	mov	r0, r3
 8001c12:	3718      	adds	r7, #24
 8001c14:	46bd      	mov	sp, r7
 8001c16:	bd80      	pop	{r7, pc}
 8001c18:	80002000 	.word	0x80002000
 8001c1c:	fe00e800 	.word	0xfe00e800

08001c20 <HAL_I2C_Master_Receive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                         uint16_t Size, uint32_t Timeout)
{
 8001c20:	b580      	push	{r7, lr}
 8001c22:	b088      	sub	sp, #32
 8001c24:	af02      	add	r7, sp, #8
 8001c26:	60f8      	str	r0, [r7, #12]
 8001c28:	607a      	str	r2, [r7, #4]
 8001c2a:	461a      	mov	r2, r3
 8001c2c:	460b      	mov	r3, r1
 8001c2e:	817b      	strh	r3, [r7, #10]
 8001c30:	4613      	mov	r3, r2
 8001c32:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001c34:	68fb      	ldr	r3, [r7, #12]
 8001c36:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001c3a:	b2db      	uxtb	r3, r3
 8001c3c:	2b20      	cmp	r3, #32
 8001c3e:	f040 80db 	bne.w	8001df8 <HAL_I2C_Master_Receive+0x1d8>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001c42:	68fb      	ldr	r3, [r7, #12]
 8001c44:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8001c48:	2b01      	cmp	r3, #1
 8001c4a:	d101      	bne.n	8001c50 <HAL_I2C_Master_Receive+0x30>
 8001c4c:	2302      	movs	r3, #2
 8001c4e:	e0d4      	b.n	8001dfa <HAL_I2C_Master_Receive+0x1da>
 8001c50:	68fb      	ldr	r3, [r7, #12]
 8001c52:	2201      	movs	r2, #1
 8001c54:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8001c58:	f7ff fb86 	bl	8001368 <HAL_GetTick>
 8001c5c:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8001c5e:	697b      	ldr	r3, [r7, #20]
 8001c60:	9300      	str	r3, [sp, #0]
 8001c62:	2319      	movs	r3, #25
 8001c64:	2201      	movs	r2, #1
 8001c66:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001c6a:	68f8      	ldr	r0, [r7, #12]
 8001c6c:	f000 f8f2 	bl	8001e54 <I2C_WaitOnFlagUntilTimeout>
 8001c70:	4603      	mov	r3, r0
 8001c72:	2b00      	cmp	r3, #0
 8001c74:	d001      	beq.n	8001c7a <HAL_I2C_Master_Receive+0x5a>
    {
      return HAL_ERROR;
 8001c76:	2301      	movs	r3, #1
 8001c78:	e0bf      	b.n	8001dfa <HAL_I2C_Master_Receive+0x1da>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8001c7a:	68fb      	ldr	r3, [r7, #12]
 8001c7c:	2222      	movs	r2, #34	; 0x22
 8001c7e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8001c82:	68fb      	ldr	r3, [r7, #12]
 8001c84:	2210      	movs	r2, #16
 8001c86:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001c8a:	68fb      	ldr	r3, [r7, #12]
 8001c8c:	2200      	movs	r2, #0
 8001c8e:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8001c90:	68fb      	ldr	r3, [r7, #12]
 8001c92:	687a      	ldr	r2, [r7, #4]
 8001c94:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8001c96:	68fb      	ldr	r3, [r7, #12]
 8001c98:	893a      	ldrh	r2, [r7, #8]
 8001c9a:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8001c9c:	68fb      	ldr	r3, [r7, #12]
 8001c9e:	2200      	movs	r2, #0
 8001ca0:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001ca2:	68fb      	ldr	r3, [r7, #12]
 8001ca4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001ca6:	b29b      	uxth	r3, r3
 8001ca8:	2bff      	cmp	r3, #255	; 0xff
 8001caa:	d90e      	bls.n	8001cca <HAL_I2C_Master_Receive+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8001cac:	68fb      	ldr	r3, [r7, #12]
 8001cae:	22ff      	movs	r2, #255	; 0xff
 8001cb0:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8001cb2:	68fb      	ldr	r3, [r7, #12]
 8001cb4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001cb6:	b2da      	uxtb	r2, r3
 8001cb8:	8979      	ldrh	r1, [r7, #10]
 8001cba:	4b52      	ldr	r3, [pc, #328]	; (8001e04 <HAL_I2C_Master_Receive+0x1e4>)
 8001cbc:	9300      	str	r3, [sp, #0]
 8001cbe:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001cc2:	68f8      	ldr	r0, [r7, #12]
 8001cc4:	f000 fae8 	bl	8002298 <I2C_TransferConfig>
 8001cc8:	e06d      	b.n	8001da6 <HAL_I2C_Master_Receive+0x186>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8001cca:	68fb      	ldr	r3, [r7, #12]
 8001ccc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001cce:	b29a      	uxth	r2, r3
 8001cd0:	68fb      	ldr	r3, [r7, #12]
 8001cd2:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8001cd4:	68fb      	ldr	r3, [r7, #12]
 8001cd6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001cd8:	b2da      	uxtb	r2, r3
 8001cda:	8979      	ldrh	r1, [r7, #10]
 8001cdc:	4b49      	ldr	r3, [pc, #292]	; (8001e04 <HAL_I2C_Master_Receive+0x1e4>)
 8001cde:	9300      	str	r3, [sp, #0]
 8001ce0:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001ce4:	68f8      	ldr	r0, [r7, #12]
 8001ce6:	f000 fad7 	bl	8002298 <I2C_TransferConfig>
                         I2C_GENERATE_START_READ);
    }

    while (hi2c->XferCount > 0U)
 8001cea:	e05c      	b.n	8001da6 <HAL_I2C_Master_Receive+0x186>
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001cec:	697a      	ldr	r2, [r7, #20]
 8001cee:	6a39      	ldr	r1, [r7, #32]
 8001cf0:	68f8      	ldr	r0, [r7, #12]
 8001cf2:	f000 f96b 	bl	8001fcc <I2C_WaitOnRXNEFlagUntilTimeout>
 8001cf6:	4603      	mov	r3, r0
 8001cf8:	2b00      	cmp	r3, #0
 8001cfa:	d001      	beq.n	8001d00 <HAL_I2C_Master_Receive+0xe0>
      {
        return HAL_ERROR;
 8001cfc:	2301      	movs	r3, #1
 8001cfe:	e07c      	b.n	8001dfa <HAL_I2C_Master_Receive+0x1da>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8001d00:	68fb      	ldr	r3, [r7, #12]
 8001d02:	681b      	ldr	r3, [r3, #0]
 8001d04:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001d06:	68fb      	ldr	r3, [r7, #12]
 8001d08:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d0a:	b2d2      	uxtb	r2, r2
 8001d0c:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8001d0e:	68fb      	ldr	r3, [r7, #12]
 8001d10:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d12:	1c5a      	adds	r2, r3, #1
 8001d14:	68fb      	ldr	r3, [r7, #12]
 8001d16:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 8001d18:	68fb      	ldr	r3, [r7, #12]
 8001d1a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001d1c:	3b01      	subs	r3, #1
 8001d1e:	b29a      	uxth	r2, r3
 8001d20:	68fb      	ldr	r3, [r7, #12]
 8001d22:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8001d24:	68fb      	ldr	r3, [r7, #12]
 8001d26:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001d28:	b29b      	uxth	r3, r3
 8001d2a:	3b01      	subs	r3, #1
 8001d2c:	b29a      	uxth	r2, r3
 8001d2e:	68fb      	ldr	r3, [r7, #12]
 8001d30:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8001d32:	68fb      	ldr	r3, [r7, #12]
 8001d34:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001d36:	b29b      	uxth	r3, r3
 8001d38:	2b00      	cmp	r3, #0
 8001d3a:	d034      	beq.n	8001da6 <HAL_I2C_Master_Receive+0x186>
 8001d3c:	68fb      	ldr	r3, [r7, #12]
 8001d3e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001d40:	2b00      	cmp	r3, #0
 8001d42:	d130      	bne.n	8001da6 <HAL_I2C_Master_Receive+0x186>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8001d44:	697b      	ldr	r3, [r7, #20]
 8001d46:	9300      	str	r3, [sp, #0]
 8001d48:	6a3b      	ldr	r3, [r7, #32]
 8001d4a:	2200      	movs	r2, #0
 8001d4c:	2180      	movs	r1, #128	; 0x80
 8001d4e:	68f8      	ldr	r0, [r7, #12]
 8001d50:	f000 f880 	bl	8001e54 <I2C_WaitOnFlagUntilTimeout>
 8001d54:	4603      	mov	r3, r0
 8001d56:	2b00      	cmp	r3, #0
 8001d58:	d001      	beq.n	8001d5e <HAL_I2C_Master_Receive+0x13e>
        {
          return HAL_ERROR;
 8001d5a:	2301      	movs	r3, #1
 8001d5c:	e04d      	b.n	8001dfa <HAL_I2C_Master_Receive+0x1da>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001d5e:	68fb      	ldr	r3, [r7, #12]
 8001d60:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001d62:	b29b      	uxth	r3, r3
 8001d64:	2bff      	cmp	r3, #255	; 0xff
 8001d66:	d90e      	bls.n	8001d86 <HAL_I2C_Master_Receive+0x166>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8001d68:	68fb      	ldr	r3, [r7, #12]
 8001d6a:	22ff      	movs	r2, #255	; 0xff
 8001d6c:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8001d6e:	68fb      	ldr	r3, [r7, #12]
 8001d70:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001d72:	b2da      	uxtb	r2, r3
 8001d74:	8979      	ldrh	r1, [r7, #10]
 8001d76:	2300      	movs	r3, #0
 8001d78:	9300      	str	r3, [sp, #0]
 8001d7a:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001d7e:	68f8      	ldr	r0, [r7, #12]
 8001d80:	f000 fa8a 	bl	8002298 <I2C_TransferConfig>
 8001d84:	e00f      	b.n	8001da6 <HAL_I2C_Master_Receive+0x186>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8001d86:	68fb      	ldr	r3, [r7, #12]
 8001d88:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001d8a:	b29a      	uxth	r2, r3
 8001d8c:	68fb      	ldr	r3, [r7, #12]
 8001d8e:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8001d90:	68fb      	ldr	r3, [r7, #12]
 8001d92:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001d94:	b2da      	uxtb	r2, r3
 8001d96:	8979      	ldrh	r1, [r7, #10]
 8001d98:	2300      	movs	r3, #0
 8001d9a:	9300      	str	r3, [sp, #0]
 8001d9c:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001da0:	68f8      	ldr	r0, [r7, #12]
 8001da2:	f000 fa79 	bl	8002298 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8001da6:	68fb      	ldr	r3, [r7, #12]
 8001da8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001daa:	b29b      	uxth	r3, r3
 8001dac:	2b00      	cmp	r3, #0
 8001dae:	d19d      	bne.n	8001cec <HAL_I2C_Master_Receive+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001db0:	697a      	ldr	r2, [r7, #20]
 8001db2:	6a39      	ldr	r1, [r7, #32]
 8001db4:	68f8      	ldr	r0, [r7, #12]
 8001db6:	f000 f8cd 	bl	8001f54 <I2C_WaitOnSTOPFlagUntilTimeout>
 8001dba:	4603      	mov	r3, r0
 8001dbc:	2b00      	cmp	r3, #0
 8001dbe:	d001      	beq.n	8001dc4 <HAL_I2C_Master_Receive+0x1a4>
    {
      return HAL_ERROR;
 8001dc0:	2301      	movs	r3, #1
 8001dc2:	e01a      	b.n	8001dfa <HAL_I2C_Master_Receive+0x1da>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001dc4:	68fb      	ldr	r3, [r7, #12]
 8001dc6:	681b      	ldr	r3, [r3, #0]
 8001dc8:	2220      	movs	r2, #32
 8001dca:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8001dcc:	68fb      	ldr	r3, [r7, #12]
 8001dce:	681b      	ldr	r3, [r3, #0]
 8001dd0:	6859      	ldr	r1, [r3, #4]
 8001dd2:	68fb      	ldr	r3, [r7, #12]
 8001dd4:	681a      	ldr	r2, [r3, #0]
 8001dd6:	4b0c      	ldr	r3, [pc, #48]	; (8001e08 <HAL_I2C_Master_Receive+0x1e8>)
 8001dd8:	400b      	ands	r3, r1
 8001dda:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8001ddc:	68fb      	ldr	r3, [r7, #12]
 8001dde:	2220      	movs	r2, #32
 8001de0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8001de4:	68fb      	ldr	r3, [r7, #12]
 8001de6:	2200      	movs	r2, #0
 8001de8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001dec:	68fb      	ldr	r3, [r7, #12]
 8001dee:	2200      	movs	r2, #0
 8001df0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8001df4:	2300      	movs	r3, #0
 8001df6:	e000      	b.n	8001dfa <HAL_I2C_Master_Receive+0x1da>
  }
  else
  {
    return HAL_BUSY;
 8001df8:	2302      	movs	r3, #2
  }
}
 8001dfa:	4618      	mov	r0, r3
 8001dfc:	3718      	adds	r7, #24
 8001dfe:	46bd      	mov	sp, r7
 8001e00:	bd80      	pop	{r7, pc}
 8001e02:	bf00      	nop
 8001e04:	80002400 	.word	0x80002400
 8001e08:	fe00e800 	.word	0xfe00e800

08001e0c <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8001e0c:	b480      	push	{r7}
 8001e0e:	b083      	sub	sp, #12
 8001e10:	af00      	add	r7, sp, #0
 8001e12:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	681b      	ldr	r3, [r3, #0]
 8001e18:	699b      	ldr	r3, [r3, #24]
 8001e1a:	f003 0302 	and.w	r3, r3, #2
 8001e1e:	2b02      	cmp	r3, #2
 8001e20:	d103      	bne.n	8001e2a <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8001e22:	687b      	ldr	r3, [r7, #4]
 8001e24:	681b      	ldr	r3, [r3, #0]
 8001e26:	2200      	movs	r2, #0
 8001e28:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8001e2a:	687b      	ldr	r3, [r7, #4]
 8001e2c:	681b      	ldr	r3, [r3, #0]
 8001e2e:	699b      	ldr	r3, [r3, #24]
 8001e30:	f003 0301 	and.w	r3, r3, #1
 8001e34:	2b01      	cmp	r3, #1
 8001e36:	d007      	beq.n	8001e48 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	681b      	ldr	r3, [r3, #0]
 8001e3c:	699a      	ldr	r2, [r3, #24]
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	681b      	ldr	r3, [r3, #0]
 8001e42:	f042 0201 	orr.w	r2, r2, #1
 8001e46:	619a      	str	r2, [r3, #24]
  }
}
 8001e48:	bf00      	nop
 8001e4a:	370c      	adds	r7, #12
 8001e4c:	46bd      	mov	sp, r7
 8001e4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e52:	4770      	bx	lr

08001e54 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8001e54:	b580      	push	{r7, lr}
 8001e56:	b084      	sub	sp, #16
 8001e58:	af00      	add	r7, sp, #0
 8001e5a:	60f8      	str	r0, [r7, #12]
 8001e5c:	60b9      	str	r1, [r7, #8]
 8001e5e:	603b      	str	r3, [r7, #0]
 8001e60:	4613      	mov	r3, r2
 8001e62:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8001e64:	e022      	b.n	8001eac <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001e66:	683b      	ldr	r3, [r7, #0]
 8001e68:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001e6c:	d01e      	beq.n	8001eac <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001e6e:	f7ff fa7b 	bl	8001368 <HAL_GetTick>
 8001e72:	4602      	mov	r2, r0
 8001e74:	69bb      	ldr	r3, [r7, #24]
 8001e76:	1ad3      	subs	r3, r2, r3
 8001e78:	683a      	ldr	r2, [r7, #0]
 8001e7a:	429a      	cmp	r2, r3
 8001e7c:	d302      	bcc.n	8001e84 <I2C_WaitOnFlagUntilTimeout+0x30>
 8001e7e:	683b      	ldr	r3, [r7, #0]
 8001e80:	2b00      	cmp	r3, #0
 8001e82:	d113      	bne.n	8001eac <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001e84:	68fb      	ldr	r3, [r7, #12]
 8001e86:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001e88:	f043 0220 	orr.w	r2, r3, #32
 8001e8c:	68fb      	ldr	r3, [r7, #12]
 8001e8e:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8001e90:	68fb      	ldr	r3, [r7, #12]
 8001e92:	2220      	movs	r2, #32
 8001e94:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8001e98:	68fb      	ldr	r3, [r7, #12]
 8001e9a:	2200      	movs	r2, #0
 8001e9c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8001ea0:	68fb      	ldr	r3, [r7, #12]
 8001ea2:	2200      	movs	r2, #0
 8001ea4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 8001ea8:	2301      	movs	r3, #1
 8001eaa:	e00f      	b.n	8001ecc <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8001eac:	68fb      	ldr	r3, [r7, #12]
 8001eae:	681b      	ldr	r3, [r3, #0]
 8001eb0:	699a      	ldr	r2, [r3, #24]
 8001eb2:	68bb      	ldr	r3, [r7, #8]
 8001eb4:	4013      	ands	r3, r2
 8001eb6:	68ba      	ldr	r2, [r7, #8]
 8001eb8:	429a      	cmp	r2, r3
 8001eba:	bf0c      	ite	eq
 8001ebc:	2301      	moveq	r3, #1
 8001ebe:	2300      	movne	r3, #0
 8001ec0:	b2db      	uxtb	r3, r3
 8001ec2:	461a      	mov	r2, r3
 8001ec4:	79fb      	ldrb	r3, [r7, #7]
 8001ec6:	429a      	cmp	r2, r3
 8001ec8:	d0cd      	beq.n	8001e66 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8001eca:	2300      	movs	r3, #0
}
 8001ecc:	4618      	mov	r0, r3
 8001ece:	3710      	adds	r7, #16
 8001ed0:	46bd      	mov	sp, r7
 8001ed2:	bd80      	pop	{r7, pc}

08001ed4 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8001ed4:	b580      	push	{r7, lr}
 8001ed6:	b084      	sub	sp, #16
 8001ed8:	af00      	add	r7, sp, #0
 8001eda:	60f8      	str	r0, [r7, #12]
 8001edc:	60b9      	str	r1, [r7, #8]
 8001ede:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8001ee0:	e02c      	b.n	8001f3c <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8001ee2:	687a      	ldr	r2, [r7, #4]
 8001ee4:	68b9      	ldr	r1, [r7, #8]
 8001ee6:	68f8      	ldr	r0, [r7, #12]
 8001ee8:	f000 f8ea 	bl	80020c0 <I2C_IsErrorOccurred>
 8001eec:	4603      	mov	r3, r0
 8001eee:	2b00      	cmp	r3, #0
 8001ef0:	d001      	beq.n	8001ef6 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8001ef2:	2301      	movs	r3, #1
 8001ef4:	e02a      	b.n	8001f4c <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001ef6:	68bb      	ldr	r3, [r7, #8]
 8001ef8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001efc:	d01e      	beq.n	8001f3c <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001efe:	f7ff fa33 	bl	8001368 <HAL_GetTick>
 8001f02:	4602      	mov	r2, r0
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	1ad3      	subs	r3, r2, r3
 8001f08:	68ba      	ldr	r2, [r7, #8]
 8001f0a:	429a      	cmp	r2, r3
 8001f0c:	d302      	bcc.n	8001f14 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8001f0e:	68bb      	ldr	r3, [r7, #8]
 8001f10:	2b00      	cmp	r3, #0
 8001f12:	d113      	bne.n	8001f3c <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001f14:	68fb      	ldr	r3, [r7, #12]
 8001f16:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001f18:	f043 0220 	orr.w	r2, r3, #32
 8001f1c:	68fb      	ldr	r3, [r7, #12]
 8001f1e:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8001f20:	68fb      	ldr	r3, [r7, #12]
 8001f22:	2220      	movs	r2, #32
 8001f24:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8001f28:	68fb      	ldr	r3, [r7, #12]
 8001f2a:	2200      	movs	r2, #0
 8001f2c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8001f30:	68fb      	ldr	r3, [r7, #12]
 8001f32:	2200      	movs	r2, #0
 8001f34:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8001f38:	2301      	movs	r3, #1
 8001f3a:	e007      	b.n	8001f4c <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8001f3c:	68fb      	ldr	r3, [r7, #12]
 8001f3e:	681b      	ldr	r3, [r3, #0]
 8001f40:	699b      	ldr	r3, [r3, #24]
 8001f42:	f003 0302 	and.w	r3, r3, #2
 8001f46:	2b02      	cmp	r3, #2
 8001f48:	d1cb      	bne.n	8001ee2 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8001f4a:	2300      	movs	r3, #0
}
 8001f4c:	4618      	mov	r0, r3
 8001f4e:	3710      	adds	r7, #16
 8001f50:	46bd      	mov	sp, r7
 8001f52:	bd80      	pop	{r7, pc}

08001f54 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8001f54:	b580      	push	{r7, lr}
 8001f56:	b084      	sub	sp, #16
 8001f58:	af00      	add	r7, sp, #0
 8001f5a:	60f8      	str	r0, [r7, #12]
 8001f5c:	60b9      	str	r1, [r7, #8]
 8001f5e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8001f60:	e028      	b.n	8001fb4 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8001f62:	687a      	ldr	r2, [r7, #4]
 8001f64:	68b9      	ldr	r1, [r7, #8]
 8001f66:	68f8      	ldr	r0, [r7, #12]
 8001f68:	f000 f8aa 	bl	80020c0 <I2C_IsErrorOccurred>
 8001f6c:	4603      	mov	r3, r0
 8001f6e:	2b00      	cmp	r3, #0
 8001f70:	d001      	beq.n	8001f76 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8001f72:	2301      	movs	r3, #1
 8001f74:	e026      	b.n	8001fc4 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001f76:	f7ff f9f7 	bl	8001368 <HAL_GetTick>
 8001f7a:	4602      	mov	r2, r0
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	1ad3      	subs	r3, r2, r3
 8001f80:	68ba      	ldr	r2, [r7, #8]
 8001f82:	429a      	cmp	r2, r3
 8001f84:	d302      	bcc.n	8001f8c <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8001f86:	68bb      	ldr	r3, [r7, #8]
 8001f88:	2b00      	cmp	r3, #0
 8001f8a:	d113      	bne.n	8001fb4 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001f8c:	68fb      	ldr	r3, [r7, #12]
 8001f8e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001f90:	f043 0220 	orr.w	r2, r3, #32
 8001f94:	68fb      	ldr	r3, [r7, #12]
 8001f96:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8001f98:	68fb      	ldr	r3, [r7, #12]
 8001f9a:	2220      	movs	r2, #32
 8001f9c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8001fa0:	68fb      	ldr	r3, [r7, #12]
 8001fa2:	2200      	movs	r2, #0
 8001fa4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8001fa8:	68fb      	ldr	r3, [r7, #12]
 8001faa:	2200      	movs	r2, #0
 8001fac:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8001fb0:	2301      	movs	r3, #1
 8001fb2:	e007      	b.n	8001fc4 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8001fb4:	68fb      	ldr	r3, [r7, #12]
 8001fb6:	681b      	ldr	r3, [r3, #0]
 8001fb8:	699b      	ldr	r3, [r3, #24]
 8001fba:	f003 0320 	and.w	r3, r3, #32
 8001fbe:	2b20      	cmp	r3, #32
 8001fc0:	d1cf      	bne.n	8001f62 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8001fc2:	2300      	movs	r3, #0
}
 8001fc4:	4618      	mov	r0, r3
 8001fc6:	3710      	adds	r7, #16
 8001fc8:	46bd      	mov	sp, r7
 8001fca:	bd80      	pop	{r7, pc}

08001fcc <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8001fcc:	b580      	push	{r7, lr}
 8001fce:	b084      	sub	sp, #16
 8001fd0:	af00      	add	r7, sp, #0
 8001fd2:	60f8      	str	r0, [r7, #12]
 8001fd4:	60b9      	str	r1, [r7, #8]
 8001fd6:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8001fd8:	e064      	b.n	80020a4 <I2C_WaitOnRXNEFlagUntilTimeout+0xd8>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8001fda:	687a      	ldr	r2, [r7, #4]
 8001fdc:	68b9      	ldr	r1, [r7, #8]
 8001fde:	68f8      	ldr	r0, [r7, #12]
 8001fe0:	f000 f86e 	bl	80020c0 <I2C_IsErrorOccurred>
 8001fe4:	4603      	mov	r3, r0
 8001fe6:	2b00      	cmp	r3, #0
 8001fe8:	d001      	beq.n	8001fee <I2C_WaitOnRXNEFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8001fea:	2301      	movs	r3, #1
 8001fec:	e062      	b.n	80020b4 <I2C_WaitOnRXNEFlagUntilTimeout+0xe8>
    }

    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8001fee:	68fb      	ldr	r3, [r7, #12]
 8001ff0:	681b      	ldr	r3, [r3, #0]
 8001ff2:	699b      	ldr	r3, [r3, #24]
 8001ff4:	f003 0320 	and.w	r3, r3, #32
 8001ff8:	2b20      	cmp	r3, #32
 8001ffa:	d138      	bne.n	800206e <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      /* Check if an RXNE is pending */
      /* Store Last receive data if any */
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET) && (hi2c->XferSize > 0U))
 8001ffc:	68fb      	ldr	r3, [r7, #12]
 8001ffe:	681b      	ldr	r3, [r3, #0]
 8002000:	699b      	ldr	r3, [r3, #24]
 8002002:	f003 0304 	and.w	r3, r3, #4
 8002006:	2b04      	cmp	r3, #4
 8002008:	d105      	bne.n	8002016 <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
 800200a:	68fb      	ldr	r3, [r7, #12]
 800200c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800200e:	2b00      	cmp	r3, #0
 8002010:	d001      	beq.n	8002016 <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
      {
        /* Return HAL_OK */
        /* The Reading of data from RXDR will be done in caller function */
        return HAL_OK;
 8002012:	2300      	movs	r3, #0
 8002014:	e04e      	b.n	80020b4 <I2C_WaitOnRXNEFlagUntilTimeout+0xe8>
      }
      else
      {
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002016:	68fb      	ldr	r3, [r7, #12]
 8002018:	681b      	ldr	r3, [r3, #0]
 800201a:	699b      	ldr	r3, [r3, #24]
 800201c:	f003 0310 	and.w	r3, r3, #16
 8002020:	2b10      	cmp	r3, #16
 8002022:	d107      	bne.n	8002034 <I2C_WaitOnRXNEFlagUntilTimeout+0x68>
        {
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002024:	68fb      	ldr	r3, [r7, #12]
 8002026:	681b      	ldr	r3, [r3, #0]
 8002028:	2210      	movs	r2, #16
 800202a:	61da      	str	r2, [r3, #28]
          hi2c->ErrorCode = HAL_I2C_ERROR_AF;
 800202c:	68fb      	ldr	r3, [r7, #12]
 800202e:	2204      	movs	r2, #4
 8002030:	645a      	str	r2, [r3, #68]	; 0x44
 8002032:	e002      	b.n	800203a <I2C_WaitOnRXNEFlagUntilTimeout+0x6e>
        }
        else
        {
          hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002034:	68fb      	ldr	r3, [r7, #12]
 8002036:	2200      	movs	r2, #0
 8002038:	645a      	str	r2, [r3, #68]	; 0x44
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800203a:	68fb      	ldr	r3, [r7, #12]
 800203c:	681b      	ldr	r3, [r3, #0]
 800203e:	2220      	movs	r2, #32
 8002040:	61da      	str	r2, [r3, #28]

        /* Clear Configuration Register 2 */
        I2C_RESET_CR2(hi2c);
 8002042:	68fb      	ldr	r3, [r7, #12]
 8002044:	681b      	ldr	r3, [r3, #0]
 8002046:	6859      	ldr	r1, [r3, #4]
 8002048:	68fb      	ldr	r3, [r7, #12]
 800204a:	681a      	ldr	r2, [r3, #0]
 800204c:	4b1b      	ldr	r3, [pc, #108]	; (80020bc <I2C_WaitOnRXNEFlagUntilTimeout+0xf0>)
 800204e:	400b      	ands	r3, r1
 8002050:	6053      	str	r3, [r2, #4]

        hi2c->State = HAL_I2C_STATE_READY;
 8002052:	68fb      	ldr	r3, [r7, #12]
 8002054:	2220      	movs	r2, #32
 8002056:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800205a:	68fb      	ldr	r3, [r7, #12]
 800205c:	2200      	movs	r2, #0
 800205e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002062:	68fb      	ldr	r3, [r7, #12]
 8002064:	2200      	movs	r2, #0
 8002066:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 800206a:	2301      	movs	r3, #1
 800206c:	e022      	b.n	80020b4 <I2C_WaitOnRXNEFlagUntilTimeout+0xe8>
      }
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800206e:	f7ff f97b 	bl	8001368 <HAL_GetTick>
 8002072:	4602      	mov	r2, r0
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	1ad3      	subs	r3, r2, r3
 8002078:	68ba      	ldr	r2, [r7, #8]
 800207a:	429a      	cmp	r2, r3
 800207c:	d302      	bcc.n	8002084 <I2C_WaitOnRXNEFlagUntilTimeout+0xb8>
 800207e:	68bb      	ldr	r3, [r7, #8]
 8002080:	2b00      	cmp	r3, #0
 8002082:	d10f      	bne.n	80020a4 <I2C_WaitOnRXNEFlagUntilTimeout+0xd8>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002084:	68fb      	ldr	r3, [r7, #12]
 8002086:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002088:	f043 0220 	orr.w	r2, r3, #32
 800208c:	68fb      	ldr	r3, [r7, #12]
 800208e:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8002090:	68fb      	ldr	r3, [r7, #12]
 8002092:	2220      	movs	r2, #32
 8002094:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002098:	68fb      	ldr	r3, [r7, #12]
 800209a:	2200      	movs	r2, #0
 800209c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 80020a0:	2301      	movs	r3, #1
 80020a2:	e007      	b.n	80020b4 <I2C_WaitOnRXNEFlagUntilTimeout+0xe8>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80020a4:	68fb      	ldr	r3, [r7, #12]
 80020a6:	681b      	ldr	r3, [r3, #0]
 80020a8:	699b      	ldr	r3, [r3, #24]
 80020aa:	f003 0304 	and.w	r3, r3, #4
 80020ae:	2b04      	cmp	r3, #4
 80020b0:	d193      	bne.n	8001fda <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 80020b2:	2300      	movs	r3, #0
}
 80020b4:	4618      	mov	r0, r3
 80020b6:	3710      	adds	r7, #16
 80020b8:	46bd      	mov	sp, r7
 80020ba:	bd80      	pop	{r7, pc}
 80020bc:	fe00e800 	.word	0xfe00e800

080020c0 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80020c0:	b580      	push	{r7, lr}
 80020c2:	b08a      	sub	sp, #40	; 0x28
 80020c4:	af00      	add	r7, sp, #0
 80020c6:	60f8      	str	r0, [r7, #12]
 80020c8:	60b9      	str	r1, [r7, #8]
 80020ca:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80020cc:	2300      	movs	r3, #0
 80020ce:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 80020d2:	68fb      	ldr	r3, [r7, #12]
 80020d4:	681b      	ldr	r3, [r3, #0]
 80020d6:	699b      	ldr	r3, [r3, #24]
 80020d8:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 80020da:	2300      	movs	r3, #0
 80020dc:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 80020e2:	69bb      	ldr	r3, [r7, #24]
 80020e4:	f003 0310 	and.w	r3, r3, #16
 80020e8:	2b00      	cmp	r3, #0
 80020ea:	d075      	beq.n	80021d8 <I2C_IsErrorOccurred+0x118>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80020ec:	68fb      	ldr	r3, [r7, #12]
 80020ee:	681b      	ldr	r3, [r3, #0]
 80020f0:	2210      	movs	r2, #16
 80020f2:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 80020f4:	e056      	b.n	80021a4 <I2C_IsErrorOccurred+0xe4>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 80020f6:	68bb      	ldr	r3, [r7, #8]
 80020f8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80020fc:	d052      	beq.n	80021a4 <I2C_IsErrorOccurred+0xe4>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 80020fe:	f7ff f933 	bl	8001368 <HAL_GetTick>
 8002102:	4602      	mov	r2, r0
 8002104:	69fb      	ldr	r3, [r7, #28]
 8002106:	1ad3      	subs	r3, r2, r3
 8002108:	68ba      	ldr	r2, [r7, #8]
 800210a:	429a      	cmp	r2, r3
 800210c:	d302      	bcc.n	8002114 <I2C_IsErrorOccurred+0x54>
 800210e:	68bb      	ldr	r3, [r7, #8]
 8002110:	2b00      	cmp	r3, #0
 8002112:	d147      	bne.n	80021a4 <I2C_IsErrorOccurred+0xe4>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8002114:	68fb      	ldr	r3, [r7, #12]
 8002116:	681b      	ldr	r3, [r3, #0]
 8002118:	685b      	ldr	r3, [r3, #4]
 800211a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800211e:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8002120:	68fb      	ldr	r3, [r7, #12]
 8002122:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8002126:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8002128:	68fb      	ldr	r3, [r7, #12]
 800212a:	681b      	ldr	r3, [r3, #0]
 800212c:	699b      	ldr	r3, [r3, #24]
 800212e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002132:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002136:	d12e      	bne.n	8002196 <I2C_IsErrorOccurred+0xd6>
 8002138:	697b      	ldr	r3, [r7, #20]
 800213a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800213e:	d02a      	beq.n	8002196 <I2C_IsErrorOccurred+0xd6>
              (tmp1 != I2C_CR2_STOP) && \
 8002140:	7cfb      	ldrb	r3, [r7, #19]
 8002142:	2b20      	cmp	r3, #32
 8002144:	d027      	beq.n	8002196 <I2C_IsErrorOccurred+0xd6>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8002146:	68fb      	ldr	r3, [r7, #12]
 8002148:	681b      	ldr	r3, [r3, #0]
 800214a:	685a      	ldr	r2, [r3, #4]
 800214c:	68fb      	ldr	r3, [r7, #12]
 800214e:	681b      	ldr	r3, [r3, #0]
 8002150:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002154:	605a      	str	r2, [r3, #4]
            
            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8002156:	f7ff f907 	bl	8001368 <HAL_GetTick>
 800215a:	61f8      	str	r0, [r7, #28]
          }
          
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800215c:	e01b      	b.n	8002196 <I2C_IsErrorOccurred+0xd6>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 800215e:	f7ff f903 	bl	8001368 <HAL_GetTick>
 8002162:	4602      	mov	r2, r0
 8002164:	69fb      	ldr	r3, [r7, #28]
 8002166:	1ad3      	subs	r3, r2, r3
 8002168:	2b19      	cmp	r3, #25
 800216a:	d914      	bls.n	8002196 <I2C_IsErrorOccurred+0xd6>
            {
              hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800216c:	68fb      	ldr	r3, [r7, #12]
 800216e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002170:	f043 0220 	orr.w	r2, r3, #32
 8002174:	68fb      	ldr	r3, [r7, #12]
 8002176:	645a      	str	r2, [r3, #68]	; 0x44
              hi2c->State = HAL_I2C_STATE_READY;
 8002178:	68fb      	ldr	r3, [r7, #12]
 800217a:	2220      	movs	r2, #32
 800217c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
              hi2c->Mode = HAL_I2C_MODE_NONE;
 8002180:	68fb      	ldr	r3, [r7, #12]
 8002182:	2200      	movs	r2, #0
 8002184:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
              
              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 8002188:	68fb      	ldr	r3, [r7, #12]
 800218a:	2200      	movs	r2, #0
 800218c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
              
              status = HAL_ERROR;
 8002190:	2301      	movs	r3, #1
 8002192:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002196:	68fb      	ldr	r3, [r7, #12]
 8002198:	681b      	ldr	r3, [r3, #0]
 800219a:	699b      	ldr	r3, [r3, #24]
 800219c:	f003 0320 	and.w	r3, r3, #32
 80021a0:	2b20      	cmp	r3, #32
 80021a2:	d1dc      	bne.n	800215e <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 80021a4:	68fb      	ldr	r3, [r7, #12]
 80021a6:	681b      	ldr	r3, [r3, #0]
 80021a8:	699b      	ldr	r3, [r3, #24]
 80021aa:	f003 0320 	and.w	r3, r3, #32
 80021ae:	2b20      	cmp	r3, #32
 80021b0:	d003      	beq.n	80021ba <I2C_IsErrorOccurred+0xfa>
 80021b2:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80021b6:	2b00      	cmp	r3, #0
 80021b8:	d09d      	beq.n	80020f6 <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 80021ba:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80021be:	2b00      	cmp	r3, #0
 80021c0:	d103      	bne.n	80021ca <I2C_IsErrorOccurred+0x10a>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80021c2:	68fb      	ldr	r3, [r7, #12]
 80021c4:	681b      	ldr	r3, [r3, #0]
 80021c6:	2220      	movs	r2, #32
 80021c8:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 80021ca:	6a3b      	ldr	r3, [r7, #32]
 80021cc:	f043 0304 	orr.w	r3, r3, #4
 80021d0:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 80021d2:	2301      	movs	r3, #1
 80021d4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 80021d8:	68fb      	ldr	r3, [r7, #12]
 80021da:	681b      	ldr	r3, [r3, #0]
 80021dc:	699b      	ldr	r3, [r3, #24]
 80021de:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 80021e0:	69bb      	ldr	r3, [r7, #24]
 80021e2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80021e6:	2b00      	cmp	r3, #0
 80021e8:	d00b      	beq.n	8002202 <I2C_IsErrorOccurred+0x142>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 80021ea:	6a3b      	ldr	r3, [r7, #32]
 80021ec:	f043 0301 	orr.w	r3, r3, #1
 80021f0:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 80021f2:	68fb      	ldr	r3, [r7, #12]
 80021f4:	681b      	ldr	r3, [r3, #0]
 80021f6:	f44f 7280 	mov.w	r2, #256	; 0x100
 80021fa:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80021fc:	2301      	movs	r3, #1
 80021fe:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8002202:	69bb      	ldr	r3, [r7, #24]
 8002204:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002208:	2b00      	cmp	r3, #0
 800220a:	d00b      	beq.n	8002224 <I2C_IsErrorOccurred+0x164>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 800220c:	6a3b      	ldr	r3, [r7, #32]
 800220e:	f043 0308 	orr.w	r3, r3, #8
 8002212:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8002214:	68fb      	ldr	r3, [r7, #12]
 8002216:	681b      	ldr	r3, [r3, #0]
 8002218:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800221c:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800221e:	2301      	movs	r3, #1
 8002220:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8002224:	69bb      	ldr	r3, [r7, #24]
 8002226:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800222a:	2b00      	cmp	r3, #0
 800222c:	d00b      	beq.n	8002246 <I2C_IsErrorOccurred+0x186>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 800222e:	6a3b      	ldr	r3, [r7, #32]
 8002230:	f043 0302 	orr.w	r3, r3, #2
 8002234:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8002236:	68fb      	ldr	r3, [r7, #12]
 8002238:	681b      	ldr	r3, [r3, #0]
 800223a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800223e:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8002240:	2301      	movs	r3, #1
 8002242:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  if (status != HAL_OK)
 8002246:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800224a:	2b00      	cmp	r3, #0
 800224c:	d01c      	beq.n	8002288 <I2C_IsErrorOccurred+0x1c8>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 800224e:	68f8      	ldr	r0, [r7, #12]
 8002250:	f7ff fddc 	bl	8001e0c <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8002254:	68fb      	ldr	r3, [r7, #12]
 8002256:	681b      	ldr	r3, [r3, #0]
 8002258:	6859      	ldr	r1, [r3, #4]
 800225a:	68fb      	ldr	r3, [r7, #12]
 800225c:	681a      	ldr	r2, [r3, #0]
 800225e:	4b0d      	ldr	r3, [pc, #52]	; (8002294 <I2C_IsErrorOccurred+0x1d4>)
 8002260:	400b      	ands	r3, r1
 8002262:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 8002264:	68fb      	ldr	r3, [r7, #12]
 8002266:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002268:	6a3b      	ldr	r3, [r7, #32]
 800226a:	431a      	orrs	r2, r3
 800226c:	68fb      	ldr	r3, [r7, #12]
 800226e:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8002270:	68fb      	ldr	r3, [r7, #12]
 8002272:	2220      	movs	r2, #32
 8002274:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002278:	68fb      	ldr	r3, [r7, #12]
 800227a:	2200      	movs	r2, #0
 800227c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002280:	68fb      	ldr	r3, [r7, #12]
 8002282:	2200      	movs	r2, #0
 8002284:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }

  return status;
 8002288:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 800228c:	4618      	mov	r0, r3
 800228e:	3728      	adds	r7, #40	; 0x28
 8002290:	46bd      	mov	sp, r7
 8002292:	bd80      	pop	{r7, pc}
 8002294:	fe00e800 	.word	0xfe00e800

08002298 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8002298:	b480      	push	{r7}
 800229a:	b087      	sub	sp, #28
 800229c:	af00      	add	r7, sp, #0
 800229e:	60f8      	str	r0, [r7, #12]
 80022a0:	607b      	str	r3, [r7, #4]
 80022a2:	460b      	mov	r3, r1
 80022a4:	817b      	strh	r3, [r7, #10]
 80022a6:	4613      	mov	r3, r2
 80022a8:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80022aa:	897b      	ldrh	r3, [r7, #10]
 80022ac:	f3c3 0209 	ubfx	r2, r3, #0, #10
                            (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 80022b0:	7a7b      	ldrb	r3, [r7, #9]
 80022b2:	041b      	lsls	r3, r3, #16
 80022b4:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80022b8:	431a      	orrs	r2, r3
                            (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80022be:	6a3b      	ldr	r3, [r7, #32]
 80022c0:	4313      	orrs	r3, r2
 80022c2:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80022c6:	617b      	str	r3, [r7, #20]
                              (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 80022c8:	68fb      	ldr	r3, [r7, #12]
 80022ca:	681b      	ldr	r3, [r3, #0]
 80022cc:	685a      	ldr	r2, [r3, #4]
 80022ce:	6a3b      	ldr	r3, [r7, #32]
 80022d0:	0d5b      	lsrs	r3, r3, #21
 80022d2:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 80022d6:	4b08      	ldr	r3, [pc, #32]	; (80022f8 <I2C_TransferConfig+0x60>)
 80022d8:	430b      	orrs	r3, r1
 80022da:	43db      	mvns	r3, r3
 80022dc:	ea02 0103 	and.w	r1, r2, r3
 80022e0:	68fb      	ldr	r3, [r7, #12]
 80022e2:	681b      	ldr	r3, [r3, #0]
 80022e4:	697a      	ldr	r2, [r7, #20]
 80022e6:	430a      	orrs	r2, r1
 80022e8:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
                I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 80022ea:	bf00      	nop
 80022ec:	371c      	adds	r7, #28
 80022ee:	46bd      	mov	sp, r7
 80022f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022f4:	4770      	bx	lr
 80022f6:	bf00      	nop
 80022f8:	03ff63ff 	.word	0x03ff63ff

080022fc <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 80022fc:	b480      	push	{r7}
 80022fe:	b083      	sub	sp, #12
 8002300:	af00      	add	r7, sp, #0
 8002302:	6078      	str	r0, [r7, #4]
 8002304:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800230c:	b2db      	uxtb	r3, r3
 800230e:	2b20      	cmp	r3, #32
 8002310:	d138      	bne.n	8002384 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002318:	2b01      	cmp	r3, #1
 800231a:	d101      	bne.n	8002320 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 800231c:	2302      	movs	r3, #2
 800231e:	e032      	b.n	8002386 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	2201      	movs	r2, #1
 8002324:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	2224      	movs	r2, #36	; 0x24
 800232c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	681b      	ldr	r3, [r3, #0]
 8002334:	681a      	ldr	r2, [r3, #0]
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	681b      	ldr	r3, [r3, #0]
 800233a:	f022 0201 	bic.w	r2, r2, #1
 800233e:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	681b      	ldr	r3, [r3, #0]
 8002344:	681a      	ldr	r2, [r3, #0]
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	681b      	ldr	r3, [r3, #0]
 800234a:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800234e:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	681b      	ldr	r3, [r3, #0]
 8002354:	6819      	ldr	r1, [r3, #0]
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	681b      	ldr	r3, [r3, #0]
 800235a:	683a      	ldr	r2, [r7, #0]
 800235c:	430a      	orrs	r2, r1
 800235e:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	681b      	ldr	r3, [r3, #0]
 8002364:	681a      	ldr	r2, [r3, #0]
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	681b      	ldr	r3, [r3, #0]
 800236a:	f042 0201 	orr.w	r2, r2, #1
 800236e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	2220      	movs	r2, #32
 8002374:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	2200      	movs	r2, #0
 800237c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8002380:	2300      	movs	r3, #0
 8002382:	e000      	b.n	8002386 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8002384:	2302      	movs	r3, #2
  }
}
 8002386:	4618      	mov	r0, r3
 8002388:	370c      	adds	r7, #12
 800238a:	46bd      	mov	sp, r7
 800238c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002390:	4770      	bx	lr

08002392 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8002392:	b480      	push	{r7}
 8002394:	b085      	sub	sp, #20
 8002396:	af00      	add	r7, sp, #0
 8002398:	6078      	str	r0, [r7, #4]
 800239a:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80023a2:	b2db      	uxtb	r3, r3
 80023a4:	2b20      	cmp	r3, #32
 80023a6:	d139      	bne.n	800241c <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80023ae:	2b01      	cmp	r3, #1
 80023b0:	d101      	bne.n	80023b6 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 80023b2:	2302      	movs	r3, #2
 80023b4:	e033      	b.n	800241e <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	2201      	movs	r2, #1
 80023ba:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	2224      	movs	r2, #36	; 0x24
 80023c2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	681b      	ldr	r3, [r3, #0]
 80023ca:	681a      	ldr	r2, [r3, #0]
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	681b      	ldr	r3, [r3, #0]
 80023d0:	f022 0201 	bic.w	r2, r2, #1
 80023d4:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	681b      	ldr	r3, [r3, #0]
 80023da:	681b      	ldr	r3, [r3, #0]
 80023dc:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 80023de:	68fb      	ldr	r3, [r7, #12]
 80023e0:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 80023e4:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 80023e6:	683b      	ldr	r3, [r7, #0]
 80023e8:	021b      	lsls	r3, r3, #8
 80023ea:	68fa      	ldr	r2, [r7, #12]
 80023ec:	4313      	orrs	r3, r2
 80023ee:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	681b      	ldr	r3, [r3, #0]
 80023f4:	68fa      	ldr	r2, [r7, #12]
 80023f6:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	681b      	ldr	r3, [r3, #0]
 80023fc:	681a      	ldr	r2, [r3, #0]
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	681b      	ldr	r3, [r3, #0]
 8002402:	f042 0201 	orr.w	r2, r2, #1
 8002406:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	2220      	movs	r2, #32
 800240c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	2200      	movs	r2, #0
 8002414:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8002418:	2300      	movs	r3, #0
 800241a:	e000      	b.n	800241e <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 800241c:	2302      	movs	r3, #2
  }
}
 800241e:	4618      	mov	r0, r3
 8002420:	3714      	adds	r7, #20
 8002422:	46bd      	mov	sp, r7
 8002424:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002428:	4770      	bx	lr
	...

0800242c <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 800242c:	b480      	push	{r7}
 800242e:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8002430:	4b04      	ldr	r3, [pc, #16]	; (8002444 <HAL_PWREx_GetVoltageRange+0x18>)
 8002432:	681b      	ldr	r3, [r3, #0]
 8002434:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8002438:	4618      	mov	r0, r3
 800243a:	46bd      	mov	sp, r7
 800243c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002440:	4770      	bx	lr
 8002442:	bf00      	nop
 8002444:	40007000 	.word	0x40007000

08002448 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8002448:	b480      	push	{r7}
 800244a:	b085      	sub	sp, #20
 800244c:	af00      	add	r7, sp, #0
 800244e:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002456:	d130      	bne.n	80024ba <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8002458:	4b23      	ldr	r3, [pc, #140]	; (80024e8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800245a:	681b      	ldr	r3, [r3, #0]
 800245c:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8002460:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002464:	d038      	beq.n	80024d8 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8002466:	4b20      	ldr	r3, [pc, #128]	; (80024e8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002468:	681b      	ldr	r3, [r3, #0]
 800246a:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800246e:	4a1e      	ldr	r2, [pc, #120]	; (80024e8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002470:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002474:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8002476:	4b1d      	ldr	r3, [pc, #116]	; (80024ec <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8002478:	681b      	ldr	r3, [r3, #0]
 800247a:	2232      	movs	r2, #50	; 0x32
 800247c:	fb02 f303 	mul.w	r3, r2, r3
 8002480:	4a1b      	ldr	r2, [pc, #108]	; (80024f0 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8002482:	fba2 2303 	umull	r2, r3, r2, r3
 8002486:	0c9b      	lsrs	r3, r3, #18
 8002488:	3301      	adds	r3, #1
 800248a:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800248c:	e002      	b.n	8002494 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 800248e:	68fb      	ldr	r3, [r7, #12]
 8002490:	3b01      	subs	r3, #1
 8002492:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002494:	4b14      	ldr	r3, [pc, #80]	; (80024e8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002496:	695b      	ldr	r3, [r3, #20]
 8002498:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800249c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80024a0:	d102      	bne.n	80024a8 <HAL_PWREx_ControlVoltageScaling+0x60>
 80024a2:	68fb      	ldr	r3, [r7, #12]
 80024a4:	2b00      	cmp	r3, #0
 80024a6:	d1f2      	bne.n	800248e <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80024a8:	4b0f      	ldr	r3, [pc, #60]	; (80024e8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80024aa:	695b      	ldr	r3, [r3, #20]
 80024ac:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80024b0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80024b4:	d110      	bne.n	80024d8 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 80024b6:	2303      	movs	r3, #3
 80024b8:	e00f      	b.n	80024da <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 80024ba:	4b0b      	ldr	r3, [pc, #44]	; (80024e8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80024bc:	681b      	ldr	r3, [r3, #0]
 80024be:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80024c2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80024c6:	d007      	beq.n	80024d8 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 80024c8:	4b07      	ldr	r3, [pc, #28]	; (80024e8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80024ca:	681b      	ldr	r3, [r3, #0]
 80024cc:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80024d0:	4a05      	ldr	r2, [pc, #20]	; (80024e8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80024d2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80024d6:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 80024d8:	2300      	movs	r3, #0
}
 80024da:	4618      	mov	r0, r3
 80024dc:	3714      	adds	r7, #20
 80024de:	46bd      	mov	sp, r7
 80024e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024e4:	4770      	bx	lr
 80024e6:	bf00      	nop
 80024e8:	40007000 	.word	0x40007000
 80024ec:	20000000 	.word	0x20000000
 80024f0:	431bde83 	.word	0x431bde83

080024f4 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80024f4:	b580      	push	{r7, lr}
 80024f6:	b088      	sub	sp, #32
 80024f8:	af00      	add	r7, sp, #0
 80024fa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	2b00      	cmp	r3, #0
 8002500:	d101      	bne.n	8002506 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002502:	2301      	movs	r3, #1
 8002504:	e3d4      	b.n	8002cb0 <HAL_RCC_OscConfig+0x7bc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002506:	4ba1      	ldr	r3, [pc, #644]	; (800278c <HAL_RCC_OscConfig+0x298>)
 8002508:	689b      	ldr	r3, [r3, #8]
 800250a:	f003 030c 	and.w	r3, r3, #12
 800250e:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002510:	4b9e      	ldr	r3, [pc, #632]	; (800278c <HAL_RCC_OscConfig+0x298>)
 8002512:	68db      	ldr	r3, [r3, #12]
 8002514:	f003 0303 	and.w	r3, r3, #3
 8002518:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	681b      	ldr	r3, [r3, #0]
 800251e:	f003 0310 	and.w	r3, r3, #16
 8002522:	2b00      	cmp	r3, #0
 8002524:	f000 80e4 	beq.w	80026f0 <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8002528:	69bb      	ldr	r3, [r7, #24]
 800252a:	2b00      	cmp	r3, #0
 800252c:	d007      	beq.n	800253e <HAL_RCC_OscConfig+0x4a>
 800252e:	69bb      	ldr	r3, [r7, #24]
 8002530:	2b0c      	cmp	r3, #12
 8002532:	f040 808b 	bne.w	800264c <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8002536:	697b      	ldr	r3, [r7, #20]
 8002538:	2b01      	cmp	r3, #1
 800253a:	f040 8087 	bne.w	800264c <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800253e:	4b93      	ldr	r3, [pc, #588]	; (800278c <HAL_RCC_OscConfig+0x298>)
 8002540:	681b      	ldr	r3, [r3, #0]
 8002542:	f003 0302 	and.w	r3, r3, #2
 8002546:	2b00      	cmp	r3, #0
 8002548:	d005      	beq.n	8002556 <HAL_RCC_OscConfig+0x62>
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	699b      	ldr	r3, [r3, #24]
 800254e:	2b00      	cmp	r3, #0
 8002550:	d101      	bne.n	8002556 <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 8002552:	2301      	movs	r3, #1
 8002554:	e3ac      	b.n	8002cb0 <HAL_RCC_OscConfig+0x7bc>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	6a1a      	ldr	r2, [r3, #32]
 800255a:	4b8c      	ldr	r3, [pc, #560]	; (800278c <HAL_RCC_OscConfig+0x298>)
 800255c:	681b      	ldr	r3, [r3, #0]
 800255e:	f003 0308 	and.w	r3, r3, #8
 8002562:	2b00      	cmp	r3, #0
 8002564:	d004      	beq.n	8002570 <HAL_RCC_OscConfig+0x7c>
 8002566:	4b89      	ldr	r3, [pc, #548]	; (800278c <HAL_RCC_OscConfig+0x298>)
 8002568:	681b      	ldr	r3, [r3, #0]
 800256a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800256e:	e005      	b.n	800257c <HAL_RCC_OscConfig+0x88>
 8002570:	4b86      	ldr	r3, [pc, #536]	; (800278c <HAL_RCC_OscConfig+0x298>)
 8002572:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002576:	091b      	lsrs	r3, r3, #4
 8002578:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800257c:	4293      	cmp	r3, r2
 800257e:	d223      	bcs.n	80025c8 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	6a1b      	ldr	r3, [r3, #32]
 8002584:	4618      	mov	r0, r3
 8002586:	f000 fd41 	bl	800300c <RCC_SetFlashLatencyFromMSIRange>
 800258a:	4603      	mov	r3, r0
 800258c:	2b00      	cmp	r3, #0
 800258e:	d001      	beq.n	8002594 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 8002590:	2301      	movs	r3, #1
 8002592:	e38d      	b.n	8002cb0 <HAL_RCC_OscConfig+0x7bc>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002594:	4b7d      	ldr	r3, [pc, #500]	; (800278c <HAL_RCC_OscConfig+0x298>)
 8002596:	681b      	ldr	r3, [r3, #0]
 8002598:	4a7c      	ldr	r2, [pc, #496]	; (800278c <HAL_RCC_OscConfig+0x298>)
 800259a:	f043 0308 	orr.w	r3, r3, #8
 800259e:	6013      	str	r3, [r2, #0]
 80025a0:	4b7a      	ldr	r3, [pc, #488]	; (800278c <HAL_RCC_OscConfig+0x298>)
 80025a2:	681b      	ldr	r3, [r3, #0]
 80025a4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	6a1b      	ldr	r3, [r3, #32]
 80025ac:	4977      	ldr	r1, [pc, #476]	; (800278c <HAL_RCC_OscConfig+0x298>)
 80025ae:	4313      	orrs	r3, r2
 80025b0:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80025b2:	4b76      	ldr	r3, [pc, #472]	; (800278c <HAL_RCC_OscConfig+0x298>)
 80025b4:	685b      	ldr	r3, [r3, #4]
 80025b6:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	69db      	ldr	r3, [r3, #28]
 80025be:	021b      	lsls	r3, r3, #8
 80025c0:	4972      	ldr	r1, [pc, #456]	; (800278c <HAL_RCC_OscConfig+0x298>)
 80025c2:	4313      	orrs	r3, r2
 80025c4:	604b      	str	r3, [r1, #4]
 80025c6:	e025      	b.n	8002614 <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80025c8:	4b70      	ldr	r3, [pc, #448]	; (800278c <HAL_RCC_OscConfig+0x298>)
 80025ca:	681b      	ldr	r3, [r3, #0]
 80025cc:	4a6f      	ldr	r2, [pc, #444]	; (800278c <HAL_RCC_OscConfig+0x298>)
 80025ce:	f043 0308 	orr.w	r3, r3, #8
 80025d2:	6013      	str	r3, [r2, #0]
 80025d4:	4b6d      	ldr	r3, [pc, #436]	; (800278c <HAL_RCC_OscConfig+0x298>)
 80025d6:	681b      	ldr	r3, [r3, #0]
 80025d8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	6a1b      	ldr	r3, [r3, #32]
 80025e0:	496a      	ldr	r1, [pc, #424]	; (800278c <HAL_RCC_OscConfig+0x298>)
 80025e2:	4313      	orrs	r3, r2
 80025e4:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80025e6:	4b69      	ldr	r3, [pc, #420]	; (800278c <HAL_RCC_OscConfig+0x298>)
 80025e8:	685b      	ldr	r3, [r3, #4]
 80025ea:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	69db      	ldr	r3, [r3, #28]
 80025f2:	021b      	lsls	r3, r3, #8
 80025f4:	4965      	ldr	r1, [pc, #404]	; (800278c <HAL_RCC_OscConfig+0x298>)
 80025f6:	4313      	orrs	r3, r2
 80025f8:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 80025fa:	69bb      	ldr	r3, [r7, #24]
 80025fc:	2b00      	cmp	r3, #0
 80025fe:	d109      	bne.n	8002614 <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	6a1b      	ldr	r3, [r3, #32]
 8002604:	4618      	mov	r0, r3
 8002606:	f000 fd01 	bl	800300c <RCC_SetFlashLatencyFromMSIRange>
 800260a:	4603      	mov	r3, r0
 800260c:	2b00      	cmp	r3, #0
 800260e:	d001      	beq.n	8002614 <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 8002610:	2301      	movs	r3, #1
 8002612:	e34d      	b.n	8002cb0 <HAL_RCC_OscConfig+0x7bc>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8002614:	f000 fc36 	bl	8002e84 <HAL_RCC_GetSysClockFreq>
 8002618:	4602      	mov	r2, r0
 800261a:	4b5c      	ldr	r3, [pc, #368]	; (800278c <HAL_RCC_OscConfig+0x298>)
 800261c:	689b      	ldr	r3, [r3, #8]
 800261e:	091b      	lsrs	r3, r3, #4
 8002620:	f003 030f 	and.w	r3, r3, #15
 8002624:	495a      	ldr	r1, [pc, #360]	; (8002790 <HAL_RCC_OscConfig+0x29c>)
 8002626:	5ccb      	ldrb	r3, [r1, r3]
 8002628:	f003 031f 	and.w	r3, r3, #31
 800262c:	fa22 f303 	lsr.w	r3, r2, r3
 8002630:	4a58      	ldr	r2, [pc, #352]	; (8002794 <HAL_RCC_OscConfig+0x2a0>)
 8002632:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8002634:	4b58      	ldr	r3, [pc, #352]	; (8002798 <HAL_RCC_OscConfig+0x2a4>)
 8002636:	681b      	ldr	r3, [r3, #0]
 8002638:	4618      	mov	r0, r3
 800263a:	f7fe fe45 	bl	80012c8 <HAL_InitTick>
 800263e:	4603      	mov	r3, r0
 8002640:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8002642:	7bfb      	ldrb	r3, [r7, #15]
 8002644:	2b00      	cmp	r3, #0
 8002646:	d052      	beq.n	80026ee <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 8002648:	7bfb      	ldrb	r3, [r7, #15]
 800264a:	e331      	b.n	8002cb0 <HAL_RCC_OscConfig+0x7bc>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	699b      	ldr	r3, [r3, #24]
 8002650:	2b00      	cmp	r3, #0
 8002652:	d032      	beq.n	80026ba <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8002654:	4b4d      	ldr	r3, [pc, #308]	; (800278c <HAL_RCC_OscConfig+0x298>)
 8002656:	681b      	ldr	r3, [r3, #0]
 8002658:	4a4c      	ldr	r2, [pc, #304]	; (800278c <HAL_RCC_OscConfig+0x298>)
 800265a:	f043 0301 	orr.w	r3, r3, #1
 800265e:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8002660:	f7fe fe82 	bl	8001368 <HAL_GetTick>
 8002664:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002666:	e008      	b.n	800267a <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002668:	f7fe fe7e 	bl	8001368 <HAL_GetTick>
 800266c:	4602      	mov	r2, r0
 800266e:	693b      	ldr	r3, [r7, #16]
 8002670:	1ad3      	subs	r3, r2, r3
 8002672:	2b02      	cmp	r3, #2
 8002674:	d901      	bls.n	800267a <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 8002676:	2303      	movs	r3, #3
 8002678:	e31a      	b.n	8002cb0 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800267a:	4b44      	ldr	r3, [pc, #272]	; (800278c <HAL_RCC_OscConfig+0x298>)
 800267c:	681b      	ldr	r3, [r3, #0]
 800267e:	f003 0302 	and.w	r3, r3, #2
 8002682:	2b00      	cmp	r3, #0
 8002684:	d0f0      	beq.n	8002668 <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002686:	4b41      	ldr	r3, [pc, #260]	; (800278c <HAL_RCC_OscConfig+0x298>)
 8002688:	681b      	ldr	r3, [r3, #0]
 800268a:	4a40      	ldr	r2, [pc, #256]	; (800278c <HAL_RCC_OscConfig+0x298>)
 800268c:	f043 0308 	orr.w	r3, r3, #8
 8002690:	6013      	str	r3, [r2, #0]
 8002692:	4b3e      	ldr	r3, [pc, #248]	; (800278c <HAL_RCC_OscConfig+0x298>)
 8002694:	681b      	ldr	r3, [r3, #0]
 8002696:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	6a1b      	ldr	r3, [r3, #32]
 800269e:	493b      	ldr	r1, [pc, #236]	; (800278c <HAL_RCC_OscConfig+0x298>)
 80026a0:	4313      	orrs	r3, r2
 80026a2:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80026a4:	4b39      	ldr	r3, [pc, #228]	; (800278c <HAL_RCC_OscConfig+0x298>)
 80026a6:	685b      	ldr	r3, [r3, #4]
 80026a8:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	69db      	ldr	r3, [r3, #28]
 80026b0:	021b      	lsls	r3, r3, #8
 80026b2:	4936      	ldr	r1, [pc, #216]	; (800278c <HAL_RCC_OscConfig+0x298>)
 80026b4:	4313      	orrs	r3, r2
 80026b6:	604b      	str	r3, [r1, #4]
 80026b8:	e01a      	b.n	80026f0 <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 80026ba:	4b34      	ldr	r3, [pc, #208]	; (800278c <HAL_RCC_OscConfig+0x298>)
 80026bc:	681b      	ldr	r3, [r3, #0]
 80026be:	4a33      	ldr	r2, [pc, #204]	; (800278c <HAL_RCC_OscConfig+0x298>)
 80026c0:	f023 0301 	bic.w	r3, r3, #1
 80026c4:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80026c6:	f7fe fe4f 	bl	8001368 <HAL_GetTick>
 80026ca:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80026cc:	e008      	b.n	80026e0 <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80026ce:	f7fe fe4b 	bl	8001368 <HAL_GetTick>
 80026d2:	4602      	mov	r2, r0
 80026d4:	693b      	ldr	r3, [r7, #16]
 80026d6:	1ad3      	subs	r3, r2, r3
 80026d8:	2b02      	cmp	r3, #2
 80026da:	d901      	bls.n	80026e0 <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 80026dc:	2303      	movs	r3, #3
 80026de:	e2e7      	b.n	8002cb0 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80026e0:	4b2a      	ldr	r3, [pc, #168]	; (800278c <HAL_RCC_OscConfig+0x298>)
 80026e2:	681b      	ldr	r3, [r3, #0]
 80026e4:	f003 0302 	and.w	r3, r3, #2
 80026e8:	2b00      	cmp	r3, #0
 80026ea:	d1f0      	bne.n	80026ce <HAL_RCC_OscConfig+0x1da>
 80026ec:	e000      	b.n	80026f0 <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80026ee:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	681b      	ldr	r3, [r3, #0]
 80026f4:	f003 0301 	and.w	r3, r3, #1
 80026f8:	2b00      	cmp	r3, #0
 80026fa:	d074      	beq.n	80027e6 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 80026fc:	69bb      	ldr	r3, [r7, #24]
 80026fe:	2b08      	cmp	r3, #8
 8002700:	d005      	beq.n	800270e <HAL_RCC_OscConfig+0x21a>
 8002702:	69bb      	ldr	r3, [r7, #24]
 8002704:	2b0c      	cmp	r3, #12
 8002706:	d10e      	bne.n	8002726 <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8002708:	697b      	ldr	r3, [r7, #20]
 800270a:	2b03      	cmp	r3, #3
 800270c:	d10b      	bne.n	8002726 <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800270e:	4b1f      	ldr	r3, [pc, #124]	; (800278c <HAL_RCC_OscConfig+0x298>)
 8002710:	681b      	ldr	r3, [r3, #0]
 8002712:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002716:	2b00      	cmp	r3, #0
 8002718:	d064      	beq.n	80027e4 <HAL_RCC_OscConfig+0x2f0>
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	685b      	ldr	r3, [r3, #4]
 800271e:	2b00      	cmp	r3, #0
 8002720:	d160      	bne.n	80027e4 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8002722:	2301      	movs	r3, #1
 8002724:	e2c4      	b.n	8002cb0 <HAL_RCC_OscConfig+0x7bc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	685b      	ldr	r3, [r3, #4]
 800272a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800272e:	d106      	bne.n	800273e <HAL_RCC_OscConfig+0x24a>
 8002730:	4b16      	ldr	r3, [pc, #88]	; (800278c <HAL_RCC_OscConfig+0x298>)
 8002732:	681b      	ldr	r3, [r3, #0]
 8002734:	4a15      	ldr	r2, [pc, #84]	; (800278c <HAL_RCC_OscConfig+0x298>)
 8002736:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800273a:	6013      	str	r3, [r2, #0]
 800273c:	e01d      	b.n	800277a <HAL_RCC_OscConfig+0x286>
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	685b      	ldr	r3, [r3, #4]
 8002742:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002746:	d10c      	bne.n	8002762 <HAL_RCC_OscConfig+0x26e>
 8002748:	4b10      	ldr	r3, [pc, #64]	; (800278c <HAL_RCC_OscConfig+0x298>)
 800274a:	681b      	ldr	r3, [r3, #0]
 800274c:	4a0f      	ldr	r2, [pc, #60]	; (800278c <HAL_RCC_OscConfig+0x298>)
 800274e:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002752:	6013      	str	r3, [r2, #0]
 8002754:	4b0d      	ldr	r3, [pc, #52]	; (800278c <HAL_RCC_OscConfig+0x298>)
 8002756:	681b      	ldr	r3, [r3, #0]
 8002758:	4a0c      	ldr	r2, [pc, #48]	; (800278c <HAL_RCC_OscConfig+0x298>)
 800275a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800275e:	6013      	str	r3, [r2, #0]
 8002760:	e00b      	b.n	800277a <HAL_RCC_OscConfig+0x286>
 8002762:	4b0a      	ldr	r3, [pc, #40]	; (800278c <HAL_RCC_OscConfig+0x298>)
 8002764:	681b      	ldr	r3, [r3, #0]
 8002766:	4a09      	ldr	r2, [pc, #36]	; (800278c <HAL_RCC_OscConfig+0x298>)
 8002768:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800276c:	6013      	str	r3, [r2, #0]
 800276e:	4b07      	ldr	r3, [pc, #28]	; (800278c <HAL_RCC_OscConfig+0x298>)
 8002770:	681b      	ldr	r3, [r3, #0]
 8002772:	4a06      	ldr	r2, [pc, #24]	; (800278c <HAL_RCC_OscConfig+0x298>)
 8002774:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002778:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	685b      	ldr	r3, [r3, #4]
 800277e:	2b00      	cmp	r3, #0
 8002780:	d01c      	beq.n	80027bc <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002782:	f7fe fdf1 	bl	8001368 <HAL_GetTick>
 8002786:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002788:	e011      	b.n	80027ae <HAL_RCC_OscConfig+0x2ba>
 800278a:	bf00      	nop
 800278c:	40021000 	.word	0x40021000
 8002790:	08004d78 	.word	0x08004d78
 8002794:	20000000 	.word	0x20000000
 8002798:	20000004 	.word	0x20000004
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800279c:	f7fe fde4 	bl	8001368 <HAL_GetTick>
 80027a0:	4602      	mov	r2, r0
 80027a2:	693b      	ldr	r3, [r7, #16]
 80027a4:	1ad3      	subs	r3, r2, r3
 80027a6:	2b64      	cmp	r3, #100	; 0x64
 80027a8:	d901      	bls.n	80027ae <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 80027aa:	2303      	movs	r3, #3
 80027ac:	e280      	b.n	8002cb0 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80027ae:	4baf      	ldr	r3, [pc, #700]	; (8002a6c <HAL_RCC_OscConfig+0x578>)
 80027b0:	681b      	ldr	r3, [r3, #0]
 80027b2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80027b6:	2b00      	cmp	r3, #0
 80027b8:	d0f0      	beq.n	800279c <HAL_RCC_OscConfig+0x2a8>
 80027ba:	e014      	b.n	80027e6 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80027bc:	f7fe fdd4 	bl	8001368 <HAL_GetTick>
 80027c0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80027c2:	e008      	b.n	80027d6 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80027c4:	f7fe fdd0 	bl	8001368 <HAL_GetTick>
 80027c8:	4602      	mov	r2, r0
 80027ca:	693b      	ldr	r3, [r7, #16]
 80027cc:	1ad3      	subs	r3, r2, r3
 80027ce:	2b64      	cmp	r3, #100	; 0x64
 80027d0:	d901      	bls.n	80027d6 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 80027d2:	2303      	movs	r3, #3
 80027d4:	e26c      	b.n	8002cb0 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80027d6:	4ba5      	ldr	r3, [pc, #660]	; (8002a6c <HAL_RCC_OscConfig+0x578>)
 80027d8:	681b      	ldr	r3, [r3, #0]
 80027da:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80027de:	2b00      	cmp	r3, #0
 80027e0:	d1f0      	bne.n	80027c4 <HAL_RCC_OscConfig+0x2d0>
 80027e2:	e000      	b.n	80027e6 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80027e4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	681b      	ldr	r3, [r3, #0]
 80027ea:	f003 0302 	and.w	r3, r3, #2
 80027ee:	2b00      	cmp	r3, #0
 80027f0:	d060      	beq.n	80028b4 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 80027f2:	69bb      	ldr	r3, [r7, #24]
 80027f4:	2b04      	cmp	r3, #4
 80027f6:	d005      	beq.n	8002804 <HAL_RCC_OscConfig+0x310>
 80027f8:	69bb      	ldr	r3, [r7, #24]
 80027fa:	2b0c      	cmp	r3, #12
 80027fc:	d119      	bne.n	8002832 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 80027fe:	697b      	ldr	r3, [r7, #20]
 8002800:	2b02      	cmp	r3, #2
 8002802:	d116      	bne.n	8002832 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002804:	4b99      	ldr	r3, [pc, #612]	; (8002a6c <HAL_RCC_OscConfig+0x578>)
 8002806:	681b      	ldr	r3, [r3, #0]
 8002808:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800280c:	2b00      	cmp	r3, #0
 800280e:	d005      	beq.n	800281c <HAL_RCC_OscConfig+0x328>
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	68db      	ldr	r3, [r3, #12]
 8002814:	2b00      	cmp	r3, #0
 8002816:	d101      	bne.n	800281c <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8002818:	2301      	movs	r3, #1
 800281a:	e249      	b.n	8002cb0 <HAL_RCC_OscConfig+0x7bc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800281c:	4b93      	ldr	r3, [pc, #588]	; (8002a6c <HAL_RCC_OscConfig+0x578>)
 800281e:	685b      	ldr	r3, [r3, #4]
 8002820:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	691b      	ldr	r3, [r3, #16]
 8002828:	061b      	lsls	r3, r3, #24
 800282a:	4990      	ldr	r1, [pc, #576]	; (8002a6c <HAL_RCC_OscConfig+0x578>)
 800282c:	4313      	orrs	r3, r2
 800282e:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002830:	e040      	b.n	80028b4 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	68db      	ldr	r3, [r3, #12]
 8002836:	2b00      	cmp	r3, #0
 8002838:	d023      	beq.n	8002882 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800283a:	4b8c      	ldr	r3, [pc, #560]	; (8002a6c <HAL_RCC_OscConfig+0x578>)
 800283c:	681b      	ldr	r3, [r3, #0]
 800283e:	4a8b      	ldr	r2, [pc, #556]	; (8002a6c <HAL_RCC_OscConfig+0x578>)
 8002840:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002844:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002846:	f7fe fd8f 	bl	8001368 <HAL_GetTick>
 800284a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800284c:	e008      	b.n	8002860 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800284e:	f7fe fd8b 	bl	8001368 <HAL_GetTick>
 8002852:	4602      	mov	r2, r0
 8002854:	693b      	ldr	r3, [r7, #16]
 8002856:	1ad3      	subs	r3, r2, r3
 8002858:	2b02      	cmp	r3, #2
 800285a:	d901      	bls.n	8002860 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 800285c:	2303      	movs	r3, #3
 800285e:	e227      	b.n	8002cb0 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002860:	4b82      	ldr	r3, [pc, #520]	; (8002a6c <HAL_RCC_OscConfig+0x578>)
 8002862:	681b      	ldr	r3, [r3, #0]
 8002864:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002868:	2b00      	cmp	r3, #0
 800286a:	d0f0      	beq.n	800284e <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800286c:	4b7f      	ldr	r3, [pc, #508]	; (8002a6c <HAL_RCC_OscConfig+0x578>)
 800286e:	685b      	ldr	r3, [r3, #4]
 8002870:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	691b      	ldr	r3, [r3, #16]
 8002878:	061b      	lsls	r3, r3, #24
 800287a:	497c      	ldr	r1, [pc, #496]	; (8002a6c <HAL_RCC_OscConfig+0x578>)
 800287c:	4313      	orrs	r3, r2
 800287e:	604b      	str	r3, [r1, #4]
 8002880:	e018      	b.n	80028b4 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002882:	4b7a      	ldr	r3, [pc, #488]	; (8002a6c <HAL_RCC_OscConfig+0x578>)
 8002884:	681b      	ldr	r3, [r3, #0]
 8002886:	4a79      	ldr	r2, [pc, #484]	; (8002a6c <HAL_RCC_OscConfig+0x578>)
 8002888:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800288c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800288e:	f7fe fd6b 	bl	8001368 <HAL_GetTick>
 8002892:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002894:	e008      	b.n	80028a8 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002896:	f7fe fd67 	bl	8001368 <HAL_GetTick>
 800289a:	4602      	mov	r2, r0
 800289c:	693b      	ldr	r3, [r7, #16]
 800289e:	1ad3      	subs	r3, r2, r3
 80028a0:	2b02      	cmp	r3, #2
 80028a2:	d901      	bls.n	80028a8 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 80028a4:	2303      	movs	r3, #3
 80028a6:	e203      	b.n	8002cb0 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80028a8:	4b70      	ldr	r3, [pc, #448]	; (8002a6c <HAL_RCC_OscConfig+0x578>)
 80028aa:	681b      	ldr	r3, [r3, #0]
 80028ac:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80028b0:	2b00      	cmp	r3, #0
 80028b2:	d1f0      	bne.n	8002896 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	681b      	ldr	r3, [r3, #0]
 80028b8:	f003 0308 	and.w	r3, r3, #8
 80028bc:	2b00      	cmp	r3, #0
 80028be:	d03c      	beq.n	800293a <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	695b      	ldr	r3, [r3, #20]
 80028c4:	2b00      	cmp	r3, #0
 80028c6:	d01c      	beq.n	8002902 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80028c8:	4b68      	ldr	r3, [pc, #416]	; (8002a6c <HAL_RCC_OscConfig+0x578>)
 80028ca:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80028ce:	4a67      	ldr	r2, [pc, #412]	; (8002a6c <HAL_RCC_OscConfig+0x578>)
 80028d0:	f043 0301 	orr.w	r3, r3, #1
 80028d4:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80028d8:	f7fe fd46 	bl	8001368 <HAL_GetTick>
 80028dc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80028de:	e008      	b.n	80028f2 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80028e0:	f7fe fd42 	bl	8001368 <HAL_GetTick>
 80028e4:	4602      	mov	r2, r0
 80028e6:	693b      	ldr	r3, [r7, #16]
 80028e8:	1ad3      	subs	r3, r2, r3
 80028ea:	2b02      	cmp	r3, #2
 80028ec:	d901      	bls.n	80028f2 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 80028ee:	2303      	movs	r3, #3
 80028f0:	e1de      	b.n	8002cb0 <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80028f2:	4b5e      	ldr	r3, [pc, #376]	; (8002a6c <HAL_RCC_OscConfig+0x578>)
 80028f4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80028f8:	f003 0302 	and.w	r3, r3, #2
 80028fc:	2b00      	cmp	r3, #0
 80028fe:	d0ef      	beq.n	80028e0 <HAL_RCC_OscConfig+0x3ec>
 8002900:	e01b      	b.n	800293a <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002902:	4b5a      	ldr	r3, [pc, #360]	; (8002a6c <HAL_RCC_OscConfig+0x578>)
 8002904:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002908:	4a58      	ldr	r2, [pc, #352]	; (8002a6c <HAL_RCC_OscConfig+0x578>)
 800290a:	f023 0301 	bic.w	r3, r3, #1
 800290e:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002912:	f7fe fd29 	bl	8001368 <HAL_GetTick>
 8002916:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002918:	e008      	b.n	800292c <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800291a:	f7fe fd25 	bl	8001368 <HAL_GetTick>
 800291e:	4602      	mov	r2, r0
 8002920:	693b      	ldr	r3, [r7, #16]
 8002922:	1ad3      	subs	r3, r2, r3
 8002924:	2b02      	cmp	r3, #2
 8002926:	d901      	bls.n	800292c <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8002928:	2303      	movs	r3, #3
 800292a:	e1c1      	b.n	8002cb0 <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800292c:	4b4f      	ldr	r3, [pc, #316]	; (8002a6c <HAL_RCC_OscConfig+0x578>)
 800292e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002932:	f003 0302 	and.w	r3, r3, #2
 8002936:	2b00      	cmp	r3, #0
 8002938:	d1ef      	bne.n	800291a <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	681b      	ldr	r3, [r3, #0]
 800293e:	f003 0304 	and.w	r3, r3, #4
 8002942:	2b00      	cmp	r3, #0
 8002944:	f000 80a6 	beq.w	8002a94 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002948:	2300      	movs	r3, #0
 800294a:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 800294c:	4b47      	ldr	r3, [pc, #284]	; (8002a6c <HAL_RCC_OscConfig+0x578>)
 800294e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002950:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002954:	2b00      	cmp	r3, #0
 8002956:	d10d      	bne.n	8002974 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002958:	4b44      	ldr	r3, [pc, #272]	; (8002a6c <HAL_RCC_OscConfig+0x578>)
 800295a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800295c:	4a43      	ldr	r2, [pc, #268]	; (8002a6c <HAL_RCC_OscConfig+0x578>)
 800295e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002962:	6593      	str	r3, [r2, #88]	; 0x58
 8002964:	4b41      	ldr	r3, [pc, #260]	; (8002a6c <HAL_RCC_OscConfig+0x578>)
 8002966:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002968:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800296c:	60bb      	str	r3, [r7, #8]
 800296e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002970:	2301      	movs	r3, #1
 8002972:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002974:	4b3e      	ldr	r3, [pc, #248]	; (8002a70 <HAL_RCC_OscConfig+0x57c>)
 8002976:	681b      	ldr	r3, [r3, #0]
 8002978:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800297c:	2b00      	cmp	r3, #0
 800297e:	d118      	bne.n	80029b2 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002980:	4b3b      	ldr	r3, [pc, #236]	; (8002a70 <HAL_RCC_OscConfig+0x57c>)
 8002982:	681b      	ldr	r3, [r3, #0]
 8002984:	4a3a      	ldr	r2, [pc, #232]	; (8002a70 <HAL_RCC_OscConfig+0x57c>)
 8002986:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800298a:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800298c:	f7fe fcec 	bl	8001368 <HAL_GetTick>
 8002990:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002992:	e008      	b.n	80029a6 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002994:	f7fe fce8 	bl	8001368 <HAL_GetTick>
 8002998:	4602      	mov	r2, r0
 800299a:	693b      	ldr	r3, [r7, #16]
 800299c:	1ad3      	subs	r3, r2, r3
 800299e:	2b02      	cmp	r3, #2
 80029a0:	d901      	bls.n	80029a6 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 80029a2:	2303      	movs	r3, #3
 80029a4:	e184      	b.n	8002cb0 <HAL_RCC_OscConfig+0x7bc>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80029a6:	4b32      	ldr	r3, [pc, #200]	; (8002a70 <HAL_RCC_OscConfig+0x57c>)
 80029a8:	681b      	ldr	r3, [r3, #0]
 80029aa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80029ae:	2b00      	cmp	r3, #0
 80029b0:	d0f0      	beq.n	8002994 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	689b      	ldr	r3, [r3, #8]
 80029b6:	2b01      	cmp	r3, #1
 80029b8:	d108      	bne.n	80029cc <HAL_RCC_OscConfig+0x4d8>
 80029ba:	4b2c      	ldr	r3, [pc, #176]	; (8002a6c <HAL_RCC_OscConfig+0x578>)
 80029bc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80029c0:	4a2a      	ldr	r2, [pc, #168]	; (8002a6c <HAL_RCC_OscConfig+0x578>)
 80029c2:	f043 0301 	orr.w	r3, r3, #1
 80029c6:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80029ca:	e024      	b.n	8002a16 <HAL_RCC_OscConfig+0x522>
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	689b      	ldr	r3, [r3, #8]
 80029d0:	2b05      	cmp	r3, #5
 80029d2:	d110      	bne.n	80029f6 <HAL_RCC_OscConfig+0x502>
 80029d4:	4b25      	ldr	r3, [pc, #148]	; (8002a6c <HAL_RCC_OscConfig+0x578>)
 80029d6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80029da:	4a24      	ldr	r2, [pc, #144]	; (8002a6c <HAL_RCC_OscConfig+0x578>)
 80029dc:	f043 0304 	orr.w	r3, r3, #4
 80029e0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80029e4:	4b21      	ldr	r3, [pc, #132]	; (8002a6c <HAL_RCC_OscConfig+0x578>)
 80029e6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80029ea:	4a20      	ldr	r2, [pc, #128]	; (8002a6c <HAL_RCC_OscConfig+0x578>)
 80029ec:	f043 0301 	orr.w	r3, r3, #1
 80029f0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80029f4:	e00f      	b.n	8002a16 <HAL_RCC_OscConfig+0x522>
 80029f6:	4b1d      	ldr	r3, [pc, #116]	; (8002a6c <HAL_RCC_OscConfig+0x578>)
 80029f8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80029fc:	4a1b      	ldr	r2, [pc, #108]	; (8002a6c <HAL_RCC_OscConfig+0x578>)
 80029fe:	f023 0301 	bic.w	r3, r3, #1
 8002a02:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002a06:	4b19      	ldr	r3, [pc, #100]	; (8002a6c <HAL_RCC_OscConfig+0x578>)
 8002a08:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002a0c:	4a17      	ldr	r2, [pc, #92]	; (8002a6c <HAL_RCC_OscConfig+0x578>)
 8002a0e:	f023 0304 	bic.w	r3, r3, #4
 8002a12:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	689b      	ldr	r3, [r3, #8]
 8002a1a:	2b00      	cmp	r3, #0
 8002a1c:	d016      	beq.n	8002a4c <HAL_RCC_OscConfig+0x558>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002a1e:	f7fe fca3 	bl	8001368 <HAL_GetTick>
 8002a22:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002a24:	e00a      	b.n	8002a3c <HAL_RCC_OscConfig+0x548>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002a26:	f7fe fc9f 	bl	8001368 <HAL_GetTick>
 8002a2a:	4602      	mov	r2, r0
 8002a2c:	693b      	ldr	r3, [r7, #16]
 8002a2e:	1ad3      	subs	r3, r2, r3
 8002a30:	f241 3288 	movw	r2, #5000	; 0x1388
 8002a34:	4293      	cmp	r3, r2
 8002a36:	d901      	bls.n	8002a3c <HAL_RCC_OscConfig+0x548>
        {
          return HAL_TIMEOUT;
 8002a38:	2303      	movs	r3, #3
 8002a3a:	e139      	b.n	8002cb0 <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002a3c:	4b0b      	ldr	r3, [pc, #44]	; (8002a6c <HAL_RCC_OscConfig+0x578>)
 8002a3e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002a42:	f003 0302 	and.w	r3, r3, #2
 8002a46:	2b00      	cmp	r3, #0
 8002a48:	d0ed      	beq.n	8002a26 <HAL_RCC_OscConfig+0x532>
 8002a4a:	e01a      	b.n	8002a82 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002a4c:	f7fe fc8c 	bl	8001368 <HAL_GetTick>
 8002a50:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002a52:	e00f      	b.n	8002a74 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002a54:	f7fe fc88 	bl	8001368 <HAL_GetTick>
 8002a58:	4602      	mov	r2, r0
 8002a5a:	693b      	ldr	r3, [r7, #16]
 8002a5c:	1ad3      	subs	r3, r2, r3
 8002a5e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002a62:	4293      	cmp	r3, r2
 8002a64:	d906      	bls.n	8002a74 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8002a66:	2303      	movs	r3, #3
 8002a68:	e122      	b.n	8002cb0 <HAL_RCC_OscConfig+0x7bc>
 8002a6a:	bf00      	nop
 8002a6c:	40021000 	.word	0x40021000
 8002a70:	40007000 	.word	0x40007000
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002a74:	4b90      	ldr	r3, [pc, #576]	; (8002cb8 <HAL_RCC_OscConfig+0x7c4>)
 8002a76:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002a7a:	f003 0302 	and.w	r3, r3, #2
 8002a7e:	2b00      	cmp	r3, #0
 8002a80:	d1e8      	bne.n	8002a54 <HAL_RCC_OscConfig+0x560>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002a82:	7ffb      	ldrb	r3, [r7, #31]
 8002a84:	2b01      	cmp	r3, #1
 8002a86:	d105      	bne.n	8002a94 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002a88:	4b8b      	ldr	r3, [pc, #556]	; (8002cb8 <HAL_RCC_OscConfig+0x7c4>)
 8002a8a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002a8c:	4a8a      	ldr	r2, [pc, #552]	; (8002cb8 <HAL_RCC_OscConfig+0x7c4>)
 8002a8e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002a92:	6593      	str	r3, [r2, #88]	; 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002a98:	2b00      	cmp	r3, #0
 8002a9a:	f000 8108 	beq.w	8002cae <HAL_RCC_OscConfig+0x7ba>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002aa2:	2b02      	cmp	r3, #2
 8002aa4:	f040 80d0 	bne.w	8002c48 <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8002aa8:	4b83      	ldr	r3, [pc, #524]	; (8002cb8 <HAL_RCC_OscConfig+0x7c4>)
 8002aaa:	68db      	ldr	r3, [r3, #12]
 8002aac:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002aae:	697b      	ldr	r3, [r7, #20]
 8002ab0:	f003 0203 	and.w	r2, r3, #3
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002ab8:	429a      	cmp	r2, r3
 8002aba:	d130      	bne.n	8002b1e <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002abc:	697b      	ldr	r3, [r7, #20]
 8002abe:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ac6:	3b01      	subs	r3, #1
 8002ac8:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002aca:	429a      	cmp	r2, r3
 8002acc:	d127      	bne.n	8002b1e <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002ace:	697b      	ldr	r3, [r7, #20]
 8002ad0:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002ad8:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002ada:	429a      	cmp	r2, r3
 8002adc:	d11f      	bne.n	8002b1e <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8002ade:	697b      	ldr	r3, [r7, #20]
 8002ae0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002ae4:	687a      	ldr	r2, [r7, #4]
 8002ae6:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8002ae8:	2a07      	cmp	r2, #7
 8002aea:	bf14      	ite	ne
 8002aec:	2201      	movne	r2, #1
 8002aee:	2200      	moveq	r2, #0
 8002af0:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002af2:	4293      	cmp	r3, r2
 8002af4:	d113      	bne.n	8002b1e <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002af6:	697b      	ldr	r3, [r7, #20]
 8002af8:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002b00:	085b      	lsrs	r3, r3, #1
 8002b02:	3b01      	subs	r3, #1
 8002b04:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8002b06:	429a      	cmp	r2, r3
 8002b08:	d109      	bne.n	8002b1e <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8002b0a:	697b      	ldr	r3, [r7, #20]
 8002b0c:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b14:	085b      	lsrs	r3, r3, #1
 8002b16:	3b01      	subs	r3, #1
 8002b18:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002b1a:	429a      	cmp	r2, r3
 8002b1c:	d06e      	beq.n	8002bfc <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002b1e:	69bb      	ldr	r3, [r7, #24]
 8002b20:	2b0c      	cmp	r3, #12
 8002b22:	d069      	beq.n	8002bf8 <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8002b24:	4b64      	ldr	r3, [pc, #400]	; (8002cb8 <HAL_RCC_OscConfig+0x7c4>)
 8002b26:	681b      	ldr	r3, [r3, #0]
 8002b28:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8002b2c:	2b00      	cmp	r3, #0
 8002b2e:	d105      	bne.n	8002b3c <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8002b30:	4b61      	ldr	r3, [pc, #388]	; (8002cb8 <HAL_RCC_OscConfig+0x7c4>)
 8002b32:	681b      	ldr	r3, [r3, #0]
 8002b34:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002b38:	2b00      	cmp	r3, #0
 8002b3a:	d001      	beq.n	8002b40 <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 8002b3c:	2301      	movs	r3, #1
 8002b3e:	e0b7      	b.n	8002cb0 <HAL_RCC_OscConfig+0x7bc>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8002b40:	4b5d      	ldr	r3, [pc, #372]	; (8002cb8 <HAL_RCC_OscConfig+0x7c4>)
 8002b42:	681b      	ldr	r3, [r3, #0]
 8002b44:	4a5c      	ldr	r2, [pc, #368]	; (8002cb8 <HAL_RCC_OscConfig+0x7c4>)
 8002b46:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002b4a:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8002b4c:	f7fe fc0c 	bl	8001368 <HAL_GetTick>
 8002b50:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002b52:	e008      	b.n	8002b66 <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002b54:	f7fe fc08 	bl	8001368 <HAL_GetTick>
 8002b58:	4602      	mov	r2, r0
 8002b5a:	693b      	ldr	r3, [r7, #16]
 8002b5c:	1ad3      	subs	r3, r2, r3
 8002b5e:	2b02      	cmp	r3, #2
 8002b60:	d901      	bls.n	8002b66 <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 8002b62:	2303      	movs	r3, #3
 8002b64:	e0a4      	b.n	8002cb0 <HAL_RCC_OscConfig+0x7bc>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002b66:	4b54      	ldr	r3, [pc, #336]	; (8002cb8 <HAL_RCC_OscConfig+0x7c4>)
 8002b68:	681b      	ldr	r3, [r3, #0]
 8002b6a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002b6e:	2b00      	cmp	r3, #0
 8002b70:	d1f0      	bne.n	8002b54 <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002b72:	4b51      	ldr	r3, [pc, #324]	; (8002cb8 <HAL_RCC_OscConfig+0x7c4>)
 8002b74:	68da      	ldr	r2, [r3, #12]
 8002b76:	4b51      	ldr	r3, [pc, #324]	; (8002cbc <HAL_RCC_OscConfig+0x7c8>)
 8002b78:	4013      	ands	r3, r2
 8002b7a:	687a      	ldr	r2, [r7, #4]
 8002b7c:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8002b7e:	687a      	ldr	r2, [r7, #4]
 8002b80:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8002b82:	3a01      	subs	r2, #1
 8002b84:	0112      	lsls	r2, r2, #4
 8002b86:	4311      	orrs	r1, r2
 8002b88:	687a      	ldr	r2, [r7, #4]
 8002b8a:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8002b8c:	0212      	lsls	r2, r2, #8
 8002b8e:	4311      	orrs	r1, r2
 8002b90:	687a      	ldr	r2, [r7, #4]
 8002b92:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8002b94:	0852      	lsrs	r2, r2, #1
 8002b96:	3a01      	subs	r2, #1
 8002b98:	0552      	lsls	r2, r2, #21
 8002b9a:	4311      	orrs	r1, r2
 8002b9c:	687a      	ldr	r2, [r7, #4]
 8002b9e:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8002ba0:	0852      	lsrs	r2, r2, #1
 8002ba2:	3a01      	subs	r2, #1
 8002ba4:	0652      	lsls	r2, r2, #25
 8002ba6:	4311      	orrs	r1, r2
 8002ba8:	687a      	ldr	r2, [r7, #4]
 8002baa:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8002bac:	0912      	lsrs	r2, r2, #4
 8002bae:	0452      	lsls	r2, r2, #17
 8002bb0:	430a      	orrs	r2, r1
 8002bb2:	4941      	ldr	r1, [pc, #260]	; (8002cb8 <HAL_RCC_OscConfig+0x7c4>)
 8002bb4:	4313      	orrs	r3, r2
 8002bb6:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8002bb8:	4b3f      	ldr	r3, [pc, #252]	; (8002cb8 <HAL_RCC_OscConfig+0x7c4>)
 8002bba:	681b      	ldr	r3, [r3, #0]
 8002bbc:	4a3e      	ldr	r2, [pc, #248]	; (8002cb8 <HAL_RCC_OscConfig+0x7c4>)
 8002bbe:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002bc2:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002bc4:	4b3c      	ldr	r3, [pc, #240]	; (8002cb8 <HAL_RCC_OscConfig+0x7c4>)
 8002bc6:	68db      	ldr	r3, [r3, #12]
 8002bc8:	4a3b      	ldr	r2, [pc, #236]	; (8002cb8 <HAL_RCC_OscConfig+0x7c4>)
 8002bca:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002bce:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8002bd0:	f7fe fbca 	bl	8001368 <HAL_GetTick>
 8002bd4:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002bd6:	e008      	b.n	8002bea <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002bd8:	f7fe fbc6 	bl	8001368 <HAL_GetTick>
 8002bdc:	4602      	mov	r2, r0
 8002bde:	693b      	ldr	r3, [r7, #16]
 8002be0:	1ad3      	subs	r3, r2, r3
 8002be2:	2b02      	cmp	r3, #2
 8002be4:	d901      	bls.n	8002bea <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 8002be6:	2303      	movs	r3, #3
 8002be8:	e062      	b.n	8002cb0 <HAL_RCC_OscConfig+0x7bc>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002bea:	4b33      	ldr	r3, [pc, #204]	; (8002cb8 <HAL_RCC_OscConfig+0x7c4>)
 8002bec:	681b      	ldr	r3, [r3, #0]
 8002bee:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002bf2:	2b00      	cmp	r3, #0
 8002bf4:	d0f0      	beq.n	8002bd8 <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002bf6:	e05a      	b.n	8002cae <HAL_RCC_OscConfig+0x7ba>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8002bf8:	2301      	movs	r3, #1
 8002bfa:	e059      	b.n	8002cb0 <HAL_RCC_OscConfig+0x7bc>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002bfc:	4b2e      	ldr	r3, [pc, #184]	; (8002cb8 <HAL_RCC_OscConfig+0x7c4>)
 8002bfe:	681b      	ldr	r3, [r3, #0]
 8002c00:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002c04:	2b00      	cmp	r3, #0
 8002c06:	d152      	bne.n	8002cae <HAL_RCC_OscConfig+0x7ba>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8002c08:	4b2b      	ldr	r3, [pc, #172]	; (8002cb8 <HAL_RCC_OscConfig+0x7c4>)
 8002c0a:	681b      	ldr	r3, [r3, #0]
 8002c0c:	4a2a      	ldr	r2, [pc, #168]	; (8002cb8 <HAL_RCC_OscConfig+0x7c4>)
 8002c0e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002c12:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002c14:	4b28      	ldr	r3, [pc, #160]	; (8002cb8 <HAL_RCC_OscConfig+0x7c4>)
 8002c16:	68db      	ldr	r3, [r3, #12]
 8002c18:	4a27      	ldr	r2, [pc, #156]	; (8002cb8 <HAL_RCC_OscConfig+0x7c4>)
 8002c1a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002c1e:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8002c20:	f7fe fba2 	bl	8001368 <HAL_GetTick>
 8002c24:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002c26:	e008      	b.n	8002c3a <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002c28:	f7fe fb9e 	bl	8001368 <HAL_GetTick>
 8002c2c:	4602      	mov	r2, r0
 8002c2e:	693b      	ldr	r3, [r7, #16]
 8002c30:	1ad3      	subs	r3, r2, r3
 8002c32:	2b02      	cmp	r3, #2
 8002c34:	d901      	bls.n	8002c3a <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 8002c36:	2303      	movs	r3, #3
 8002c38:	e03a      	b.n	8002cb0 <HAL_RCC_OscConfig+0x7bc>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002c3a:	4b1f      	ldr	r3, [pc, #124]	; (8002cb8 <HAL_RCC_OscConfig+0x7c4>)
 8002c3c:	681b      	ldr	r3, [r3, #0]
 8002c3e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002c42:	2b00      	cmp	r3, #0
 8002c44:	d0f0      	beq.n	8002c28 <HAL_RCC_OscConfig+0x734>
 8002c46:	e032      	b.n	8002cae <HAL_RCC_OscConfig+0x7ba>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002c48:	69bb      	ldr	r3, [r7, #24]
 8002c4a:	2b0c      	cmp	r3, #12
 8002c4c:	d02d      	beq.n	8002caa <HAL_RCC_OscConfig+0x7b6>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002c4e:	4b1a      	ldr	r3, [pc, #104]	; (8002cb8 <HAL_RCC_OscConfig+0x7c4>)
 8002c50:	681b      	ldr	r3, [r3, #0]
 8002c52:	4a19      	ldr	r2, [pc, #100]	; (8002cb8 <HAL_RCC_OscConfig+0x7c4>)
 8002c54:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002c58:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
#if defined(RCC_PLLSAI1_SUPPORT) && defined(RCC_CR_PLLSAI2RDY)
        if(READ_BIT(RCC->CR, (RCC_CR_PLLSAI1RDY | RCC_CR_PLLSAI2RDY)) == 0U)
 8002c5a:	4b17      	ldr	r3, [pc, #92]	; (8002cb8 <HAL_RCC_OscConfig+0x7c4>)
 8002c5c:	681b      	ldr	r3, [r3, #0]
 8002c5e:	f003 5320 	and.w	r3, r3, #671088640	; 0x28000000
 8002c62:	2b00      	cmp	r3, #0
 8002c64:	d105      	bne.n	8002c72 <HAL_RCC_OscConfig+0x77e>
        {
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 8002c66:	4b14      	ldr	r3, [pc, #80]	; (8002cb8 <HAL_RCC_OscConfig+0x7c4>)
 8002c68:	68db      	ldr	r3, [r3, #12]
 8002c6a:	4a13      	ldr	r2, [pc, #76]	; (8002cb8 <HAL_RCC_OscConfig+0x7c4>)
 8002c6c:	f023 0303 	bic.w	r3, r3, #3
 8002c70:	60d3      	str	r3, [r2, #12]
#else
        MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
#endif /* RCC_PLLSAI1_SUPPORT && RCC_CR_PLLSAI2RDY */

#if defined(RCC_PLLSAI2_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8002c72:	4b11      	ldr	r3, [pc, #68]	; (8002cb8 <HAL_RCC_OscConfig+0x7c4>)
 8002c74:	68db      	ldr	r3, [r3, #12]
 8002c76:	4a10      	ldr	r2, [pc, #64]	; (8002cb8 <HAL_RCC_OscConfig+0x7c4>)
 8002c78:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 8002c7c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002c80:	60d3      	str	r3, [r2, #12]
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK);
#endif /* RCC_PLLSAI2_SUPPORT */

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002c82:	f7fe fb71 	bl	8001368 <HAL_GetTick>
 8002c86:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002c88:	e008      	b.n	8002c9c <HAL_RCC_OscConfig+0x7a8>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002c8a:	f7fe fb6d 	bl	8001368 <HAL_GetTick>
 8002c8e:	4602      	mov	r2, r0
 8002c90:	693b      	ldr	r3, [r7, #16]
 8002c92:	1ad3      	subs	r3, r2, r3
 8002c94:	2b02      	cmp	r3, #2
 8002c96:	d901      	bls.n	8002c9c <HAL_RCC_OscConfig+0x7a8>
          {
            return HAL_TIMEOUT;
 8002c98:	2303      	movs	r3, #3
 8002c9a:	e009      	b.n	8002cb0 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002c9c:	4b06      	ldr	r3, [pc, #24]	; (8002cb8 <HAL_RCC_OscConfig+0x7c4>)
 8002c9e:	681b      	ldr	r3, [r3, #0]
 8002ca0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002ca4:	2b00      	cmp	r3, #0
 8002ca6:	d1f0      	bne.n	8002c8a <HAL_RCC_OscConfig+0x796>
 8002ca8:	e001      	b.n	8002cae <HAL_RCC_OscConfig+0x7ba>
        }
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8002caa:	2301      	movs	r3, #1
 8002cac:	e000      	b.n	8002cb0 <HAL_RCC_OscConfig+0x7bc>
      }
    }
  }
  return HAL_OK;
 8002cae:	2300      	movs	r3, #0
}
 8002cb0:	4618      	mov	r0, r3
 8002cb2:	3720      	adds	r7, #32
 8002cb4:	46bd      	mov	sp, r7
 8002cb6:	bd80      	pop	{r7, pc}
 8002cb8:	40021000 	.word	0x40021000
 8002cbc:	f99d808c 	.word	0xf99d808c

08002cc0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002cc0:	b580      	push	{r7, lr}
 8002cc2:	b084      	sub	sp, #16
 8002cc4:	af00      	add	r7, sp, #0
 8002cc6:	6078      	str	r0, [r7, #4]
 8002cc8:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	2b00      	cmp	r3, #0
 8002cce:	d101      	bne.n	8002cd4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002cd0:	2301      	movs	r3, #1
 8002cd2:	e0c8      	b.n	8002e66 <HAL_RCC_ClockConfig+0x1a6>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002cd4:	4b66      	ldr	r3, [pc, #408]	; (8002e70 <HAL_RCC_ClockConfig+0x1b0>)
 8002cd6:	681b      	ldr	r3, [r3, #0]
 8002cd8:	f003 0307 	and.w	r3, r3, #7
 8002cdc:	683a      	ldr	r2, [r7, #0]
 8002cde:	429a      	cmp	r2, r3
 8002ce0:	d910      	bls.n	8002d04 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002ce2:	4b63      	ldr	r3, [pc, #396]	; (8002e70 <HAL_RCC_ClockConfig+0x1b0>)
 8002ce4:	681b      	ldr	r3, [r3, #0]
 8002ce6:	f023 0207 	bic.w	r2, r3, #7
 8002cea:	4961      	ldr	r1, [pc, #388]	; (8002e70 <HAL_RCC_ClockConfig+0x1b0>)
 8002cec:	683b      	ldr	r3, [r7, #0]
 8002cee:	4313      	orrs	r3, r2
 8002cf0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002cf2:	4b5f      	ldr	r3, [pc, #380]	; (8002e70 <HAL_RCC_ClockConfig+0x1b0>)
 8002cf4:	681b      	ldr	r3, [r3, #0]
 8002cf6:	f003 0307 	and.w	r3, r3, #7
 8002cfa:	683a      	ldr	r2, [r7, #0]
 8002cfc:	429a      	cmp	r2, r3
 8002cfe:	d001      	beq.n	8002d04 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8002d00:	2301      	movs	r3, #1
 8002d02:	e0b0      	b.n	8002e66 <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	681b      	ldr	r3, [r3, #0]
 8002d08:	f003 0301 	and.w	r3, r3, #1
 8002d0c:	2b00      	cmp	r3, #0
 8002d0e:	d04c      	beq.n	8002daa <HAL_RCC_ClockConfig+0xea>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	685b      	ldr	r3, [r3, #4]
 8002d14:	2b03      	cmp	r3, #3
 8002d16:	d107      	bne.n	8002d28 <HAL_RCC_ClockConfig+0x68>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002d18:	4b56      	ldr	r3, [pc, #344]	; (8002e74 <HAL_RCC_ClockConfig+0x1b4>)
 8002d1a:	681b      	ldr	r3, [r3, #0]
 8002d1c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002d20:	2b00      	cmp	r3, #0
 8002d22:	d121      	bne.n	8002d68 <HAL_RCC_ClockConfig+0xa8>
      {
        return HAL_ERROR;
 8002d24:	2301      	movs	r3, #1
 8002d26:	e09e      	b.n	8002e66 <HAL_RCC_ClockConfig+0x1a6>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	685b      	ldr	r3, [r3, #4]
 8002d2c:	2b02      	cmp	r3, #2
 8002d2e:	d107      	bne.n	8002d40 <HAL_RCC_ClockConfig+0x80>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002d30:	4b50      	ldr	r3, [pc, #320]	; (8002e74 <HAL_RCC_ClockConfig+0x1b4>)
 8002d32:	681b      	ldr	r3, [r3, #0]
 8002d34:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002d38:	2b00      	cmp	r3, #0
 8002d3a:	d115      	bne.n	8002d68 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8002d3c:	2301      	movs	r3, #1
 8002d3e:	e092      	b.n	8002e66 <HAL_RCC_ClockConfig+0x1a6>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	685b      	ldr	r3, [r3, #4]
 8002d44:	2b00      	cmp	r3, #0
 8002d46:	d107      	bne.n	8002d58 <HAL_RCC_ClockConfig+0x98>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002d48:	4b4a      	ldr	r3, [pc, #296]	; (8002e74 <HAL_RCC_ClockConfig+0x1b4>)
 8002d4a:	681b      	ldr	r3, [r3, #0]
 8002d4c:	f003 0302 	and.w	r3, r3, #2
 8002d50:	2b00      	cmp	r3, #0
 8002d52:	d109      	bne.n	8002d68 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8002d54:	2301      	movs	r3, #1
 8002d56:	e086      	b.n	8002e66 <HAL_RCC_ClockConfig+0x1a6>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002d58:	4b46      	ldr	r3, [pc, #280]	; (8002e74 <HAL_RCC_ClockConfig+0x1b4>)
 8002d5a:	681b      	ldr	r3, [r3, #0]
 8002d5c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002d60:	2b00      	cmp	r3, #0
 8002d62:	d101      	bne.n	8002d68 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8002d64:	2301      	movs	r3, #1
 8002d66:	e07e      	b.n	8002e66 <HAL_RCC_ClockConfig+0x1a6>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8002d68:	4b42      	ldr	r3, [pc, #264]	; (8002e74 <HAL_RCC_ClockConfig+0x1b4>)
 8002d6a:	689b      	ldr	r3, [r3, #8]
 8002d6c:	f023 0203 	bic.w	r2, r3, #3
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	685b      	ldr	r3, [r3, #4]
 8002d74:	493f      	ldr	r1, [pc, #252]	; (8002e74 <HAL_RCC_ClockConfig+0x1b4>)
 8002d76:	4313      	orrs	r3, r2
 8002d78:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002d7a:	f7fe faf5 	bl	8001368 <HAL_GetTick>
 8002d7e:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002d80:	e00a      	b.n	8002d98 <HAL_RCC_ClockConfig+0xd8>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002d82:	f7fe faf1 	bl	8001368 <HAL_GetTick>
 8002d86:	4602      	mov	r2, r0
 8002d88:	68fb      	ldr	r3, [r7, #12]
 8002d8a:	1ad3      	subs	r3, r2, r3
 8002d8c:	f241 3288 	movw	r2, #5000	; 0x1388
 8002d90:	4293      	cmp	r3, r2
 8002d92:	d901      	bls.n	8002d98 <HAL_RCC_ClockConfig+0xd8>
      {
        return HAL_TIMEOUT;
 8002d94:	2303      	movs	r3, #3
 8002d96:	e066      	b.n	8002e66 <HAL_RCC_ClockConfig+0x1a6>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002d98:	4b36      	ldr	r3, [pc, #216]	; (8002e74 <HAL_RCC_ClockConfig+0x1b4>)
 8002d9a:	689b      	ldr	r3, [r3, #8]
 8002d9c:	f003 020c 	and.w	r2, r3, #12
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	685b      	ldr	r3, [r3, #4]
 8002da4:	009b      	lsls	r3, r3, #2
 8002da6:	429a      	cmp	r2, r3
 8002da8:	d1eb      	bne.n	8002d82 <HAL_RCC_ClockConfig+0xc2>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	681b      	ldr	r3, [r3, #0]
 8002dae:	f003 0302 	and.w	r3, r3, #2
 8002db2:	2b00      	cmp	r3, #0
 8002db4:	d008      	beq.n	8002dc8 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002db6:	4b2f      	ldr	r3, [pc, #188]	; (8002e74 <HAL_RCC_ClockConfig+0x1b4>)
 8002db8:	689b      	ldr	r3, [r3, #8]
 8002dba:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	689b      	ldr	r3, [r3, #8]
 8002dc2:	492c      	ldr	r1, [pc, #176]	; (8002e74 <HAL_RCC_ClockConfig+0x1b4>)
 8002dc4:	4313      	orrs	r3, r2
 8002dc6:	608b      	str	r3, [r1, #8]
    }
  }
#endif

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002dc8:	4b29      	ldr	r3, [pc, #164]	; (8002e70 <HAL_RCC_ClockConfig+0x1b0>)
 8002dca:	681b      	ldr	r3, [r3, #0]
 8002dcc:	f003 0307 	and.w	r3, r3, #7
 8002dd0:	683a      	ldr	r2, [r7, #0]
 8002dd2:	429a      	cmp	r2, r3
 8002dd4:	d210      	bcs.n	8002df8 <HAL_RCC_ClockConfig+0x138>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002dd6:	4b26      	ldr	r3, [pc, #152]	; (8002e70 <HAL_RCC_ClockConfig+0x1b0>)
 8002dd8:	681b      	ldr	r3, [r3, #0]
 8002dda:	f023 0207 	bic.w	r2, r3, #7
 8002dde:	4924      	ldr	r1, [pc, #144]	; (8002e70 <HAL_RCC_ClockConfig+0x1b0>)
 8002de0:	683b      	ldr	r3, [r7, #0]
 8002de2:	4313      	orrs	r3, r2
 8002de4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002de6:	4b22      	ldr	r3, [pc, #136]	; (8002e70 <HAL_RCC_ClockConfig+0x1b0>)
 8002de8:	681b      	ldr	r3, [r3, #0]
 8002dea:	f003 0307 	and.w	r3, r3, #7
 8002dee:	683a      	ldr	r2, [r7, #0]
 8002df0:	429a      	cmp	r2, r3
 8002df2:	d001      	beq.n	8002df8 <HAL_RCC_ClockConfig+0x138>
    {
      return HAL_ERROR;
 8002df4:	2301      	movs	r3, #1
 8002df6:	e036      	b.n	8002e66 <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	681b      	ldr	r3, [r3, #0]
 8002dfc:	f003 0304 	and.w	r3, r3, #4
 8002e00:	2b00      	cmp	r3, #0
 8002e02:	d008      	beq.n	8002e16 <HAL_RCC_ClockConfig+0x156>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002e04:	4b1b      	ldr	r3, [pc, #108]	; (8002e74 <HAL_RCC_ClockConfig+0x1b4>)
 8002e06:	689b      	ldr	r3, [r3, #8]
 8002e08:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	68db      	ldr	r3, [r3, #12]
 8002e10:	4918      	ldr	r1, [pc, #96]	; (8002e74 <HAL_RCC_ClockConfig+0x1b4>)
 8002e12:	4313      	orrs	r3, r2
 8002e14:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	681b      	ldr	r3, [r3, #0]
 8002e1a:	f003 0308 	and.w	r3, r3, #8
 8002e1e:	2b00      	cmp	r3, #0
 8002e20:	d009      	beq.n	8002e36 <HAL_RCC_ClockConfig+0x176>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002e22:	4b14      	ldr	r3, [pc, #80]	; (8002e74 <HAL_RCC_ClockConfig+0x1b4>)
 8002e24:	689b      	ldr	r3, [r3, #8]
 8002e26:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	691b      	ldr	r3, [r3, #16]
 8002e2e:	00db      	lsls	r3, r3, #3
 8002e30:	4910      	ldr	r1, [pc, #64]	; (8002e74 <HAL_RCC_ClockConfig+0x1b4>)
 8002e32:	4313      	orrs	r3, r2
 8002e34:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8002e36:	f000 f825 	bl	8002e84 <HAL_RCC_GetSysClockFreq>
 8002e3a:	4602      	mov	r2, r0
 8002e3c:	4b0d      	ldr	r3, [pc, #52]	; (8002e74 <HAL_RCC_ClockConfig+0x1b4>)
 8002e3e:	689b      	ldr	r3, [r3, #8]
 8002e40:	091b      	lsrs	r3, r3, #4
 8002e42:	f003 030f 	and.w	r3, r3, #15
 8002e46:	490c      	ldr	r1, [pc, #48]	; (8002e78 <HAL_RCC_ClockConfig+0x1b8>)
 8002e48:	5ccb      	ldrb	r3, [r1, r3]
 8002e4a:	f003 031f 	and.w	r3, r3, #31
 8002e4e:	fa22 f303 	lsr.w	r3, r2, r3
 8002e52:	4a0a      	ldr	r2, [pc, #40]	; (8002e7c <HAL_RCC_ClockConfig+0x1bc>)
 8002e54:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8002e56:	4b0a      	ldr	r3, [pc, #40]	; (8002e80 <HAL_RCC_ClockConfig+0x1c0>)
 8002e58:	681b      	ldr	r3, [r3, #0]
 8002e5a:	4618      	mov	r0, r3
 8002e5c:	f7fe fa34 	bl	80012c8 <HAL_InitTick>
 8002e60:	4603      	mov	r3, r0
 8002e62:	72fb      	strb	r3, [r7, #11]

  return status;
 8002e64:	7afb      	ldrb	r3, [r7, #11]
}
 8002e66:	4618      	mov	r0, r3
 8002e68:	3710      	adds	r7, #16
 8002e6a:	46bd      	mov	sp, r7
 8002e6c:	bd80      	pop	{r7, pc}
 8002e6e:	bf00      	nop
 8002e70:	40022000 	.word	0x40022000
 8002e74:	40021000 	.word	0x40021000
 8002e78:	08004d78 	.word	0x08004d78
 8002e7c:	20000000 	.word	0x20000000
 8002e80:	20000004 	.word	0x20000004

08002e84 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002e84:	b480      	push	{r7}
 8002e86:	b089      	sub	sp, #36	; 0x24
 8002e88:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8002e8a:	2300      	movs	r3, #0
 8002e8c:	61fb      	str	r3, [r7, #28]
 8002e8e:	2300      	movs	r3, #0
 8002e90:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002e92:	4b3e      	ldr	r3, [pc, #248]	; (8002f8c <HAL_RCC_GetSysClockFreq+0x108>)
 8002e94:	689b      	ldr	r3, [r3, #8]
 8002e96:	f003 030c 	and.w	r3, r3, #12
 8002e9a:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002e9c:	4b3b      	ldr	r3, [pc, #236]	; (8002f8c <HAL_RCC_GetSysClockFreq+0x108>)
 8002e9e:	68db      	ldr	r3, [r3, #12]
 8002ea0:	f003 0303 	and.w	r3, r3, #3
 8002ea4:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8002ea6:	693b      	ldr	r3, [r7, #16]
 8002ea8:	2b00      	cmp	r3, #0
 8002eaa:	d005      	beq.n	8002eb8 <HAL_RCC_GetSysClockFreq+0x34>
 8002eac:	693b      	ldr	r3, [r7, #16]
 8002eae:	2b0c      	cmp	r3, #12
 8002eb0:	d121      	bne.n	8002ef6 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8002eb2:	68fb      	ldr	r3, [r7, #12]
 8002eb4:	2b01      	cmp	r3, #1
 8002eb6:	d11e      	bne.n	8002ef6 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8002eb8:	4b34      	ldr	r3, [pc, #208]	; (8002f8c <HAL_RCC_GetSysClockFreq+0x108>)
 8002eba:	681b      	ldr	r3, [r3, #0]
 8002ebc:	f003 0308 	and.w	r3, r3, #8
 8002ec0:	2b00      	cmp	r3, #0
 8002ec2:	d107      	bne.n	8002ed4 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8002ec4:	4b31      	ldr	r3, [pc, #196]	; (8002f8c <HAL_RCC_GetSysClockFreq+0x108>)
 8002ec6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002eca:	0a1b      	lsrs	r3, r3, #8
 8002ecc:	f003 030f 	and.w	r3, r3, #15
 8002ed0:	61fb      	str	r3, [r7, #28]
 8002ed2:	e005      	b.n	8002ee0 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8002ed4:	4b2d      	ldr	r3, [pc, #180]	; (8002f8c <HAL_RCC_GetSysClockFreq+0x108>)
 8002ed6:	681b      	ldr	r3, [r3, #0]
 8002ed8:	091b      	lsrs	r3, r3, #4
 8002eda:	f003 030f 	and.w	r3, r3, #15
 8002ede:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8002ee0:	4a2b      	ldr	r2, [pc, #172]	; (8002f90 <HAL_RCC_GetSysClockFreq+0x10c>)
 8002ee2:	69fb      	ldr	r3, [r7, #28]
 8002ee4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002ee8:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002eea:	693b      	ldr	r3, [r7, #16]
 8002eec:	2b00      	cmp	r3, #0
 8002eee:	d10d      	bne.n	8002f0c <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8002ef0:	69fb      	ldr	r3, [r7, #28]
 8002ef2:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002ef4:	e00a      	b.n	8002f0c <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8002ef6:	693b      	ldr	r3, [r7, #16]
 8002ef8:	2b04      	cmp	r3, #4
 8002efa:	d102      	bne.n	8002f02 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8002efc:	4b25      	ldr	r3, [pc, #148]	; (8002f94 <HAL_RCC_GetSysClockFreq+0x110>)
 8002efe:	61bb      	str	r3, [r7, #24]
 8002f00:	e004      	b.n	8002f0c <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8002f02:	693b      	ldr	r3, [r7, #16]
 8002f04:	2b08      	cmp	r3, #8
 8002f06:	d101      	bne.n	8002f0c <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8002f08:	4b23      	ldr	r3, [pc, #140]	; (8002f98 <HAL_RCC_GetSysClockFreq+0x114>)
 8002f0a:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8002f0c:	693b      	ldr	r3, [r7, #16]
 8002f0e:	2b0c      	cmp	r3, #12
 8002f10:	d134      	bne.n	8002f7c <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8002f12:	4b1e      	ldr	r3, [pc, #120]	; (8002f8c <HAL_RCC_GetSysClockFreq+0x108>)
 8002f14:	68db      	ldr	r3, [r3, #12]
 8002f16:	f003 0303 	and.w	r3, r3, #3
 8002f1a:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8002f1c:	68bb      	ldr	r3, [r7, #8]
 8002f1e:	2b02      	cmp	r3, #2
 8002f20:	d003      	beq.n	8002f2a <HAL_RCC_GetSysClockFreq+0xa6>
 8002f22:	68bb      	ldr	r3, [r7, #8]
 8002f24:	2b03      	cmp	r3, #3
 8002f26:	d003      	beq.n	8002f30 <HAL_RCC_GetSysClockFreq+0xac>
 8002f28:	e005      	b.n	8002f36 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8002f2a:	4b1a      	ldr	r3, [pc, #104]	; (8002f94 <HAL_RCC_GetSysClockFreq+0x110>)
 8002f2c:	617b      	str	r3, [r7, #20]
      break;
 8002f2e:	e005      	b.n	8002f3c <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8002f30:	4b19      	ldr	r3, [pc, #100]	; (8002f98 <HAL_RCC_GetSysClockFreq+0x114>)
 8002f32:	617b      	str	r3, [r7, #20]
      break;
 8002f34:	e002      	b.n	8002f3c <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8002f36:	69fb      	ldr	r3, [r7, #28]
 8002f38:	617b      	str	r3, [r7, #20]
      break;
 8002f3a:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002f3c:	4b13      	ldr	r3, [pc, #76]	; (8002f8c <HAL_RCC_GetSysClockFreq+0x108>)
 8002f3e:	68db      	ldr	r3, [r3, #12]
 8002f40:	091b      	lsrs	r3, r3, #4
 8002f42:	f003 0307 	and.w	r3, r3, #7
 8002f46:	3301      	adds	r3, #1
 8002f48:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8002f4a:	4b10      	ldr	r3, [pc, #64]	; (8002f8c <HAL_RCC_GetSysClockFreq+0x108>)
 8002f4c:	68db      	ldr	r3, [r3, #12]
 8002f4e:	0a1b      	lsrs	r3, r3, #8
 8002f50:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002f54:	697a      	ldr	r2, [r7, #20]
 8002f56:	fb02 f203 	mul.w	r2, r2, r3
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002f60:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8002f62:	4b0a      	ldr	r3, [pc, #40]	; (8002f8c <HAL_RCC_GetSysClockFreq+0x108>)
 8002f64:	68db      	ldr	r3, [r3, #12]
 8002f66:	0e5b      	lsrs	r3, r3, #25
 8002f68:	f003 0303 	and.w	r3, r3, #3
 8002f6c:	3301      	adds	r3, #1
 8002f6e:	005b      	lsls	r3, r3, #1
 8002f70:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8002f72:	697a      	ldr	r2, [r7, #20]
 8002f74:	683b      	ldr	r3, [r7, #0]
 8002f76:	fbb2 f3f3 	udiv	r3, r2, r3
 8002f7a:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8002f7c:	69bb      	ldr	r3, [r7, #24]
}
 8002f7e:	4618      	mov	r0, r3
 8002f80:	3724      	adds	r7, #36	; 0x24
 8002f82:	46bd      	mov	sp, r7
 8002f84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f88:	4770      	bx	lr
 8002f8a:	bf00      	nop
 8002f8c:	40021000 	.word	0x40021000
 8002f90:	08004d90 	.word	0x08004d90
 8002f94:	00f42400 	.word	0x00f42400
 8002f98:	007a1200 	.word	0x007a1200

08002f9c <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002f9c:	b480      	push	{r7}
 8002f9e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002fa0:	4b03      	ldr	r3, [pc, #12]	; (8002fb0 <HAL_RCC_GetHCLKFreq+0x14>)
 8002fa2:	681b      	ldr	r3, [r3, #0]
}
 8002fa4:	4618      	mov	r0, r3
 8002fa6:	46bd      	mov	sp, r7
 8002fa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fac:	4770      	bx	lr
 8002fae:	bf00      	nop
 8002fb0:	20000000 	.word	0x20000000

08002fb4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002fb4:	b580      	push	{r7, lr}
 8002fb6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8002fb8:	f7ff fff0 	bl	8002f9c <HAL_RCC_GetHCLKFreq>
 8002fbc:	4602      	mov	r2, r0
 8002fbe:	4b06      	ldr	r3, [pc, #24]	; (8002fd8 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002fc0:	689b      	ldr	r3, [r3, #8]
 8002fc2:	0a1b      	lsrs	r3, r3, #8
 8002fc4:	f003 0307 	and.w	r3, r3, #7
 8002fc8:	4904      	ldr	r1, [pc, #16]	; (8002fdc <HAL_RCC_GetPCLK1Freq+0x28>)
 8002fca:	5ccb      	ldrb	r3, [r1, r3]
 8002fcc:	f003 031f 	and.w	r3, r3, #31
 8002fd0:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002fd4:	4618      	mov	r0, r3
 8002fd6:	bd80      	pop	{r7, pc}
 8002fd8:	40021000 	.word	0x40021000
 8002fdc:	08004d88 	.word	0x08004d88

08002fe0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002fe0:	b580      	push	{r7, lr}
 8002fe2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8002fe4:	f7ff ffda 	bl	8002f9c <HAL_RCC_GetHCLKFreq>
 8002fe8:	4602      	mov	r2, r0
 8002fea:	4b06      	ldr	r3, [pc, #24]	; (8003004 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002fec:	689b      	ldr	r3, [r3, #8]
 8002fee:	0adb      	lsrs	r3, r3, #11
 8002ff0:	f003 0307 	and.w	r3, r3, #7
 8002ff4:	4904      	ldr	r1, [pc, #16]	; (8003008 <HAL_RCC_GetPCLK2Freq+0x28>)
 8002ff6:	5ccb      	ldrb	r3, [r1, r3]
 8002ff8:	f003 031f 	and.w	r3, r3, #31
 8002ffc:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003000:	4618      	mov	r0, r3
 8003002:	bd80      	pop	{r7, pc}
 8003004:	40021000 	.word	0x40021000
 8003008:	08004d88 	.word	0x08004d88

0800300c <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 800300c:	b580      	push	{r7, lr}
 800300e:	b086      	sub	sp, #24
 8003010:	af00      	add	r7, sp, #0
 8003012:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8003014:	2300      	movs	r3, #0
 8003016:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8003018:	4b2a      	ldr	r3, [pc, #168]	; (80030c4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800301a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800301c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003020:	2b00      	cmp	r3, #0
 8003022:	d003      	beq.n	800302c <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8003024:	f7ff fa02 	bl	800242c <HAL_PWREx_GetVoltageRange>
 8003028:	6178      	str	r0, [r7, #20]
 800302a:	e014      	b.n	8003056 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 800302c:	4b25      	ldr	r3, [pc, #148]	; (80030c4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800302e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003030:	4a24      	ldr	r2, [pc, #144]	; (80030c4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003032:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003036:	6593      	str	r3, [r2, #88]	; 0x58
 8003038:	4b22      	ldr	r3, [pc, #136]	; (80030c4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800303a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800303c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003040:	60fb      	str	r3, [r7, #12]
 8003042:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8003044:	f7ff f9f2 	bl	800242c <HAL_PWREx_GetVoltageRange>
 8003048:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 800304a:	4b1e      	ldr	r3, [pc, #120]	; (80030c4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800304c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800304e:	4a1d      	ldr	r2, [pc, #116]	; (80030c4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003050:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003054:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8003056:	697b      	ldr	r3, [r7, #20]
 8003058:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800305c:	d10b      	bne.n	8003076 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	2b80      	cmp	r3, #128	; 0x80
 8003062:	d919      	bls.n	8003098 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	2ba0      	cmp	r3, #160	; 0xa0
 8003068:	d902      	bls.n	8003070 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 800306a:	2302      	movs	r3, #2
 800306c:	613b      	str	r3, [r7, #16]
 800306e:	e013      	b.n	8003098 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8003070:	2301      	movs	r3, #1
 8003072:	613b      	str	r3, [r7, #16]
 8003074:	e010      	b.n	8003098 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	2b80      	cmp	r3, #128	; 0x80
 800307a:	d902      	bls.n	8003082 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 800307c:	2303      	movs	r3, #3
 800307e:	613b      	str	r3, [r7, #16]
 8003080:	e00a      	b.n	8003098 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	2b80      	cmp	r3, #128	; 0x80
 8003086:	d102      	bne.n	800308e <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8003088:	2302      	movs	r3, #2
 800308a:	613b      	str	r3, [r7, #16]
 800308c:	e004      	b.n	8003098 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	2b70      	cmp	r3, #112	; 0x70
 8003092:	d101      	bne.n	8003098 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8003094:	2301      	movs	r3, #1
 8003096:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8003098:	4b0b      	ldr	r3, [pc, #44]	; (80030c8 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800309a:	681b      	ldr	r3, [r3, #0]
 800309c:	f023 0207 	bic.w	r2, r3, #7
 80030a0:	4909      	ldr	r1, [pc, #36]	; (80030c8 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80030a2:	693b      	ldr	r3, [r7, #16]
 80030a4:	4313      	orrs	r3, r2
 80030a6:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 80030a8:	4b07      	ldr	r3, [pc, #28]	; (80030c8 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80030aa:	681b      	ldr	r3, [r3, #0]
 80030ac:	f003 0307 	and.w	r3, r3, #7
 80030b0:	693a      	ldr	r2, [r7, #16]
 80030b2:	429a      	cmp	r2, r3
 80030b4:	d001      	beq.n	80030ba <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 80030b6:	2301      	movs	r3, #1
 80030b8:	e000      	b.n	80030bc <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 80030ba:	2300      	movs	r3, #0
}
 80030bc:	4618      	mov	r0, r3
 80030be:	3718      	adds	r7, #24
 80030c0:	46bd      	mov	sp, r7
 80030c2:	bd80      	pop	{r7, pc}
 80030c4:	40021000 	.word	0x40021000
 80030c8:	40022000 	.word	0x40022000

080030cc <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80030cc:	b580      	push	{r7, lr}
 80030ce:	b086      	sub	sp, #24
 80030d0:	af00      	add	r7, sp, #0
 80030d2:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80030d4:	2300      	movs	r3, #0
 80030d6:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80030d8:	2300      	movs	r3, #0
 80030da:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	681b      	ldr	r3, [r3, #0]
 80030e0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80030e4:	2b00      	cmp	r3, #0
 80030e6:	d041      	beq.n	800316c <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80030ec:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 80030f0:	d02a      	beq.n	8003148 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 80030f2:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 80030f6:	d824      	bhi.n	8003142 <HAL_RCCEx_PeriphCLKConfig+0x76>
 80030f8:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80030fc:	d008      	beq.n	8003110 <HAL_RCCEx_PeriphCLKConfig+0x44>
 80030fe:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8003102:	d81e      	bhi.n	8003142 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8003104:	2b00      	cmp	r3, #0
 8003106:	d00a      	beq.n	800311e <HAL_RCCEx_PeriphCLKConfig+0x52>
 8003108:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800310c:	d010      	beq.n	8003130 <HAL_RCCEx_PeriphCLKConfig+0x64>
 800310e:	e018      	b.n	8003142 <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8003110:	4b86      	ldr	r3, [pc, #536]	; (800332c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003112:	68db      	ldr	r3, [r3, #12]
 8003114:	4a85      	ldr	r2, [pc, #532]	; (800332c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003116:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800311a:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 800311c:	e015      	b.n	800314a <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	3304      	adds	r3, #4
 8003122:	2100      	movs	r1, #0
 8003124:	4618      	mov	r0, r3
 8003126:	f000 fabb 	bl	80036a0 <RCCEx_PLLSAI1_Config>
 800312a:	4603      	mov	r3, r0
 800312c:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 800312e:	e00c      	b.n	800314a <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	3320      	adds	r3, #32
 8003134:	2100      	movs	r1, #0
 8003136:	4618      	mov	r0, r3
 8003138:	f000 fba6 	bl	8003888 <RCCEx_PLLSAI2_Config>
 800313c:	4603      	mov	r3, r0
 800313e:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8003140:	e003      	b.n	800314a <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003142:	2301      	movs	r3, #1
 8003144:	74fb      	strb	r3, [r7, #19]
      break;
 8003146:	e000      	b.n	800314a <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8003148:	bf00      	nop
    }

    if(ret == HAL_OK)
 800314a:	7cfb      	ldrb	r3, [r7, #19]
 800314c:	2b00      	cmp	r3, #0
 800314e:	d10b      	bne.n	8003168 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003150:	4b76      	ldr	r3, [pc, #472]	; (800332c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003152:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003156:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800315e:	4973      	ldr	r1, [pc, #460]	; (800332c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003160:	4313      	orrs	r3, r2
 8003162:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8003166:	e001      	b.n	800316c <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003168:	7cfb      	ldrb	r3, [r7, #19]
 800316a:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	681b      	ldr	r3, [r3, #0]
 8003170:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003174:	2b00      	cmp	r3, #0
 8003176:	d041      	beq.n	80031fc <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800317c:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8003180:	d02a      	beq.n	80031d8 <HAL_RCCEx_PeriphCLKConfig+0x10c>
 8003182:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8003186:	d824      	bhi.n	80031d2 <HAL_RCCEx_PeriphCLKConfig+0x106>
 8003188:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800318c:	d008      	beq.n	80031a0 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 800318e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8003192:	d81e      	bhi.n	80031d2 <HAL_RCCEx_PeriphCLKConfig+0x106>
 8003194:	2b00      	cmp	r3, #0
 8003196:	d00a      	beq.n	80031ae <HAL_RCCEx_PeriphCLKConfig+0xe2>
 8003198:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800319c:	d010      	beq.n	80031c0 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 800319e:	e018      	b.n	80031d2 <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 80031a0:	4b62      	ldr	r3, [pc, #392]	; (800332c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80031a2:	68db      	ldr	r3, [r3, #12]
 80031a4:	4a61      	ldr	r2, [pc, #388]	; (800332c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80031a6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80031aa:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80031ac:	e015      	b.n	80031da <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	3304      	adds	r3, #4
 80031b2:	2100      	movs	r1, #0
 80031b4:	4618      	mov	r0, r3
 80031b6:	f000 fa73 	bl	80036a0 <RCCEx_PLLSAI1_Config>
 80031ba:	4603      	mov	r3, r0
 80031bc:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80031be:	e00c      	b.n	80031da <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	3320      	adds	r3, #32
 80031c4:	2100      	movs	r1, #0
 80031c6:	4618      	mov	r0, r3
 80031c8:	f000 fb5e 	bl	8003888 <RCCEx_PLLSAI2_Config>
 80031cc:	4603      	mov	r3, r0
 80031ce:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80031d0:	e003      	b.n	80031da <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80031d2:	2301      	movs	r3, #1
 80031d4:	74fb      	strb	r3, [r7, #19]
      break;
 80031d6:	e000      	b.n	80031da <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 80031d8:	bf00      	nop
    }

    if(ret == HAL_OK)
 80031da:	7cfb      	ldrb	r3, [r7, #19]
 80031dc:	2b00      	cmp	r3, #0
 80031de:	d10b      	bne.n	80031f8 <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 80031e0:	4b52      	ldr	r3, [pc, #328]	; (800332c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80031e2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80031e6:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80031ee:	494f      	ldr	r1, [pc, #316]	; (800332c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80031f0:	4313      	orrs	r3, r2
 80031f2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 80031f6:	e001      	b.n	80031fc <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80031f8:	7cfb      	ldrb	r3, [r7, #19]
 80031fa:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	681b      	ldr	r3, [r3, #0]
 8003200:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003204:	2b00      	cmp	r3, #0
 8003206:	f000 80a0 	beq.w	800334a <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 800320a:	2300      	movs	r3, #0
 800320c:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 800320e:	4b47      	ldr	r3, [pc, #284]	; (800332c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003210:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003212:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003216:	2b00      	cmp	r3, #0
 8003218:	d101      	bne.n	800321e <HAL_RCCEx_PeriphCLKConfig+0x152>
 800321a:	2301      	movs	r3, #1
 800321c:	e000      	b.n	8003220 <HAL_RCCEx_PeriphCLKConfig+0x154>
 800321e:	2300      	movs	r3, #0
 8003220:	2b00      	cmp	r3, #0
 8003222:	d00d      	beq.n	8003240 <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003224:	4b41      	ldr	r3, [pc, #260]	; (800332c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003226:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003228:	4a40      	ldr	r2, [pc, #256]	; (800332c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800322a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800322e:	6593      	str	r3, [r2, #88]	; 0x58
 8003230:	4b3e      	ldr	r3, [pc, #248]	; (800332c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003232:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003234:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003238:	60bb      	str	r3, [r7, #8]
 800323a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800323c:	2301      	movs	r3, #1
 800323e:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003240:	4b3b      	ldr	r3, [pc, #236]	; (8003330 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8003242:	681b      	ldr	r3, [r3, #0]
 8003244:	4a3a      	ldr	r2, [pc, #232]	; (8003330 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8003246:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800324a:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800324c:	f7fe f88c 	bl	8001368 <HAL_GetTick>
 8003250:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8003252:	e009      	b.n	8003268 <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003254:	f7fe f888 	bl	8001368 <HAL_GetTick>
 8003258:	4602      	mov	r2, r0
 800325a:	68fb      	ldr	r3, [r7, #12]
 800325c:	1ad3      	subs	r3, r2, r3
 800325e:	2b02      	cmp	r3, #2
 8003260:	d902      	bls.n	8003268 <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 8003262:	2303      	movs	r3, #3
 8003264:	74fb      	strb	r3, [r7, #19]
        break;
 8003266:	e005      	b.n	8003274 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8003268:	4b31      	ldr	r3, [pc, #196]	; (8003330 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 800326a:	681b      	ldr	r3, [r3, #0]
 800326c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003270:	2b00      	cmp	r3, #0
 8003272:	d0ef      	beq.n	8003254 <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 8003274:	7cfb      	ldrb	r3, [r7, #19]
 8003276:	2b00      	cmp	r3, #0
 8003278:	d15c      	bne.n	8003334 <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 800327a:	4b2c      	ldr	r3, [pc, #176]	; (800332c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800327c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003280:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003284:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8003286:	697b      	ldr	r3, [r7, #20]
 8003288:	2b00      	cmp	r3, #0
 800328a:	d01f      	beq.n	80032cc <HAL_RCCEx_PeriphCLKConfig+0x200>
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003292:	697a      	ldr	r2, [r7, #20]
 8003294:	429a      	cmp	r2, r3
 8003296:	d019      	beq.n	80032cc <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8003298:	4b24      	ldr	r3, [pc, #144]	; (800332c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800329a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800329e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80032a2:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80032a4:	4b21      	ldr	r3, [pc, #132]	; (800332c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80032a6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80032aa:	4a20      	ldr	r2, [pc, #128]	; (800332c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80032ac:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80032b0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 80032b4:	4b1d      	ldr	r3, [pc, #116]	; (800332c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80032b6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80032ba:	4a1c      	ldr	r2, [pc, #112]	; (800332c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80032bc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80032c0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80032c4:	4a19      	ldr	r2, [pc, #100]	; (800332c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80032c6:	697b      	ldr	r3, [r7, #20]
 80032c8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80032cc:	697b      	ldr	r3, [r7, #20]
 80032ce:	f003 0301 	and.w	r3, r3, #1
 80032d2:	2b00      	cmp	r3, #0
 80032d4:	d016      	beq.n	8003304 <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80032d6:	f7fe f847 	bl	8001368 <HAL_GetTick>
 80032da:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80032dc:	e00b      	b.n	80032f6 <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80032de:	f7fe f843 	bl	8001368 <HAL_GetTick>
 80032e2:	4602      	mov	r2, r0
 80032e4:	68fb      	ldr	r3, [r7, #12]
 80032e6:	1ad3      	subs	r3, r2, r3
 80032e8:	f241 3288 	movw	r2, #5000	; 0x1388
 80032ec:	4293      	cmp	r3, r2
 80032ee:	d902      	bls.n	80032f6 <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 80032f0:	2303      	movs	r3, #3
 80032f2:	74fb      	strb	r3, [r7, #19]
            break;
 80032f4:	e006      	b.n	8003304 <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80032f6:	4b0d      	ldr	r3, [pc, #52]	; (800332c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80032f8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80032fc:	f003 0302 	and.w	r3, r3, #2
 8003300:	2b00      	cmp	r3, #0
 8003302:	d0ec      	beq.n	80032de <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 8003304:	7cfb      	ldrb	r3, [r7, #19]
 8003306:	2b00      	cmp	r3, #0
 8003308:	d10c      	bne.n	8003324 <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800330a:	4b08      	ldr	r3, [pc, #32]	; (800332c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800330c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003310:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800331a:	4904      	ldr	r1, [pc, #16]	; (800332c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800331c:	4313      	orrs	r3, r2
 800331e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8003322:	e009      	b.n	8003338 <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8003324:	7cfb      	ldrb	r3, [r7, #19]
 8003326:	74bb      	strb	r3, [r7, #18]
 8003328:	e006      	b.n	8003338 <HAL_RCCEx_PeriphCLKConfig+0x26c>
 800332a:	bf00      	nop
 800332c:	40021000 	.word	0x40021000
 8003330:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003334:	7cfb      	ldrb	r3, [r7, #19]
 8003336:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003338:	7c7b      	ldrb	r3, [r7, #17]
 800333a:	2b01      	cmp	r3, #1
 800333c:	d105      	bne.n	800334a <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800333e:	4b9e      	ldr	r3, [pc, #632]	; (80035b8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003340:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003342:	4a9d      	ldr	r2, [pc, #628]	; (80035b8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003344:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003348:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	681b      	ldr	r3, [r3, #0]
 800334e:	f003 0301 	and.w	r3, r3, #1
 8003352:	2b00      	cmp	r3, #0
 8003354:	d00a      	beq.n	800336c <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003356:	4b98      	ldr	r3, [pc, #608]	; (80035b8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003358:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800335c:	f023 0203 	bic.w	r2, r3, #3
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003364:	4994      	ldr	r1, [pc, #592]	; (80035b8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003366:	4313      	orrs	r3, r2
 8003368:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	681b      	ldr	r3, [r3, #0]
 8003370:	f003 0302 	and.w	r3, r3, #2
 8003374:	2b00      	cmp	r3, #0
 8003376:	d00a      	beq.n	800338e <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8003378:	4b8f      	ldr	r3, [pc, #572]	; (80035b8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800337a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800337e:	f023 020c 	bic.w	r2, r3, #12
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003386:	498c      	ldr	r1, [pc, #560]	; (80035b8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003388:	4313      	orrs	r3, r2
 800338a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	681b      	ldr	r3, [r3, #0]
 8003392:	f003 0304 	and.w	r3, r3, #4
 8003396:	2b00      	cmp	r3, #0
 8003398:	d00a      	beq.n	80033b0 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800339a:	4b87      	ldr	r3, [pc, #540]	; (80035b8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800339c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80033a0:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033a8:	4983      	ldr	r1, [pc, #524]	; (80035b8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80033aa:	4313      	orrs	r3, r2
 80033ac:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	681b      	ldr	r3, [r3, #0]
 80033b4:	f003 0308 	and.w	r3, r3, #8
 80033b8:	2b00      	cmp	r3, #0
 80033ba:	d00a      	beq.n	80033d2 <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80033bc:	4b7e      	ldr	r3, [pc, #504]	; (80035b8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80033be:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80033c2:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80033ca:	497b      	ldr	r1, [pc, #492]	; (80035b8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80033cc:	4313      	orrs	r3, r2
 80033ce:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	681b      	ldr	r3, [r3, #0]
 80033d6:	f003 0310 	and.w	r3, r3, #16
 80033da:	2b00      	cmp	r3, #0
 80033dc:	d00a      	beq.n	80033f4 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80033de:	4b76      	ldr	r3, [pc, #472]	; (80035b8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80033e0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80033e4:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80033ec:	4972      	ldr	r1, [pc, #456]	; (80035b8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80033ee:	4313      	orrs	r3, r2
 80033f0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	681b      	ldr	r3, [r3, #0]
 80033f8:	f003 0320 	and.w	r3, r3, #32
 80033fc:	2b00      	cmp	r3, #0
 80033fe:	d00a      	beq.n	8003416 <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8003400:	4b6d      	ldr	r3, [pc, #436]	; (80035b8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003402:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003406:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800340e:	496a      	ldr	r1, [pc, #424]	; (80035b8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003410:	4313      	orrs	r3, r2
 8003412:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	681b      	ldr	r3, [r3, #0]
 800341a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800341e:	2b00      	cmp	r3, #0
 8003420:	d00a      	beq.n	8003438 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8003422:	4b65      	ldr	r3, [pc, #404]	; (80035b8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003424:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003428:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003430:	4961      	ldr	r1, [pc, #388]	; (80035b8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003432:	4313      	orrs	r3, r2
 8003434:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	681b      	ldr	r3, [r3, #0]
 800343c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003440:	2b00      	cmp	r3, #0
 8003442:	d00a      	beq.n	800345a <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8003444:	4b5c      	ldr	r3, [pc, #368]	; (80035b8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003446:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800344a:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003452:	4959      	ldr	r1, [pc, #356]	; (80035b8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003454:	4313      	orrs	r3, r2
 8003456:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	681b      	ldr	r3, [r3, #0]
 800345e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003462:	2b00      	cmp	r3, #0
 8003464:	d00a      	beq.n	800347c <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003466:	4b54      	ldr	r3, [pc, #336]	; (80035b8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003468:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800346c:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003474:	4950      	ldr	r1, [pc, #320]	; (80035b8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003476:	4313      	orrs	r3, r2
 8003478:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	681b      	ldr	r3, [r3, #0]
 8003480:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003484:	2b00      	cmp	r3, #0
 8003486:	d00a      	beq.n	800349e <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8003488:	4b4b      	ldr	r3, [pc, #300]	; (80035b8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800348a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800348e:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003496:	4948      	ldr	r1, [pc, #288]	; (80035b8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003498:	4313      	orrs	r3, r2
 800349a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	681b      	ldr	r3, [r3, #0]
 80034a2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80034a6:	2b00      	cmp	r3, #0
 80034a8:	d00a      	beq.n	80034c0 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80034aa:	4b43      	ldr	r3, [pc, #268]	; (80035b8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80034ac:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80034b0:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80034b8:	493f      	ldr	r1, [pc, #252]	; (80035b8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80034ba:	4313      	orrs	r3, r2
 80034bc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	681b      	ldr	r3, [r3, #0]
 80034c4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80034c8:	2b00      	cmp	r3, #0
 80034ca:	d028      	beq.n	800351e <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80034cc:	4b3a      	ldr	r3, [pc, #232]	; (80035b8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80034ce:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80034d2:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80034da:	4937      	ldr	r1, [pc, #220]	; (80035b8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80034dc:	4313      	orrs	r3, r2
 80034de:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80034e6:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80034ea:	d106      	bne.n	80034fa <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80034ec:	4b32      	ldr	r3, [pc, #200]	; (80035b8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80034ee:	68db      	ldr	r3, [r3, #12]
 80034f0:	4a31      	ldr	r2, [pc, #196]	; (80035b8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80034f2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80034f6:	60d3      	str	r3, [r2, #12]
 80034f8:	e011      	b.n	800351e <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80034fe:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003502:	d10c      	bne.n	800351e <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	3304      	adds	r3, #4
 8003508:	2101      	movs	r1, #1
 800350a:	4618      	mov	r0, r3
 800350c:	f000 f8c8 	bl	80036a0 <RCCEx_PLLSAI1_Config>
 8003510:	4603      	mov	r3, r0
 8003512:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8003514:	7cfb      	ldrb	r3, [r7, #19]
 8003516:	2b00      	cmp	r3, #0
 8003518:	d001      	beq.n	800351e <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 800351a:	7cfb      	ldrb	r3, [r7, #19]
 800351c:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	681b      	ldr	r3, [r3, #0]
 8003522:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003526:	2b00      	cmp	r3, #0
 8003528:	d028      	beq.n	800357c <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 800352a:	4b23      	ldr	r3, [pc, #140]	; (80035b8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800352c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003530:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003538:	491f      	ldr	r1, [pc, #124]	; (80035b8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800353a:	4313      	orrs	r3, r2
 800353c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003544:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003548:	d106      	bne.n	8003558 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800354a:	4b1b      	ldr	r3, [pc, #108]	; (80035b8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800354c:	68db      	ldr	r3, [r3, #12]
 800354e:	4a1a      	ldr	r2, [pc, #104]	; (80035b8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003550:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003554:	60d3      	str	r3, [r2, #12]
 8003556:	e011      	b.n	800357c <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800355c:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003560:	d10c      	bne.n	800357c <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	3304      	adds	r3, #4
 8003566:	2101      	movs	r1, #1
 8003568:	4618      	mov	r0, r3
 800356a:	f000 f899 	bl	80036a0 <RCCEx_PLLSAI1_Config>
 800356e:	4603      	mov	r3, r0
 8003570:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003572:	7cfb      	ldrb	r3, [r7, #19]
 8003574:	2b00      	cmp	r3, #0
 8003576:	d001      	beq.n	800357c <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 8003578:	7cfb      	ldrb	r3, [r7, #19]
 800357a:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	681b      	ldr	r3, [r3, #0]
 8003580:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003584:	2b00      	cmp	r3, #0
 8003586:	d02b      	beq.n	80035e0 <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8003588:	4b0b      	ldr	r3, [pc, #44]	; (80035b8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800358a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800358e:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003596:	4908      	ldr	r1, [pc, #32]	; (80035b8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003598:	4313      	orrs	r3, r2
 800359a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80035a2:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80035a6:	d109      	bne.n	80035bc <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80035a8:	4b03      	ldr	r3, [pc, #12]	; (80035b8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80035aa:	68db      	ldr	r3, [r3, #12]
 80035ac:	4a02      	ldr	r2, [pc, #8]	; (80035b8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80035ae:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80035b2:	60d3      	str	r3, [r2, #12]
 80035b4:	e014      	b.n	80035e0 <HAL_RCCEx_PeriphCLKConfig+0x514>
 80035b6:	bf00      	nop
 80035b8:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80035c0:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80035c4:	d10c      	bne.n	80035e0 <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	3304      	adds	r3, #4
 80035ca:	2101      	movs	r1, #1
 80035cc:	4618      	mov	r0, r3
 80035ce:	f000 f867 	bl	80036a0 <RCCEx_PLLSAI1_Config>
 80035d2:	4603      	mov	r3, r0
 80035d4:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80035d6:	7cfb      	ldrb	r3, [r7, #19]
 80035d8:	2b00      	cmp	r3, #0
 80035da:	d001      	beq.n	80035e0 <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 80035dc:	7cfb      	ldrb	r3, [r7, #19]
 80035de:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	681b      	ldr	r3, [r3, #0]
 80035e4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80035e8:	2b00      	cmp	r3, #0
 80035ea:	d02f      	beq.n	800364c <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80035ec:	4b2b      	ldr	r3, [pc, #172]	; (800369c <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80035ee:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80035f2:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80035fa:	4928      	ldr	r1, [pc, #160]	; (800369c <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80035fc:	4313      	orrs	r3, r2
 80035fe:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003606:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800360a:	d10d      	bne.n	8003628 <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	3304      	adds	r3, #4
 8003610:	2102      	movs	r1, #2
 8003612:	4618      	mov	r0, r3
 8003614:	f000 f844 	bl	80036a0 <RCCEx_PLLSAI1_Config>
 8003618:	4603      	mov	r3, r0
 800361a:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800361c:	7cfb      	ldrb	r3, [r7, #19]
 800361e:	2b00      	cmp	r3, #0
 8003620:	d014      	beq.n	800364c <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8003622:	7cfb      	ldrb	r3, [r7, #19]
 8003624:	74bb      	strb	r3, [r7, #18]
 8003626:	e011      	b.n	800364c <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800362c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003630:	d10c      	bne.n	800364c <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	3320      	adds	r3, #32
 8003636:	2102      	movs	r1, #2
 8003638:	4618      	mov	r0, r3
 800363a:	f000 f925 	bl	8003888 <RCCEx_PLLSAI2_Config>
 800363e:	4603      	mov	r3, r0
 8003640:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003642:	7cfb      	ldrb	r3, [r7, #19]
 8003644:	2b00      	cmp	r3, #0
 8003646:	d001      	beq.n	800364c <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8003648:	7cfb      	ldrb	r3, [r7, #19]
 800364a:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	681b      	ldr	r3, [r3, #0]
 8003650:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003654:	2b00      	cmp	r3, #0
 8003656:	d00a      	beq.n	800366e <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8003658:	4b10      	ldr	r3, [pc, #64]	; (800369c <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 800365a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800365e:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003666:	490d      	ldr	r1, [pc, #52]	; (800369c <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8003668:	4313      	orrs	r3, r2
 800366a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	681b      	ldr	r3, [r3, #0]
 8003672:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003676:	2b00      	cmp	r3, #0
 8003678:	d00b      	beq.n	8003692 <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800367a:	4b08      	ldr	r3, [pc, #32]	; (800369c <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 800367c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003680:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800368a:	4904      	ldr	r1, [pc, #16]	; (800369c <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 800368c:	4313      	orrs	r3, r2
 800368e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8003692:	7cbb      	ldrb	r3, [r7, #18]
}
 8003694:	4618      	mov	r0, r3
 8003696:	3718      	adds	r7, #24
 8003698:	46bd      	mov	sp, r7
 800369a:	bd80      	pop	{r7, pc}
 800369c:	40021000 	.word	0x40021000

080036a0 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 80036a0:	b580      	push	{r7, lr}
 80036a2:	b084      	sub	sp, #16
 80036a4:	af00      	add	r7, sp, #0
 80036a6:	6078      	str	r0, [r7, #4]
 80036a8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80036aa:	2300      	movs	r3, #0
 80036ac:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80036ae:	4b75      	ldr	r3, [pc, #468]	; (8003884 <RCCEx_PLLSAI1_Config+0x1e4>)
 80036b0:	68db      	ldr	r3, [r3, #12]
 80036b2:	f003 0303 	and.w	r3, r3, #3
 80036b6:	2b00      	cmp	r3, #0
 80036b8:	d018      	beq.n	80036ec <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 80036ba:	4b72      	ldr	r3, [pc, #456]	; (8003884 <RCCEx_PLLSAI1_Config+0x1e4>)
 80036bc:	68db      	ldr	r3, [r3, #12]
 80036be:	f003 0203 	and.w	r2, r3, #3
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	681b      	ldr	r3, [r3, #0]
 80036c6:	429a      	cmp	r2, r3
 80036c8:	d10d      	bne.n	80036e6 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	681b      	ldr	r3, [r3, #0]
       ||
 80036ce:	2b00      	cmp	r3, #0
 80036d0:	d009      	beq.n	80036e6 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 80036d2:	4b6c      	ldr	r3, [pc, #432]	; (8003884 <RCCEx_PLLSAI1_Config+0x1e4>)
 80036d4:	68db      	ldr	r3, [r3, #12]
 80036d6:	091b      	lsrs	r3, r3, #4
 80036d8:	f003 0307 	and.w	r3, r3, #7
 80036dc:	1c5a      	adds	r2, r3, #1
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	685b      	ldr	r3, [r3, #4]
       ||
 80036e2:	429a      	cmp	r2, r3
 80036e4:	d047      	beq.n	8003776 <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 80036e6:	2301      	movs	r3, #1
 80036e8:	73fb      	strb	r3, [r7, #15]
 80036ea:	e044      	b.n	8003776 <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	681b      	ldr	r3, [r3, #0]
 80036f0:	2b03      	cmp	r3, #3
 80036f2:	d018      	beq.n	8003726 <RCCEx_PLLSAI1_Config+0x86>
 80036f4:	2b03      	cmp	r3, #3
 80036f6:	d825      	bhi.n	8003744 <RCCEx_PLLSAI1_Config+0xa4>
 80036f8:	2b01      	cmp	r3, #1
 80036fa:	d002      	beq.n	8003702 <RCCEx_PLLSAI1_Config+0x62>
 80036fc:	2b02      	cmp	r3, #2
 80036fe:	d009      	beq.n	8003714 <RCCEx_PLLSAI1_Config+0x74>
 8003700:	e020      	b.n	8003744 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8003702:	4b60      	ldr	r3, [pc, #384]	; (8003884 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003704:	681b      	ldr	r3, [r3, #0]
 8003706:	f003 0302 	and.w	r3, r3, #2
 800370a:	2b00      	cmp	r3, #0
 800370c:	d11d      	bne.n	800374a <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 800370e:	2301      	movs	r3, #1
 8003710:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003712:	e01a      	b.n	800374a <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8003714:	4b5b      	ldr	r3, [pc, #364]	; (8003884 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003716:	681b      	ldr	r3, [r3, #0]
 8003718:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800371c:	2b00      	cmp	r3, #0
 800371e:	d116      	bne.n	800374e <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8003720:	2301      	movs	r3, #1
 8003722:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003724:	e013      	b.n	800374e <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8003726:	4b57      	ldr	r3, [pc, #348]	; (8003884 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003728:	681b      	ldr	r3, [r3, #0]
 800372a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800372e:	2b00      	cmp	r3, #0
 8003730:	d10f      	bne.n	8003752 <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8003732:	4b54      	ldr	r3, [pc, #336]	; (8003884 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003734:	681b      	ldr	r3, [r3, #0]
 8003736:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800373a:	2b00      	cmp	r3, #0
 800373c:	d109      	bne.n	8003752 <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 800373e:	2301      	movs	r3, #1
 8003740:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8003742:	e006      	b.n	8003752 <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8003744:	2301      	movs	r3, #1
 8003746:	73fb      	strb	r3, [r7, #15]
      break;
 8003748:	e004      	b.n	8003754 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800374a:	bf00      	nop
 800374c:	e002      	b.n	8003754 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800374e:	bf00      	nop
 8003750:	e000      	b.n	8003754 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8003752:	bf00      	nop
    }

    if(status == HAL_OK)
 8003754:	7bfb      	ldrb	r3, [r7, #15]
 8003756:	2b00      	cmp	r3, #0
 8003758:	d10d      	bne.n	8003776 <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 800375a:	4b4a      	ldr	r3, [pc, #296]	; (8003884 <RCCEx_PLLSAI1_Config+0x1e4>)
 800375c:	68db      	ldr	r3, [r3, #12]
 800375e:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	6819      	ldr	r1, [r3, #0]
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	685b      	ldr	r3, [r3, #4]
 800376a:	3b01      	subs	r3, #1
 800376c:	011b      	lsls	r3, r3, #4
 800376e:	430b      	orrs	r3, r1
 8003770:	4944      	ldr	r1, [pc, #272]	; (8003884 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003772:	4313      	orrs	r3, r2
 8003774:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8003776:	7bfb      	ldrb	r3, [r7, #15]
 8003778:	2b00      	cmp	r3, #0
 800377a:	d17d      	bne.n	8003878 <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 800377c:	4b41      	ldr	r3, [pc, #260]	; (8003884 <RCCEx_PLLSAI1_Config+0x1e4>)
 800377e:	681b      	ldr	r3, [r3, #0]
 8003780:	4a40      	ldr	r2, [pc, #256]	; (8003884 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003782:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8003786:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003788:	f7fd fdee 	bl	8001368 <HAL_GetTick>
 800378c:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 800378e:	e009      	b.n	80037a4 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8003790:	f7fd fdea 	bl	8001368 <HAL_GetTick>
 8003794:	4602      	mov	r2, r0
 8003796:	68bb      	ldr	r3, [r7, #8]
 8003798:	1ad3      	subs	r3, r2, r3
 800379a:	2b02      	cmp	r3, #2
 800379c:	d902      	bls.n	80037a4 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 800379e:	2303      	movs	r3, #3
 80037a0:	73fb      	strb	r3, [r7, #15]
        break;
 80037a2:	e005      	b.n	80037b0 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80037a4:	4b37      	ldr	r3, [pc, #220]	; (8003884 <RCCEx_PLLSAI1_Config+0x1e4>)
 80037a6:	681b      	ldr	r3, [r3, #0]
 80037a8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80037ac:	2b00      	cmp	r3, #0
 80037ae:	d1ef      	bne.n	8003790 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 80037b0:	7bfb      	ldrb	r3, [r7, #15]
 80037b2:	2b00      	cmp	r3, #0
 80037b4:	d160      	bne.n	8003878 <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 80037b6:	683b      	ldr	r3, [r7, #0]
 80037b8:	2b00      	cmp	r3, #0
 80037ba:	d111      	bne.n	80037e0 <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80037bc:	4b31      	ldr	r3, [pc, #196]	; (8003884 <RCCEx_PLLSAI1_Config+0x1e4>)
 80037be:	691b      	ldr	r3, [r3, #16]
 80037c0:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 80037c4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80037c8:	687a      	ldr	r2, [r7, #4]
 80037ca:	6892      	ldr	r2, [r2, #8]
 80037cc:	0211      	lsls	r1, r2, #8
 80037ce:	687a      	ldr	r2, [r7, #4]
 80037d0:	68d2      	ldr	r2, [r2, #12]
 80037d2:	0912      	lsrs	r2, r2, #4
 80037d4:	0452      	lsls	r2, r2, #17
 80037d6:	430a      	orrs	r2, r1
 80037d8:	492a      	ldr	r1, [pc, #168]	; (8003884 <RCCEx_PLLSAI1_Config+0x1e4>)
 80037da:	4313      	orrs	r3, r2
 80037dc:	610b      	str	r3, [r1, #16]
 80037de:	e027      	b.n	8003830 <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 80037e0:	683b      	ldr	r3, [r7, #0]
 80037e2:	2b01      	cmp	r3, #1
 80037e4:	d112      	bne.n	800380c <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80037e6:	4b27      	ldr	r3, [pc, #156]	; (8003884 <RCCEx_PLLSAI1_Config+0x1e4>)
 80037e8:	691b      	ldr	r3, [r3, #16]
 80037ea:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 80037ee:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80037f2:	687a      	ldr	r2, [r7, #4]
 80037f4:	6892      	ldr	r2, [r2, #8]
 80037f6:	0211      	lsls	r1, r2, #8
 80037f8:	687a      	ldr	r2, [r7, #4]
 80037fa:	6912      	ldr	r2, [r2, #16]
 80037fc:	0852      	lsrs	r2, r2, #1
 80037fe:	3a01      	subs	r2, #1
 8003800:	0552      	lsls	r2, r2, #21
 8003802:	430a      	orrs	r2, r1
 8003804:	491f      	ldr	r1, [pc, #124]	; (8003884 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003806:	4313      	orrs	r3, r2
 8003808:	610b      	str	r3, [r1, #16]
 800380a:	e011      	b.n	8003830 <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800380c:	4b1d      	ldr	r3, [pc, #116]	; (8003884 <RCCEx_PLLSAI1_Config+0x1e4>)
 800380e:	691b      	ldr	r3, [r3, #16]
 8003810:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8003814:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8003818:	687a      	ldr	r2, [r7, #4]
 800381a:	6892      	ldr	r2, [r2, #8]
 800381c:	0211      	lsls	r1, r2, #8
 800381e:	687a      	ldr	r2, [r7, #4]
 8003820:	6952      	ldr	r2, [r2, #20]
 8003822:	0852      	lsrs	r2, r2, #1
 8003824:	3a01      	subs	r2, #1
 8003826:	0652      	lsls	r2, r2, #25
 8003828:	430a      	orrs	r2, r1
 800382a:	4916      	ldr	r1, [pc, #88]	; (8003884 <RCCEx_PLLSAI1_Config+0x1e4>)
 800382c:	4313      	orrs	r3, r2
 800382e:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8003830:	4b14      	ldr	r3, [pc, #80]	; (8003884 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003832:	681b      	ldr	r3, [r3, #0]
 8003834:	4a13      	ldr	r2, [pc, #76]	; (8003884 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003836:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800383a:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800383c:	f7fd fd94 	bl	8001368 <HAL_GetTick>
 8003840:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8003842:	e009      	b.n	8003858 <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8003844:	f7fd fd90 	bl	8001368 <HAL_GetTick>
 8003848:	4602      	mov	r2, r0
 800384a:	68bb      	ldr	r3, [r7, #8]
 800384c:	1ad3      	subs	r3, r2, r3
 800384e:	2b02      	cmp	r3, #2
 8003850:	d902      	bls.n	8003858 <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 8003852:	2303      	movs	r3, #3
 8003854:	73fb      	strb	r3, [r7, #15]
          break;
 8003856:	e005      	b.n	8003864 <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8003858:	4b0a      	ldr	r3, [pc, #40]	; (8003884 <RCCEx_PLLSAI1_Config+0x1e4>)
 800385a:	681b      	ldr	r3, [r3, #0]
 800385c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003860:	2b00      	cmp	r3, #0
 8003862:	d0ef      	beq.n	8003844 <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 8003864:	7bfb      	ldrb	r3, [r7, #15]
 8003866:	2b00      	cmp	r3, #0
 8003868:	d106      	bne.n	8003878 <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 800386a:	4b06      	ldr	r3, [pc, #24]	; (8003884 <RCCEx_PLLSAI1_Config+0x1e4>)
 800386c:	691a      	ldr	r2, [r3, #16]
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	699b      	ldr	r3, [r3, #24]
 8003872:	4904      	ldr	r1, [pc, #16]	; (8003884 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003874:	4313      	orrs	r3, r2
 8003876:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8003878:	7bfb      	ldrb	r3, [r7, #15]
}
 800387a:	4618      	mov	r0, r3
 800387c:	3710      	adds	r7, #16
 800387e:	46bd      	mov	sp, r7
 8003880:	bd80      	pop	{r7, pc}
 8003882:	bf00      	nop
 8003884:	40021000 	.word	0x40021000

08003888 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8003888:	b580      	push	{r7, lr}
 800388a:	b084      	sub	sp, #16
 800388c:	af00      	add	r7, sp, #0
 800388e:	6078      	str	r0, [r7, #4]
 8003890:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8003892:	2300      	movs	r3, #0
 8003894:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8003896:	4b6a      	ldr	r3, [pc, #424]	; (8003a40 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003898:	68db      	ldr	r3, [r3, #12]
 800389a:	f003 0303 	and.w	r3, r3, #3
 800389e:	2b00      	cmp	r3, #0
 80038a0:	d018      	beq.n	80038d4 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 80038a2:	4b67      	ldr	r3, [pc, #412]	; (8003a40 <RCCEx_PLLSAI2_Config+0x1b8>)
 80038a4:	68db      	ldr	r3, [r3, #12]
 80038a6:	f003 0203 	and.w	r2, r3, #3
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	681b      	ldr	r3, [r3, #0]
 80038ae:	429a      	cmp	r2, r3
 80038b0:	d10d      	bne.n	80038ce <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	681b      	ldr	r3, [r3, #0]
       ||
 80038b6:	2b00      	cmp	r3, #0
 80038b8:	d009      	beq.n	80038ce <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 80038ba:	4b61      	ldr	r3, [pc, #388]	; (8003a40 <RCCEx_PLLSAI2_Config+0x1b8>)
 80038bc:	68db      	ldr	r3, [r3, #12]
 80038be:	091b      	lsrs	r3, r3, #4
 80038c0:	f003 0307 	and.w	r3, r3, #7
 80038c4:	1c5a      	adds	r2, r3, #1
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	685b      	ldr	r3, [r3, #4]
       ||
 80038ca:	429a      	cmp	r2, r3
 80038cc:	d047      	beq.n	800395e <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 80038ce:	2301      	movs	r3, #1
 80038d0:	73fb      	strb	r3, [r7, #15]
 80038d2:	e044      	b.n	800395e <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	681b      	ldr	r3, [r3, #0]
 80038d8:	2b03      	cmp	r3, #3
 80038da:	d018      	beq.n	800390e <RCCEx_PLLSAI2_Config+0x86>
 80038dc:	2b03      	cmp	r3, #3
 80038de:	d825      	bhi.n	800392c <RCCEx_PLLSAI2_Config+0xa4>
 80038e0:	2b01      	cmp	r3, #1
 80038e2:	d002      	beq.n	80038ea <RCCEx_PLLSAI2_Config+0x62>
 80038e4:	2b02      	cmp	r3, #2
 80038e6:	d009      	beq.n	80038fc <RCCEx_PLLSAI2_Config+0x74>
 80038e8:	e020      	b.n	800392c <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80038ea:	4b55      	ldr	r3, [pc, #340]	; (8003a40 <RCCEx_PLLSAI2_Config+0x1b8>)
 80038ec:	681b      	ldr	r3, [r3, #0]
 80038ee:	f003 0302 	and.w	r3, r3, #2
 80038f2:	2b00      	cmp	r3, #0
 80038f4:	d11d      	bne.n	8003932 <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 80038f6:	2301      	movs	r3, #1
 80038f8:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80038fa:	e01a      	b.n	8003932 <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80038fc:	4b50      	ldr	r3, [pc, #320]	; (8003a40 <RCCEx_PLLSAI2_Config+0x1b8>)
 80038fe:	681b      	ldr	r3, [r3, #0]
 8003900:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003904:	2b00      	cmp	r3, #0
 8003906:	d116      	bne.n	8003936 <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 8003908:	2301      	movs	r3, #1
 800390a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800390c:	e013      	b.n	8003936 <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 800390e:	4b4c      	ldr	r3, [pc, #304]	; (8003a40 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003910:	681b      	ldr	r3, [r3, #0]
 8003912:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003916:	2b00      	cmp	r3, #0
 8003918:	d10f      	bne.n	800393a <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 800391a:	4b49      	ldr	r3, [pc, #292]	; (8003a40 <RCCEx_PLLSAI2_Config+0x1b8>)
 800391c:	681b      	ldr	r3, [r3, #0]
 800391e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003922:	2b00      	cmp	r3, #0
 8003924:	d109      	bne.n	800393a <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 8003926:	2301      	movs	r3, #1
 8003928:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800392a:	e006      	b.n	800393a <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 800392c:	2301      	movs	r3, #1
 800392e:	73fb      	strb	r3, [r7, #15]
      break;
 8003930:	e004      	b.n	800393c <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8003932:	bf00      	nop
 8003934:	e002      	b.n	800393c <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8003936:	bf00      	nop
 8003938:	e000      	b.n	800393c <RCCEx_PLLSAI2_Config+0xb4>
      break;
 800393a:	bf00      	nop
    }

    if(status == HAL_OK)
 800393c:	7bfb      	ldrb	r3, [r7, #15]
 800393e:	2b00      	cmp	r3, #0
 8003940:	d10d      	bne.n	800395e <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8003942:	4b3f      	ldr	r3, [pc, #252]	; (8003a40 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003944:	68db      	ldr	r3, [r3, #12]
 8003946:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	6819      	ldr	r1, [r3, #0]
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	685b      	ldr	r3, [r3, #4]
 8003952:	3b01      	subs	r3, #1
 8003954:	011b      	lsls	r3, r3, #4
 8003956:	430b      	orrs	r3, r1
 8003958:	4939      	ldr	r1, [pc, #228]	; (8003a40 <RCCEx_PLLSAI2_Config+0x1b8>)
 800395a:	4313      	orrs	r3, r2
 800395c:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 800395e:	7bfb      	ldrb	r3, [r7, #15]
 8003960:	2b00      	cmp	r3, #0
 8003962:	d167      	bne.n	8003a34 <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8003964:	4b36      	ldr	r3, [pc, #216]	; (8003a40 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003966:	681b      	ldr	r3, [r3, #0]
 8003968:	4a35      	ldr	r2, [pc, #212]	; (8003a40 <RCCEx_PLLSAI2_Config+0x1b8>)
 800396a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800396e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003970:	f7fd fcfa 	bl	8001368 <HAL_GetTick>
 8003974:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8003976:	e009      	b.n	800398c <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8003978:	f7fd fcf6 	bl	8001368 <HAL_GetTick>
 800397c:	4602      	mov	r2, r0
 800397e:	68bb      	ldr	r3, [r7, #8]
 8003980:	1ad3      	subs	r3, r2, r3
 8003982:	2b02      	cmp	r3, #2
 8003984:	d902      	bls.n	800398c <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8003986:	2303      	movs	r3, #3
 8003988:	73fb      	strb	r3, [r7, #15]
        break;
 800398a:	e005      	b.n	8003998 <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 800398c:	4b2c      	ldr	r3, [pc, #176]	; (8003a40 <RCCEx_PLLSAI2_Config+0x1b8>)
 800398e:	681b      	ldr	r3, [r3, #0]
 8003990:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003994:	2b00      	cmp	r3, #0
 8003996:	d1ef      	bne.n	8003978 <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8003998:	7bfb      	ldrb	r3, [r7, #15]
 800399a:	2b00      	cmp	r3, #0
 800399c:	d14a      	bne.n	8003a34 <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 800399e:	683b      	ldr	r3, [r7, #0]
 80039a0:	2b00      	cmp	r3, #0
 80039a2:	d111      	bne.n	80039c8 <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 80039a4:	4b26      	ldr	r3, [pc, #152]	; (8003a40 <RCCEx_PLLSAI2_Config+0x1b8>)
 80039a6:	695b      	ldr	r3, [r3, #20]
 80039a8:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 80039ac:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80039b0:	687a      	ldr	r2, [r7, #4]
 80039b2:	6892      	ldr	r2, [r2, #8]
 80039b4:	0211      	lsls	r1, r2, #8
 80039b6:	687a      	ldr	r2, [r7, #4]
 80039b8:	68d2      	ldr	r2, [r2, #12]
 80039ba:	0912      	lsrs	r2, r2, #4
 80039bc:	0452      	lsls	r2, r2, #17
 80039be:	430a      	orrs	r2, r1
 80039c0:	491f      	ldr	r1, [pc, #124]	; (8003a40 <RCCEx_PLLSAI2_Config+0x1b8>)
 80039c2:	4313      	orrs	r3, r2
 80039c4:	614b      	str	r3, [r1, #20]
 80039c6:	e011      	b.n	80039ec <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 80039c8:	4b1d      	ldr	r3, [pc, #116]	; (8003a40 <RCCEx_PLLSAI2_Config+0x1b8>)
 80039ca:	695b      	ldr	r3, [r3, #20]
 80039cc:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 80039d0:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80039d4:	687a      	ldr	r2, [r7, #4]
 80039d6:	6892      	ldr	r2, [r2, #8]
 80039d8:	0211      	lsls	r1, r2, #8
 80039da:	687a      	ldr	r2, [r7, #4]
 80039dc:	6912      	ldr	r2, [r2, #16]
 80039de:	0852      	lsrs	r2, r2, #1
 80039e0:	3a01      	subs	r2, #1
 80039e2:	0652      	lsls	r2, r2, #25
 80039e4:	430a      	orrs	r2, r1
 80039e6:	4916      	ldr	r1, [pc, #88]	; (8003a40 <RCCEx_PLLSAI2_Config+0x1b8>)
 80039e8:	4313      	orrs	r3, r2
 80039ea:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 80039ec:	4b14      	ldr	r3, [pc, #80]	; (8003a40 <RCCEx_PLLSAI2_Config+0x1b8>)
 80039ee:	681b      	ldr	r3, [r3, #0]
 80039f0:	4a13      	ldr	r2, [pc, #76]	; (8003a40 <RCCEx_PLLSAI2_Config+0x1b8>)
 80039f2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80039f6:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80039f8:	f7fd fcb6 	bl	8001368 <HAL_GetTick>
 80039fc:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 80039fe:	e009      	b.n	8003a14 <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8003a00:	f7fd fcb2 	bl	8001368 <HAL_GetTick>
 8003a04:	4602      	mov	r2, r0
 8003a06:	68bb      	ldr	r3, [r7, #8]
 8003a08:	1ad3      	subs	r3, r2, r3
 8003a0a:	2b02      	cmp	r3, #2
 8003a0c:	d902      	bls.n	8003a14 <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 8003a0e:	2303      	movs	r3, #3
 8003a10:	73fb      	strb	r3, [r7, #15]
          break;
 8003a12:	e005      	b.n	8003a20 <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8003a14:	4b0a      	ldr	r3, [pc, #40]	; (8003a40 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003a16:	681b      	ldr	r3, [r3, #0]
 8003a18:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003a1c:	2b00      	cmp	r3, #0
 8003a1e:	d0ef      	beq.n	8003a00 <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 8003a20:	7bfb      	ldrb	r3, [r7, #15]
 8003a22:	2b00      	cmp	r3, #0
 8003a24:	d106      	bne.n	8003a34 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8003a26:	4b06      	ldr	r3, [pc, #24]	; (8003a40 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003a28:	695a      	ldr	r2, [r3, #20]
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	695b      	ldr	r3, [r3, #20]
 8003a2e:	4904      	ldr	r1, [pc, #16]	; (8003a40 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003a30:	4313      	orrs	r3, r2
 8003a32:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8003a34:	7bfb      	ldrb	r3, [r7, #15]
}
 8003a36:	4618      	mov	r0, r3
 8003a38:	3710      	adds	r7, #16
 8003a3a:	46bd      	mov	sp, r7
 8003a3c:	bd80      	pop	{r7, pc}
 8003a3e:	bf00      	nop
 8003a40:	40021000 	.word	0x40021000

08003a44 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003a44:	b580      	push	{r7, lr}
 8003a46:	b082      	sub	sp, #8
 8003a48:	af00      	add	r7, sp, #0
 8003a4a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	2b00      	cmp	r3, #0
 8003a50:	d101      	bne.n	8003a56 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003a52:	2301      	movs	r3, #1
 8003a54:	e040      	b.n	8003ad8 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003a5a:	2b00      	cmp	r3, #0
 8003a5c:	d106      	bne.n	8003a6c <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	2200      	movs	r2, #0
 8003a62:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003a66:	6878      	ldr	r0, [r7, #4]
 8003a68:	f7fd fb16 	bl	8001098 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	2224      	movs	r2, #36	; 0x24
 8003a70:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	681b      	ldr	r3, [r3, #0]
 8003a76:	681a      	ldr	r2, [r3, #0]
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	681b      	ldr	r3, [r3, #0]
 8003a7c:	f022 0201 	bic.w	r2, r2, #1
 8003a80:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8003a82:	6878      	ldr	r0, [r7, #4]
 8003a84:	f000 f8c0 	bl	8003c08 <UART_SetConfig>
 8003a88:	4603      	mov	r3, r0
 8003a8a:	2b01      	cmp	r3, #1
 8003a8c:	d101      	bne.n	8003a92 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8003a8e:	2301      	movs	r3, #1
 8003a90:	e022      	b.n	8003ad8 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a96:	2b00      	cmp	r3, #0
 8003a98:	d002      	beq.n	8003aa0 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8003a9a:	6878      	ldr	r0, [r7, #4]
 8003a9c:	f000 fb3e 	bl	800411c <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	681b      	ldr	r3, [r3, #0]
 8003aa4:	685a      	ldr	r2, [r3, #4]
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	681b      	ldr	r3, [r3, #0]
 8003aaa:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003aae:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	681b      	ldr	r3, [r3, #0]
 8003ab4:	689a      	ldr	r2, [r3, #8]
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	681b      	ldr	r3, [r3, #0]
 8003aba:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003abe:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	681b      	ldr	r3, [r3, #0]
 8003ac4:	681a      	ldr	r2, [r3, #0]
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	681b      	ldr	r3, [r3, #0]
 8003aca:	f042 0201 	orr.w	r2, r2, #1
 8003ace:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8003ad0:	6878      	ldr	r0, [r7, #4]
 8003ad2:	f000 fbc5 	bl	8004260 <UART_CheckIdleState>
 8003ad6:	4603      	mov	r3, r0
}
 8003ad8:	4618      	mov	r0, r3
 8003ada:	3708      	adds	r7, #8
 8003adc:	46bd      	mov	sp, r7
 8003ade:	bd80      	pop	{r7, pc}

08003ae0 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003ae0:	b580      	push	{r7, lr}
 8003ae2:	b08a      	sub	sp, #40	; 0x28
 8003ae4:	af02      	add	r7, sp, #8
 8003ae6:	60f8      	str	r0, [r7, #12]
 8003ae8:	60b9      	str	r1, [r7, #8]
 8003aea:	603b      	str	r3, [r7, #0]
 8003aec:	4613      	mov	r3, r2
 8003aee:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003af0:	68fb      	ldr	r3, [r7, #12]
 8003af2:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003af4:	2b20      	cmp	r3, #32
 8003af6:	f040 8082 	bne.w	8003bfe <HAL_UART_Transmit+0x11e>
  {
    if ((pData == NULL) || (Size == 0U))
 8003afa:	68bb      	ldr	r3, [r7, #8]
 8003afc:	2b00      	cmp	r3, #0
 8003afe:	d002      	beq.n	8003b06 <HAL_UART_Transmit+0x26>
 8003b00:	88fb      	ldrh	r3, [r7, #6]
 8003b02:	2b00      	cmp	r3, #0
 8003b04:	d101      	bne.n	8003b0a <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8003b06:	2301      	movs	r3, #1
 8003b08:	e07a      	b.n	8003c00 <HAL_UART_Transmit+0x120>
    }

    __HAL_LOCK(huart);
 8003b0a:	68fb      	ldr	r3, [r7, #12]
 8003b0c:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8003b10:	2b01      	cmp	r3, #1
 8003b12:	d101      	bne.n	8003b18 <HAL_UART_Transmit+0x38>
 8003b14:	2302      	movs	r3, #2
 8003b16:	e073      	b.n	8003c00 <HAL_UART_Transmit+0x120>
 8003b18:	68fb      	ldr	r3, [r7, #12]
 8003b1a:	2201      	movs	r2, #1
 8003b1c:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003b20:	68fb      	ldr	r3, [r7, #12]
 8003b22:	2200      	movs	r2, #0
 8003b24:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003b28:	68fb      	ldr	r3, [r7, #12]
 8003b2a:	2221      	movs	r2, #33	; 0x21
 8003b2c:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003b2e:	f7fd fc1b 	bl	8001368 <HAL_GetTick>
 8003b32:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8003b34:	68fb      	ldr	r3, [r7, #12]
 8003b36:	88fa      	ldrh	r2, [r7, #6]
 8003b38:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8003b3c:	68fb      	ldr	r3, [r7, #12]
 8003b3e:	88fa      	ldrh	r2, [r7, #6]
 8003b40:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003b44:	68fb      	ldr	r3, [r7, #12]
 8003b46:	689b      	ldr	r3, [r3, #8]
 8003b48:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003b4c:	d108      	bne.n	8003b60 <HAL_UART_Transmit+0x80>
 8003b4e:	68fb      	ldr	r3, [r7, #12]
 8003b50:	691b      	ldr	r3, [r3, #16]
 8003b52:	2b00      	cmp	r3, #0
 8003b54:	d104      	bne.n	8003b60 <HAL_UART_Transmit+0x80>
    {
      pdata8bits  = NULL;
 8003b56:	2300      	movs	r3, #0
 8003b58:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8003b5a:	68bb      	ldr	r3, [r7, #8]
 8003b5c:	61bb      	str	r3, [r7, #24]
 8003b5e:	e003      	b.n	8003b68 <HAL_UART_Transmit+0x88>
    }
    else
    {
      pdata8bits  = pData;
 8003b60:	68bb      	ldr	r3, [r7, #8]
 8003b62:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003b64:	2300      	movs	r3, #0
 8003b66:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8003b68:	68fb      	ldr	r3, [r7, #12]
 8003b6a:	2200      	movs	r2, #0
 8003b6c:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    while (huart->TxXferCount > 0U)
 8003b70:	e02d      	b.n	8003bce <HAL_UART_Transmit+0xee>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003b72:	683b      	ldr	r3, [r7, #0]
 8003b74:	9300      	str	r3, [sp, #0]
 8003b76:	697b      	ldr	r3, [r7, #20]
 8003b78:	2200      	movs	r2, #0
 8003b7a:	2180      	movs	r1, #128	; 0x80
 8003b7c:	68f8      	ldr	r0, [r7, #12]
 8003b7e:	f000 fbb8 	bl	80042f2 <UART_WaitOnFlagUntilTimeout>
 8003b82:	4603      	mov	r3, r0
 8003b84:	2b00      	cmp	r3, #0
 8003b86:	d001      	beq.n	8003b8c <HAL_UART_Transmit+0xac>
      {
        return HAL_TIMEOUT;
 8003b88:	2303      	movs	r3, #3
 8003b8a:	e039      	b.n	8003c00 <HAL_UART_Transmit+0x120>
      }
      if (pdata8bits == NULL)
 8003b8c:	69fb      	ldr	r3, [r7, #28]
 8003b8e:	2b00      	cmp	r3, #0
 8003b90:	d10b      	bne.n	8003baa <HAL_UART_Transmit+0xca>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003b92:	69bb      	ldr	r3, [r7, #24]
 8003b94:	881a      	ldrh	r2, [r3, #0]
 8003b96:	68fb      	ldr	r3, [r7, #12]
 8003b98:	681b      	ldr	r3, [r3, #0]
 8003b9a:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003b9e:	b292      	uxth	r2, r2
 8003ba0:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8003ba2:	69bb      	ldr	r3, [r7, #24]
 8003ba4:	3302      	adds	r3, #2
 8003ba6:	61bb      	str	r3, [r7, #24]
 8003ba8:	e008      	b.n	8003bbc <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8003baa:	69fb      	ldr	r3, [r7, #28]
 8003bac:	781a      	ldrb	r2, [r3, #0]
 8003bae:	68fb      	ldr	r3, [r7, #12]
 8003bb0:	681b      	ldr	r3, [r3, #0]
 8003bb2:	b292      	uxth	r2, r2
 8003bb4:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8003bb6:	69fb      	ldr	r3, [r7, #28]
 8003bb8:	3301      	adds	r3, #1
 8003bba:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003bbc:	68fb      	ldr	r3, [r7, #12]
 8003bbe:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8003bc2:	b29b      	uxth	r3, r3
 8003bc4:	3b01      	subs	r3, #1
 8003bc6:	b29a      	uxth	r2, r3
 8003bc8:	68fb      	ldr	r3, [r7, #12]
 8003bca:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8003bce:	68fb      	ldr	r3, [r7, #12]
 8003bd0:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8003bd4:	b29b      	uxth	r3, r3
 8003bd6:	2b00      	cmp	r3, #0
 8003bd8:	d1cb      	bne.n	8003b72 <HAL_UART_Transmit+0x92>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003bda:	683b      	ldr	r3, [r7, #0]
 8003bdc:	9300      	str	r3, [sp, #0]
 8003bde:	697b      	ldr	r3, [r7, #20]
 8003be0:	2200      	movs	r2, #0
 8003be2:	2140      	movs	r1, #64	; 0x40
 8003be4:	68f8      	ldr	r0, [r7, #12]
 8003be6:	f000 fb84 	bl	80042f2 <UART_WaitOnFlagUntilTimeout>
 8003bea:	4603      	mov	r3, r0
 8003bec:	2b00      	cmp	r3, #0
 8003bee:	d001      	beq.n	8003bf4 <HAL_UART_Transmit+0x114>
    {
      return HAL_TIMEOUT;
 8003bf0:	2303      	movs	r3, #3
 8003bf2:	e005      	b.n	8003c00 <HAL_UART_Transmit+0x120>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003bf4:	68fb      	ldr	r3, [r7, #12]
 8003bf6:	2220      	movs	r2, #32
 8003bf8:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 8003bfa:	2300      	movs	r3, #0
 8003bfc:	e000      	b.n	8003c00 <HAL_UART_Transmit+0x120>
  }
  else
  {
    return HAL_BUSY;
 8003bfe:	2302      	movs	r3, #2
  }
}
 8003c00:	4618      	mov	r0, r3
 8003c02:	3720      	adds	r7, #32
 8003c04:	46bd      	mov	sp, r7
 8003c06:	bd80      	pop	{r7, pc}

08003c08 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003c08:	b5b0      	push	{r4, r5, r7, lr}
 8003c0a:	b088      	sub	sp, #32
 8003c0c:	af00      	add	r7, sp, #0
 8003c0e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8003c10:	2300      	movs	r3, #0
 8003c12:	76bb      	strb	r3, [r7, #26]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	689a      	ldr	r2, [r3, #8]
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	691b      	ldr	r3, [r3, #16]
 8003c1c:	431a      	orrs	r2, r3
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	695b      	ldr	r3, [r3, #20]
 8003c22:	431a      	orrs	r2, r3
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	69db      	ldr	r3, [r3, #28]
 8003c28:	4313      	orrs	r3, r2
 8003c2a:	61fb      	str	r3, [r7, #28]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	681b      	ldr	r3, [r3, #0]
 8003c30:	681a      	ldr	r2, [r3, #0]
 8003c32:	4bad      	ldr	r3, [pc, #692]	; (8003ee8 <UART_SetConfig+0x2e0>)
 8003c34:	4013      	ands	r3, r2
 8003c36:	687a      	ldr	r2, [r7, #4]
 8003c38:	6812      	ldr	r2, [r2, #0]
 8003c3a:	69f9      	ldr	r1, [r7, #28]
 8003c3c:	430b      	orrs	r3, r1
 8003c3e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	681b      	ldr	r3, [r3, #0]
 8003c44:	685b      	ldr	r3, [r3, #4]
 8003c46:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	68da      	ldr	r2, [r3, #12]
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	681b      	ldr	r3, [r3, #0]
 8003c52:	430a      	orrs	r2, r1
 8003c54:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	699b      	ldr	r3, [r3, #24]
 8003c5a:	61fb      	str	r3, [r7, #28]

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	681b      	ldr	r3, [r3, #0]
 8003c60:	4aa2      	ldr	r2, [pc, #648]	; (8003eec <UART_SetConfig+0x2e4>)
 8003c62:	4293      	cmp	r3, r2
 8003c64:	d004      	beq.n	8003c70 <UART_SetConfig+0x68>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	6a1b      	ldr	r3, [r3, #32]
 8003c6a:	69fa      	ldr	r2, [r7, #28]
 8003c6c:	4313      	orrs	r3, r2
 8003c6e:	61fb      	str	r3, [r7, #28]
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	681b      	ldr	r3, [r3, #0]
 8003c74:	689b      	ldr	r3, [r3, #8]
 8003c76:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	681b      	ldr	r3, [r3, #0]
 8003c7e:	69fa      	ldr	r2, [r7, #28]
 8003c80:	430a      	orrs	r2, r1
 8003c82:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	681b      	ldr	r3, [r3, #0]
 8003c88:	4a99      	ldr	r2, [pc, #612]	; (8003ef0 <UART_SetConfig+0x2e8>)
 8003c8a:	4293      	cmp	r3, r2
 8003c8c:	d121      	bne.n	8003cd2 <UART_SetConfig+0xca>
 8003c8e:	4b99      	ldr	r3, [pc, #612]	; (8003ef4 <UART_SetConfig+0x2ec>)
 8003c90:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003c94:	f003 0303 	and.w	r3, r3, #3
 8003c98:	2b03      	cmp	r3, #3
 8003c9a:	d817      	bhi.n	8003ccc <UART_SetConfig+0xc4>
 8003c9c:	a201      	add	r2, pc, #4	; (adr r2, 8003ca4 <UART_SetConfig+0x9c>)
 8003c9e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003ca2:	bf00      	nop
 8003ca4:	08003cb5 	.word	0x08003cb5
 8003ca8:	08003cc1 	.word	0x08003cc1
 8003cac:	08003cbb 	.word	0x08003cbb
 8003cb0:	08003cc7 	.word	0x08003cc7
 8003cb4:	2301      	movs	r3, #1
 8003cb6:	76fb      	strb	r3, [r7, #27]
 8003cb8:	e0e7      	b.n	8003e8a <UART_SetConfig+0x282>
 8003cba:	2302      	movs	r3, #2
 8003cbc:	76fb      	strb	r3, [r7, #27]
 8003cbe:	e0e4      	b.n	8003e8a <UART_SetConfig+0x282>
 8003cc0:	2304      	movs	r3, #4
 8003cc2:	76fb      	strb	r3, [r7, #27]
 8003cc4:	e0e1      	b.n	8003e8a <UART_SetConfig+0x282>
 8003cc6:	2308      	movs	r3, #8
 8003cc8:	76fb      	strb	r3, [r7, #27]
 8003cca:	e0de      	b.n	8003e8a <UART_SetConfig+0x282>
 8003ccc:	2310      	movs	r3, #16
 8003cce:	76fb      	strb	r3, [r7, #27]
 8003cd0:	e0db      	b.n	8003e8a <UART_SetConfig+0x282>
 8003cd2:	687b      	ldr	r3, [r7, #4]
 8003cd4:	681b      	ldr	r3, [r3, #0]
 8003cd6:	4a88      	ldr	r2, [pc, #544]	; (8003ef8 <UART_SetConfig+0x2f0>)
 8003cd8:	4293      	cmp	r3, r2
 8003cda:	d132      	bne.n	8003d42 <UART_SetConfig+0x13a>
 8003cdc:	4b85      	ldr	r3, [pc, #532]	; (8003ef4 <UART_SetConfig+0x2ec>)
 8003cde:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003ce2:	f003 030c 	and.w	r3, r3, #12
 8003ce6:	2b0c      	cmp	r3, #12
 8003ce8:	d828      	bhi.n	8003d3c <UART_SetConfig+0x134>
 8003cea:	a201      	add	r2, pc, #4	; (adr r2, 8003cf0 <UART_SetConfig+0xe8>)
 8003cec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003cf0:	08003d25 	.word	0x08003d25
 8003cf4:	08003d3d 	.word	0x08003d3d
 8003cf8:	08003d3d 	.word	0x08003d3d
 8003cfc:	08003d3d 	.word	0x08003d3d
 8003d00:	08003d31 	.word	0x08003d31
 8003d04:	08003d3d 	.word	0x08003d3d
 8003d08:	08003d3d 	.word	0x08003d3d
 8003d0c:	08003d3d 	.word	0x08003d3d
 8003d10:	08003d2b 	.word	0x08003d2b
 8003d14:	08003d3d 	.word	0x08003d3d
 8003d18:	08003d3d 	.word	0x08003d3d
 8003d1c:	08003d3d 	.word	0x08003d3d
 8003d20:	08003d37 	.word	0x08003d37
 8003d24:	2300      	movs	r3, #0
 8003d26:	76fb      	strb	r3, [r7, #27]
 8003d28:	e0af      	b.n	8003e8a <UART_SetConfig+0x282>
 8003d2a:	2302      	movs	r3, #2
 8003d2c:	76fb      	strb	r3, [r7, #27]
 8003d2e:	e0ac      	b.n	8003e8a <UART_SetConfig+0x282>
 8003d30:	2304      	movs	r3, #4
 8003d32:	76fb      	strb	r3, [r7, #27]
 8003d34:	e0a9      	b.n	8003e8a <UART_SetConfig+0x282>
 8003d36:	2308      	movs	r3, #8
 8003d38:	76fb      	strb	r3, [r7, #27]
 8003d3a:	e0a6      	b.n	8003e8a <UART_SetConfig+0x282>
 8003d3c:	2310      	movs	r3, #16
 8003d3e:	76fb      	strb	r3, [r7, #27]
 8003d40:	e0a3      	b.n	8003e8a <UART_SetConfig+0x282>
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	681b      	ldr	r3, [r3, #0]
 8003d46:	4a6d      	ldr	r2, [pc, #436]	; (8003efc <UART_SetConfig+0x2f4>)
 8003d48:	4293      	cmp	r3, r2
 8003d4a:	d120      	bne.n	8003d8e <UART_SetConfig+0x186>
 8003d4c:	4b69      	ldr	r3, [pc, #420]	; (8003ef4 <UART_SetConfig+0x2ec>)
 8003d4e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003d52:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8003d56:	2b30      	cmp	r3, #48	; 0x30
 8003d58:	d013      	beq.n	8003d82 <UART_SetConfig+0x17a>
 8003d5a:	2b30      	cmp	r3, #48	; 0x30
 8003d5c:	d814      	bhi.n	8003d88 <UART_SetConfig+0x180>
 8003d5e:	2b20      	cmp	r3, #32
 8003d60:	d009      	beq.n	8003d76 <UART_SetConfig+0x16e>
 8003d62:	2b20      	cmp	r3, #32
 8003d64:	d810      	bhi.n	8003d88 <UART_SetConfig+0x180>
 8003d66:	2b00      	cmp	r3, #0
 8003d68:	d002      	beq.n	8003d70 <UART_SetConfig+0x168>
 8003d6a:	2b10      	cmp	r3, #16
 8003d6c:	d006      	beq.n	8003d7c <UART_SetConfig+0x174>
 8003d6e:	e00b      	b.n	8003d88 <UART_SetConfig+0x180>
 8003d70:	2300      	movs	r3, #0
 8003d72:	76fb      	strb	r3, [r7, #27]
 8003d74:	e089      	b.n	8003e8a <UART_SetConfig+0x282>
 8003d76:	2302      	movs	r3, #2
 8003d78:	76fb      	strb	r3, [r7, #27]
 8003d7a:	e086      	b.n	8003e8a <UART_SetConfig+0x282>
 8003d7c:	2304      	movs	r3, #4
 8003d7e:	76fb      	strb	r3, [r7, #27]
 8003d80:	e083      	b.n	8003e8a <UART_SetConfig+0x282>
 8003d82:	2308      	movs	r3, #8
 8003d84:	76fb      	strb	r3, [r7, #27]
 8003d86:	e080      	b.n	8003e8a <UART_SetConfig+0x282>
 8003d88:	2310      	movs	r3, #16
 8003d8a:	76fb      	strb	r3, [r7, #27]
 8003d8c:	e07d      	b.n	8003e8a <UART_SetConfig+0x282>
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	681b      	ldr	r3, [r3, #0]
 8003d92:	4a5b      	ldr	r2, [pc, #364]	; (8003f00 <UART_SetConfig+0x2f8>)
 8003d94:	4293      	cmp	r3, r2
 8003d96:	d120      	bne.n	8003dda <UART_SetConfig+0x1d2>
 8003d98:	4b56      	ldr	r3, [pc, #344]	; (8003ef4 <UART_SetConfig+0x2ec>)
 8003d9a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003d9e:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8003da2:	2bc0      	cmp	r3, #192	; 0xc0
 8003da4:	d013      	beq.n	8003dce <UART_SetConfig+0x1c6>
 8003da6:	2bc0      	cmp	r3, #192	; 0xc0
 8003da8:	d814      	bhi.n	8003dd4 <UART_SetConfig+0x1cc>
 8003daa:	2b80      	cmp	r3, #128	; 0x80
 8003dac:	d009      	beq.n	8003dc2 <UART_SetConfig+0x1ba>
 8003dae:	2b80      	cmp	r3, #128	; 0x80
 8003db0:	d810      	bhi.n	8003dd4 <UART_SetConfig+0x1cc>
 8003db2:	2b00      	cmp	r3, #0
 8003db4:	d002      	beq.n	8003dbc <UART_SetConfig+0x1b4>
 8003db6:	2b40      	cmp	r3, #64	; 0x40
 8003db8:	d006      	beq.n	8003dc8 <UART_SetConfig+0x1c0>
 8003dba:	e00b      	b.n	8003dd4 <UART_SetConfig+0x1cc>
 8003dbc:	2300      	movs	r3, #0
 8003dbe:	76fb      	strb	r3, [r7, #27]
 8003dc0:	e063      	b.n	8003e8a <UART_SetConfig+0x282>
 8003dc2:	2302      	movs	r3, #2
 8003dc4:	76fb      	strb	r3, [r7, #27]
 8003dc6:	e060      	b.n	8003e8a <UART_SetConfig+0x282>
 8003dc8:	2304      	movs	r3, #4
 8003dca:	76fb      	strb	r3, [r7, #27]
 8003dcc:	e05d      	b.n	8003e8a <UART_SetConfig+0x282>
 8003dce:	2308      	movs	r3, #8
 8003dd0:	76fb      	strb	r3, [r7, #27]
 8003dd2:	e05a      	b.n	8003e8a <UART_SetConfig+0x282>
 8003dd4:	2310      	movs	r3, #16
 8003dd6:	76fb      	strb	r3, [r7, #27]
 8003dd8:	e057      	b.n	8003e8a <UART_SetConfig+0x282>
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	681b      	ldr	r3, [r3, #0]
 8003dde:	4a49      	ldr	r2, [pc, #292]	; (8003f04 <UART_SetConfig+0x2fc>)
 8003de0:	4293      	cmp	r3, r2
 8003de2:	d125      	bne.n	8003e30 <UART_SetConfig+0x228>
 8003de4:	4b43      	ldr	r3, [pc, #268]	; (8003ef4 <UART_SetConfig+0x2ec>)
 8003de6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003dea:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003dee:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003df2:	d017      	beq.n	8003e24 <UART_SetConfig+0x21c>
 8003df4:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003df8:	d817      	bhi.n	8003e2a <UART_SetConfig+0x222>
 8003dfa:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003dfe:	d00b      	beq.n	8003e18 <UART_SetConfig+0x210>
 8003e00:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003e04:	d811      	bhi.n	8003e2a <UART_SetConfig+0x222>
 8003e06:	2b00      	cmp	r3, #0
 8003e08:	d003      	beq.n	8003e12 <UART_SetConfig+0x20a>
 8003e0a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003e0e:	d006      	beq.n	8003e1e <UART_SetConfig+0x216>
 8003e10:	e00b      	b.n	8003e2a <UART_SetConfig+0x222>
 8003e12:	2300      	movs	r3, #0
 8003e14:	76fb      	strb	r3, [r7, #27]
 8003e16:	e038      	b.n	8003e8a <UART_SetConfig+0x282>
 8003e18:	2302      	movs	r3, #2
 8003e1a:	76fb      	strb	r3, [r7, #27]
 8003e1c:	e035      	b.n	8003e8a <UART_SetConfig+0x282>
 8003e1e:	2304      	movs	r3, #4
 8003e20:	76fb      	strb	r3, [r7, #27]
 8003e22:	e032      	b.n	8003e8a <UART_SetConfig+0x282>
 8003e24:	2308      	movs	r3, #8
 8003e26:	76fb      	strb	r3, [r7, #27]
 8003e28:	e02f      	b.n	8003e8a <UART_SetConfig+0x282>
 8003e2a:	2310      	movs	r3, #16
 8003e2c:	76fb      	strb	r3, [r7, #27]
 8003e2e:	e02c      	b.n	8003e8a <UART_SetConfig+0x282>
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	681b      	ldr	r3, [r3, #0]
 8003e34:	4a2d      	ldr	r2, [pc, #180]	; (8003eec <UART_SetConfig+0x2e4>)
 8003e36:	4293      	cmp	r3, r2
 8003e38:	d125      	bne.n	8003e86 <UART_SetConfig+0x27e>
 8003e3a:	4b2e      	ldr	r3, [pc, #184]	; (8003ef4 <UART_SetConfig+0x2ec>)
 8003e3c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003e40:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8003e44:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8003e48:	d017      	beq.n	8003e7a <UART_SetConfig+0x272>
 8003e4a:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8003e4e:	d817      	bhi.n	8003e80 <UART_SetConfig+0x278>
 8003e50:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003e54:	d00b      	beq.n	8003e6e <UART_SetConfig+0x266>
 8003e56:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003e5a:	d811      	bhi.n	8003e80 <UART_SetConfig+0x278>
 8003e5c:	2b00      	cmp	r3, #0
 8003e5e:	d003      	beq.n	8003e68 <UART_SetConfig+0x260>
 8003e60:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003e64:	d006      	beq.n	8003e74 <UART_SetConfig+0x26c>
 8003e66:	e00b      	b.n	8003e80 <UART_SetConfig+0x278>
 8003e68:	2300      	movs	r3, #0
 8003e6a:	76fb      	strb	r3, [r7, #27]
 8003e6c:	e00d      	b.n	8003e8a <UART_SetConfig+0x282>
 8003e6e:	2302      	movs	r3, #2
 8003e70:	76fb      	strb	r3, [r7, #27]
 8003e72:	e00a      	b.n	8003e8a <UART_SetConfig+0x282>
 8003e74:	2304      	movs	r3, #4
 8003e76:	76fb      	strb	r3, [r7, #27]
 8003e78:	e007      	b.n	8003e8a <UART_SetConfig+0x282>
 8003e7a:	2308      	movs	r3, #8
 8003e7c:	76fb      	strb	r3, [r7, #27]
 8003e7e:	e004      	b.n	8003e8a <UART_SetConfig+0x282>
 8003e80:	2310      	movs	r3, #16
 8003e82:	76fb      	strb	r3, [r7, #27]
 8003e84:	e001      	b.n	8003e8a <UART_SetConfig+0x282>
 8003e86:	2310      	movs	r3, #16
 8003e88:	76fb      	strb	r3, [r7, #27]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	681b      	ldr	r3, [r3, #0]
 8003e8e:	4a17      	ldr	r2, [pc, #92]	; (8003eec <UART_SetConfig+0x2e4>)
 8003e90:	4293      	cmp	r3, r2
 8003e92:	f040 8087 	bne.w	8003fa4 <UART_SetConfig+0x39c>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8003e96:	7efb      	ldrb	r3, [r7, #27]
 8003e98:	2b08      	cmp	r3, #8
 8003e9a:	d837      	bhi.n	8003f0c <UART_SetConfig+0x304>
 8003e9c:	a201      	add	r2, pc, #4	; (adr r2, 8003ea4 <UART_SetConfig+0x29c>)
 8003e9e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003ea2:	bf00      	nop
 8003ea4:	08003ec9 	.word	0x08003ec9
 8003ea8:	08003f0d 	.word	0x08003f0d
 8003eac:	08003ed1 	.word	0x08003ed1
 8003eb0:	08003f0d 	.word	0x08003f0d
 8003eb4:	08003ed7 	.word	0x08003ed7
 8003eb8:	08003f0d 	.word	0x08003f0d
 8003ebc:	08003f0d 	.word	0x08003f0d
 8003ec0:	08003f0d 	.word	0x08003f0d
 8003ec4:	08003edf 	.word	0x08003edf
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003ec8:	f7ff f874 	bl	8002fb4 <HAL_RCC_GetPCLK1Freq>
 8003ecc:	6178      	str	r0, [r7, #20]
        break;
 8003ece:	e022      	b.n	8003f16 <UART_SetConfig+0x30e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003ed0:	4b0d      	ldr	r3, [pc, #52]	; (8003f08 <UART_SetConfig+0x300>)
 8003ed2:	617b      	str	r3, [r7, #20]
        break;
 8003ed4:	e01f      	b.n	8003f16 <UART_SetConfig+0x30e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003ed6:	f7fe ffd5 	bl	8002e84 <HAL_RCC_GetSysClockFreq>
 8003eda:	6178      	str	r0, [r7, #20]
        break;
 8003edc:	e01b      	b.n	8003f16 <UART_SetConfig+0x30e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003ede:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003ee2:	617b      	str	r3, [r7, #20]
        break;
 8003ee4:	e017      	b.n	8003f16 <UART_SetConfig+0x30e>
 8003ee6:	bf00      	nop
 8003ee8:	efff69f3 	.word	0xefff69f3
 8003eec:	40008000 	.word	0x40008000
 8003ef0:	40013800 	.word	0x40013800
 8003ef4:	40021000 	.word	0x40021000
 8003ef8:	40004400 	.word	0x40004400
 8003efc:	40004800 	.word	0x40004800
 8003f00:	40004c00 	.word	0x40004c00
 8003f04:	40005000 	.word	0x40005000
 8003f08:	00f42400 	.word	0x00f42400
      default:
        pclk = 0U;
 8003f0c:	2300      	movs	r3, #0
 8003f0e:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8003f10:	2301      	movs	r3, #1
 8003f12:	76bb      	strb	r3, [r7, #26]
        break;
 8003f14:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8003f16:	697b      	ldr	r3, [r7, #20]
 8003f18:	2b00      	cmp	r3, #0
 8003f1a:	f000 80f1 	beq.w	8004100 <UART_SetConfig+0x4f8>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	685a      	ldr	r2, [r3, #4]
 8003f22:	4613      	mov	r3, r2
 8003f24:	005b      	lsls	r3, r3, #1
 8003f26:	4413      	add	r3, r2
 8003f28:	697a      	ldr	r2, [r7, #20]
 8003f2a:	429a      	cmp	r2, r3
 8003f2c:	d305      	bcc.n	8003f3a <UART_SetConfig+0x332>
          (pclk > (4096U * huart->Init.BaudRate)))
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	685b      	ldr	r3, [r3, #4]
 8003f32:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8003f34:	697a      	ldr	r2, [r7, #20]
 8003f36:	429a      	cmp	r2, r3
 8003f38:	d902      	bls.n	8003f40 <UART_SetConfig+0x338>
      {
        ret = HAL_ERROR;
 8003f3a:	2301      	movs	r3, #1
 8003f3c:	76bb      	strb	r3, [r7, #26]
 8003f3e:	e0df      	b.n	8004100 <UART_SetConfig+0x4f8>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8003f40:	697b      	ldr	r3, [r7, #20]
 8003f42:	4618      	mov	r0, r3
 8003f44:	f04f 0100 	mov.w	r1, #0
 8003f48:	f04f 0200 	mov.w	r2, #0
 8003f4c:	f04f 0300 	mov.w	r3, #0
 8003f50:	020b      	lsls	r3, r1, #8
 8003f52:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8003f56:	0202      	lsls	r2, r0, #8
 8003f58:	6879      	ldr	r1, [r7, #4]
 8003f5a:	6849      	ldr	r1, [r1, #4]
 8003f5c:	0849      	lsrs	r1, r1, #1
 8003f5e:	4608      	mov	r0, r1
 8003f60:	f04f 0100 	mov.w	r1, #0
 8003f64:	1814      	adds	r4, r2, r0
 8003f66:	eb43 0501 	adc.w	r5, r3, r1
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	685b      	ldr	r3, [r3, #4]
 8003f6e:	461a      	mov	r2, r3
 8003f70:	f04f 0300 	mov.w	r3, #0
 8003f74:	4620      	mov	r0, r4
 8003f76:	4629      	mov	r1, r5
 8003f78:	f7fc fcb8 	bl	80008ec <__aeabi_uldivmod>
 8003f7c:	4602      	mov	r2, r0
 8003f7e:	460b      	mov	r3, r1
 8003f80:	4613      	mov	r3, r2
 8003f82:	613b      	str	r3, [r7, #16]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8003f84:	693b      	ldr	r3, [r7, #16]
 8003f86:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003f8a:	d308      	bcc.n	8003f9e <UART_SetConfig+0x396>
 8003f8c:	693b      	ldr	r3, [r7, #16]
 8003f8e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003f92:	d204      	bcs.n	8003f9e <UART_SetConfig+0x396>
        {
          huart->Instance->BRR = usartdiv;
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	681b      	ldr	r3, [r3, #0]
 8003f98:	693a      	ldr	r2, [r7, #16]
 8003f9a:	60da      	str	r2, [r3, #12]
 8003f9c:	e0b0      	b.n	8004100 <UART_SetConfig+0x4f8>
        }
        else
        {
          ret = HAL_ERROR;
 8003f9e:	2301      	movs	r3, #1
 8003fa0:	76bb      	strb	r3, [r7, #26]
 8003fa2:	e0ad      	b.n	8004100 <UART_SetConfig+0x4f8>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	69db      	ldr	r3, [r3, #28]
 8003fa8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003fac:	d15b      	bne.n	8004066 <UART_SetConfig+0x45e>
  {
    switch (clocksource)
 8003fae:	7efb      	ldrb	r3, [r7, #27]
 8003fb0:	2b08      	cmp	r3, #8
 8003fb2:	d828      	bhi.n	8004006 <UART_SetConfig+0x3fe>
 8003fb4:	a201      	add	r2, pc, #4	; (adr r2, 8003fbc <UART_SetConfig+0x3b4>)
 8003fb6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003fba:	bf00      	nop
 8003fbc:	08003fe1 	.word	0x08003fe1
 8003fc0:	08003fe9 	.word	0x08003fe9
 8003fc4:	08003ff1 	.word	0x08003ff1
 8003fc8:	08004007 	.word	0x08004007
 8003fcc:	08003ff7 	.word	0x08003ff7
 8003fd0:	08004007 	.word	0x08004007
 8003fd4:	08004007 	.word	0x08004007
 8003fd8:	08004007 	.word	0x08004007
 8003fdc:	08003fff 	.word	0x08003fff
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003fe0:	f7fe ffe8 	bl	8002fb4 <HAL_RCC_GetPCLK1Freq>
 8003fe4:	6178      	str	r0, [r7, #20]
        break;
 8003fe6:	e013      	b.n	8004010 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003fe8:	f7fe fffa 	bl	8002fe0 <HAL_RCC_GetPCLK2Freq>
 8003fec:	6178      	str	r0, [r7, #20]
        break;
 8003fee:	e00f      	b.n	8004010 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003ff0:	4b49      	ldr	r3, [pc, #292]	; (8004118 <UART_SetConfig+0x510>)
 8003ff2:	617b      	str	r3, [r7, #20]
        break;
 8003ff4:	e00c      	b.n	8004010 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003ff6:	f7fe ff45 	bl	8002e84 <HAL_RCC_GetSysClockFreq>
 8003ffa:	6178      	str	r0, [r7, #20]
        break;
 8003ffc:	e008      	b.n	8004010 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003ffe:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004002:	617b      	str	r3, [r7, #20]
        break;
 8004004:	e004      	b.n	8004010 <UART_SetConfig+0x408>
      default:
        pclk = 0U;
 8004006:	2300      	movs	r3, #0
 8004008:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 800400a:	2301      	movs	r3, #1
 800400c:	76bb      	strb	r3, [r7, #26]
        break;
 800400e:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8004010:	697b      	ldr	r3, [r7, #20]
 8004012:	2b00      	cmp	r3, #0
 8004014:	d074      	beq.n	8004100 <UART_SetConfig+0x4f8>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8004016:	697b      	ldr	r3, [r7, #20]
 8004018:	005a      	lsls	r2, r3, #1
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	685b      	ldr	r3, [r3, #4]
 800401e:	085b      	lsrs	r3, r3, #1
 8004020:	441a      	add	r2, r3
 8004022:	687b      	ldr	r3, [r7, #4]
 8004024:	685b      	ldr	r3, [r3, #4]
 8004026:	fbb2 f3f3 	udiv	r3, r2, r3
 800402a:	613b      	str	r3, [r7, #16]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800402c:	693b      	ldr	r3, [r7, #16]
 800402e:	2b0f      	cmp	r3, #15
 8004030:	d916      	bls.n	8004060 <UART_SetConfig+0x458>
 8004032:	693b      	ldr	r3, [r7, #16]
 8004034:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004038:	d212      	bcs.n	8004060 <UART_SetConfig+0x458>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800403a:	693b      	ldr	r3, [r7, #16]
 800403c:	b29b      	uxth	r3, r3
 800403e:	f023 030f 	bic.w	r3, r3, #15
 8004042:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8004044:	693b      	ldr	r3, [r7, #16]
 8004046:	085b      	lsrs	r3, r3, #1
 8004048:	b29b      	uxth	r3, r3
 800404a:	f003 0307 	and.w	r3, r3, #7
 800404e:	b29a      	uxth	r2, r3
 8004050:	89fb      	ldrh	r3, [r7, #14]
 8004052:	4313      	orrs	r3, r2
 8004054:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8004056:	687b      	ldr	r3, [r7, #4]
 8004058:	681b      	ldr	r3, [r3, #0]
 800405a:	89fa      	ldrh	r2, [r7, #14]
 800405c:	60da      	str	r2, [r3, #12]
 800405e:	e04f      	b.n	8004100 <UART_SetConfig+0x4f8>
      }
      else
      {
        ret = HAL_ERROR;
 8004060:	2301      	movs	r3, #1
 8004062:	76bb      	strb	r3, [r7, #26]
 8004064:	e04c      	b.n	8004100 <UART_SetConfig+0x4f8>
      }
    }
  }
  else
  {
    switch (clocksource)
 8004066:	7efb      	ldrb	r3, [r7, #27]
 8004068:	2b08      	cmp	r3, #8
 800406a:	d828      	bhi.n	80040be <UART_SetConfig+0x4b6>
 800406c:	a201      	add	r2, pc, #4	; (adr r2, 8004074 <UART_SetConfig+0x46c>)
 800406e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004072:	bf00      	nop
 8004074:	08004099 	.word	0x08004099
 8004078:	080040a1 	.word	0x080040a1
 800407c:	080040a9 	.word	0x080040a9
 8004080:	080040bf 	.word	0x080040bf
 8004084:	080040af 	.word	0x080040af
 8004088:	080040bf 	.word	0x080040bf
 800408c:	080040bf 	.word	0x080040bf
 8004090:	080040bf 	.word	0x080040bf
 8004094:	080040b7 	.word	0x080040b7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004098:	f7fe ff8c 	bl	8002fb4 <HAL_RCC_GetPCLK1Freq>
 800409c:	6178      	str	r0, [r7, #20]
        break;
 800409e:	e013      	b.n	80040c8 <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80040a0:	f7fe ff9e 	bl	8002fe0 <HAL_RCC_GetPCLK2Freq>
 80040a4:	6178      	str	r0, [r7, #20]
        break;
 80040a6:	e00f      	b.n	80040c8 <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80040a8:	4b1b      	ldr	r3, [pc, #108]	; (8004118 <UART_SetConfig+0x510>)
 80040aa:	617b      	str	r3, [r7, #20]
        break;
 80040ac:	e00c      	b.n	80040c8 <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80040ae:	f7fe fee9 	bl	8002e84 <HAL_RCC_GetSysClockFreq>
 80040b2:	6178      	str	r0, [r7, #20]
        break;
 80040b4:	e008      	b.n	80040c8 <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80040b6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80040ba:	617b      	str	r3, [r7, #20]
        break;
 80040bc:	e004      	b.n	80040c8 <UART_SetConfig+0x4c0>
      default:
        pclk = 0U;
 80040be:	2300      	movs	r3, #0
 80040c0:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 80040c2:	2301      	movs	r3, #1
 80040c4:	76bb      	strb	r3, [r7, #26]
        break;
 80040c6:	bf00      	nop
    }

    if (pclk != 0U)
 80040c8:	697b      	ldr	r3, [r7, #20]
 80040ca:	2b00      	cmp	r3, #0
 80040cc:	d018      	beq.n	8004100 <UART_SetConfig+0x4f8>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80040ce:	687b      	ldr	r3, [r7, #4]
 80040d0:	685b      	ldr	r3, [r3, #4]
 80040d2:	085a      	lsrs	r2, r3, #1
 80040d4:	697b      	ldr	r3, [r7, #20]
 80040d6:	441a      	add	r2, r3
 80040d8:	687b      	ldr	r3, [r7, #4]
 80040da:	685b      	ldr	r3, [r3, #4]
 80040dc:	fbb2 f3f3 	udiv	r3, r2, r3
 80040e0:	613b      	str	r3, [r7, #16]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80040e2:	693b      	ldr	r3, [r7, #16]
 80040e4:	2b0f      	cmp	r3, #15
 80040e6:	d909      	bls.n	80040fc <UART_SetConfig+0x4f4>
 80040e8:	693b      	ldr	r3, [r7, #16]
 80040ea:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80040ee:	d205      	bcs.n	80040fc <UART_SetConfig+0x4f4>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80040f0:	693b      	ldr	r3, [r7, #16]
 80040f2:	b29a      	uxth	r2, r3
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	681b      	ldr	r3, [r3, #0]
 80040f8:	60da      	str	r2, [r3, #12]
 80040fa:	e001      	b.n	8004100 <UART_SetConfig+0x4f8>
      }
      else
      {
        ret = HAL_ERROR;
 80040fc:	2301      	movs	r3, #1
 80040fe:	76bb      	strb	r3, [r7, #26]
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	2200      	movs	r2, #0
 8004104:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 8004106:	687b      	ldr	r3, [r7, #4]
 8004108:	2200      	movs	r2, #0
 800410a:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 800410c:	7ebb      	ldrb	r3, [r7, #26]
}
 800410e:	4618      	mov	r0, r3
 8004110:	3720      	adds	r7, #32
 8004112:	46bd      	mov	sp, r7
 8004114:	bdb0      	pop	{r4, r5, r7, pc}
 8004116:	bf00      	nop
 8004118:	00f42400 	.word	0x00f42400

0800411c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800411c:	b480      	push	{r7}
 800411e:	b083      	sub	sp, #12
 8004120:	af00      	add	r7, sp, #0
 8004122:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004128:	f003 0301 	and.w	r3, r3, #1
 800412c:	2b00      	cmp	r3, #0
 800412e:	d00a      	beq.n	8004146 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	681b      	ldr	r3, [r3, #0]
 8004134:	685b      	ldr	r3, [r3, #4]
 8004136:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800413a:	687b      	ldr	r3, [r7, #4]
 800413c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800413e:	687b      	ldr	r3, [r7, #4]
 8004140:	681b      	ldr	r3, [r3, #0]
 8004142:	430a      	orrs	r2, r1
 8004144:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800414a:	f003 0302 	and.w	r3, r3, #2
 800414e:	2b00      	cmp	r3, #0
 8004150:	d00a      	beq.n	8004168 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8004152:	687b      	ldr	r3, [r7, #4]
 8004154:	681b      	ldr	r3, [r3, #0]
 8004156:	685b      	ldr	r3, [r3, #4]
 8004158:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	681b      	ldr	r3, [r3, #0]
 8004164:	430a      	orrs	r2, r1
 8004166:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800416c:	f003 0304 	and.w	r3, r3, #4
 8004170:	2b00      	cmp	r3, #0
 8004172:	d00a      	beq.n	800418a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	681b      	ldr	r3, [r3, #0]
 8004178:	685b      	ldr	r3, [r3, #4]
 800417a:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800417e:	687b      	ldr	r3, [r7, #4]
 8004180:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004182:	687b      	ldr	r3, [r7, #4]
 8004184:	681b      	ldr	r3, [r3, #0]
 8004186:	430a      	orrs	r2, r1
 8004188:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800418a:	687b      	ldr	r3, [r7, #4]
 800418c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800418e:	f003 0308 	and.w	r3, r3, #8
 8004192:	2b00      	cmp	r3, #0
 8004194:	d00a      	beq.n	80041ac <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8004196:	687b      	ldr	r3, [r7, #4]
 8004198:	681b      	ldr	r3, [r3, #0]
 800419a:	685b      	ldr	r3, [r3, #4]
 800419c:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	681b      	ldr	r3, [r3, #0]
 80041a8:	430a      	orrs	r2, r1
 80041aa:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80041b0:	f003 0310 	and.w	r3, r3, #16
 80041b4:	2b00      	cmp	r3, #0
 80041b6:	d00a      	beq.n	80041ce <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80041b8:	687b      	ldr	r3, [r7, #4]
 80041ba:	681b      	ldr	r3, [r3, #0]
 80041bc:	689b      	ldr	r3, [r3, #8]
 80041be:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 80041c2:	687b      	ldr	r3, [r7, #4]
 80041c4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80041c6:	687b      	ldr	r3, [r7, #4]
 80041c8:	681b      	ldr	r3, [r3, #0]
 80041ca:	430a      	orrs	r2, r1
 80041cc:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80041ce:	687b      	ldr	r3, [r7, #4]
 80041d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80041d2:	f003 0320 	and.w	r3, r3, #32
 80041d6:	2b00      	cmp	r3, #0
 80041d8:	d00a      	beq.n	80041f0 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80041da:	687b      	ldr	r3, [r7, #4]
 80041dc:	681b      	ldr	r3, [r3, #0]
 80041de:	689b      	ldr	r3, [r3, #8]
 80041e0:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	681b      	ldr	r3, [r3, #0]
 80041ec:	430a      	orrs	r2, r1
 80041ee:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80041f4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80041f8:	2b00      	cmp	r3, #0
 80041fa:	d01a      	beq.n	8004232 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	681b      	ldr	r3, [r3, #0]
 8004200:	685b      	ldr	r3, [r3, #4]
 8004202:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8004206:	687b      	ldr	r3, [r7, #4]
 8004208:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800420a:	687b      	ldr	r3, [r7, #4]
 800420c:	681b      	ldr	r3, [r3, #0]
 800420e:	430a      	orrs	r2, r1
 8004210:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8004212:	687b      	ldr	r3, [r7, #4]
 8004214:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004216:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800421a:	d10a      	bne.n	8004232 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	681b      	ldr	r3, [r3, #0]
 8004220:	685b      	ldr	r3, [r3, #4]
 8004222:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8004226:	687b      	ldr	r3, [r7, #4]
 8004228:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800422a:	687b      	ldr	r3, [r7, #4]
 800422c:	681b      	ldr	r3, [r3, #0]
 800422e:	430a      	orrs	r2, r1
 8004230:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8004232:	687b      	ldr	r3, [r7, #4]
 8004234:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004236:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800423a:	2b00      	cmp	r3, #0
 800423c:	d00a      	beq.n	8004254 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800423e:	687b      	ldr	r3, [r7, #4]
 8004240:	681b      	ldr	r3, [r3, #0]
 8004242:	685b      	ldr	r3, [r3, #4]
 8004244:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	681b      	ldr	r3, [r3, #0]
 8004250:	430a      	orrs	r2, r1
 8004252:	605a      	str	r2, [r3, #4]
  }
}
 8004254:	bf00      	nop
 8004256:	370c      	adds	r7, #12
 8004258:	46bd      	mov	sp, r7
 800425a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800425e:	4770      	bx	lr

08004260 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8004260:	b580      	push	{r7, lr}
 8004262:	b086      	sub	sp, #24
 8004264:	af02      	add	r7, sp, #8
 8004266:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	2200      	movs	r2, #0
 800426c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8004270:	f7fd f87a 	bl	8001368 <HAL_GetTick>
 8004274:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8004276:	687b      	ldr	r3, [r7, #4]
 8004278:	681b      	ldr	r3, [r3, #0]
 800427a:	681b      	ldr	r3, [r3, #0]
 800427c:	f003 0308 	and.w	r3, r3, #8
 8004280:	2b08      	cmp	r3, #8
 8004282:	d10e      	bne.n	80042a2 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004284:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8004288:	9300      	str	r3, [sp, #0]
 800428a:	68fb      	ldr	r3, [r7, #12]
 800428c:	2200      	movs	r2, #0
 800428e:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8004292:	6878      	ldr	r0, [r7, #4]
 8004294:	f000 f82d 	bl	80042f2 <UART_WaitOnFlagUntilTimeout>
 8004298:	4603      	mov	r3, r0
 800429a:	2b00      	cmp	r3, #0
 800429c:	d001      	beq.n	80042a2 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800429e:	2303      	movs	r3, #3
 80042a0:	e023      	b.n	80042ea <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	681b      	ldr	r3, [r3, #0]
 80042a6:	681b      	ldr	r3, [r3, #0]
 80042a8:	f003 0304 	and.w	r3, r3, #4
 80042ac:	2b04      	cmp	r3, #4
 80042ae:	d10e      	bne.n	80042ce <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80042b0:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80042b4:	9300      	str	r3, [sp, #0]
 80042b6:	68fb      	ldr	r3, [r7, #12]
 80042b8:	2200      	movs	r2, #0
 80042ba:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 80042be:	6878      	ldr	r0, [r7, #4]
 80042c0:	f000 f817 	bl	80042f2 <UART_WaitOnFlagUntilTimeout>
 80042c4:	4603      	mov	r3, r0
 80042c6:	2b00      	cmp	r3, #0
 80042c8:	d001      	beq.n	80042ce <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80042ca:	2303      	movs	r3, #3
 80042cc:	e00d      	b.n	80042ea <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80042ce:	687b      	ldr	r3, [r7, #4]
 80042d0:	2220      	movs	r2, #32
 80042d2:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	2220      	movs	r2, #32
 80042d8:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80042da:	687b      	ldr	r3, [r7, #4]
 80042dc:	2200      	movs	r2, #0
 80042de:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	2200      	movs	r2, #0
 80042e4:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 80042e8:	2300      	movs	r3, #0
}
 80042ea:	4618      	mov	r0, r3
 80042ec:	3710      	adds	r7, #16
 80042ee:	46bd      	mov	sp, r7
 80042f0:	bd80      	pop	{r7, pc}

080042f2 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80042f2:	b580      	push	{r7, lr}
 80042f4:	b09c      	sub	sp, #112	; 0x70
 80042f6:	af00      	add	r7, sp, #0
 80042f8:	60f8      	str	r0, [r7, #12]
 80042fa:	60b9      	str	r1, [r7, #8]
 80042fc:	603b      	str	r3, [r7, #0]
 80042fe:	4613      	mov	r3, r2
 8004300:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004302:	e0a5      	b.n	8004450 <UART_WaitOnFlagUntilTimeout+0x15e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004304:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004306:	f1b3 3fff 	cmp.w	r3, #4294967295
 800430a:	f000 80a1 	beq.w	8004450 <UART_WaitOnFlagUntilTimeout+0x15e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800430e:	f7fd f82b 	bl	8001368 <HAL_GetTick>
 8004312:	4602      	mov	r2, r0
 8004314:	683b      	ldr	r3, [r7, #0]
 8004316:	1ad3      	subs	r3, r2, r3
 8004318:	6fba      	ldr	r2, [r7, #120]	; 0x78
 800431a:	429a      	cmp	r2, r3
 800431c:	d302      	bcc.n	8004324 <UART_WaitOnFlagUntilTimeout+0x32>
 800431e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004320:	2b00      	cmp	r3, #0
 8004322:	d13e      	bne.n	80043a2 <UART_WaitOnFlagUntilTimeout+0xb0>
           interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                USART_CR1_TXEIE_TXFNFIE));
#else
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004324:	68fb      	ldr	r3, [r7, #12]
 8004326:	681b      	ldr	r3, [r3, #0]
 8004328:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800432a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800432c:	e853 3f00 	ldrex	r3, [r3]
 8004330:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8004332:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004334:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8004338:	667b      	str	r3, [r7, #100]	; 0x64
 800433a:	68fb      	ldr	r3, [r7, #12]
 800433c:	681b      	ldr	r3, [r3, #0]
 800433e:	461a      	mov	r2, r3
 8004340:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004342:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004344:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004346:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8004348:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800434a:	e841 2300 	strex	r3, r2, [r1]
 800434e:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8004350:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004352:	2b00      	cmp	r3, #0
 8004354:	d1e6      	bne.n	8004324 <UART_WaitOnFlagUntilTimeout+0x32>
#endif /* USART_CR1_FIFOEN */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004356:	68fb      	ldr	r3, [r7, #12]
 8004358:	681b      	ldr	r3, [r3, #0]
 800435a:	3308      	adds	r3, #8
 800435c:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800435e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004360:	e853 3f00 	ldrex	r3, [r3]
 8004364:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8004366:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004368:	f023 0301 	bic.w	r3, r3, #1
 800436c:	663b      	str	r3, [r7, #96]	; 0x60
 800436e:	68fb      	ldr	r3, [r7, #12]
 8004370:	681b      	ldr	r3, [r3, #0]
 8004372:	3308      	adds	r3, #8
 8004374:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8004376:	64ba      	str	r2, [r7, #72]	; 0x48
 8004378:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800437a:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800437c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800437e:	e841 2300 	strex	r3, r2, [r1]
 8004382:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8004384:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004386:	2b00      	cmp	r3, #0
 8004388:	d1e5      	bne.n	8004356 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 800438a:	68fb      	ldr	r3, [r7, #12]
 800438c:	2220      	movs	r2, #32
 800438e:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8004390:	68fb      	ldr	r3, [r7, #12]
 8004392:	2220      	movs	r2, #32
 8004394:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 8004396:	68fb      	ldr	r3, [r7, #12]
 8004398:	2200      	movs	r2, #0
 800439a:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 800439e:	2303      	movs	r3, #3
 80043a0:	e067      	b.n	8004472 <UART_WaitOnFlagUntilTimeout+0x180>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80043a2:	68fb      	ldr	r3, [r7, #12]
 80043a4:	681b      	ldr	r3, [r3, #0]
 80043a6:	681b      	ldr	r3, [r3, #0]
 80043a8:	f003 0304 	and.w	r3, r3, #4
 80043ac:	2b00      	cmp	r3, #0
 80043ae:	d04f      	beq.n	8004450 <UART_WaitOnFlagUntilTimeout+0x15e>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80043b0:	68fb      	ldr	r3, [r7, #12]
 80043b2:	681b      	ldr	r3, [r3, #0]
 80043b4:	69db      	ldr	r3, [r3, #28]
 80043b6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80043ba:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80043be:	d147      	bne.n	8004450 <UART_WaitOnFlagUntilTimeout+0x15e>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80043c0:	68fb      	ldr	r3, [r7, #12]
 80043c2:	681b      	ldr	r3, [r3, #0]
 80043c4:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80043c8:	621a      	str	r2, [r3, #32]
             interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                  USART_CR1_TXEIE_TXFNFIE));
#else
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80043ca:	68fb      	ldr	r3, [r7, #12]
 80043cc:	681b      	ldr	r3, [r3, #0]
 80043ce:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80043d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80043d2:	e853 3f00 	ldrex	r3, [r3]
 80043d6:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80043d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80043da:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80043de:	66fb      	str	r3, [r7, #108]	; 0x6c
 80043e0:	68fb      	ldr	r3, [r7, #12]
 80043e2:	681b      	ldr	r3, [r3, #0]
 80043e4:	461a      	mov	r2, r3
 80043e6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80043e8:	637b      	str	r3, [r7, #52]	; 0x34
 80043ea:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80043ec:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80043ee:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80043f0:	e841 2300 	strex	r3, r2, [r1]
 80043f4:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80043f6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80043f8:	2b00      	cmp	r3, #0
 80043fa:	d1e6      	bne.n	80043ca <UART_WaitOnFlagUntilTimeout+0xd8>
#endif
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80043fc:	68fb      	ldr	r3, [r7, #12]
 80043fe:	681b      	ldr	r3, [r3, #0]
 8004400:	3308      	adds	r3, #8
 8004402:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004404:	697b      	ldr	r3, [r7, #20]
 8004406:	e853 3f00 	ldrex	r3, [r3]
 800440a:	613b      	str	r3, [r7, #16]
   return(result);
 800440c:	693b      	ldr	r3, [r7, #16]
 800440e:	f023 0301 	bic.w	r3, r3, #1
 8004412:	66bb      	str	r3, [r7, #104]	; 0x68
 8004414:	68fb      	ldr	r3, [r7, #12]
 8004416:	681b      	ldr	r3, [r3, #0]
 8004418:	3308      	adds	r3, #8
 800441a:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800441c:	623a      	str	r2, [r7, #32]
 800441e:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004420:	69f9      	ldr	r1, [r7, #28]
 8004422:	6a3a      	ldr	r2, [r7, #32]
 8004424:	e841 2300 	strex	r3, r2, [r1]
 8004428:	61bb      	str	r3, [r7, #24]
   return(result);
 800442a:	69bb      	ldr	r3, [r7, #24]
 800442c:	2b00      	cmp	r3, #0
 800442e:	d1e5      	bne.n	80043fc <UART_WaitOnFlagUntilTimeout+0x10a>

          huart->gState = HAL_UART_STATE_READY;
 8004430:	68fb      	ldr	r3, [r7, #12]
 8004432:	2220      	movs	r2, #32
 8004434:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 8004436:	68fb      	ldr	r3, [r7, #12]
 8004438:	2220      	movs	r2, #32
 800443a:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800443c:	68fb      	ldr	r3, [r7, #12]
 800443e:	2220      	movs	r2, #32
 8004440:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004444:	68fb      	ldr	r3, [r7, #12]
 8004446:	2200      	movs	r2, #0
 8004448:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 800444c:	2303      	movs	r3, #3
 800444e:	e010      	b.n	8004472 <UART_WaitOnFlagUntilTimeout+0x180>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004450:	68fb      	ldr	r3, [r7, #12]
 8004452:	681b      	ldr	r3, [r3, #0]
 8004454:	69da      	ldr	r2, [r3, #28]
 8004456:	68bb      	ldr	r3, [r7, #8]
 8004458:	4013      	ands	r3, r2
 800445a:	68ba      	ldr	r2, [r7, #8]
 800445c:	429a      	cmp	r2, r3
 800445e:	bf0c      	ite	eq
 8004460:	2301      	moveq	r3, #1
 8004462:	2300      	movne	r3, #0
 8004464:	b2db      	uxtb	r3, r3
 8004466:	461a      	mov	r2, r3
 8004468:	79fb      	ldrb	r3, [r7, #7]
 800446a:	429a      	cmp	r2, r3
 800446c:	f43f af4a 	beq.w	8004304 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004470:	2300      	movs	r3, #0
}
 8004472:	4618      	mov	r0, r3
 8004474:	3770      	adds	r7, #112	; 0x70
 8004476:	46bd      	mov	sp, r7
 8004478:	bd80      	pop	{r7, pc}
	...

0800447c <__errno>:
 800447c:	4b01      	ldr	r3, [pc, #4]	; (8004484 <__errno+0x8>)
 800447e:	6818      	ldr	r0, [r3, #0]
 8004480:	4770      	bx	lr
 8004482:	bf00      	nop
 8004484:	2000000c 	.word	0x2000000c

08004488 <__libc_init_array>:
 8004488:	b570      	push	{r4, r5, r6, lr}
 800448a:	4d0d      	ldr	r5, [pc, #52]	; (80044c0 <__libc_init_array+0x38>)
 800448c:	4c0d      	ldr	r4, [pc, #52]	; (80044c4 <__libc_init_array+0x3c>)
 800448e:	1b64      	subs	r4, r4, r5
 8004490:	10a4      	asrs	r4, r4, #2
 8004492:	2600      	movs	r6, #0
 8004494:	42a6      	cmp	r6, r4
 8004496:	d109      	bne.n	80044ac <__libc_init_array+0x24>
 8004498:	4d0b      	ldr	r5, [pc, #44]	; (80044c8 <__libc_init_array+0x40>)
 800449a:	4c0c      	ldr	r4, [pc, #48]	; (80044cc <__libc_init_array+0x44>)
 800449c:	f000 fc4e 	bl	8004d3c <_init>
 80044a0:	1b64      	subs	r4, r4, r5
 80044a2:	10a4      	asrs	r4, r4, #2
 80044a4:	2600      	movs	r6, #0
 80044a6:	42a6      	cmp	r6, r4
 80044a8:	d105      	bne.n	80044b6 <__libc_init_array+0x2e>
 80044aa:	bd70      	pop	{r4, r5, r6, pc}
 80044ac:	f855 3b04 	ldr.w	r3, [r5], #4
 80044b0:	4798      	blx	r3
 80044b2:	3601      	adds	r6, #1
 80044b4:	e7ee      	b.n	8004494 <__libc_init_array+0xc>
 80044b6:	f855 3b04 	ldr.w	r3, [r5], #4
 80044ba:	4798      	blx	r3
 80044bc:	3601      	adds	r6, #1
 80044be:	e7f2      	b.n	80044a6 <__libc_init_array+0x1e>
 80044c0:	08004dfc 	.word	0x08004dfc
 80044c4:	08004dfc 	.word	0x08004dfc
 80044c8:	08004dfc 	.word	0x08004dfc
 80044cc:	08004e00 	.word	0x08004e00

080044d0 <memset>:
 80044d0:	4402      	add	r2, r0
 80044d2:	4603      	mov	r3, r0
 80044d4:	4293      	cmp	r3, r2
 80044d6:	d100      	bne.n	80044da <memset+0xa>
 80044d8:	4770      	bx	lr
 80044da:	f803 1b01 	strb.w	r1, [r3], #1
 80044de:	e7f9      	b.n	80044d4 <memset+0x4>

080044e0 <siprintf>:
 80044e0:	b40e      	push	{r1, r2, r3}
 80044e2:	b500      	push	{lr}
 80044e4:	b09c      	sub	sp, #112	; 0x70
 80044e6:	ab1d      	add	r3, sp, #116	; 0x74
 80044e8:	9002      	str	r0, [sp, #8]
 80044ea:	9006      	str	r0, [sp, #24]
 80044ec:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80044f0:	4809      	ldr	r0, [pc, #36]	; (8004518 <siprintf+0x38>)
 80044f2:	9107      	str	r1, [sp, #28]
 80044f4:	9104      	str	r1, [sp, #16]
 80044f6:	4909      	ldr	r1, [pc, #36]	; (800451c <siprintf+0x3c>)
 80044f8:	f853 2b04 	ldr.w	r2, [r3], #4
 80044fc:	9105      	str	r1, [sp, #20]
 80044fe:	6800      	ldr	r0, [r0, #0]
 8004500:	9301      	str	r3, [sp, #4]
 8004502:	a902      	add	r1, sp, #8
 8004504:	f000 f868 	bl	80045d8 <_svfiprintf_r>
 8004508:	9b02      	ldr	r3, [sp, #8]
 800450a:	2200      	movs	r2, #0
 800450c:	701a      	strb	r2, [r3, #0]
 800450e:	b01c      	add	sp, #112	; 0x70
 8004510:	f85d eb04 	ldr.w	lr, [sp], #4
 8004514:	b003      	add	sp, #12
 8004516:	4770      	bx	lr
 8004518:	2000000c 	.word	0x2000000c
 800451c:	ffff0208 	.word	0xffff0208

08004520 <__ssputs_r>:
 8004520:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004524:	688e      	ldr	r6, [r1, #8]
 8004526:	429e      	cmp	r6, r3
 8004528:	4682      	mov	sl, r0
 800452a:	460c      	mov	r4, r1
 800452c:	4690      	mov	r8, r2
 800452e:	461f      	mov	r7, r3
 8004530:	d838      	bhi.n	80045a4 <__ssputs_r+0x84>
 8004532:	898a      	ldrh	r2, [r1, #12]
 8004534:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8004538:	d032      	beq.n	80045a0 <__ssputs_r+0x80>
 800453a:	6825      	ldr	r5, [r4, #0]
 800453c:	6909      	ldr	r1, [r1, #16]
 800453e:	eba5 0901 	sub.w	r9, r5, r1
 8004542:	6965      	ldr	r5, [r4, #20]
 8004544:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8004548:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800454c:	3301      	adds	r3, #1
 800454e:	444b      	add	r3, r9
 8004550:	106d      	asrs	r5, r5, #1
 8004552:	429d      	cmp	r5, r3
 8004554:	bf38      	it	cc
 8004556:	461d      	movcc	r5, r3
 8004558:	0553      	lsls	r3, r2, #21
 800455a:	d531      	bpl.n	80045c0 <__ssputs_r+0xa0>
 800455c:	4629      	mov	r1, r5
 800455e:	f000 fb47 	bl	8004bf0 <_malloc_r>
 8004562:	4606      	mov	r6, r0
 8004564:	b950      	cbnz	r0, 800457c <__ssputs_r+0x5c>
 8004566:	230c      	movs	r3, #12
 8004568:	f8ca 3000 	str.w	r3, [sl]
 800456c:	89a3      	ldrh	r3, [r4, #12]
 800456e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004572:	81a3      	strh	r3, [r4, #12]
 8004574:	f04f 30ff 	mov.w	r0, #4294967295
 8004578:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800457c:	6921      	ldr	r1, [r4, #16]
 800457e:	464a      	mov	r2, r9
 8004580:	f000 fabe 	bl	8004b00 <memcpy>
 8004584:	89a3      	ldrh	r3, [r4, #12]
 8004586:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800458a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800458e:	81a3      	strh	r3, [r4, #12]
 8004590:	6126      	str	r6, [r4, #16]
 8004592:	6165      	str	r5, [r4, #20]
 8004594:	444e      	add	r6, r9
 8004596:	eba5 0509 	sub.w	r5, r5, r9
 800459a:	6026      	str	r6, [r4, #0]
 800459c:	60a5      	str	r5, [r4, #8]
 800459e:	463e      	mov	r6, r7
 80045a0:	42be      	cmp	r6, r7
 80045a2:	d900      	bls.n	80045a6 <__ssputs_r+0x86>
 80045a4:	463e      	mov	r6, r7
 80045a6:	4632      	mov	r2, r6
 80045a8:	6820      	ldr	r0, [r4, #0]
 80045aa:	4641      	mov	r1, r8
 80045ac:	f000 fab6 	bl	8004b1c <memmove>
 80045b0:	68a3      	ldr	r3, [r4, #8]
 80045b2:	6822      	ldr	r2, [r4, #0]
 80045b4:	1b9b      	subs	r3, r3, r6
 80045b6:	4432      	add	r2, r6
 80045b8:	60a3      	str	r3, [r4, #8]
 80045ba:	6022      	str	r2, [r4, #0]
 80045bc:	2000      	movs	r0, #0
 80045be:	e7db      	b.n	8004578 <__ssputs_r+0x58>
 80045c0:	462a      	mov	r2, r5
 80045c2:	f000 fb6f 	bl	8004ca4 <_realloc_r>
 80045c6:	4606      	mov	r6, r0
 80045c8:	2800      	cmp	r0, #0
 80045ca:	d1e1      	bne.n	8004590 <__ssputs_r+0x70>
 80045cc:	6921      	ldr	r1, [r4, #16]
 80045ce:	4650      	mov	r0, sl
 80045d0:	f000 fabe 	bl	8004b50 <_free_r>
 80045d4:	e7c7      	b.n	8004566 <__ssputs_r+0x46>
	...

080045d8 <_svfiprintf_r>:
 80045d8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80045dc:	4698      	mov	r8, r3
 80045de:	898b      	ldrh	r3, [r1, #12]
 80045e0:	061b      	lsls	r3, r3, #24
 80045e2:	b09d      	sub	sp, #116	; 0x74
 80045e4:	4607      	mov	r7, r0
 80045e6:	460d      	mov	r5, r1
 80045e8:	4614      	mov	r4, r2
 80045ea:	d50e      	bpl.n	800460a <_svfiprintf_r+0x32>
 80045ec:	690b      	ldr	r3, [r1, #16]
 80045ee:	b963      	cbnz	r3, 800460a <_svfiprintf_r+0x32>
 80045f0:	2140      	movs	r1, #64	; 0x40
 80045f2:	f000 fafd 	bl	8004bf0 <_malloc_r>
 80045f6:	6028      	str	r0, [r5, #0]
 80045f8:	6128      	str	r0, [r5, #16]
 80045fa:	b920      	cbnz	r0, 8004606 <_svfiprintf_r+0x2e>
 80045fc:	230c      	movs	r3, #12
 80045fe:	603b      	str	r3, [r7, #0]
 8004600:	f04f 30ff 	mov.w	r0, #4294967295
 8004604:	e0d1      	b.n	80047aa <_svfiprintf_r+0x1d2>
 8004606:	2340      	movs	r3, #64	; 0x40
 8004608:	616b      	str	r3, [r5, #20]
 800460a:	2300      	movs	r3, #0
 800460c:	9309      	str	r3, [sp, #36]	; 0x24
 800460e:	2320      	movs	r3, #32
 8004610:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8004614:	f8cd 800c 	str.w	r8, [sp, #12]
 8004618:	2330      	movs	r3, #48	; 0x30
 800461a:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 80047c4 <_svfiprintf_r+0x1ec>
 800461e:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8004622:	f04f 0901 	mov.w	r9, #1
 8004626:	4623      	mov	r3, r4
 8004628:	469a      	mov	sl, r3
 800462a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800462e:	b10a      	cbz	r2, 8004634 <_svfiprintf_r+0x5c>
 8004630:	2a25      	cmp	r2, #37	; 0x25
 8004632:	d1f9      	bne.n	8004628 <_svfiprintf_r+0x50>
 8004634:	ebba 0b04 	subs.w	fp, sl, r4
 8004638:	d00b      	beq.n	8004652 <_svfiprintf_r+0x7a>
 800463a:	465b      	mov	r3, fp
 800463c:	4622      	mov	r2, r4
 800463e:	4629      	mov	r1, r5
 8004640:	4638      	mov	r0, r7
 8004642:	f7ff ff6d 	bl	8004520 <__ssputs_r>
 8004646:	3001      	adds	r0, #1
 8004648:	f000 80aa 	beq.w	80047a0 <_svfiprintf_r+0x1c8>
 800464c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800464e:	445a      	add	r2, fp
 8004650:	9209      	str	r2, [sp, #36]	; 0x24
 8004652:	f89a 3000 	ldrb.w	r3, [sl]
 8004656:	2b00      	cmp	r3, #0
 8004658:	f000 80a2 	beq.w	80047a0 <_svfiprintf_r+0x1c8>
 800465c:	2300      	movs	r3, #0
 800465e:	f04f 32ff 	mov.w	r2, #4294967295
 8004662:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8004666:	f10a 0a01 	add.w	sl, sl, #1
 800466a:	9304      	str	r3, [sp, #16]
 800466c:	9307      	str	r3, [sp, #28]
 800466e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8004672:	931a      	str	r3, [sp, #104]	; 0x68
 8004674:	4654      	mov	r4, sl
 8004676:	2205      	movs	r2, #5
 8004678:	f814 1b01 	ldrb.w	r1, [r4], #1
 800467c:	4851      	ldr	r0, [pc, #324]	; (80047c4 <_svfiprintf_r+0x1ec>)
 800467e:	f7fb fdaf 	bl	80001e0 <memchr>
 8004682:	9a04      	ldr	r2, [sp, #16]
 8004684:	b9d8      	cbnz	r0, 80046be <_svfiprintf_r+0xe6>
 8004686:	06d0      	lsls	r0, r2, #27
 8004688:	bf44      	itt	mi
 800468a:	2320      	movmi	r3, #32
 800468c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8004690:	0711      	lsls	r1, r2, #28
 8004692:	bf44      	itt	mi
 8004694:	232b      	movmi	r3, #43	; 0x2b
 8004696:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800469a:	f89a 3000 	ldrb.w	r3, [sl]
 800469e:	2b2a      	cmp	r3, #42	; 0x2a
 80046a0:	d015      	beq.n	80046ce <_svfiprintf_r+0xf6>
 80046a2:	9a07      	ldr	r2, [sp, #28]
 80046a4:	4654      	mov	r4, sl
 80046a6:	2000      	movs	r0, #0
 80046a8:	f04f 0c0a 	mov.w	ip, #10
 80046ac:	4621      	mov	r1, r4
 80046ae:	f811 3b01 	ldrb.w	r3, [r1], #1
 80046b2:	3b30      	subs	r3, #48	; 0x30
 80046b4:	2b09      	cmp	r3, #9
 80046b6:	d94e      	bls.n	8004756 <_svfiprintf_r+0x17e>
 80046b8:	b1b0      	cbz	r0, 80046e8 <_svfiprintf_r+0x110>
 80046ba:	9207      	str	r2, [sp, #28]
 80046bc:	e014      	b.n	80046e8 <_svfiprintf_r+0x110>
 80046be:	eba0 0308 	sub.w	r3, r0, r8
 80046c2:	fa09 f303 	lsl.w	r3, r9, r3
 80046c6:	4313      	orrs	r3, r2
 80046c8:	9304      	str	r3, [sp, #16]
 80046ca:	46a2      	mov	sl, r4
 80046cc:	e7d2      	b.n	8004674 <_svfiprintf_r+0x9c>
 80046ce:	9b03      	ldr	r3, [sp, #12]
 80046d0:	1d19      	adds	r1, r3, #4
 80046d2:	681b      	ldr	r3, [r3, #0]
 80046d4:	9103      	str	r1, [sp, #12]
 80046d6:	2b00      	cmp	r3, #0
 80046d8:	bfbb      	ittet	lt
 80046da:	425b      	neglt	r3, r3
 80046dc:	f042 0202 	orrlt.w	r2, r2, #2
 80046e0:	9307      	strge	r3, [sp, #28]
 80046e2:	9307      	strlt	r3, [sp, #28]
 80046e4:	bfb8      	it	lt
 80046e6:	9204      	strlt	r2, [sp, #16]
 80046e8:	7823      	ldrb	r3, [r4, #0]
 80046ea:	2b2e      	cmp	r3, #46	; 0x2e
 80046ec:	d10c      	bne.n	8004708 <_svfiprintf_r+0x130>
 80046ee:	7863      	ldrb	r3, [r4, #1]
 80046f0:	2b2a      	cmp	r3, #42	; 0x2a
 80046f2:	d135      	bne.n	8004760 <_svfiprintf_r+0x188>
 80046f4:	9b03      	ldr	r3, [sp, #12]
 80046f6:	1d1a      	adds	r2, r3, #4
 80046f8:	681b      	ldr	r3, [r3, #0]
 80046fa:	9203      	str	r2, [sp, #12]
 80046fc:	2b00      	cmp	r3, #0
 80046fe:	bfb8      	it	lt
 8004700:	f04f 33ff 	movlt.w	r3, #4294967295
 8004704:	3402      	adds	r4, #2
 8004706:	9305      	str	r3, [sp, #20]
 8004708:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 80047d4 <_svfiprintf_r+0x1fc>
 800470c:	7821      	ldrb	r1, [r4, #0]
 800470e:	2203      	movs	r2, #3
 8004710:	4650      	mov	r0, sl
 8004712:	f7fb fd65 	bl	80001e0 <memchr>
 8004716:	b140      	cbz	r0, 800472a <_svfiprintf_r+0x152>
 8004718:	2340      	movs	r3, #64	; 0x40
 800471a:	eba0 000a 	sub.w	r0, r0, sl
 800471e:	fa03 f000 	lsl.w	r0, r3, r0
 8004722:	9b04      	ldr	r3, [sp, #16]
 8004724:	4303      	orrs	r3, r0
 8004726:	3401      	adds	r4, #1
 8004728:	9304      	str	r3, [sp, #16]
 800472a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800472e:	4826      	ldr	r0, [pc, #152]	; (80047c8 <_svfiprintf_r+0x1f0>)
 8004730:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8004734:	2206      	movs	r2, #6
 8004736:	f7fb fd53 	bl	80001e0 <memchr>
 800473a:	2800      	cmp	r0, #0
 800473c:	d038      	beq.n	80047b0 <_svfiprintf_r+0x1d8>
 800473e:	4b23      	ldr	r3, [pc, #140]	; (80047cc <_svfiprintf_r+0x1f4>)
 8004740:	bb1b      	cbnz	r3, 800478a <_svfiprintf_r+0x1b2>
 8004742:	9b03      	ldr	r3, [sp, #12]
 8004744:	3307      	adds	r3, #7
 8004746:	f023 0307 	bic.w	r3, r3, #7
 800474a:	3308      	adds	r3, #8
 800474c:	9303      	str	r3, [sp, #12]
 800474e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004750:	4433      	add	r3, r6
 8004752:	9309      	str	r3, [sp, #36]	; 0x24
 8004754:	e767      	b.n	8004626 <_svfiprintf_r+0x4e>
 8004756:	fb0c 3202 	mla	r2, ip, r2, r3
 800475a:	460c      	mov	r4, r1
 800475c:	2001      	movs	r0, #1
 800475e:	e7a5      	b.n	80046ac <_svfiprintf_r+0xd4>
 8004760:	2300      	movs	r3, #0
 8004762:	3401      	adds	r4, #1
 8004764:	9305      	str	r3, [sp, #20]
 8004766:	4619      	mov	r1, r3
 8004768:	f04f 0c0a 	mov.w	ip, #10
 800476c:	4620      	mov	r0, r4
 800476e:	f810 2b01 	ldrb.w	r2, [r0], #1
 8004772:	3a30      	subs	r2, #48	; 0x30
 8004774:	2a09      	cmp	r2, #9
 8004776:	d903      	bls.n	8004780 <_svfiprintf_r+0x1a8>
 8004778:	2b00      	cmp	r3, #0
 800477a:	d0c5      	beq.n	8004708 <_svfiprintf_r+0x130>
 800477c:	9105      	str	r1, [sp, #20]
 800477e:	e7c3      	b.n	8004708 <_svfiprintf_r+0x130>
 8004780:	fb0c 2101 	mla	r1, ip, r1, r2
 8004784:	4604      	mov	r4, r0
 8004786:	2301      	movs	r3, #1
 8004788:	e7f0      	b.n	800476c <_svfiprintf_r+0x194>
 800478a:	ab03      	add	r3, sp, #12
 800478c:	9300      	str	r3, [sp, #0]
 800478e:	462a      	mov	r2, r5
 8004790:	4b0f      	ldr	r3, [pc, #60]	; (80047d0 <_svfiprintf_r+0x1f8>)
 8004792:	a904      	add	r1, sp, #16
 8004794:	4638      	mov	r0, r7
 8004796:	f3af 8000 	nop.w
 800479a:	1c42      	adds	r2, r0, #1
 800479c:	4606      	mov	r6, r0
 800479e:	d1d6      	bne.n	800474e <_svfiprintf_r+0x176>
 80047a0:	89ab      	ldrh	r3, [r5, #12]
 80047a2:	065b      	lsls	r3, r3, #25
 80047a4:	f53f af2c 	bmi.w	8004600 <_svfiprintf_r+0x28>
 80047a8:	9809      	ldr	r0, [sp, #36]	; 0x24
 80047aa:	b01d      	add	sp, #116	; 0x74
 80047ac:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80047b0:	ab03      	add	r3, sp, #12
 80047b2:	9300      	str	r3, [sp, #0]
 80047b4:	462a      	mov	r2, r5
 80047b6:	4b06      	ldr	r3, [pc, #24]	; (80047d0 <_svfiprintf_r+0x1f8>)
 80047b8:	a904      	add	r1, sp, #16
 80047ba:	4638      	mov	r0, r7
 80047bc:	f000 f87a 	bl	80048b4 <_printf_i>
 80047c0:	e7eb      	b.n	800479a <_svfiprintf_r+0x1c2>
 80047c2:	bf00      	nop
 80047c4:	08004dc0 	.word	0x08004dc0
 80047c8:	08004dca 	.word	0x08004dca
 80047cc:	00000000 	.word	0x00000000
 80047d0:	08004521 	.word	0x08004521
 80047d4:	08004dc6 	.word	0x08004dc6

080047d8 <_printf_common>:
 80047d8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80047dc:	4616      	mov	r6, r2
 80047de:	4699      	mov	r9, r3
 80047e0:	688a      	ldr	r2, [r1, #8]
 80047e2:	690b      	ldr	r3, [r1, #16]
 80047e4:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80047e8:	4293      	cmp	r3, r2
 80047ea:	bfb8      	it	lt
 80047ec:	4613      	movlt	r3, r2
 80047ee:	6033      	str	r3, [r6, #0]
 80047f0:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80047f4:	4607      	mov	r7, r0
 80047f6:	460c      	mov	r4, r1
 80047f8:	b10a      	cbz	r2, 80047fe <_printf_common+0x26>
 80047fa:	3301      	adds	r3, #1
 80047fc:	6033      	str	r3, [r6, #0]
 80047fe:	6823      	ldr	r3, [r4, #0]
 8004800:	0699      	lsls	r1, r3, #26
 8004802:	bf42      	ittt	mi
 8004804:	6833      	ldrmi	r3, [r6, #0]
 8004806:	3302      	addmi	r3, #2
 8004808:	6033      	strmi	r3, [r6, #0]
 800480a:	6825      	ldr	r5, [r4, #0]
 800480c:	f015 0506 	ands.w	r5, r5, #6
 8004810:	d106      	bne.n	8004820 <_printf_common+0x48>
 8004812:	f104 0a19 	add.w	sl, r4, #25
 8004816:	68e3      	ldr	r3, [r4, #12]
 8004818:	6832      	ldr	r2, [r6, #0]
 800481a:	1a9b      	subs	r3, r3, r2
 800481c:	42ab      	cmp	r3, r5
 800481e:	dc26      	bgt.n	800486e <_printf_common+0x96>
 8004820:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8004824:	1e13      	subs	r3, r2, #0
 8004826:	6822      	ldr	r2, [r4, #0]
 8004828:	bf18      	it	ne
 800482a:	2301      	movne	r3, #1
 800482c:	0692      	lsls	r2, r2, #26
 800482e:	d42b      	bmi.n	8004888 <_printf_common+0xb0>
 8004830:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8004834:	4649      	mov	r1, r9
 8004836:	4638      	mov	r0, r7
 8004838:	47c0      	blx	r8
 800483a:	3001      	adds	r0, #1
 800483c:	d01e      	beq.n	800487c <_printf_common+0xa4>
 800483e:	6823      	ldr	r3, [r4, #0]
 8004840:	68e5      	ldr	r5, [r4, #12]
 8004842:	6832      	ldr	r2, [r6, #0]
 8004844:	f003 0306 	and.w	r3, r3, #6
 8004848:	2b04      	cmp	r3, #4
 800484a:	bf08      	it	eq
 800484c:	1aad      	subeq	r5, r5, r2
 800484e:	68a3      	ldr	r3, [r4, #8]
 8004850:	6922      	ldr	r2, [r4, #16]
 8004852:	bf0c      	ite	eq
 8004854:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8004858:	2500      	movne	r5, #0
 800485a:	4293      	cmp	r3, r2
 800485c:	bfc4      	itt	gt
 800485e:	1a9b      	subgt	r3, r3, r2
 8004860:	18ed      	addgt	r5, r5, r3
 8004862:	2600      	movs	r6, #0
 8004864:	341a      	adds	r4, #26
 8004866:	42b5      	cmp	r5, r6
 8004868:	d11a      	bne.n	80048a0 <_printf_common+0xc8>
 800486a:	2000      	movs	r0, #0
 800486c:	e008      	b.n	8004880 <_printf_common+0xa8>
 800486e:	2301      	movs	r3, #1
 8004870:	4652      	mov	r2, sl
 8004872:	4649      	mov	r1, r9
 8004874:	4638      	mov	r0, r7
 8004876:	47c0      	blx	r8
 8004878:	3001      	adds	r0, #1
 800487a:	d103      	bne.n	8004884 <_printf_common+0xac>
 800487c:	f04f 30ff 	mov.w	r0, #4294967295
 8004880:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004884:	3501      	adds	r5, #1
 8004886:	e7c6      	b.n	8004816 <_printf_common+0x3e>
 8004888:	18e1      	adds	r1, r4, r3
 800488a:	1c5a      	adds	r2, r3, #1
 800488c:	2030      	movs	r0, #48	; 0x30
 800488e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8004892:	4422      	add	r2, r4
 8004894:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8004898:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800489c:	3302      	adds	r3, #2
 800489e:	e7c7      	b.n	8004830 <_printf_common+0x58>
 80048a0:	2301      	movs	r3, #1
 80048a2:	4622      	mov	r2, r4
 80048a4:	4649      	mov	r1, r9
 80048a6:	4638      	mov	r0, r7
 80048a8:	47c0      	blx	r8
 80048aa:	3001      	adds	r0, #1
 80048ac:	d0e6      	beq.n	800487c <_printf_common+0xa4>
 80048ae:	3601      	adds	r6, #1
 80048b0:	e7d9      	b.n	8004866 <_printf_common+0x8e>
	...

080048b4 <_printf_i>:
 80048b4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80048b8:	460c      	mov	r4, r1
 80048ba:	4691      	mov	r9, r2
 80048bc:	7e27      	ldrb	r7, [r4, #24]
 80048be:	990c      	ldr	r1, [sp, #48]	; 0x30
 80048c0:	2f78      	cmp	r7, #120	; 0x78
 80048c2:	4680      	mov	r8, r0
 80048c4:	469a      	mov	sl, r3
 80048c6:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80048ca:	d807      	bhi.n	80048dc <_printf_i+0x28>
 80048cc:	2f62      	cmp	r7, #98	; 0x62
 80048ce:	d80a      	bhi.n	80048e6 <_printf_i+0x32>
 80048d0:	2f00      	cmp	r7, #0
 80048d2:	f000 80d8 	beq.w	8004a86 <_printf_i+0x1d2>
 80048d6:	2f58      	cmp	r7, #88	; 0x58
 80048d8:	f000 80a3 	beq.w	8004a22 <_printf_i+0x16e>
 80048dc:	f104 0642 	add.w	r6, r4, #66	; 0x42
 80048e0:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80048e4:	e03a      	b.n	800495c <_printf_i+0xa8>
 80048e6:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80048ea:	2b15      	cmp	r3, #21
 80048ec:	d8f6      	bhi.n	80048dc <_printf_i+0x28>
 80048ee:	a001      	add	r0, pc, #4	; (adr r0, 80048f4 <_printf_i+0x40>)
 80048f0:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 80048f4:	0800494d 	.word	0x0800494d
 80048f8:	08004961 	.word	0x08004961
 80048fc:	080048dd 	.word	0x080048dd
 8004900:	080048dd 	.word	0x080048dd
 8004904:	080048dd 	.word	0x080048dd
 8004908:	080048dd 	.word	0x080048dd
 800490c:	08004961 	.word	0x08004961
 8004910:	080048dd 	.word	0x080048dd
 8004914:	080048dd 	.word	0x080048dd
 8004918:	080048dd 	.word	0x080048dd
 800491c:	080048dd 	.word	0x080048dd
 8004920:	08004a6d 	.word	0x08004a6d
 8004924:	08004991 	.word	0x08004991
 8004928:	08004a4f 	.word	0x08004a4f
 800492c:	080048dd 	.word	0x080048dd
 8004930:	080048dd 	.word	0x080048dd
 8004934:	08004a8f 	.word	0x08004a8f
 8004938:	080048dd 	.word	0x080048dd
 800493c:	08004991 	.word	0x08004991
 8004940:	080048dd 	.word	0x080048dd
 8004944:	080048dd 	.word	0x080048dd
 8004948:	08004a57 	.word	0x08004a57
 800494c:	680b      	ldr	r3, [r1, #0]
 800494e:	1d1a      	adds	r2, r3, #4
 8004950:	681b      	ldr	r3, [r3, #0]
 8004952:	600a      	str	r2, [r1, #0]
 8004954:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8004958:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800495c:	2301      	movs	r3, #1
 800495e:	e0a3      	b.n	8004aa8 <_printf_i+0x1f4>
 8004960:	6825      	ldr	r5, [r4, #0]
 8004962:	6808      	ldr	r0, [r1, #0]
 8004964:	062e      	lsls	r6, r5, #24
 8004966:	f100 0304 	add.w	r3, r0, #4
 800496a:	d50a      	bpl.n	8004982 <_printf_i+0xce>
 800496c:	6805      	ldr	r5, [r0, #0]
 800496e:	600b      	str	r3, [r1, #0]
 8004970:	2d00      	cmp	r5, #0
 8004972:	da03      	bge.n	800497c <_printf_i+0xc8>
 8004974:	232d      	movs	r3, #45	; 0x2d
 8004976:	426d      	negs	r5, r5
 8004978:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800497c:	485e      	ldr	r0, [pc, #376]	; (8004af8 <_printf_i+0x244>)
 800497e:	230a      	movs	r3, #10
 8004980:	e019      	b.n	80049b6 <_printf_i+0x102>
 8004982:	f015 0f40 	tst.w	r5, #64	; 0x40
 8004986:	6805      	ldr	r5, [r0, #0]
 8004988:	600b      	str	r3, [r1, #0]
 800498a:	bf18      	it	ne
 800498c:	b22d      	sxthne	r5, r5
 800498e:	e7ef      	b.n	8004970 <_printf_i+0xbc>
 8004990:	680b      	ldr	r3, [r1, #0]
 8004992:	6825      	ldr	r5, [r4, #0]
 8004994:	1d18      	adds	r0, r3, #4
 8004996:	6008      	str	r0, [r1, #0]
 8004998:	0628      	lsls	r0, r5, #24
 800499a:	d501      	bpl.n	80049a0 <_printf_i+0xec>
 800499c:	681d      	ldr	r5, [r3, #0]
 800499e:	e002      	b.n	80049a6 <_printf_i+0xf2>
 80049a0:	0669      	lsls	r1, r5, #25
 80049a2:	d5fb      	bpl.n	800499c <_printf_i+0xe8>
 80049a4:	881d      	ldrh	r5, [r3, #0]
 80049a6:	4854      	ldr	r0, [pc, #336]	; (8004af8 <_printf_i+0x244>)
 80049a8:	2f6f      	cmp	r7, #111	; 0x6f
 80049aa:	bf0c      	ite	eq
 80049ac:	2308      	moveq	r3, #8
 80049ae:	230a      	movne	r3, #10
 80049b0:	2100      	movs	r1, #0
 80049b2:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80049b6:	6866      	ldr	r6, [r4, #4]
 80049b8:	60a6      	str	r6, [r4, #8]
 80049ba:	2e00      	cmp	r6, #0
 80049bc:	bfa2      	ittt	ge
 80049be:	6821      	ldrge	r1, [r4, #0]
 80049c0:	f021 0104 	bicge.w	r1, r1, #4
 80049c4:	6021      	strge	r1, [r4, #0]
 80049c6:	b90d      	cbnz	r5, 80049cc <_printf_i+0x118>
 80049c8:	2e00      	cmp	r6, #0
 80049ca:	d04d      	beq.n	8004a68 <_printf_i+0x1b4>
 80049cc:	4616      	mov	r6, r2
 80049ce:	fbb5 f1f3 	udiv	r1, r5, r3
 80049d2:	fb03 5711 	mls	r7, r3, r1, r5
 80049d6:	5dc7      	ldrb	r7, [r0, r7]
 80049d8:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80049dc:	462f      	mov	r7, r5
 80049de:	42bb      	cmp	r3, r7
 80049e0:	460d      	mov	r5, r1
 80049e2:	d9f4      	bls.n	80049ce <_printf_i+0x11a>
 80049e4:	2b08      	cmp	r3, #8
 80049e6:	d10b      	bne.n	8004a00 <_printf_i+0x14c>
 80049e8:	6823      	ldr	r3, [r4, #0]
 80049ea:	07df      	lsls	r7, r3, #31
 80049ec:	d508      	bpl.n	8004a00 <_printf_i+0x14c>
 80049ee:	6923      	ldr	r3, [r4, #16]
 80049f0:	6861      	ldr	r1, [r4, #4]
 80049f2:	4299      	cmp	r1, r3
 80049f4:	bfde      	ittt	le
 80049f6:	2330      	movle	r3, #48	; 0x30
 80049f8:	f806 3c01 	strble.w	r3, [r6, #-1]
 80049fc:	f106 36ff 	addle.w	r6, r6, #4294967295
 8004a00:	1b92      	subs	r2, r2, r6
 8004a02:	6122      	str	r2, [r4, #16]
 8004a04:	f8cd a000 	str.w	sl, [sp]
 8004a08:	464b      	mov	r3, r9
 8004a0a:	aa03      	add	r2, sp, #12
 8004a0c:	4621      	mov	r1, r4
 8004a0e:	4640      	mov	r0, r8
 8004a10:	f7ff fee2 	bl	80047d8 <_printf_common>
 8004a14:	3001      	adds	r0, #1
 8004a16:	d14c      	bne.n	8004ab2 <_printf_i+0x1fe>
 8004a18:	f04f 30ff 	mov.w	r0, #4294967295
 8004a1c:	b004      	add	sp, #16
 8004a1e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004a22:	4835      	ldr	r0, [pc, #212]	; (8004af8 <_printf_i+0x244>)
 8004a24:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8004a28:	6823      	ldr	r3, [r4, #0]
 8004a2a:	680e      	ldr	r6, [r1, #0]
 8004a2c:	061f      	lsls	r7, r3, #24
 8004a2e:	f856 5b04 	ldr.w	r5, [r6], #4
 8004a32:	600e      	str	r6, [r1, #0]
 8004a34:	d514      	bpl.n	8004a60 <_printf_i+0x1ac>
 8004a36:	07d9      	lsls	r1, r3, #31
 8004a38:	bf44      	itt	mi
 8004a3a:	f043 0320 	orrmi.w	r3, r3, #32
 8004a3e:	6023      	strmi	r3, [r4, #0]
 8004a40:	b91d      	cbnz	r5, 8004a4a <_printf_i+0x196>
 8004a42:	6823      	ldr	r3, [r4, #0]
 8004a44:	f023 0320 	bic.w	r3, r3, #32
 8004a48:	6023      	str	r3, [r4, #0]
 8004a4a:	2310      	movs	r3, #16
 8004a4c:	e7b0      	b.n	80049b0 <_printf_i+0xfc>
 8004a4e:	6823      	ldr	r3, [r4, #0]
 8004a50:	f043 0320 	orr.w	r3, r3, #32
 8004a54:	6023      	str	r3, [r4, #0]
 8004a56:	2378      	movs	r3, #120	; 0x78
 8004a58:	4828      	ldr	r0, [pc, #160]	; (8004afc <_printf_i+0x248>)
 8004a5a:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8004a5e:	e7e3      	b.n	8004a28 <_printf_i+0x174>
 8004a60:	065e      	lsls	r6, r3, #25
 8004a62:	bf48      	it	mi
 8004a64:	b2ad      	uxthmi	r5, r5
 8004a66:	e7e6      	b.n	8004a36 <_printf_i+0x182>
 8004a68:	4616      	mov	r6, r2
 8004a6a:	e7bb      	b.n	80049e4 <_printf_i+0x130>
 8004a6c:	680b      	ldr	r3, [r1, #0]
 8004a6e:	6826      	ldr	r6, [r4, #0]
 8004a70:	6960      	ldr	r0, [r4, #20]
 8004a72:	1d1d      	adds	r5, r3, #4
 8004a74:	600d      	str	r5, [r1, #0]
 8004a76:	0635      	lsls	r5, r6, #24
 8004a78:	681b      	ldr	r3, [r3, #0]
 8004a7a:	d501      	bpl.n	8004a80 <_printf_i+0x1cc>
 8004a7c:	6018      	str	r0, [r3, #0]
 8004a7e:	e002      	b.n	8004a86 <_printf_i+0x1d2>
 8004a80:	0671      	lsls	r1, r6, #25
 8004a82:	d5fb      	bpl.n	8004a7c <_printf_i+0x1c8>
 8004a84:	8018      	strh	r0, [r3, #0]
 8004a86:	2300      	movs	r3, #0
 8004a88:	6123      	str	r3, [r4, #16]
 8004a8a:	4616      	mov	r6, r2
 8004a8c:	e7ba      	b.n	8004a04 <_printf_i+0x150>
 8004a8e:	680b      	ldr	r3, [r1, #0]
 8004a90:	1d1a      	adds	r2, r3, #4
 8004a92:	600a      	str	r2, [r1, #0]
 8004a94:	681e      	ldr	r6, [r3, #0]
 8004a96:	6862      	ldr	r2, [r4, #4]
 8004a98:	2100      	movs	r1, #0
 8004a9a:	4630      	mov	r0, r6
 8004a9c:	f7fb fba0 	bl	80001e0 <memchr>
 8004aa0:	b108      	cbz	r0, 8004aa6 <_printf_i+0x1f2>
 8004aa2:	1b80      	subs	r0, r0, r6
 8004aa4:	6060      	str	r0, [r4, #4]
 8004aa6:	6863      	ldr	r3, [r4, #4]
 8004aa8:	6123      	str	r3, [r4, #16]
 8004aaa:	2300      	movs	r3, #0
 8004aac:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004ab0:	e7a8      	b.n	8004a04 <_printf_i+0x150>
 8004ab2:	6923      	ldr	r3, [r4, #16]
 8004ab4:	4632      	mov	r2, r6
 8004ab6:	4649      	mov	r1, r9
 8004ab8:	4640      	mov	r0, r8
 8004aba:	47d0      	blx	sl
 8004abc:	3001      	adds	r0, #1
 8004abe:	d0ab      	beq.n	8004a18 <_printf_i+0x164>
 8004ac0:	6823      	ldr	r3, [r4, #0]
 8004ac2:	079b      	lsls	r3, r3, #30
 8004ac4:	d413      	bmi.n	8004aee <_printf_i+0x23a>
 8004ac6:	68e0      	ldr	r0, [r4, #12]
 8004ac8:	9b03      	ldr	r3, [sp, #12]
 8004aca:	4298      	cmp	r0, r3
 8004acc:	bfb8      	it	lt
 8004ace:	4618      	movlt	r0, r3
 8004ad0:	e7a4      	b.n	8004a1c <_printf_i+0x168>
 8004ad2:	2301      	movs	r3, #1
 8004ad4:	4632      	mov	r2, r6
 8004ad6:	4649      	mov	r1, r9
 8004ad8:	4640      	mov	r0, r8
 8004ada:	47d0      	blx	sl
 8004adc:	3001      	adds	r0, #1
 8004ade:	d09b      	beq.n	8004a18 <_printf_i+0x164>
 8004ae0:	3501      	adds	r5, #1
 8004ae2:	68e3      	ldr	r3, [r4, #12]
 8004ae4:	9903      	ldr	r1, [sp, #12]
 8004ae6:	1a5b      	subs	r3, r3, r1
 8004ae8:	42ab      	cmp	r3, r5
 8004aea:	dcf2      	bgt.n	8004ad2 <_printf_i+0x21e>
 8004aec:	e7eb      	b.n	8004ac6 <_printf_i+0x212>
 8004aee:	2500      	movs	r5, #0
 8004af0:	f104 0619 	add.w	r6, r4, #25
 8004af4:	e7f5      	b.n	8004ae2 <_printf_i+0x22e>
 8004af6:	bf00      	nop
 8004af8:	08004dd1 	.word	0x08004dd1
 8004afc:	08004de2 	.word	0x08004de2

08004b00 <memcpy>:
 8004b00:	440a      	add	r2, r1
 8004b02:	4291      	cmp	r1, r2
 8004b04:	f100 33ff 	add.w	r3, r0, #4294967295
 8004b08:	d100      	bne.n	8004b0c <memcpy+0xc>
 8004b0a:	4770      	bx	lr
 8004b0c:	b510      	push	{r4, lr}
 8004b0e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8004b12:	f803 4f01 	strb.w	r4, [r3, #1]!
 8004b16:	4291      	cmp	r1, r2
 8004b18:	d1f9      	bne.n	8004b0e <memcpy+0xe>
 8004b1a:	bd10      	pop	{r4, pc}

08004b1c <memmove>:
 8004b1c:	4288      	cmp	r0, r1
 8004b1e:	b510      	push	{r4, lr}
 8004b20:	eb01 0402 	add.w	r4, r1, r2
 8004b24:	d902      	bls.n	8004b2c <memmove+0x10>
 8004b26:	4284      	cmp	r4, r0
 8004b28:	4623      	mov	r3, r4
 8004b2a:	d807      	bhi.n	8004b3c <memmove+0x20>
 8004b2c:	1e43      	subs	r3, r0, #1
 8004b2e:	42a1      	cmp	r1, r4
 8004b30:	d008      	beq.n	8004b44 <memmove+0x28>
 8004b32:	f811 2b01 	ldrb.w	r2, [r1], #1
 8004b36:	f803 2f01 	strb.w	r2, [r3, #1]!
 8004b3a:	e7f8      	b.n	8004b2e <memmove+0x12>
 8004b3c:	4402      	add	r2, r0
 8004b3e:	4601      	mov	r1, r0
 8004b40:	428a      	cmp	r2, r1
 8004b42:	d100      	bne.n	8004b46 <memmove+0x2a>
 8004b44:	bd10      	pop	{r4, pc}
 8004b46:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8004b4a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8004b4e:	e7f7      	b.n	8004b40 <memmove+0x24>

08004b50 <_free_r>:
 8004b50:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8004b52:	2900      	cmp	r1, #0
 8004b54:	d048      	beq.n	8004be8 <_free_r+0x98>
 8004b56:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004b5a:	9001      	str	r0, [sp, #4]
 8004b5c:	2b00      	cmp	r3, #0
 8004b5e:	f1a1 0404 	sub.w	r4, r1, #4
 8004b62:	bfb8      	it	lt
 8004b64:	18e4      	addlt	r4, r4, r3
 8004b66:	f000 f8d3 	bl	8004d10 <__malloc_lock>
 8004b6a:	4a20      	ldr	r2, [pc, #128]	; (8004bec <_free_r+0x9c>)
 8004b6c:	9801      	ldr	r0, [sp, #4]
 8004b6e:	6813      	ldr	r3, [r2, #0]
 8004b70:	4615      	mov	r5, r2
 8004b72:	b933      	cbnz	r3, 8004b82 <_free_r+0x32>
 8004b74:	6063      	str	r3, [r4, #4]
 8004b76:	6014      	str	r4, [r2, #0]
 8004b78:	b003      	add	sp, #12
 8004b7a:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8004b7e:	f000 b8cd 	b.w	8004d1c <__malloc_unlock>
 8004b82:	42a3      	cmp	r3, r4
 8004b84:	d90b      	bls.n	8004b9e <_free_r+0x4e>
 8004b86:	6821      	ldr	r1, [r4, #0]
 8004b88:	1862      	adds	r2, r4, r1
 8004b8a:	4293      	cmp	r3, r2
 8004b8c:	bf04      	itt	eq
 8004b8e:	681a      	ldreq	r2, [r3, #0]
 8004b90:	685b      	ldreq	r3, [r3, #4]
 8004b92:	6063      	str	r3, [r4, #4]
 8004b94:	bf04      	itt	eq
 8004b96:	1852      	addeq	r2, r2, r1
 8004b98:	6022      	streq	r2, [r4, #0]
 8004b9a:	602c      	str	r4, [r5, #0]
 8004b9c:	e7ec      	b.n	8004b78 <_free_r+0x28>
 8004b9e:	461a      	mov	r2, r3
 8004ba0:	685b      	ldr	r3, [r3, #4]
 8004ba2:	b10b      	cbz	r3, 8004ba8 <_free_r+0x58>
 8004ba4:	42a3      	cmp	r3, r4
 8004ba6:	d9fa      	bls.n	8004b9e <_free_r+0x4e>
 8004ba8:	6811      	ldr	r1, [r2, #0]
 8004baa:	1855      	adds	r5, r2, r1
 8004bac:	42a5      	cmp	r5, r4
 8004bae:	d10b      	bne.n	8004bc8 <_free_r+0x78>
 8004bb0:	6824      	ldr	r4, [r4, #0]
 8004bb2:	4421      	add	r1, r4
 8004bb4:	1854      	adds	r4, r2, r1
 8004bb6:	42a3      	cmp	r3, r4
 8004bb8:	6011      	str	r1, [r2, #0]
 8004bba:	d1dd      	bne.n	8004b78 <_free_r+0x28>
 8004bbc:	681c      	ldr	r4, [r3, #0]
 8004bbe:	685b      	ldr	r3, [r3, #4]
 8004bc0:	6053      	str	r3, [r2, #4]
 8004bc2:	4421      	add	r1, r4
 8004bc4:	6011      	str	r1, [r2, #0]
 8004bc6:	e7d7      	b.n	8004b78 <_free_r+0x28>
 8004bc8:	d902      	bls.n	8004bd0 <_free_r+0x80>
 8004bca:	230c      	movs	r3, #12
 8004bcc:	6003      	str	r3, [r0, #0]
 8004bce:	e7d3      	b.n	8004b78 <_free_r+0x28>
 8004bd0:	6825      	ldr	r5, [r4, #0]
 8004bd2:	1961      	adds	r1, r4, r5
 8004bd4:	428b      	cmp	r3, r1
 8004bd6:	bf04      	itt	eq
 8004bd8:	6819      	ldreq	r1, [r3, #0]
 8004bda:	685b      	ldreq	r3, [r3, #4]
 8004bdc:	6063      	str	r3, [r4, #4]
 8004bde:	bf04      	itt	eq
 8004be0:	1949      	addeq	r1, r1, r5
 8004be2:	6021      	streq	r1, [r4, #0]
 8004be4:	6054      	str	r4, [r2, #4]
 8004be6:	e7c7      	b.n	8004b78 <_free_r+0x28>
 8004be8:	b003      	add	sp, #12
 8004bea:	bd30      	pop	{r4, r5, pc}
 8004bec:	20000090 	.word	0x20000090

08004bf0 <_malloc_r>:
 8004bf0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004bf2:	1ccd      	adds	r5, r1, #3
 8004bf4:	f025 0503 	bic.w	r5, r5, #3
 8004bf8:	3508      	adds	r5, #8
 8004bfa:	2d0c      	cmp	r5, #12
 8004bfc:	bf38      	it	cc
 8004bfe:	250c      	movcc	r5, #12
 8004c00:	2d00      	cmp	r5, #0
 8004c02:	4606      	mov	r6, r0
 8004c04:	db01      	blt.n	8004c0a <_malloc_r+0x1a>
 8004c06:	42a9      	cmp	r1, r5
 8004c08:	d903      	bls.n	8004c12 <_malloc_r+0x22>
 8004c0a:	230c      	movs	r3, #12
 8004c0c:	6033      	str	r3, [r6, #0]
 8004c0e:	2000      	movs	r0, #0
 8004c10:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004c12:	f000 f87d 	bl	8004d10 <__malloc_lock>
 8004c16:	4921      	ldr	r1, [pc, #132]	; (8004c9c <_malloc_r+0xac>)
 8004c18:	680a      	ldr	r2, [r1, #0]
 8004c1a:	4614      	mov	r4, r2
 8004c1c:	b99c      	cbnz	r4, 8004c46 <_malloc_r+0x56>
 8004c1e:	4f20      	ldr	r7, [pc, #128]	; (8004ca0 <_malloc_r+0xb0>)
 8004c20:	683b      	ldr	r3, [r7, #0]
 8004c22:	b923      	cbnz	r3, 8004c2e <_malloc_r+0x3e>
 8004c24:	4621      	mov	r1, r4
 8004c26:	4630      	mov	r0, r6
 8004c28:	f000 f862 	bl	8004cf0 <_sbrk_r>
 8004c2c:	6038      	str	r0, [r7, #0]
 8004c2e:	4629      	mov	r1, r5
 8004c30:	4630      	mov	r0, r6
 8004c32:	f000 f85d 	bl	8004cf0 <_sbrk_r>
 8004c36:	1c43      	adds	r3, r0, #1
 8004c38:	d123      	bne.n	8004c82 <_malloc_r+0x92>
 8004c3a:	230c      	movs	r3, #12
 8004c3c:	6033      	str	r3, [r6, #0]
 8004c3e:	4630      	mov	r0, r6
 8004c40:	f000 f86c 	bl	8004d1c <__malloc_unlock>
 8004c44:	e7e3      	b.n	8004c0e <_malloc_r+0x1e>
 8004c46:	6823      	ldr	r3, [r4, #0]
 8004c48:	1b5b      	subs	r3, r3, r5
 8004c4a:	d417      	bmi.n	8004c7c <_malloc_r+0x8c>
 8004c4c:	2b0b      	cmp	r3, #11
 8004c4e:	d903      	bls.n	8004c58 <_malloc_r+0x68>
 8004c50:	6023      	str	r3, [r4, #0]
 8004c52:	441c      	add	r4, r3
 8004c54:	6025      	str	r5, [r4, #0]
 8004c56:	e004      	b.n	8004c62 <_malloc_r+0x72>
 8004c58:	6863      	ldr	r3, [r4, #4]
 8004c5a:	42a2      	cmp	r2, r4
 8004c5c:	bf0c      	ite	eq
 8004c5e:	600b      	streq	r3, [r1, #0]
 8004c60:	6053      	strne	r3, [r2, #4]
 8004c62:	4630      	mov	r0, r6
 8004c64:	f000 f85a 	bl	8004d1c <__malloc_unlock>
 8004c68:	f104 000b 	add.w	r0, r4, #11
 8004c6c:	1d23      	adds	r3, r4, #4
 8004c6e:	f020 0007 	bic.w	r0, r0, #7
 8004c72:	1ac2      	subs	r2, r0, r3
 8004c74:	d0cc      	beq.n	8004c10 <_malloc_r+0x20>
 8004c76:	1a1b      	subs	r3, r3, r0
 8004c78:	50a3      	str	r3, [r4, r2]
 8004c7a:	e7c9      	b.n	8004c10 <_malloc_r+0x20>
 8004c7c:	4622      	mov	r2, r4
 8004c7e:	6864      	ldr	r4, [r4, #4]
 8004c80:	e7cc      	b.n	8004c1c <_malloc_r+0x2c>
 8004c82:	1cc4      	adds	r4, r0, #3
 8004c84:	f024 0403 	bic.w	r4, r4, #3
 8004c88:	42a0      	cmp	r0, r4
 8004c8a:	d0e3      	beq.n	8004c54 <_malloc_r+0x64>
 8004c8c:	1a21      	subs	r1, r4, r0
 8004c8e:	4630      	mov	r0, r6
 8004c90:	f000 f82e 	bl	8004cf0 <_sbrk_r>
 8004c94:	3001      	adds	r0, #1
 8004c96:	d1dd      	bne.n	8004c54 <_malloc_r+0x64>
 8004c98:	e7cf      	b.n	8004c3a <_malloc_r+0x4a>
 8004c9a:	bf00      	nop
 8004c9c:	20000090 	.word	0x20000090
 8004ca0:	20000094 	.word	0x20000094

08004ca4 <_realloc_r>:
 8004ca4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004ca6:	4607      	mov	r7, r0
 8004ca8:	4614      	mov	r4, r2
 8004caa:	460e      	mov	r6, r1
 8004cac:	b921      	cbnz	r1, 8004cb8 <_realloc_r+0x14>
 8004cae:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8004cb2:	4611      	mov	r1, r2
 8004cb4:	f7ff bf9c 	b.w	8004bf0 <_malloc_r>
 8004cb8:	b922      	cbnz	r2, 8004cc4 <_realloc_r+0x20>
 8004cba:	f7ff ff49 	bl	8004b50 <_free_r>
 8004cbe:	4625      	mov	r5, r4
 8004cc0:	4628      	mov	r0, r5
 8004cc2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004cc4:	f000 f830 	bl	8004d28 <_malloc_usable_size_r>
 8004cc8:	42a0      	cmp	r0, r4
 8004cca:	d20f      	bcs.n	8004cec <_realloc_r+0x48>
 8004ccc:	4621      	mov	r1, r4
 8004cce:	4638      	mov	r0, r7
 8004cd0:	f7ff ff8e 	bl	8004bf0 <_malloc_r>
 8004cd4:	4605      	mov	r5, r0
 8004cd6:	2800      	cmp	r0, #0
 8004cd8:	d0f2      	beq.n	8004cc0 <_realloc_r+0x1c>
 8004cda:	4631      	mov	r1, r6
 8004cdc:	4622      	mov	r2, r4
 8004cde:	f7ff ff0f 	bl	8004b00 <memcpy>
 8004ce2:	4631      	mov	r1, r6
 8004ce4:	4638      	mov	r0, r7
 8004ce6:	f7ff ff33 	bl	8004b50 <_free_r>
 8004cea:	e7e9      	b.n	8004cc0 <_realloc_r+0x1c>
 8004cec:	4635      	mov	r5, r6
 8004cee:	e7e7      	b.n	8004cc0 <_realloc_r+0x1c>

08004cf0 <_sbrk_r>:
 8004cf0:	b538      	push	{r3, r4, r5, lr}
 8004cf2:	4d06      	ldr	r5, [pc, #24]	; (8004d0c <_sbrk_r+0x1c>)
 8004cf4:	2300      	movs	r3, #0
 8004cf6:	4604      	mov	r4, r0
 8004cf8:	4608      	mov	r0, r1
 8004cfa:	602b      	str	r3, [r5, #0]
 8004cfc:	f7fc fa52 	bl	80011a4 <_sbrk>
 8004d00:	1c43      	adds	r3, r0, #1
 8004d02:	d102      	bne.n	8004d0a <_sbrk_r+0x1a>
 8004d04:	682b      	ldr	r3, [r5, #0]
 8004d06:	b103      	cbz	r3, 8004d0a <_sbrk_r+0x1a>
 8004d08:	6023      	str	r3, [r4, #0]
 8004d0a:	bd38      	pop	{r3, r4, r5, pc}
 8004d0c:	2000016c 	.word	0x2000016c

08004d10 <__malloc_lock>:
 8004d10:	4801      	ldr	r0, [pc, #4]	; (8004d18 <__malloc_lock+0x8>)
 8004d12:	f000 b811 	b.w	8004d38 <__retarget_lock_acquire_recursive>
 8004d16:	bf00      	nop
 8004d18:	20000174 	.word	0x20000174

08004d1c <__malloc_unlock>:
 8004d1c:	4801      	ldr	r0, [pc, #4]	; (8004d24 <__malloc_unlock+0x8>)
 8004d1e:	f000 b80c 	b.w	8004d3a <__retarget_lock_release_recursive>
 8004d22:	bf00      	nop
 8004d24:	20000174 	.word	0x20000174

08004d28 <_malloc_usable_size_r>:
 8004d28:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004d2c:	1f18      	subs	r0, r3, #4
 8004d2e:	2b00      	cmp	r3, #0
 8004d30:	bfbc      	itt	lt
 8004d32:	580b      	ldrlt	r3, [r1, r0]
 8004d34:	18c0      	addlt	r0, r0, r3
 8004d36:	4770      	bx	lr

08004d38 <__retarget_lock_acquire_recursive>:
 8004d38:	4770      	bx	lr

08004d3a <__retarget_lock_release_recursive>:
 8004d3a:	4770      	bx	lr

08004d3c <_init>:
 8004d3c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004d3e:	bf00      	nop
 8004d40:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004d42:	bc08      	pop	{r3}
 8004d44:	469e      	mov	lr, r3
 8004d46:	4770      	bx	lr

08004d48 <_fini>:
 8004d48:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004d4a:	bf00      	nop
 8004d4c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004d4e:	bc08      	pop	{r3}
 8004d50:	469e      	mov	lr, r3
 8004d52:	4770      	bx	lr
