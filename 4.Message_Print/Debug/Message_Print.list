
Message_Print.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003220  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000058  080033a8  080033a8  000133a8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003400  08003400  0002000c  2**0
                  CONTENTS
  4 .ARM          00000008  08003400  08003400  00013400  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08003408  08003408  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003408  08003408  00013408  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800340c  0800340c  0001340c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08003410  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000f0  2000000c  0800341c  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200000fc  0800341c  000200fc  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000f88f  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001bc0  00000000  00000000  0002f8cb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000b88  00000000  00000000  00031490  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000ae0  00000000  00000000  00032018  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00025c91  00000000  00000000  00032af8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000e0ae  00000000  00000000  00058789  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000e9b42  00000000  00000000  00066837  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  00150379  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002f8c  00000000  00000000  001503cc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	2000000c 	.word	0x2000000c
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08003390 	.word	0x08003390

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000010 	.word	0x20000010
 80001c4:	08003390 	.word	0x08003390

080001c8 <strlen>:
 80001c8:	4603      	mov	r3, r0
 80001ca:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001ce:	2a00      	cmp	r2, #0
 80001d0:	d1fb      	bne.n	80001ca <strlen+0x2>
 80001d2:	1a18      	subs	r0, r3, r0
 80001d4:	3801      	subs	r0, #1
 80001d6:	4770      	bx	lr

080001d8 <__aeabi_uldivmod>:
 80001d8:	b953      	cbnz	r3, 80001f0 <__aeabi_uldivmod+0x18>
 80001da:	b94a      	cbnz	r2, 80001f0 <__aeabi_uldivmod+0x18>
 80001dc:	2900      	cmp	r1, #0
 80001de:	bf08      	it	eq
 80001e0:	2800      	cmpeq	r0, #0
 80001e2:	bf1c      	itt	ne
 80001e4:	f04f 31ff 	movne.w	r1, #4294967295
 80001e8:	f04f 30ff 	movne.w	r0, #4294967295
 80001ec:	f000 b96e 	b.w	80004cc <__aeabi_idiv0>
 80001f0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001f4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001f8:	f000 f806 	bl	8000208 <__udivmoddi4>
 80001fc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000200:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000204:	b004      	add	sp, #16
 8000206:	4770      	bx	lr

08000208 <__udivmoddi4>:
 8000208:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800020c:	9d08      	ldr	r5, [sp, #32]
 800020e:	4604      	mov	r4, r0
 8000210:	468c      	mov	ip, r1
 8000212:	2b00      	cmp	r3, #0
 8000214:	f040 8083 	bne.w	800031e <__udivmoddi4+0x116>
 8000218:	428a      	cmp	r2, r1
 800021a:	4617      	mov	r7, r2
 800021c:	d947      	bls.n	80002ae <__udivmoddi4+0xa6>
 800021e:	fab2 f282 	clz	r2, r2
 8000222:	b142      	cbz	r2, 8000236 <__udivmoddi4+0x2e>
 8000224:	f1c2 0020 	rsb	r0, r2, #32
 8000228:	fa24 f000 	lsr.w	r0, r4, r0
 800022c:	4091      	lsls	r1, r2
 800022e:	4097      	lsls	r7, r2
 8000230:	ea40 0c01 	orr.w	ip, r0, r1
 8000234:	4094      	lsls	r4, r2
 8000236:	ea4f 4817 	mov.w	r8, r7, lsr #16
 800023a:	0c23      	lsrs	r3, r4, #16
 800023c:	fbbc f6f8 	udiv	r6, ip, r8
 8000240:	fa1f fe87 	uxth.w	lr, r7
 8000244:	fb08 c116 	mls	r1, r8, r6, ip
 8000248:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800024c:	fb06 f10e 	mul.w	r1, r6, lr
 8000250:	4299      	cmp	r1, r3
 8000252:	d909      	bls.n	8000268 <__udivmoddi4+0x60>
 8000254:	18fb      	adds	r3, r7, r3
 8000256:	f106 30ff 	add.w	r0, r6, #4294967295
 800025a:	f080 8119 	bcs.w	8000490 <__udivmoddi4+0x288>
 800025e:	4299      	cmp	r1, r3
 8000260:	f240 8116 	bls.w	8000490 <__udivmoddi4+0x288>
 8000264:	3e02      	subs	r6, #2
 8000266:	443b      	add	r3, r7
 8000268:	1a5b      	subs	r3, r3, r1
 800026a:	b2a4      	uxth	r4, r4
 800026c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000270:	fb08 3310 	mls	r3, r8, r0, r3
 8000274:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000278:	fb00 fe0e 	mul.w	lr, r0, lr
 800027c:	45a6      	cmp	lr, r4
 800027e:	d909      	bls.n	8000294 <__udivmoddi4+0x8c>
 8000280:	193c      	adds	r4, r7, r4
 8000282:	f100 33ff 	add.w	r3, r0, #4294967295
 8000286:	f080 8105 	bcs.w	8000494 <__udivmoddi4+0x28c>
 800028a:	45a6      	cmp	lr, r4
 800028c:	f240 8102 	bls.w	8000494 <__udivmoddi4+0x28c>
 8000290:	3802      	subs	r0, #2
 8000292:	443c      	add	r4, r7
 8000294:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000298:	eba4 040e 	sub.w	r4, r4, lr
 800029c:	2600      	movs	r6, #0
 800029e:	b11d      	cbz	r5, 80002a8 <__udivmoddi4+0xa0>
 80002a0:	40d4      	lsrs	r4, r2
 80002a2:	2300      	movs	r3, #0
 80002a4:	e9c5 4300 	strd	r4, r3, [r5]
 80002a8:	4631      	mov	r1, r6
 80002aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ae:	b902      	cbnz	r2, 80002b2 <__udivmoddi4+0xaa>
 80002b0:	deff      	udf	#255	; 0xff
 80002b2:	fab2 f282 	clz	r2, r2
 80002b6:	2a00      	cmp	r2, #0
 80002b8:	d150      	bne.n	800035c <__udivmoddi4+0x154>
 80002ba:	1bcb      	subs	r3, r1, r7
 80002bc:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80002c0:	fa1f f887 	uxth.w	r8, r7
 80002c4:	2601      	movs	r6, #1
 80002c6:	fbb3 fcfe 	udiv	ip, r3, lr
 80002ca:	0c21      	lsrs	r1, r4, #16
 80002cc:	fb0e 331c 	mls	r3, lr, ip, r3
 80002d0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80002d4:	fb08 f30c 	mul.w	r3, r8, ip
 80002d8:	428b      	cmp	r3, r1
 80002da:	d907      	bls.n	80002ec <__udivmoddi4+0xe4>
 80002dc:	1879      	adds	r1, r7, r1
 80002de:	f10c 30ff 	add.w	r0, ip, #4294967295
 80002e2:	d202      	bcs.n	80002ea <__udivmoddi4+0xe2>
 80002e4:	428b      	cmp	r3, r1
 80002e6:	f200 80e9 	bhi.w	80004bc <__udivmoddi4+0x2b4>
 80002ea:	4684      	mov	ip, r0
 80002ec:	1ac9      	subs	r1, r1, r3
 80002ee:	b2a3      	uxth	r3, r4
 80002f0:	fbb1 f0fe 	udiv	r0, r1, lr
 80002f4:	fb0e 1110 	mls	r1, lr, r0, r1
 80002f8:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 80002fc:	fb08 f800 	mul.w	r8, r8, r0
 8000300:	45a0      	cmp	r8, r4
 8000302:	d907      	bls.n	8000314 <__udivmoddi4+0x10c>
 8000304:	193c      	adds	r4, r7, r4
 8000306:	f100 33ff 	add.w	r3, r0, #4294967295
 800030a:	d202      	bcs.n	8000312 <__udivmoddi4+0x10a>
 800030c:	45a0      	cmp	r8, r4
 800030e:	f200 80d9 	bhi.w	80004c4 <__udivmoddi4+0x2bc>
 8000312:	4618      	mov	r0, r3
 8000314:	eba4 0408 	sub.w	r4, r4, r8
 8000318:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 800031c:	e7bf      	b.n	800029e <__udivmoddi4+0x96>
 800031e:	428b      	cmp	r3, r1
 8000320:	d909      	bls.n	8000336 <__udivmoddi4+0x12e>
 8000322:	2d00      	cmp	r5, #0
 8000324:	f000 80b1 	beq.w	800048a <__udivmoddi4+0x282>
 8000328:	2600      	movs	r6, #0
 800032a:	e9c5 0100 	strd	r0, r1, [r5]
 800032e:	4630      	mov	r0, r6
 8000330:	4631      	mov	r1, r6
 8000332:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000336:	fab3 f683 	clz	r6, r3
 800033a:	2e00      	cmp	r6, #0
 800033c:	d14a      	bne.n	80003d4 <__udivmoddi4+0x1cc>
 800033e:	428b      	cmp	r3, r1
 8000340:	d302      	bcc.n	8000348 <__udivmoddi4+0x140>
 8000342:	4282      	cmp	r2, r0
 8000344:	f200 80b8 	bhi.w	80004b8 <__udivmoddi4+0x2b0>
 8000348:	1a84      	subs	r4, r0, r2
 800034a:	eb61 0103 	sbc.w	r1, r1, r3
 800034e:	2001      	movs	r0, #1
 8000350:	468c      	mov	ip, r1
 8000352:	2d00      	cmp	r5, #0
 8000354:	d0a8      	beq.n	80002a8 <__udivmoddi4+0xa0>
 8000356:	e9c5 4c00 	strd	r4, ip, [r5]
 800035a:	e7a5      	b.n	80002a8 <__udivmoddi4+0xa0>
 800035c:	f1c2 0320 	rsb	r3, r2, #32
 8000360:	fa20 f603 	lsr.w	r6, r0, r3
 8000364:	4097      	lsls	r7, r2
 8000366:	fa01 f002 	lsl.w	r0, r1, r2
 800036a:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 800036e:	40d9      	lsrs	r1, r3
 8000370:	4330      	orrs	r0, r6
 8000372:	0c03      	lsrs	r3, r0, #16
 8000374:	fbb1 f6fe 	udiv	r6, r1, lr
 8000378:	fa1f f887 	uxth.w	r8, r7
 800037c:	fb0e 1116 	mls	r1, lr, r6, r1
 8000380:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000384:	fb06 f108 	mul.w	r1, r6, r8
 8000388:	4299      	cmp	r1, r3
 800038a:	fa04 f402 	lsl.w	r4, r4, r2
 800038e:	d909      	bls.n	80003a4 <__udivmoddi4+0x19c>
 8000390:	18fb      	adds	r3, r7, r3
 8000392:	f106 3cff 	add.w	ip, r6, #4294967295
 8000396:	f080 808d 	bcs.w	80004b4 <__udivmoddi4+0x2ac>
 800039a:	4299      	cmp	r1, r3
 800039c:	f240 808a 	bls.w	80004b4 <__udivmoddi4+0x2ac>
 80003a0:	3e02      	subs	r6, #2
 80003a2:	443b      	add	r3, r7
 80003a4:	1a5b      	subs	r3, r3, r1
 80003a6:	b281      	uxth	r1, r0
 80003a8:	fbb3 f0fe 	udiv	r0, r3, lr
 80003ac:	fb0e 3310 	mls	r3, lr, r0, r3
 80003b0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80003b4:	fb00 f308 	mul.w	r3, r0, r8
 80003b8:	428b      	cmp	r3, r1
 80003ba:	d907      	bls.n	80003cc <__udivmoddi4+0x1c4>
 80003bc:	1879      	adds	r1, r7, r1
 80003be:	f100 3cff 	add.w	ip, r0, #4294967295
 80003c2:	d273      	bcs.n	80004ac <__udivmoddi4+0x2a4>
 80003c4:	428b      	cmp	r3, r1
 80003c6:	d971      	bls.n	80004ac <__udivmoddi4+0x2a4>
 80003c8:	3802      	subs	r0, #2
 80003ca:	4439      	add	r1, r7
 80003cc:	1acb      	subs	r3, r1, r3
 80003ce:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 80003d2:	e778      	b.n	80002c6 <__udivmoddi4+0xbe>
 80003d4:	f1c6 0c20 	rsb	ip, r6, #32
 80003d8:	fa03 f406 	lsl.w	r4, r3, r6
 80003dc:	fa22 f30c 	lsr.w	r3, r2, ip
 80003e0:	431c      	orrs	r4, r3
 80003e2:	fa20 f70c 	lsr.w	r7, r0, ip
 80003e6:	fa01 f306 	lsl.w	r3, r1, r6
 80003ea:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 80003ee:	fa21 f10c 	lsr.w	r1, r1, ip
 80003f2:	431f      	orrs	r7, r3
 80003f4:	0c3b      	lsrs	r3, r7, #16
 80003f6:	fbb1 f9fe 	udiv	r9, r1, lr
 80003fa:	fa1f f884 	uxth.w	r8, r4
 80003fe:	fb0e 1119 	mls	r1, lr, r9, r1
 8000402:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000406:	fb09 fa08 	mul.w	sl, r9, r8
 800040a:	458a      	cmp	sl, r1
 800040c:	fa02 f206 	lsl.w	r2, r2, r6
 8000410:	fa00 f306 	lsl.w	r3, r0, r6
 8000414:	d908      	bls.n	8000428 <__udivmoddi4+0x220>
 8000416:	1861      	adds	r1, r4, r1
 8000418:	f109 30ff 	add.w	r0, r9, #4294967295
 800041c:	d248      	bcs.n	80004b0 <__udivmoddi4+0x2a8>
 800041e:	458a      	cmp	sl, r1
 8000420:	d946      	bls.n	80004b0 <__udivmoddi4+0x2a8>
 8000422:	f1a9 0902 	sub.w	r9, r9, #2
 8000426:	4421      	add	r1, r4
 8000428:	eba1 010a 	sub.w	r1, r1, sl
 800042c:	b2bf      	uxth	r7, r7
 800042e:	fbb1 f0fe 	udiv	r0, r1, lr
 8000432:	fb0e 1110 	mls	r1, lr, r0, r1
 8000436:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 800043a:	fb00 f808 	mul.w	r8, r0, r8
 800043e:	45b8      	cmp	r8, r7
 8000440:	d907      	bls.n	8000452 <__udivmoddi4+0x24a>
 8000442:	19e7      	adds	r7, r4, r7
 8000444:	f100 31ff 	add.w	r1, r0, #4294967295
 8000448:	d22e      	bcs.n	80004a8 <__udivmoddi4+0x2a0>
 800044a:	45b8      	cmp	r8, r7
 800044c:	d92c      	bls.n	80004a8 <__udivmoddi4+0x2a0>
 800044e:	3802      	subs	r0, #2
 8000450:	4427      	add	r7, r4
 8000452:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000456:	eba7 0708 	sub.w	r7, r7, r8
 800045a:	fba0 8902 	umull	r8, r9, r0, r2
 800045e:	454f      	cmp	r7, r9
 8000460:	46c6      	mov	lr, r8
 8000462:	4649      	mov	r1, r9
 8000464:	d31a      	bcc.n	800049c <__udivmoddi4+0x294>
 8000466:	d017      	beq.n	8000498 <__udivmoddi4+0x290>
 8000468:	b15d      	cbz	r5, 8000482 <__udivmoddi4+0x27a>
 800046a:	ebb3 020e 	subs.w	r2, r3, lr
 800046e:	eb67 0701 	sbc.w	r7, r7, r1
 8000472:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000476:	40f2      	lsrs	r2, r6
 8000478:	ea4c 0202 	orr.w	r2, ip, r2
 800047c:	40f7      	lsrs	r7, r6
 800047e:	e9c5 2700 	strd	r2, r7, [r5]
 8000482:	2600      	movs	r6, #0
 8000484:	4631      	mov	r1, r6
 8000486:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800048a:	462e      	mov	r6, r5
 800048c:	4628      	mov	r0, r5
 800048e:	e70b      	b.n	80002a8 <__udivmoddi4+0xa0>
 8000490:	4606      	mov	r6, r0
 8000492:	e6e9      	b.n	8000268 <__udivmoddi4+0x60>
 8000494:	4618      	mov	r0, r3
 8000496:	e6fd      	b.n	8000294 <__udivmoddi4+0x8c>
 8000498:	4543      	cmp	r3, r8
 800049a:	d2e5      	bcs.n	8000468 <__udivmoddi4+0x260>
 800049c:	ebb8 0e02 	subs.w	lr, r8, r2
 80004a0:	eb69 0104 	sbc.w	r1, r9, r4
 80004a4:	3801      	subs	r0, #1
 80004a6:	e7df      	b.n	8000468 <__udivmoddi4+0x260>
 80004a8:	4608      	mov	r0, r1
 80004aa:	e7d2      	b.n	8000452 <__udivmoddi4+0x24a>
 80004ac:	4660      	mov	r0, ip
 80004ae:	e78d      	b.n	80003cc <__udivmoddi4+0x1c4>
 80004b0:	4681      	mov	r9, r0
 80004b2:	e7b9      	b.n	8000428 <__udivmoddi4+0x220>
 80004b4:	4666      	mov	r6, ip
 80004b6:	e775      	b.n	80003a4 <__udivmoddi4+0x19c>
 80004b8:	4630      	mov	r0, r6
 80004ba:	e74a      	b.n	8000352 <__udivmoddi4+0x14a>
 80004bc:	f1ac 0c02 	sub.w	ip, ip, #2
 80004c0:	4439      	add	r1, r7
 80004c2:	e713      	b.n	80002ec <__udivmoddi4+0xe4>
 80004c4:	3802      	subs	r0, #2
 80004c6:	443c      	add	r4, r7
 80004c8:	e724      	b.n	8000314 <__udivmoddi4+0x10c>
 80004ca:	bf00      	nop

080004cc <__aeabi_idiv0>:
 80004cc:	4770      	bx	lr
 80004ce:	bf00      	nop

080004d0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80004d0:	b590      	push	{r4, r7, lr}
 80004d2:	b085      	sub	sp, #20
 80004d4:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80004d6:	f000 fa99 	bl	8000a0c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80004da:	f000 f825 	bl	8000528 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80004de:	f000 f8e5 	bl	80006ac <MX_GPIO_Init>
  MX_USART2_UART_Init();
 80004e2:	f000 f8b3 	bl	800064c <MX_USART2_UART_Init>
  MX_I2C1_Init();
 80004e6:	f000 f871 	bl	80005cc <MX_I2C1_Init>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  strcpy((char*)buf, "Hello World!\r\n");
 80004ea:	1d3b      	adds	r3, r7, #4
 80004ec:	4a0c      	ldr	r2, [pc, #48]	; (8000520 <main+0x50>)
 80004ee:	461c      	mov	r4, r3
 80004f0:	4613      	mov	r3, r2
 80004f2:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80004f4:	c407      	stmia	r4!, {r0, r1, r2}
 80004f6:	8023      	strh	r3, [r4, #0]
 80004f8:	3402      	adds	r4, #2
 80004fa:	0c1b      	lsrs	r3, r3, #16
 80004fc:	7023      	strb	r3, [r4, #0]
	  HAL_UART_Transmit(&huart2, buf, strlen((char*)buf), HAL_MAX_DELAY);
 80004fe:	1d3b      	adds	r3, r7, #4
 8000500:	4618      	mov	r0, r3
 8000502:	f7ff fe61 	bl	80001c8 <strlen>
 8000506:	4603      	mov	r3, r0
 8000508:	b29a      	uxth	r2, r3
 800050a:	1d39      	adds	r1, r7, #4
 800050c:	f04f 33ff 	mov.w	r3, #4294967295
 8000510:	4804      	ldr	r0, [pc, #16]	; (8000524 <main+0x54>)
 8000512:	f002 fa43 	bl	800299c <HAL_UART_Transmit>
	  HAL_Delay(500);
 8000516:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800051a:	f000 faf3 	bl	8000b04 <HAL_Delay>
	  strcpy((char*)buf, "Hello World!\r\n");
 800051e:	e7e4      	b.n	80004ea <main+0x1a>
 8000520:	080033a8 	.word	0x080033a8
 8000524:	20000074 	.word	0x20000074

08000528 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000528:	b580      	push	{r7, lr}
 800052a:	b096      	sub	sp, #88	; 0x58
 800052c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800052e:	f107 0314 	add.w	r3, r7, #20
 8000532:	2244      	movs	r2, #68	; 0x44
 8000534:	2100      	movs	r1, #0
 8000536:	4618      	mov	r0, r3
 8000538:	f002 ff22 	bl	8003380 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800053c:	463b      	mov	r3, r7
 800053e:	2200      	movs	r2, #0
 8000540:	601a      	str	r2, [r3, #0]
 8000542:	605a      	str	r2, [r3, #4]
 8000544:	609a      	str	r2, [r3, #8]
 8000546:	60da      	str	r2, [r3, #12]
 8000548:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 800054a:	f44f 7000 	mov.w	r0, #512	; 0x200
 800054e:	f000 fed9 	bl	8001304 <HAL_PWREx_ControlVoltageScaling>
 8000552:	4603      	mov	r3, r0
 8000554:	2b00      	cmp	r3, #0
 8000556:	d001      	beq.n	800055c <SystemClock_Config+0x34>
  {
    Error_Handler();
 8000558:	f000 f90e 	bl	8000778 <Error_Handler>
  }
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800055c:	2302      	movs	r3, #2
 800055e:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000560:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000564:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000566:	2310      	movs	r3, #16
 8000568:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800056a:	2302      	movs	r3, #2
 800056c:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800056e:	2302      	movs	r3, #2
 8000570:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 8000572:	2301      	movs	r3, #1
 8000574:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 10;
 8000576:	230a      	movs	r3, #10
 8000578:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 800057a:	2307      	movs	r3, #7
 800057c:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 800057e:	2302      	movs	r3, #2
 8000580:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000582:	2302      	movs	r3, #2
 8000584:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000586:	f107 0314 	add.w	r3, r7, #20
 800058a:	4618      	mov	r0, r3
 800058c:	f000 ff10 	bl	80013b0 <HAL_RCC_OscConfig>
 8000590:	4603      	mov	r3, r0
 8000592:	2b00      	cmp	r3, #0
 8000594:	d001      	beq.n	800059a <SystemClock_Config+0x72>
  {
    Error_Handler();
 8000596:	f000 f8ef 	bl	8000778 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800059a:	230f      	movs	r3, #15
 800059c:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800059e:	2303      	movs	r3, #3
 80005a0:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80005a2:	2300      	movs	r3, #0
 80005a4:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80005a6:	2300      	movs	r3, #0
 80005a8:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80005aa:	2300      	movs	r3, #0
 80005ac:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 80005ae:	463b      	mov	r3, r7
 80005b0:	2104      	movs	r1, #4
 80005b2:	4618      	mov	r0, r3
 80005b4:	f001 fae2 	bl	8001b7c <HAL_RCC_ClockConfig>
 80005b8:	4603      	mov	r3, r0
 80005ba:	2b00      	cmp	r3, #0
 80005bc:	d001      	beq.n	80005c2 <SystemClock_Config+0x9a>
  {
    Error_Handler();
 80005be:	f000 f8db 	bl	8000778 <Error_Handler>
  }
}
 80005c2:	bf00      	nop
 80005c4:	3758      	adds	r7, #88	; 0x58
 80005c6:	46bd      	mov	sp, r7
 80005c8:	bd80      	pop	{r7, pc}
	...

080005cc <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80005cc:	b580      	push	{r7, lr}
 80005ce:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80005d0:	4b1b      	ldr	r3, [pc, #108]	; (8000640 <MX_I2C1_Init+0x74>)
 80005d2:	4a1c      	ldr	r2, [pc, #112]	; (8000644 <MX_I2C1_Init+0x78>)
 80005d4:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x10909CEC;
 80005d6:	4b1a      	ldr	r3, [pc, #104]	; (8000640 <MX_I2C1_Init+0x74>)
 80005d8:	4a1b      	ldr	r2, [pc, #108]	; (8000648 <MX_I2C1_Init+0x7c>)
 80005da:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 80005dc:	4b18      	ldr	r3, [pc, #96]	; (8000640 <MX_I2C1_Init+0x74>)
 80005de:	2200      	movs	r2, #0
 80005e0:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80005e2:	4b17      	ldr	r3, [pc, #92]	; (8000640 <MX_I2C1_Init+0x74>)
 80005e4:	2201      	movs	r2, #1
 80005e6:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80005e8:	4b15      	ldr	r3, [pc, #84]	; (8000640 <MX_I2C1_Init+0x74>)
 80005ea:	2200      	movs	r2, #0
 80005ec:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 80005ee:	4b14      	ldr	r3, [pc, #80]	; (8000640 <MX_I2C1_Init+0x74>)
 80005f0:	2200      	movs	r2, #0
 80005f2:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80005f4:	4b12      	ldr	r3, [pc, #72]	; (8000640 <MX_I2C1_Init+0x74>)
 80005f6:	2200      	movs	r2, #0
 80005f8:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80005fa:	4b11      	ldr	r3, [pc, #68]	; (8000640 <MX_I2C1_Init+0x74>)
 80005fc:	2200      	movs	r2, #0
 80005fe:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000600:	4b0f      	ldr	r3, [pc, #60]	; (8000640 <MX_I2C1_Init+0x74>)
 8000602:	2200      	movs	r2, #0
 8000604:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000606:	480e      	ldr	r0, [pc, #56]	; (8000640 <MX_I2C1_Init+0x74>)
 8000608:	f000 fd48 	bl	800109c <HAL_I2C_Init>
 800060c:	4603      	mov	r3, r0
 800060e:	2b00      	cmp	r3, #0
 8000610:	d001      	beq.n	8000616 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8000612:	f000 f8b1 	bl	8000778 <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000616:	2100      	movs	r1, #0
 8000618:	4809      	ldr	r0, [pc, #36]	; (8000640 <MX_I2C1_Init+0x74>)
 800061a:	f000 fdce 	bl	80011ba <HAL_I2CEx_ConfigAnalogFilter>
 800061e:	4603      	mov	r3, r0
 8000620:	2b00      	cmp	r3, #0
 8000622:	d001      	beq.n	8000628 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8000624:	f000 f8a8 	bl	8000778 <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8000628:	2100      	movs	r1, #0
 800062a:	4805      	ldr	r0, [pc, #20]	; (8000640 <MX_I2C1_Init+0x74>)
 800062c:	f000 fe10 	bl	8001250 <HAL_I2CEx_ConfigDigitalFilter>
 8000630:	4603      	mov	r3, r0
 8000632:	2b00      	cmp	r3, #0
 8000634:	d001      	beq.n	800063a <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8000636:	f000 f89f 	bl	8000778 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 800063a:	bf00      	nop
 800063c:	bd80      	pop	{r7, pc}
 800063e:	bf00      	nop
 8000640:	20000028 	.word	0x20000028
 8000644:	40005400 	.word	0x40005400
 8000648:	10909cec 	.word	0x10909cec

0800064c <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 800064c:	b580      	push	{r7, lr}
 800064e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000650:	4b14      	ldr	r3, [pc, #80]	; (80006a4 <MX_USART2_UART_Init+0x58>)
 8000652:	4a15      	ldr	r2, [pc, #84]	; (80006a8 <MX_USART2_UART_Init+0x5c>)
 8000654:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000656:	4b13      	ldr	r3, [pc, #76]	; (80006a4 <MX_USART2_UART_Init+0x58>)
 8000658:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800065c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800065e:	4b11      	ldr	r3, [pc, #68]	; (80006a4 <MX_USART2_UART_Init+0x58>)
 8000660:	2200      	movs	r2, #0
 8000662:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000664:	4b0f      	ldr	r3, [pc, #60]	; (80006a4 <MX_USART2_UART_Init+0x58>)
 8000666:	2200      	movs	r2, #0
 8000668:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800066a:	4b0e      	ldr	r3, [pc, #56]	; (80006a4 <MX_USART2_UART_Init+0x58>)
 800066c:	2200      	movs	r2, #0
 800066e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000670:	4b0c      	ldr	r3, [pc, #48]	; (80006a4 <MX_USART2_UART_Init+0x58>)
 8000672:	220c      	movs	r2, #12
 8000674:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000676:	4b0b      	ldr	r3, [pc, #44]	; (80006a4 <MX_USART2_UART_Init+0x58>)
 8000678:	2200      	movs	r2, #0
 800067a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800067c:	4b09      	ldr	r3, [pc, #36]	; (80006a4 <MX_USART2_UART_Init+0x58>)
 800067e:	2200      	movs	r2, #0
 8000680:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000682:	4b08      	ldr	r3, [pc, #32]	; (80006a4 <MX_USART2_UART_Init+0x58>)
 8000684:	2200      	movs	r2, #0
 8000686:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000688:	4b06      	ldr	r3, [pc, #24]	; (80006a4 <MX_USART2_UART_Init+0x58>)
 800068a:	2200      	movs	r2, #0
 800068c:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800068e:	4805      	ldr	r0, [pc, #20]	; (80006a4 <MX_USART2_UART_Init+0x58>)
 8000690:	f002 f936 	bl	8002900 <HAL_UART_Init>
 8000694:	4603      	mov	r3, r0
 8000696:	2b00      	cmp	r3, #0
 8000698:	d001      	beq.n	800069e <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 800069a:	f000 f86d 	bl	8000778 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800069e:	bf00      	nop
 80006a0:	bd80      	pop	{r7, pc}
 80006a2:	bf00      	nop
 80006a4:	20000074 	.word	0x20000074
 80006a8:	40004400 	.word	0x40004400

080006ac <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80006ac:	b580      	push	{r7, lr}
 80006ae:	b08a      	sub	sp, #40	; 0x28
 80006b0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80006b2:	f107 0314 	add.w	r3, r7, #20
 80006b6:	2200      	movs	r2, #0
 80006b8:	601a      	str	r2, [r3, #0]
 80006ba:	605a      	str	r2, [r3, #4]
 80006bc:	609a      	str	r2, [r3, #8]
 80006be:	60da      	str	r2, [r3, #12]
 80006c0:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80006c2:	4b2b      	ldr	r3, [pc, #172]	; (8000770 <MX_GPIO_Init+0xc4>)
 80006c4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80006c6:	4a2a      	ldr	r2, [pc, #168]	; (8000770 <MX_GPIO_Init+0xc4>)
 80006c8:	f043 0304 	orr.w	r3, r3, #4
 80006cc:	64d3      	str	r3, [r2, #76]	; 0x4c
 80006ce:	4b28      	ldr	r3, [pc, #160]	; (8000770 <MX_GPIO_Init+0xc4>)
 80006d0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80006d2:	f003 0304 	and.w	r3, r3, #4
 80006d6:	613b      	str	r3, [r7, #16]
 80006d8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80006da:	4b25      	ldr	r3, [pc, #148]	; (8000770 <MX_GPIO_Init+0xc4>)
 80006dc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80006de:	4a24      	ldr	r2, [pc, #144]	; (8000770 <MX_GPIO_Init+0xc4>)
 80006e0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80006e4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80006e6:	4b22      	ldr	r3, [pc, #136]	; (8000770 <MX_GPIO_Init+0xc4>)
 80006e8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80006ea:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80006ee:	60fb      	str	r3, [r7, #12]
 80006f0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80006f2:	4b1f      	ldr	r3, [pc, #124]	; (8000770 <MX_GPIO_Init+0xc4>)
 80006f4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80006f6:	4a1e      	ldr	r2, [pc, #120]	; (8000770 <MX_GPIO_Init+0xc4>)
 80006f8:	f043 0301 	orr.w	r3, r3, #1
 80006fc:	64d3      	str	r3, [r2, #76]	; 0x4c
 80006fe:	4b1c      	ldr	r3, [pc, #112]	; (8000770 <MX_GPIO_Init+0xc4>)
 8000700:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000702:	f003 0301 	and.w	r3, r3, #1
 8000706:	60bb      	str	r3, [r7, #8]
 8000708:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800070a:	4b19      	ldr	r3, [pc, #100]	; (8000770 <MX_GPIO_Init+0xc4>)
 800070c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800070e:	4a18      	ldr	r2, [pc, #96]	; (8000770 <MX_GPIO_Init+0xc4>)
 8000710:	f043 0302 	orr.w	r3, r3, #2
 8000714:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000716:	4b16      	ldr	r3, [pc, #88]	; (8000770 <MX_GPIO_Init+0xc4>)
 8000718:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800071a:	f003 0302 	and.w	r3, r3, #2
 800071e:	607b      	str	r3, [r7, #4]
 8000720:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8000722:	2200      	movs	r2, #0
 8000724:	2120      	movs	r1, #32
 8000726:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800072a:	f000 fc9f 	bl	800106c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 800072e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000732:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000734:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8000738:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800073a:	2300      	movs	r3, #0
 800073c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 800073e:	f107 0314 	add.w	r3, r7, #20
 8000742:	4619      	mov	r1, r3
 8000744:	480b      	ldr	r0, [pc, #44]	; (8000774 <MX_GPIO_Init+0xc8>)
 8000746:	f000 fae7 	bl	8000d18 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 800074a:	2320      	movs	r3, #32
 800074c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800074e:	2301      	movs	r3, #1
 8000750:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000752:	2300      	movs	r3, #0
 8000754:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000756:	2300      	movs	r3, #0
 8000758:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 800075a:	f107 0314 	add.w	r3, r7, #20
 800075e:	4619      	mov	r1, r3
 8000760:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000764:	f000 fad8 	bl	8000d18 <HAL_GPIO_Init>

}
 8000768:	bf00      	nop
 800076a:	3728      	adds	r7, #40	; 0x28
 800076c:	46bd      	mov	sp, r7
 800076e:	bd80      	pop	{r7, pc}
 8000770:	40021000 	.word	0x40021000
 8000774:	48000800 	.word	0x48000800

08000778 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000778:	b480      	push	{r7}
 800077a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800077c:	b672      	cpsid	i
}
 800077e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000780:	e7fe      	b.n	8000780 <Error_Handler+0x8>
	...

08000784 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000784:	b480      	push	{r7}
 8000786:	b083      	sub	sp, #12
 8000788:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800078a:	4b0f      	ldr	r3, [pc, #60]	; (80007c8 <HAL_MspInit+0x44>)
 800078c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800078e:	4a0e      	ldr	r2, [pc, #56]	; (80007c8 <HAL_MspInit+0x44>)
 8000790:	f043 0301 	orr.w	r3, r3, #1
 8000794:	6613      	str	r3, [r2, #96]	; 0x60
 8000796:	4b0c      	ldr	r3, [pc, #48]	; (80007c8 <HAL_MspInit+0x44>)
 8000798:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800079a:	f003 0301 	and.w	r3, r3, #1
 800079e:	607b      	str	r3, [r7, #4]
 80007a0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80007a2:	4b09      	ldr	r3, [pc, #36]	; (80007c8 <HAL_MspInit+0x44>)
 80007a4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80007a6:	4a08      	ldr	r2, [pc, #32]	; (80007c8 <HAL_MspInit+0x44>)
 80007a8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80007ac:	6593      	str	r3, [r2, #88]	; 0x58
 80007ae:	4b06      	ldr	r3, [pc, #24]	; (80007c8 <HAL_MspInit+0x44>)
 80007b0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80007b2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80007b6:	603b      	str	r3, [r7, #0]
 80007b8:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80007ba:	bf00      	nop
 80007bc:	370c      	adds	r7, #12
 80007be:	46bd      	mov	sp, r7
 80007c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007c4:	4770      	bx	lr
 80007c6:	bf00      	nop
 80007c8:	40021000 	.word	0x40021000

080007cc <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80007cc:	b580      	push	{r7, lr}
 80007ce:	b0ac      	sub	sp, #176	; 0xb0
 80007d0:	af00      	add	r7, sp, #0
 80007d2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80007d4:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 80007d8:	2200      	movs	r2, #0
 80007da:	601a      	str	r2, [r3, #0]
 80007dc:	605a      	str	r2, [r3, #4]
 80007de:	609a      	str	r2, [r3, #8]
 80007e0:	60da      	str	r2, [r3, #12]
 80007e2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80007e4:	f107 0314 	add.w	r3, r7, #20
 80007e8:	2288      	movs	r2, #136	; 0x88
 80007ea:	2100      	movs	r1, #0
 80007ec:	4618      	mov	r0, r3
 80007ee:	f002 fdc7 	bl	8003380 <memset>
  if(hi2c->Instance==I2C1)
 80007f2:	687b      	ldr	r3, [r7, #4]
 80007f4:	681b      	ldr	r3, [r3, #0]
 80007f6:	4a21      	ldr	r2, [pc, #132]	; (800087c <HAL_I2C_MspInit+0xb0>)
 80007f8:	4293      	cmp	r3, r2
 80007fa:	d13b      	bne.n	8000874 <HAL_I2C_MspInit+0xa8>
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 80007fc:	2340      	movs	r3, #64	; 0x40
 80007fe:	617b      	str	r3, [r7, #20]
    PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8000800:	2300      	movs	r3, #0
 8000802:	667b      	str	r3, [r7, #100]	; 0x64
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000804:	f107 0314 	add.w	r3, r7, #20
 8000808:	4618      	mov	r0, r3
 800080a:	f001 fbbd 	bl	8001f88 <HAL_RCCEx_PeriphCLKConfig>
 800080e:	4603      	mov	r3, r0
 8000810:	2b00      	cmp	r3, #0
 8000812:	d001      	beq.n	8000818 <HAL_I2C_MspInit+0x4c>
    {
      Error_Handler();
 8000814:	f7ff ffb0 	bl	8000778 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000818:	4b19      	ldr	r3, [pc, #100]	; (8000880 <HAL_I2C_MspInit+0xb4>)
 800081a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800081c:	4a18      	ldr	r2, [pc, #96]	; (8000880 <HAL_I2C_MspInit+0xb4>)
 800081e:	f043 0302 	orr.w	r3, r3, #2
 8000822:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000824:	4b16      	ldr	r3, [pc, #88]	; (8000880 <HAL_I2C_MspInit+0xb4>)
 8000826:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000828:	f003 0302 	and.w	r3, r3, #2
 800082c:	613b      	str	r3, [r7, #16]
 800082e:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8000830:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000834:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000838:	2312      	movs	r3, #18
 800083a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800083e:	2300      	movs	r3, #0
 8000840:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000844:	2303      	movs	r3, #3
 8000846:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800084a:	2304      	movs	r3, #4
 800084c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000850:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8000854:	4619      	mov	r1, r3
 8000856:	480b      	ldr	r0, [pc, #44]	; (8000884 <HAL_I2C_MspInit+0xb8>)
 8000858:	f000 fa5e 	bl	8000d18 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800085c:	4b08      	ldr	r3, [pc, #32]	; (8000880 <HAL_I2C_MspInit+0xb4>)
 800085e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000860:	4a07      	ldr	r2, [pc, #28]	; (8000880 <HAL_I2C_MspInit+0xb4>)
 8000862:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000866:	6593      	str	r3, [r2, #88]	; 0x58
 8000868:	4b05      	ldr	r3, [pc, #20]	; (8000880 <HAL_I2C_MspInit+0xb4>)
 800086a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800086c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000870:	60fb      	str	r3, [r7, #12]
 8000872:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8000874:	bf00      	nop
 8000876:	37b0      	adds	r7, #176	; 0xb0
 8000878:	46bd      	mov	sp, r7
 800087a:	bd80      	pop	{r7, pc}
 800087c:	40005400 	.word	0x40005400
 8000880:	40021000 	.word	0x40021000
 8000884:	48000400 	.word	0x48000400

08000888 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000888:	b580      	push	{r7, lr}
 800088a:	b0ac      	sub	sp, #176	; 0xb0
 800088c:	af00      	add	r7, sp, #0
 800088e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000890:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8000894:	2200      	movs	r2, #0
 8000896:	601a      	str	r2, [r3, #0]
 8000898:	605a      	str	r2, [r3, #4]
 800089a:	609a      	str	r2, [r3, #8]
 800089c:	60da      	str	r2, [r3, #12]
 800089e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80008a0:	f107 0314 	add.w	r3, r7, #20
 80008a4:	2288      	movs	r2, #136	; 0x88
 80008a6:	2100      	movs	r1, #0
 80008a8:	4618      	mov	r0, r3
 80008aa:	f002 fd69 	bl	8003380 <memset>
  if(huart->Instance==USART2)
 80008ae:	687b      	ldr	r3, [r7, #4]
 80008b0:	681b      	ldr	r3, [r3, #0]
 80008b2:	4a21      	ldr	r2, [pc, #132]	; (8000938 <HAL_UART_MspInit+0xb0>)
 80008b4:	4293      	cmp	r3, r2
 80008b6:	d13b      	bne.n	8000930 <HAL_UART_MspInit+0xa8>
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 80008b8:	2302      	movs	r3, #2
 80008ba:	617b      	str	r3, [r7, #20]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 80008bc:	2300      	movs	r3, #0
 80008be:	653b      	str	r3, [r7, #80]	; 0x50
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80008c0:	f107 0314 	add.w	r3, r7, #20
 80008c4:	4618      	mov	r0, r3
 80008c6:	f001 fb5f 	bl	8001f88 <HAL_RCCEx_PeriphCLKConfig>
 80008ca:	4603      	mov	r3, r0
 80008cc:	2b00      	cmp	r3, #0
 80008ce:	d001      	beq.n	80008d4 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 80008d0:	f7ff ff52 	bl	8000778 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80008d4:	4b19      	ldr	r3, [pc, #100]	; (800093c <HAL_UART_MspInit+0xb4>)
 80008d6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80008d8:	4a18      	ldr	r2, [pc, #96]	; (800093c <HAL_UART_MspInit+0xb4>)
 80008da:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80008de:	6593      	str	r3, [r2, #88]	; 0x58
 80008e0:	4b16      	ldr	r3, [pc, #88]	; (800093c <HAL_UART_MspInit+0xb4>)
 80008e2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80008e4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80008e8:	613b      	str	r3, [r7, #16]
 80008ea:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80008ec:	4b13      	ldr	r3, [pc, #76]	; (800093c <HAL_UART_MspInit+0xb4>)
 80008ee:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80008f0:	4a12      	ldr	r2, [pc, #72]	; (800093c <HAL_UART_MspInit+0xb4>)
 80008f2:	f043 0301 	orr.w	r3, r3, #1
 80008f6:	64d3      	str	r3, [r2, #76]	; 0x4c
 80008f8:	4b10      	ldr	r3, [pc, #64]	; (800093c <HAL_UART_MspInit+0xb4>)
 80008fa:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80008fc:	f003 0301 	and.w	r3, r3, #1
 8000900:	60fb      	str	r3, [r7, #12]
 8000902:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8000904:	230c      	movs	r3, #12
 8000906:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800090a:	2302      	movs	r3, #2
 800090c:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000910:	2300      	movs	r3, #0
 8000912:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000916:	2303      	movs	r3, #3
 8000918:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800091c:	2307      	movs	r3, #7
 800091e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000922:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8000926:	4619      	mov	r1, r3
 8000928:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800092c:	f000 f9f4 	bl	8000d18 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000930:	bf00      	nop
 8000932:	37b0      	adds	r7, #176	; 0xb0
 8000934:	46bd      	mov	sp, r7
 8000936:	bd80      	pop	{r7, pc}
 8000938:	40004400 	.word	0x40004400
 800093c:	40021000 	.word	0x40021000

08000940 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000940:	b480      	push	{r7}
 8000942:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000944:	e7fe      	b.n	8000944 <NMI_Handler+0x4>

08000946 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000946:	b480      	push	{r7}
 8000948:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800094a:	e7fe      	b.n	800094a <HardFault_Handler+0x4>

0800094c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800094c:	b480      	push	{r7}
 800094e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000950:	e7fe      	b.n	8000950 <MemManage_Handler+0x4>

08000952 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000952:	b480      	push	{r7}
 8000954:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000956:	e7fe      	b.n	8000956 <BusFault_Handler+0x4>

08000958 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000958:	b480      	push	{r7}
 800095a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800095c:	e7fe      	b.n	800095c <UsageFault_Handler+0x4>

0800095e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800095e:	b480      	push	{r7}
 8000960:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000962:	bf00      	nop
 8000964:	46bd      	mov	sp, r7
 8000966:	f85d 7b04 	ldr.w	r7, [sp], #4
 800096a:	4770      	bx	lr

0800096c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800096c:	b480      	push	{r7}
 800096e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000970:	bf00      	nop
 8000972:	46bd      	mov	sp, r7
 8000974:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000978:	4770      	bx	lr

0800097a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800097a:	b480      	push	{r7}
 800097c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800097e:	bf00      	nop
 8000980:	46bd      	mov	sp, r7
 8000982:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000986:	4770      	bx	lr

08000988 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000988:	b580      	push	{r7, lr}
 800098a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800098c:	f000 f89a 	bl	8000ac4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000990:	bf00      	nop
 8000992:	bd80      	pop	{r7, pc}

08000994 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8000994:	b480      	push	{r7}
 8000996:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8000998:	4b06      	ldr	r3, [pc, #24]	; (80009b4 <SystemInit+0x20>)
 800099a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800099e:	4a05      	ldr	r2, [pc, #20]	; (80009b4 <SystemInit+0x20>)
 80009a0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80009a4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 80009a8:	bf00      	nop
 80009aa:	46bd      	mov	sp, r7
 80009ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009b0:	4770      	bx	lr
 80009b2:	bf00      	nop
 80009b4:	e000ed00 	.word	0xe000ed00

080009b8 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 80009b8:	f8df d034 	ldr.w	sp, [pc, #52]	; 80009f0 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 80009bc:	f7ff ffea 	bl	8000994 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80009c0:	480c      	ldr	r0, [pc, #48]	; (80009f4 <LoopForever+0x6>)
  ldr r1, =_edata
 80009c2:	490d      	ldr	r1, [pc, #52]	; (80009f8 <LoopForever+0xa>)
  ldr r2, =_sidata
 80009c4:	4a0d      	ldr	r2, [pc, #52]	; (80009fc <LoopForever+0xe>)
  movs r3, #0
 80009c6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80009c8:	e002      	b.n	80009d0 <LoopCopyDataInit>

080009ca <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80009ca:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80009cc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80009ce:	3304      	adds	r3, #4

080009d0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80009d0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80009d2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80009d4:	d3f9      	bcc.n	80009ca <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80009d6:	4a0a      	ldr	r2, [pc, #40]	; (8000a00 <LoopForever+0x12>)
  ldr r4, =_ebss
 80009d8:	4c0a      	ldr	r4, [pc, #40]	; (8000a04 <LoopForever+0x16>)
  movs r3, #0
 80009da:	2300      	movs	r3, #0
  b LoopFillZerobss
 80009dc:	e001      	b.n	80009e2 <LoopFillZerobss>

080009de <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80009de:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80009e0:	3204      	adds	r2, #4

080009e2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80009e2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80009e4:	d3fb      	bcc.n	80009de <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80009e6:	f002 fca7 	bl	8003338 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80009ea:	f7ff fd71 	bl	80004d0 <main>

080009ee <LoopForever>:

LoopForever:
    b LoopForever
 80009ee:	e7fe      	b.n	80009ee <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 80009f0:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 80009f4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80009f8:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 80009fc:	08003410 	.word	0x08003410
  ldr r2, =_sbss
 8000a00:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8000a04:	200000fc 	.word	0x200000fc

08000a08 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000a08:	e7fe      	b.n	8000a08 <ADC1_2_IRQHandler>
	...

08000a0c <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000a0c:	b580      	push	{r7, lr}
 8000a0e:	b082      	sub	sp, #8
 8000a10:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000a12:	2300      	movs	r3, #0
 8000a14:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0)
   __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000a16:	4b0c      	ldr	r3, [pc, #48]	; (8000a48 <HAL_Init+0x3c>)
 8000a18:	681b      	ldr	r3, [r3, #0]
 8000a1a:	4a0b      	ldr	r2, [pc, #44]	; (8000a48 <HAL_Init+0x3c>)
 8000a1c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000a20:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000a22:	2003      	movs	r0, #3
 8000a24:	f000 f944 	bl	8000cb0 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000a28:	2000      	movs	r0, #0
 8000a2a:	f000 f80f 	bl	8000a4c <HAL_InitTick>
 8000a2e:	4603      	mov	r3, r0
 8000a30:	2b00      	cmp	r3, #0
 8000a32:	d002      	beq.n	8000a3a <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 8000a34:	2301      	movs	r3, #1
 8000a36:	71fb      	strb	r3, [r7, #7]
 8000a38:	e001      	b.n	8000a3e <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000a3a:	f7ff fea3 	bl	8000784 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000a3e:	79fb      	ldrb	r3, [r7, #7]
}
 8000a40:	4618      	mov	r0, r3
 8000a42:	3708      	adds	r7, #8
 8000a44:	46bd      	mov	sp, r7
 8000a46:	bd80      	pop	{r7, pc}
 8000a48:	40022000 	.word	0x40022000

08000a4c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000a4c:	b580      	push	{r7, lr}
 8000a4e:	b084      	sub	sp, #16
 8000a50:	af00      	add	r7, sp, #0
 8000a52:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000a54:	2300      	movs	r3, #0
 8000a56:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8000a58:	4b17      	ldr	r3, [pc, #92]	; (8000ab8 <HAL_InitTick+0x6c>)
 8000a5a:	781b      	ldrb	r3, [r3, #0]
 8000a5c:	2b00      	cmp	r3, #0
 8000a5e:	d023      	beq.n	8000aa8 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8000a60:	4b16      	ldr	r3, [pc, #88]	; (8000abc <HAL_InitTick+0x70>)
 8000a62:	681a      	ldr	r2, [r3, #0]
 8000a64:	4b14      	ldr	r3, [pc, #80]	; (8000ab8 <HAL_InitTick+0x6c>)
 8000a66:	781b      	ldrb	r3, [r3, #0]
 8000a68:	4619      	mov	r1, r3
 8000a6a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000a6e:	fbb3 f3f1 	udiv	r3, r3, r1
 8000a72:	fbb2 f3f3 	udiv	r3, r2, r3
 8000a76:	4618      	mov	r0, r3
 8000a78:	f000 f941 	bl	8000cfe <HAL_SYSTICK_Config>
 8000a7c:	4603      	mov	r3, r0
 8000a7e:	2b00      	cmp	r3, #0
 8000a80:	d10f      	bne.n	8000aa2 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000a82:	687b      	ldr	r3, [r7, #4]
 8000a84:	2b0f      	cmp	r3, #15
 8000a86:	d809      	bhi.n	8000a9c <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000a88:	2200      	movs	r2, #0
 8000a8a:	6879      	ldr	r1, [r7, #4]
 8000a8c:	f04f 30ff 	mov.w	r0, #4294967295
 8000a90:	f000 f919 	bl	8000cc6 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000a94:	4a0a      	ldr	r2, [pc, #40]	; (8000ac0 <HAL_InitTick+0x74>)
 8000a96:	687b      	ldr	r3, [r7, #4]
 8000a98:	6013      	str	r3, [r2, #0]
 8000a9a:	e007      	b.n	8000aac <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8000a9c:	2301      	movs	r3, #1
 8000a9e:	73fb      	strb	r3, [r7, #15]
 8000aa0:	e004      	b.n	8000aac <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000aa2:	2301      	movs	r3, #1
 8000aa4:	73fb      	strb	r3, [r7, #15]
 8000aa6:	e001      	b.n	8000aac <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000aa8:	2301      	movs	r3, #1
 8000aaa:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8000aac:	7bfb      	ldrb	r3, [r7, #15]
}
 8000aae:	4618      	mov	r0, r3
 8000ab0:	3710      	adds	r7, #16
 8000ab2:	46bd      	mov	sp, r7
 8000ab4:	bd80      	pop	{r7, pc}
 8000ab6:	bf00      	nop
 8000ab8:	20000008 	.word	0x20000008
 8000abc:	20000000 	.word	0x20000000
 8000ac0:	20000004 	.word	0x20000004

08000ac4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000ac4:	b480      	push	{r7}
 8000ac6:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000ac8:	4b06      	ldr	r3, [pc, #24]	; (8000ae4 <HAL_IncTick+0x20>)
 8000aca:	781b      	ldrb	r3, [r3, #0]
 8000acc:	461a      	mov	r2, r3
 8000ace:	4b06      	ldr	r3, [pc, #24]	; (8000ae8 <HAL_IncTick+0x24>)
 8000ad0:	681b      	ldr	r3, [r3, #0]
 8000ad2:	4413      	add	r3, r2
 8000ad4:	4a04      	ldr	r2, [pc, #16]	; (8000ae8 <HAL_IncTick+0x24>)
 8000ad6:	6013      	str	r3, [r2, #0]
}
 8000ad8:	bf00      	nop
 8000ada:	46bd      	mov	sp, r7
 8000adc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ae0:	4770      	bx	lr
 8000ae2:	bf00      	nop
 8000ae4:	20000008 	.word	0x20000008
 8000ae8:	200000f8 	.word	0x200000f8

08000aec <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000aec:	b480      	push	{r7}
 8000aee:	af00      	add	r7, sp, #0
  return uwTick;
 8000af0:	4b03      	ldr	r3, [pc, #12]	; (8000b00 <HAL_GetTick+0x14>)
 8000af2:	681b      	ldr	r3, [r3, #0]
}
 8000af4:	4618      	mov	r0, r3
 8000af6:	46bd      	mov	sp, r7
 8000af8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000afc:	4770      	bx	lr
 8000afe:	bf00      	nop
 8000b00:	200000f8 	.word	0x200000f8

08000b04 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000b04:	b580      	push	{r7, lr}
 8000b06:	b084      	sub	sp, #16
 8000b08:	af00      	add	r7, sp, #0
 8000b0a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000b0c:	f7ff ffee 	bl	8000aec <HAL_GetTick>
 8000b10:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000b12:	687b      	ldr	r3, [r7, #4]
 8000b14:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000b16:	68fb      	ldr	r3, [r7, #12]
 8000b18:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000b1c:	d005      	beq.n	8000b2a <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8000b1e:	4b0a      	ldr	r3, [pc, #40]	; (8000b48 <HAL_Delay+0x44>)
 8000b20:	781b      	ldrb	r3, [r3, #0]
 8000b22:	461a      	mov	r2, r3
 8000b24:	68fb      	ldr	r3, [r7, #12]
 8000b26:	4413      	add	r3, r2
 8000b28:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000b2a:	bf00      	nop
 8000b2c:	f7ff ffde 	bl	8000aec <HAL_GetTick>
 8000b30:	4602      	mov	r2, r0
 8000b32:	68bb      	ldr	r3, [r7, #8]
 8000b34:	1ad3      	subs	r3, r2, r3
 8000b36:	68fa      	ldr	r2, [r7, #12]
 8000b38:	429a      	cmp	r2, r3
 8000b3a:	d8f7      	bhi.n	8000b2c <HAL_Delay+0x28>
  {
  }
}
 8000b3c:	bf00      	nop
 8000b3e:	bf00      	nop
 8000b40:	3710      	adds	r7, #16
 8000b42:	46bd      	mov	sp, r7
 8000b44:	bd80      	pop	{r7, pc}
 8000b46:	bf00      	nop
 8000b48:	20000008 	.word	0x20000008

08000b4c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000b4c:	b480      	push	{r7}
 8000b4e:	b085      	sub	sp, #20
 8000b50:	af00      	add	r7, sp, #0
 8000b52:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000b54:	687b      	ldr	r3, [r7, #4]
 8000b56:	f003 0307 	and.w	r3, r3, #7
 8000b5a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000b5c:	4b0c      	ldr	r3, [pc, #48]	; (8000b90 <__NVIC_SetPriorityGrouping+0x44>)
 8000b5e:	68db      	ldr	r3, [r3, #12]
 8000b60:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000b62:	68ba      	ldr	r2, [r7, #8]
 8000b64:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000b68:	4013      	ands	r3, r2
 8000b6a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000b6c:	68fb      	ldr	r3, [r7, #12]
 8000b6e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000b70:	68bb      	ldr	r3, [r7, #8]
 8000b72:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000b74:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000b78:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000b7c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000b7e:	4a04      	ldr	r2, [pc, #16]	; (8000b90 <__NVIC_SetPriorityGrouping+0x44>)
 8000b80:	68bb      	ldr	r3, [r7, #8]
 8000b82:	60d3      	str	r3, [r2, #12]
}
 8000b84:	bf00      	nop
 8000b86:	3714      	adds	r7, #20
 8000b88:	46bd      	mov	sp, r7
 8000b8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b8e:	4770      	bx	lr
 8000b90:	e000ed00 	.word	0xe000ed00

08000b94 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000b94:	b480      	push	{r7}
 8000b96:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000b98:	4b04      	ldr	r3, [pc, #16]	; (8000bac <__NVIC_GetPriorityGrouping+0x18>)
 8000b9a:	68db      	ldr	r3, [r3, #12]
 8000b9c:	0a1b      	lsrs	r3, r3, #8
 8000b9e:	f003 0307 	and.w	r3, r3, #7
}
 8000ba2:	4618      	mov	r0, r3
 8000ba4:	46bd      	mov	sp, r7
 8000ba6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000baa:	4770      	bx	lr
 8000bac:	e000ed00 	.word	0xe000ed00

08000bb0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000bb0:	b480      	push	{r7}
 8000bb2:	b083      	sub	sp, #12
 8000bb4:	af00      	add	r7, sp, #0
 8000bb6:	4603      	mov	r3, r0
 8000bb8:	6039      	str	r1, [r7, #0]
 8000bba:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000bbc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000bc0:	2b00      	cmp	r3, #0
 8000bc2:	db0a      	blt.n	8000bda <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000bc4:	683b      	ldr	r3, [r7, #0]
 8000bc6:	b2da      	uxtb	r2, r3
 8000bc8:	490c      	ldr	r1, [pc, #48]	; (8000bfc <__NVIC_SetPriority+0x4c>)
 8000bca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000bce:	0112      	lsls	r2, r2, #4
 8000bd0:	b2d2      	uxtb	r2, r2
 8000bd2:	440b      	add	r3, r1
 8000bd4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000bd8:	e00a      	b.n	8000bf0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000bda:	683b      	ldr	r3, [r7, #0]
 8000bdc:	b2da      	uxtb	r2, r3
 8000bde:	4908      	ldr	r1, [pc, #32]	; (8000c00 <__NVIC_SetPriority+0x50>)
 8000be0:	79fb      	ldrb	r3, [r7, #7]
 8000be2:	f003 030f 	and.w	r3, r3, #15
 8000be6:	3b04      	subs	r3, #4
 8000be8:	0112      	lsls	r2, r2, #4
 8000bea:	b2d2      	uxtb	r2, r2
 8000bec:	440b      	add	r3, r1
 8000bee:	761a      	strb	r2, [r3, #24]
}
 8000bf0:	bf00      	nop
 8000bf2:	370c      	adds	r7, #12
 8000bf4:	46bd      	mov	sp, r7
 8000bf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bfa:	4770      	bx	lr
 8000bfc:	e000e100 	.word	0xe000e100
 8000c00:	e000ed00 	.word	0xe000ed00

08000c04 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000c04:	b480      	push	{r7}
 8000c06:	b089      	sub	sp, #36	; 0x24
 8000c08:	af00      	add	r7, sp, #0
 8000c0a:	60f8      	str	r0, [r7, #12]
 8000c0c:	60b9      	str	r1, [r7, #8]
 8000c0e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000c10:	68fb      	ldr	r3, [r7, #12]
 8000c12:	f003 0307 	and.w	r3, r3, #7
 8000c16:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000c18:	69fb      	ldr	r3, [r7, #28]
 8000c1a:	f1c3 0307 	rsb	r3, r3, #7
 8000c1e:	2b04      	cmp	r3, #4
 8000c20:	bf28      	it	cs
 8000c22:	2304      	movcs	r3, #4
 8000c24:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000c26:	69fb      	ldr	r3, [r7, #28]
 8000c28:	3304      	adds	r3, #4
 8000c2a:	2b06      	cmp	r3, #6
 8000c2c:	d902      	bls.n	8000c34 <NVIC_EncodePriority+0x30>
 8000c2e:	69fb      	ldr	r3, [r7, #28]
 8000c30:	3b03      	subs	r3, #3
 8000c32:	e000      	b.n	8000c36 <NVIC_EncodePriority+0x32>
 8000c34:	2300      	movs	r3, #0
 8000c36:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000c38:	f04f 32ff 	mov.w	r2, #4294967295
 8000c3c:	69bb      	ldr	r3, [r7, #24]
 8000c3e:	fa02 f303 	lsl.w	r3, r2, r3
 8000c42:	43da      	mvns	r2, r3
 8000c44:	68bb      	ldr	r3, [r7, #8]
 8000c46:	401a      	ands	r2, r3
 8000c48:	697b      	ldr	r3, [r7, #20]
 8000c4a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000c4c:	f04f 31ff 	mov.w	r1, #4294967295
 8000c50:	697b      	ldr	r3, [r7, #20]
 8000c52:	fa01 f303 	lsl.w	r3, r1, r3
 8000c56:	43d9      	mvns	r1, r3
 8000c58:	687b      	ldr	r3, [r7, #4]
 8000c5a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000c5c:	4313      	orrs	r3, r2
         );
}
 8000c5e:	4618      	mov	r0, r3
 8000c60:	3724      	adds	r7, #36	; 0x24
 8000c62:	46bd      	mov	sp, r7
 8000c64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c68:	4770      	bx	lr
	...

08000c6c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000c6c:	b580      	push	{r7, lr}
 8000c6e:	b082      	sub	sp, #8
 8000c70:	af00      	add	r7, sp, #0
 8000c72:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000c74:	687b      	ldr	r3, [r7, #4]
 8000c76:	3b01      	subs	r3, #1
 8000c78:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000c7c:	d301      	bcc.n	8000c82 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000c7e:	2301      	movs	r3, #1
 8000c80:	e00f      	b.n	8000ca2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000c82:	4a0a      	ldr	r2, [pc, #40]	; (8000cac <SysTick_Config+0x40>)
 8000c84:	687b      	ldr	r3, [r7, #4]
 8000c86:	3b01      	subs	r3, #1
 8000c88:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000c8a:	210f      	movs	r1, #15
 8000c8c:	f04f 30ff 	mov.w	r0, #4294967295
 8000c90:	f7ff ff8e 	bl	8000bb0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000c94:	4b05      	ldr	r3, [pc, #20]	; (8000cac <SysTick_Config+0x40>)
 8000c96:	2200      	movs	r2, #0
 8000c98:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000c9a:	4b04      	ldr	r3, [pc, #16]	; (8000cac <SysTick_Config+0x40>)
 8000c9c:	2207      	movs	r2, #7
 8000c9e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000ca0:	2300      	movs	r3, #0
}
 8000ca2:	4618      	mov	r0, r3
 8000ca4:	3708      	adds	r7, #8
 8000ca6:	46bd      	mov	sp, r7
 8000ca8:	bd80      	pop	{r7, pc}
 8000caa:	bf00      	nop
 8000cac:	e000e010 	.word	0xe000e010

08000cb0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000cb0:	b580      	push	{r7, lr}
 8000cb2:	b082      	sub	sp, #8
 8000cb4:	af00      	add	r7, sp, #0
 8000cb6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000cb8:	6878      	ldr	r0, [r7, #4]
 8000cba:	f7ff ff47 	bl	8000b4c <__NVIC_SetPriorityGrouping>
}
 8000cbe:	bf00      	nop
 8000cc0:	3708      	adds	r7, #8
 8000cc2:	46bd      	mov	sp, r7
 8000cc4:	bd80      	pop	{r7, pc}

08000cc6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000cc6:	b580      	push	{r7, lr}
 8000cc8:	b086      	sub	sp, #24
 8000cca:	af00      	add	r7, sp, #0
 8000ccc:	4603      	mov	r3, r0
 8000cce:	60b9      	str	r1, [r7, #8]
 8000cd0:	607a      	str	r2, [r7, #4]
 8000cd2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8000cd4:	2300      	movs	r3, #0
 8000cd6:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8000cd8:	f7ff ff5c 	bl	8000b94 <__NVIC_GetPriorityGrouping>
 8000cdc:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000cde:	687a      	ldr	r2, [r7, #4]
 8000ce0:	68b9      	ldr	r1, [r7, #8]
 8000ce2:	6978      	ldr	r0, [r7, #20]
 8000ce4:	f7ff ff8e 	bl	8000c04 <NVIC_EncodePriority>
 8000ce8:	4602      	mov	r2, r0
 8000cea:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000cee:	4611      	mov	r1, r2
 8000cf0:	4618      	mov	r0, r3
 8000cf2:	f7ff ff5d 	bl	8000bb0 <__NVIC_SetPriority>
}
 8000cf6:	bf00      	nop
 8000cf8:	3718      	adds	r7, #24
 8000cfa:	46bd      	mov	sp, r7
 8000cfc:	bd80      	pop	{r7, pc}

08000cfe <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000cfe:	b580      	push	{r7, lr}
 8000d00:	b082      	sub	sp, #8
 8000d02:	af00      	add	r7, sp, #0
 8000d04:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000d06:	6878      	ldr	r0, [r7, #4]
 8000d08:	f7ff ffb0 	bl	8000c6c <SysTick_Config>
 8000d0c:	4603      	mov	r3, r0
}
 8000d0e:	4618      	mov	r0, r3
 8000d10:	3708      	adds	r7, #8
 8000d12:	46bd      	mov	sp, r7
 8000d14:	bd80      	pop	{r7, pc}
	...

08000d18 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000d18:	b480      	push	{r7}
 8000d1a:	b087      	sub	sp, #28
 8000d1c:	af00      	add	r7, sp, #0
 8000d1e:	6078      	str	r0, [r7, #4]
 8000d20:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000d22:	2300      	movs	r3, #0
 8000d24:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000d26:	e17f      	b.n	8001028 <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8000d28:	683b      	ldr	r3, [r7, #0]
 8000d2a:	681a      	ldr	r2, [r3, #0]
 8000d2c:	2101      	movs	r1, #1
 8000d2e:	697b      	ldr	r3, [r7, #20]
 8000d30:	fa01 f303 	lsl.w	r3, r1, r3
 8000d34:	4013      	ands	r3, r2
 8000d36:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8000d38:	68fb      	ldr	r3, [r7, #12]
 8000d3a:	2b00      	cmp	r3, #0
 8000d3c:	f000 8171 	beq.w	8001022 <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000d40:	683b      	ldr	r3, [r7, #0]
 8000d42:	685b      	ldr	r3, [r3, #4]
 8000d44:	f003 0303 	and.w	r3, r3, #3
 8000d48:	2b01      	cmp	r3, #1
 8000d4a:	d005      	beq.n	8000d58 <HAL_GPIO_Init+0x40>
 8000d4c:	683b      	ldr	r3, [r7, #0]
 8000d4e:	685b      	ldr	r3, [r3, #4]
 8000d50:	f003 0303 	and.w	r3, r3, #3
 8000d54:	2b02      	cmp	r3, #2
 8000d56:	d130      	bne.n	8000dba <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000d58:	687b      	ldr	r3, [r7, #4]
 8000d5a:	689b      	ldr	r3, [r3, #8]
 8000d5c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8000d5e:	697b      	ldr	r3, [r7, #20]
 8000d60:	005b      	lsls	r3, r3, #1
 8000d62:	2203      	movs	r2, #3
 8000d64:	fa02 f303 	lsl.w	r3, r2, r3
 8000d68:	43db      	mvns	r3, r3
 8000d6a:	693a      	ldr	r2, [r7, #16]
 8000d6c:	4013      	ands	r3, r2
 8000d6e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8000d70:	683b      	ldr	r3, [r7, #0]
 8000d72:	68da      	ldr	r2, [r3, #12]
 8000d74:	697b      	ldr	r3, [r7, #20]
 8000d76:	005b      	lsls	r3, r3, #1
 8000d78:	fa02 f303 	lsl.w	r3, r2, r3
 8000d7c:	693a      	ldr	r2, [r7, #16]
 8000d7e:	4313      	orrs	r3, r2
 8000d80:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000d82:	687b      	ldr	r3, [r7, #4]
 8000d84:	693a      	ldr	r2, [r7, #16]
 8000d86:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000d88:	687b      	ldr	r3, [r7, #4]
 8000d8a:	685b      	ldr	r3, [r3, #4]
 8000d8c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8000d8e:	2201      	movs	r2, #1
 8000d90:	697b      	ldr	r3, [r7, #20]
 8000d92:	fa02 f303 	lsl.w	r3, r2, r3
 8000d96:	43db      	mvns	r3, r3
 8000d98:	693a      	ldr	r2, [r7, #16]
 8000d9a:	4013      	ands	r3, r2
 8000d9c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000d9e:	683b      	ldr	r3, [r7, #0]
 8000da0:	685b      	ldr	r3, [r3, #4]
 8000da2:	091b      	lsrs	r3, r3, #4
 8000da4:	f003 0201 	and.w	r2, r3, #1
 8000da8:	697b      	ldr	r3, [r7, #20]
 8000daa:	fa02 f303 	lsl.w	r3, r2, r3
 8000dae:	693a      	ldr	r2, [r7, #16]
 8000db0:	4313      	orrs	r3, r2
 8000db2:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000db4:	687b      	ldr	r3, [r7, #4]
 8000db6:	693a      	ldr	r2, [r7, #16]
 8000db8:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 8000dba:	683b      	ldr	r3, [r7, #0]
 8000dbc:	685b      	ldr	r3, [r3, #4]
 8000dbe:	f003 0303 	and.w	r3, r3, #3
 8000dc2:	2b03      	cmp	r3, #3
 8000dc4:	d118      	bne.n	8000df8 <HAL_GPIO_Init+0xe0>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 8000dc6:	687b      	ldr	r3, [r7, #4]
 8000dc8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000dca:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 8000dcc:	2201      	movs	r2, #1
 8000dce:	697b      	ldr	r3, [r7, #20]
 8000dd0:	fa02 f303 	lsl.w	r3, r2, r3
 8000dd4:	43db      	mvns	r3, r3
 8000dd6:	693a      	ldr	r2, [r7, #16]
 8000dd8:	4013      	ands	r3, r2
 8000dda:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 8000ddc:	683b      	ldr	r3, [r7, #0]
 8000dde:	685b      	ldr	r3, [r3, #4]
 8000de0:	08db      	lsrs	r3, r3, #3
 8000de2:	f003 0201 	and.w	r2, r3, #1
 8000de6:	697b      	ldr	r3, [r7, #20]
 8000de8:	fa02 f303 	lsl.w	r3, r2, r3
 8000dec:	693a      	ldr	r2, [r7, #16]
 8000dee:	4313      	orrs	r3, r2
 8000df0:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 8000df2:	687b      	ldr	r3, [r7, #4]
 8000df4:	693a      	ldr	r2, [r7, #16]
 8000df6:	62da      	str	r2, [r3, #44]	; 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000df8:	683b      	ldr	r3, [r7, #0]
 8000dfa:	685b      	ldr	r3, [r3, #4]
 8000dfc:	f003 0303 	and.w	r3, r3, #3
 8000e00:	2b03      	cmp	r3, #3
 8000e02:	d017      	beq.n	8000e34 <HAL_GPIO_Init+0x11c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8000e04:	687b      	ldr	r3, [r7, #4]
 8000e06:	68db      	ldr	r3, [r3, #12]
 8000e08:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8000e0a:	697b      	ldr	r3, [r7, #20]
 8000e0c:	005b      	lsls	r3, r3, #1
 8000e0e:	2203      	movs	r2, #3
 8000e10:	fa02 f303 	lsl.w	r3, r2, r3
 8000e14:	43db      	mvns	r3, r3
 8000e16:	693a      	ldr	r2, [r7, #16]
 8000e18:	4013      	ands	r3, r2
 8000e1a:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000e1c:	683b      	ldr	r3, [r7, #0]
 8000e1e:	689a      	ldr	r2, [r3, #8]
 8000e20:	697b      	ldr	r3, [r7, #20]
 8000e22:	005b      	lsls	r3, r3, #1
 8000e24:	fa02 f303 	lsl.w	r3, r2, r3
 8000e28:	693a      	ldr	r2, [r7, #16]
 8000e2a:	4313      	orrs	r3, r2
 8000e2c:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8000e2e:	687b      	ldr	r3, [r7, #4]
 8000e30:	693a      	ldr	r2, [r7, #16]
 8000e32:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000e34:	683b      	ldr	r3, [r7, #0]
 8000e36:	685b      	ldr	r3, [r3, #4]
 8000e38:	f003 0303 	and.w	r3, r3, #3
 8000e3c:	2b02      	cmp	r3, #2
 8000e3e:	d123      	bne.n	8000e88 <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8000e40:	697b      	ldr	r3, [r7, #20]
 8000e42:	08da      	lsrs	r2, r3, #3
 8000e44:	687b      	ldr	r3, [r7, #4]
 8000e46:	3208      	adds	r2, #8
 8000e48:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000e4c:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8000e4e:	697b      	ldr	r3, [r7, #20]
 8000e50:	f003 0307 	and.w	r3, r3, #7
 8000e54:	009b      	lsls	r3, r3, #2
 8000e56:	220f      	movs	r2, #15
 8000e58:	fa02 f303 	lsl.w	r3, r2, r3
 8000e5c:	43db      	mvns	r3, r3
 8000e5e:	693a      	ldr	r2, [r7, #16]
 8000e60:	4013      	ands	r3, r2
 8000e62:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8000e64:	683b      	ldr	r3, [r7, #0]
 8000e66:	691a      	ldr	r2, [r3, #16]
 8000e68:	697b      	ldr	r3, [r7, #20]
 8000e6a:	f003 0307 	and.w	r3, r3, #7
 8000e6e:	009b      	lsls	r3, r3, #2
 8000e70:	fa02 f303 	lsl.w	r3, r2, r3
 8000e74:	693a      	ldr	r2, [r7, #16]
 8000e76:	4313      	orrs	r3, r2
 8000e78:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8000e7a:	697b      	ldr	r3, [r7, #20]
 8000e7c:	08da      	lsrs	r2, r3, #3
 8000e7e:	687b      	ldr	r3, [r7, #4]
 8000e80:	3208      	adds	r2, #8
 8000e82:	6939      	ldr	r1, [r7, #16]
 8000e84:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000e88:	687b      	ldr	r3, [r7, #4]
 8000e8a:	681b      	ldr	r3, [r3, #0]
 8000e8c:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8000e8e:	697b      	ldr	r3, [r7, #20]
 8000e90:	005b      	lsls	r3, r3, #1
 8000e92:	2203      	movs	r2, #3
 8000e94:	fa02 f303 	lsl.w	r3, r2, r3
 8000e98:	43db      	mvns	r3, r3
 8000e9a:	693a      	ldr	r2, [r7, #16]
 8000e9c:	4013      	ands	r3, r2
 8000e9e:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8000ea0:	683b      	ldr	r3, [r7, #0]
 8000ea2:	685b      	ldr	r3, [r3, #4]
 8000ea4:	f003 0203 	and.w	r2, r3, #3
 8000ea8:	697b      	ldr	r3, [r7, #20]
 8000eaa:	005b      	lsls	r3, r3, #1
 8000eac:	fa02 f303 	lsl.w	r3, r2, r3
 8000eb0:	693a      	ldr	r2, [r7, #16]
 8000eb2:	4313      	orrs	r3, r2
 8000eb4:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8000eb6:	687b      	ldr	r3, [r7, #4]
 8000eb8:	693a      	ldr	r2, [r7, #16]
 8000eba:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8000ebc:	683b      	ldr	r3, [r7, #0]
 8000ebe:	685b      	ldr	r3, [r3, #4]
 8000ec0:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8000ec4:	2b00      	cmp	r3, #0
 8000ec6:	f000 80ac 	beq.w	8001022 <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000eca:	4b5f      	ldr	r3, [pc, #380]	; (8001048 <HAL_GPIO_Init+0x330>)
 8000ecc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000ece:	4a5e      	ldr	r2, [pc, #376]	; (8001048 <HAL_GPIO_Init+0x330>)
 8000ed0:	f043 0301 	orr.w	r3, r3, #1
 8000ed4:	6613      	str	r3, [r2, #96]	; 0x60
 8000ed6:	4b5c      	ldr	r3, [pc, #368]	; (8001048 <HAL_GPIO_Init+0x330>)
 8000ed8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000eda:	f003 0301 	and.w	r3, r3, #1
 8000ede:	60bb      	str	r3, [r7, #8]
 8000ee0:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8000ee2:	4a5a      	ldr	r2, [pc, #360]	; (800104c <HAL_GPIO_Init+0x334>)
 8000ee4:	697b      	ldr	r3, [r7, #20]
 8000ee6:	089b      	lsrs	r3, r3, #2
 8000ee8:	3302      	adds	r3, #2
 8000eea:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000eee:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8000ef0:	697b      	ldr	r3, [r7, #20]
 8000ef2:	f003 0303 	and.w	r3, r3, #3
 8000ef6:	009b      	lsls	r3, r3, #2
 8000ef8:	220f      	movs	r2, #15
 8000efa:	fa02 f303 	lsl.w	r3, r2, r3
 8000efe:	43db      	mvns	r3, r3
 8000f00:	693a      	ldr	r2, [r7, #16]
 8000f02:	4013      	ands	r3, r2
 8000f04:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8000f06:	687b      	ldr	r3, [r7, #4]
 8000f08:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8000f0c:	d025      	beq.n	8000f5a <HAL_GPIO_Init+0x242>
 8000f0e:	687b      	ldr	r3, [r7, #4]
 8000f10:	4a4f      	ldr	r2, [pc, #316]	; (8001050 <HAL_GPIO_Init+0x338>)
 8000f12:	4293      	cmp	r3, r2
 8000f14:	d01f      	beq.n	8000f56 <HAL_GPIO_Init+0x23e>
 8000f16:	687b      	ldr	r3, [r7, #4]
 8000f18:	4a4e      	ldr	r2, [pc, #312]	; (8001054 <HAL_GPIO_Init+0x33c>)
 8000f1a:	4293      	cmp	r3, r2
 8000f1c:	d019      	beq.n	8000f52 <HAL_GPIO_Init+0x23a>
 8000f1e:	687b      	ldr	r3, [r7, #4]
 8000f20:	4a4d      	ldr	r2, [pc, #308]	; (8001058 <HAL_GPIO_Init+0x340>)
 8000f22:	4293      	cmp	r3, r2
 8000f24:	d013      	beq.n	8000f4e <HAL_GPIO_Init+0x236>
 8000f26:	687b      	ldr	r3, [r7, #4]
 8000f28:	4a4c      	ldr	r2, [pc, #304]	; (800105c <HAL_GPIO_Init+0x344>)
 8000f2a:	4293      	cmp	r3, r2
 8000f2c:	d00d      	beq.n	8000f4a <HAL_GPIO_Init+0x232>
 8000f2e:	687b      	ldr	r3, [r7, #4]
 8000f30:	4a4b      	ldr	r2, [pc, #300]	; (8001060 <HAL_GPIO_Init+0x348>)
 8000f32:	4293      	cmp	r3, r2
 8000f34:	d007      	beq.n	8000f46 <HAL_GPIO_Init+0x22e>
 8000f36:	687b      	ldr	r3, [r7, #4]
 8000f38:	4a4a      	ldr	r2, [pc, #296]	; (8001064 <HAL_GPIO_Init+0x34c>)
 8000f3a:	4293      	cmp	r3, r2
 8000f3c:	d101      	bne.n	8000f42 <HAL_GPIO_Init+0x22a>
 8000f3e:	2306      	movs	r3, #6
 8000f40:	e00c      	b.n	8000f5c <HAL_GPIO_Init+0x244>
 8000f42:	2307      	movs	r3, #7
 8000f44:	e00a      	b.n	8000f5c <HAL_GPIO_Init+0x244>
 8000f46:	2305      	movs	r3, #5
 8000f48:	e008      	b.n	8000f5c <HAL_GPIO_Init+0x244>
 8000f4a:	2304      	movs	r3, #4
 8000f4c:	e006      	b.n	8000f5c <HAL_GPIO_Init+0x244>
 8000f4e:	2303      	movs	r3, #3
 8000f50:	e004      	b.n	8000f5c <HAL_GPIO_Init+0x244>
 8000f52:	2302      	movs	r3, #2
 8000f54:	e002      	b.n	8000f5c <HAL_GPIO_Init+0x244>
 8000f56:	2301      	movs	r3, #1
 8000f58:	e000      	b.n	8000f5c <HAL_GPIO_Init+0x244>
 8000f5a:	2300      	movs	r3, #0
 8000f5c:	697a      	ldr	r2, [r7, #20]
 8000f5e:	f002 0203 	and.w	r2, r2, #3
 8000f62:	0092      	lsls	r2, r2, #2
 8000f64:	4093      	lsls	r3, r2
 8000f66:	693a      	ldr	r2, [r7, #16]
 8000f68:	4313      	orrs	r3, r2
 8000f6a:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8000f6c:	4937      	ldr	r1, [pc, #220]	; (800104c <HAL_GPIO_Init+0x334>)
 8000f6e:	697b      	ldr	r3, [r7, #20]
 8000f70:	089b      	lsrs	r3, r3, #2
 8000f72:	3302      	adds	r3, #2
 8000f74:	693a      	ldr	r2, [r7, #16]
 8000f76:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8000f7a:	4b3b      	ldr	r3, [pc, #236]	; (8001068 <HAL_GPIO_Init+0x350>)
 8000f7c:	689b      	ldr	r3, [r3, #8]
 8000f7e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000f80:	68fb      	ldr	r3, [r7, #12]
 8000f82:	43db      	mvns	r3, r3
 8000f84:	693a      	ldr	r2, [r7, #16]
 8000f86:	4013      	ands	r3, r2
 8000f88:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8000f8a:	683b      	ldr	r3, [r7, #0]
 8000f8c:	685b      	ldr	r3, [r3, #4]
 8000f8e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000f92:	2b00      	cmp	r3, #0
 8000f94:	d003      	beq.n	8000f9e <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 8000f96:	693a      	ldr	r2, [r7, #16]
 8000f98:	68fb      	ldr	r3, [r7, #12]
 8000f9a:	4313      	orrs	r3, r2
 8000f9c:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8000f9e:	4a32      	ldr	r2, [pc, #200]	; (8001068 <HAL_GPIO_Init+0x350>)
 8000fa0:	693b      	ldr	r3, [r7, #16]
 8000fa2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8000fa4:	4b30      	ldr	r3, [pc, #192]	; (8001068 <HAL_GPIO_Init+0x350>)
 8000fa6:	68db      	ldr	r3, [r3, #12]
 8000fa8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000faa:	68fb      	ldr	r3, [r7, #12]
 8000fac:	43db      	mvns	r3, r3
 8000fae:	693a      	ldr	r2, [r7, #16]
 8000fb0:	4013      	ands	r3, r2
 8000fb2:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8000fb4:	683b      	ldr	r3, [r7, #0]
 8000fb6:	685b      	ldr	r3, [r3, #4]
 8000fb8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000fbc:	2b00      	cmp	r3, #0
 8000fbe:	d003      	beq.n	8000fc8 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8000fc0:	693a      	ldr	r2, [r7, #16]
 8000fc2:	68fb      	ldr	r3, [r7, #12]
 8000fc4:	4313      	orrs	r3, r2
 8000fc6:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8000fc8:	4a27      	ldr	r2, [pc, #156]	; (8001068 <HAL_GPIO_Init+0x350>)
 8000fca:	693b      	ldr	r3, [r7, #16]
 8000fcc:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8000fce:	4b26      	ldr	r3, [pc, #152]	; (8001068 <HAL_GPIO_Init+0x350>)
 8000fd0:	685b      	ldr	r3, [r3, #4]
 8000fd2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000fd4:	68fb      	ldr	r3, [r7, #12]
 8000fd6:	43db      	mvns	r3, r3
 8000fd8:	693a      	ldr	r2, [r7, #16]
 8000fda:	4013      	ands	r3, r2
 8000fdc:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8000fde:	683b      	ldr	r3, [r7, #0]
 8000fe0:	685b      	ldr	r3, [r3, #4]
 8000fe2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000fe6:	2b00      	cmp	r3, #0
 8000fe8:	d003      	beq.n	8000ff2 <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 8000fea:	693a      	ldr	r2, [r7, #16]
 8000fec:	68fb      	ldr	r3, [r7, #12]
 8000fee:	4313      	orrs	r3, r2
 8000ff0:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8000ff2:	4a1d      	ldr	r2, [pc, #116]	; (8001068 <HAL_GPIO_Init+0x350>)
 8000ff4:	693b      	ldr	r3, [r7, #16]
 8000ff6:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8000ff8:	4b1b      	ldr	r3, [pc, #108]	; (8001068 <HAL_GPIO_Init+0x350>)
 8000ffa:	681b      	ldr	r3, [r3, #0]
 8000ffc:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000ffe:	68fb      	ldr	r3, [r7, #12]
 8001000:	43db      	mvns	r3, r3
 8001002:	693a      	ldr	r2, [r7, #16]
 8001004:	4013      	ands	r3, r2
 8001006:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001008:	683b      	ldr	r3, [r7, #0]
 800100a:	685b      	ldr	r3, [r3, #4]
 800100c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001010:	2b00      	cmp	r3, #0
 8001012:	d003      	beq.n	800101c <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 8001014:	693a      	ldr	r2, [r7, #16]
 8001016:	68fb      	ldr	r3, [r7, #12]
 8001018:	4313      	orrs	r3, r2
 800101a:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 800101c:	4a12      	ldr	r2, [pc, #72]	; (8001068 <HAL_GPIO_Init+0x350>)
 800101e:	693b      	ldr	r3, [r7, #16]
 8001020:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8001022:	697b      	ldr	r3, [r7, #20]
 8001024:	3301      	adds	r3, #1
 8001026:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001028:	683b      	ldr	r3, [r7, #0]
 800102a:	681a      	ldr	r2, [r3, #0]
 800102c:	697b      	ldr	r3, [r7, #20]
 800102e:	fa22 f303 	lsr.w	r3, r2, r3
 8001032:	2b00      	cmp	r3, #0
 8001034:	f47f ae78 	bne.w	8000d28 <HAL_GPIO_Init+0x10>
  }
}
 8001038:	bf00      	nop
 800103a:	bf00      	nop
 800103c:	371c      	adds	r7, #28
 800103e:	46bd      	mov	sp, r7
 8001040:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001044:	4770      	bx	lr
 8001046:	bf00      	nop
 8001048:	40021000 	.word	0x40021000
 800104c:	40010000 	.word	0x40010000
 8001050:	48000400 	.word	0x48000400
 8001054:	48000800 	.word	0x48000800
 8001058:	48000c00 	.word	0x48000c00
 800105c:	48001000 	.word	0x48001000
 8001060:	48001400 	.word	0x48001400
 8001064:	48001800 	.word	0x48001800
 8001068:	40010400 	.word	0x40010400

0800106c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800106c:	b480      	push	{r7}
 800106e:	b083      	sub	sp, #12
 8001070:	af00      	add	r7, sp, #0
 8001072:	6078      	str	r0, [r7, #4]
 8001074:	460b      	mov	r3, r1
 8001076:	807b      	strh	r3, [r7, #2]
 8001078:	4613      	mov	r3, r2
 800107a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800107c:	787b      	ldrb	r3, [r7, #1]
 800107e:	2b00      	cmp	r3, #0
 8001080:	d003      	beq.n	800108a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001082:	887a      	ldrh	r2, [r7, #2]
 8001084:	687b      	ldr	r3, [r7, #4]
 8001086:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001088:	e002      	b.n	8001090 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800108a:	887a      	ldrh	r2, [r7, #2]
 800108c:	687b      	ldr	r3, [r7, #4]
 800108e:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001090:	bf00      	nop
 8001092:	370c      	adds	r7, #12
 8001094:	46bd      	mov	sp, r7
 8001096:	f85d 7b04 	ldr.w	r7, [sp], #4
 800109a:	4770      	bx	lr

0800109c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800109c:	b580      	push	{r7, lr}
 800109e:	b082      	sub	sp, #8
 80010a0:	af00      	add	r7, sp, #0
 80010a2:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80010a4:	687b      	ldr	r3, [r7, #4]
 80010a6:	2b00      	cmp	r3, #0
 80010a8:	d101      	bne.n	80010ae <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80010aa:	2301      	movs	r3, #1
 80010ac:	e081      	b.n	80011b2 <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80010ae:	687b      	ldr	r3, [r7, #4]
 80010b0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80010b4:	b2db      	uxtb	r3, r3
 80010b6:	2b00      	cmp	r3, #0
 80010b8:	d106      	bne.n	80010c8 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80010ba:	687b      	ldr	r3, [r7, #4]
 80010bc:	2200      	movs	r2, #0
 80010be:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 80010c2:	6878      	ldr	r0, [r7, #4]
 80010c4:	f7ff fb82 	bl	80007cc <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80010c8:	687b      	ldr	r3, [r7, #4]
 80010ca:	2224      	movs	r2, #36	; 0x24
 80010cc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80010d0:	687b      	ldr	r3, [r7, #4]
 80010d2:	681b      	ldr	r3, [r3, #0]
 80010d4:	681a      	ldr	r2, [r3, #0]
 80010d6:	687b      	ldr	r3, [r7, #4]
 80010d8:	681b      	ldr	r3, [r3, #0]
 80010da:	f022 0201 	bic.w	r2, r2, #1
 80010de:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 80010e0:	687b      	ldr	r3, [r7, #4]
 80010e2:	685a      	ldr	r2, [r3, #4]
 80010e4:	687b      	ldr	r3, [r7, #4]
 80010e6:	681b      	ldr	r3, [r3, #0]
 80010e8:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80010ec:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 80010ee:	687b      	ldr	r3, [r7, #4]
 80010f0:	681b      	ldr	r3, [r3, #0]
 80010f2:	689a      	ldr	r2, [r3, #8]
 80010f4:	687b      	ldr	r3, [r7, #4]
 80010f6:	681b      	ldr	r3, [r3, #0]
 80010f8:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80010fc:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80010fe:	687b      	ldr	r3, [r7, #4]
 8001100:	68db      	ldr	r3, [r3, #12]
 8001102:	2b01      	cmp	r3, #1
 8001104:	d107      	bne.n	8001116 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8001106:	687b      	ldr	r3, [r7, #4]
 8001108:	689a      	ldr	r2, [r3, #8]
 800110a:	687b      	ldr	r3, [r7, #4]
 800110c:	681b      	ldr	r3, [r3, #0]
 800110e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8001112:	609a      	str	r2, [r3, #8]
 8001114:	e006      	b.n	8001124 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8001116:	687b      	ldr	r3, [r7, #4]
 8001118:	689a      	ldr	r2, [r3, #8]
 800111a:	687b      	ldr	r3, [r7, #4]
 800111c:	681b      	ldr	r3, [r3, #0]
 800111e:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8001122:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8001124:	687b      	ldr	r3, [r7, #4]
 8001126:	68db      	ldr	r3, [r3, #12]
 8001128:	2b02      	cmp	r3, #2
 800112a:	d104      	bne.n	8001136 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 800112c:	687b      	ldr	r3, [r7, #4]
 800112e:	681b      	ldr	r3, [r3, #0]
 8001130:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001134:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8001136:	687b      	ldr	r3, [r7, #4]
 8001138:	681b      	ldr	r3, [r3, #0]
 800113a:	685b      	ldr	r3, [r3, #4]
 800113c:	687a      	ldr	r2, [r7, #4]
 800113e:	6812      	ldr	r2, [r2, #0]
 8001140:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001144:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001148:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 800114a:	687b      	ldr	r3, [r7, #4]
 800114c:	681b      	ldr	r3, [r3, #0]
 800114e:	68da      	ldr	r2, [r3, #12]
 8001150:	687b      	ldr	r3, [r7, #4]
 8001152:	681b      	ldr	r3, [r3, #0]
 8001154:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001158:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800115a:	687b      	ldr	r3, [r7, #4]
 800115c:	691a      	ldr	r2, [r3, #16]
 800115e:	687b      	ldr	r3, [r7, #4]
 8001160:	695b      	ldr	r3, [r3, #20]
 8001162:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8001166:	687b      	ldr	r3, [r7, #4]
 8001168:	699b      	ldr	r3, [r3, #24]
 800116a:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800116c:	687b      	ldr	r3, [r7, #4]
 800116e:	681b      	ldr	r3, [r3, #0]
 8001170:	430a      	orrs	r2, r1
 8001172:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8001174:	687b      	ldr	r3, [r7, #4]
 8001176:	69d9      	ldr	r1, [r3, #28]
 8001178:	687b      	ldr	r3, [r7, #4]
 800117a:	6a1a      	ldr	r2, [r3, #32]
 800117c:	687b      	ldr	r3, [r7, #4]
 800117e:	681b      	ldr	r3, [r3, #0]
 8001180:	430a      	orrs	r2, r1
 8001182:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001184:	687b      	ldr	r3, [r7, #4]
 8001186:	681b      	ldr	r3, [r3, #0]
 8001188:	681a      	ldr	r2, [r3, #0]
 800118a:	687b      	ldr	r3, [r7, #4]
 800118c:	681b      	ldr	r3, [r3, #0]
 800118e:	f042 0201 	orr.w	r2, r2, #1
 8001192:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001194:	687b      	ldr	r3, [r7, #4]
 8001196:	2200      	movs	r2, #0
 8001198:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 800119a:	687b      	ldr	r3, [r7, #4]
 800119c:	2220      	movs	r2, #32
 800119e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 80011a2:	687b      	ldr	r3, [r7, #4]
 80011a4:	2200      	movs	r2, #0
 80011a6:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80011a8:	687b      	ldr	r3, [r7, #4]
 80011aa:	2200      	movs	r2, #0
 80011ac:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 80011b0:	2300      	movs	r3, #0
}
 80011b2:	4618      	mov	r0, r3
 80011b4:	3708      	adds	r7, #8
 80011b6:	46bd      	mov	sp, r7
 80011b8:	bd80      	pop	{r7, pc}

080011ba <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 80011ba:	b480      	push	{r7}
 80011bc:	b083      	sub	sp, #12
 80011be:	af00      	add	r7, sp, #0
 80011c0:	6078      	str	r0, [r7, #4]
 80011c2:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80011c4:	687b      	ldr	r3, [r7, #4]
 80011c6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80011ca:	b2db      	uxtb	r3, r3
 80011cc:	2b20      	cmp	r3, #32
 80011ce:	d138      	bne.n	8001242 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80011d0:	687b      	ldr	r3, [r7, #4]
 80011d2:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80011d6:	2b01      	cmp	r3, #1
 80011d8:	d101      	bne.n	80011de <HAL_I2CEx_ConfigAnalogFilter+0x24>
 80011da:	2302      	movs	r3, #2
 80011dc:	e032      	b.n	8001244 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 80011de:	687b      	ldr	r3, [r7, #4]
 80011e0:	2201      	movs	r2, #1
 80011e2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80011e6:	687b      	ldr	r3, [r7, #4]
 80011e8:	2224      	movs	r2, #36	; 0x24
 80011ea:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80011ee:	687b      	ldr	r3, [r7, #4]
 80011f0:	681b      	ldr	r3, [r3, #0]
 80011f2:	681a      	ldr	r2, [r3, #0]
 80011f4:	687b      	ldr	r3, [r7, #4]
 80011f6:	681b      	ldr	r3, [r3, #0]
 80011f8:	f022 0201 	bic.w	r2, r2, #1
 80011fc:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 80011fe:	687b      	ldr	r3, [r7, #4]
 8001200:	681b      	ldr	r3, [r3, #0]
 8001202:	681a      	ldr	r2, [r3, #0]
 8001204:	687b      	ldr	r3, [r7, #4]
 8001206:	681b      	ldr	r3, [r3, #0]
 8001208:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800120c:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 800120e:	687b      	ldr	r3, [r7, #4]
 8001210:	681b      	ldr	r3, [r3, #0]
 8001212:	6819      	ldr	r1, [r3, #0]
 8001214:	687b      	ldr	r3, [r7, #4]
 8001216:	681b      	ldr	r3, [r3, #0]
 8001218:	683a      	ldr	r2, [r7, #0]
 800121a:	430a      	orrs	r2, r1
 800121c:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800121e:	687b      	ldr	r3, [r7, #4]
 8001220:	681b      	ldr	r3, [r3, #0]
 8001222:	681a      	ldr	r2, [r3, #0]
 8001224:	687b      	ldr	r3, [r7, #4]
 8001226:	681b      	ldr	r3, [r3, #0]
 8001228:	f042 0201 	orr.w	r2, r2, #1
 800122c:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800122e:	687b      	ldr	r3, [r7, #4]
 8001230:	2220      	movs	r2, #32
 8001232:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001236:	687b      	ldr	r3, [r7, #4]
 8001238:	2200      	movs	r2, #0
 800123a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800123e:	2300      	movs	r3, #0
 8001240:	e000      	b.n	8001244 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8001242:	2302      	movs	r3, #2
  }
}
 8001244:	4618      	mov	r0, r3
 8001246:	370c      	adds	r7, #12
 8001248:	46bd      	mov	sp, r7
 800124a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800124e:	4770      	bx	lr

08001250 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8001250:	b480      	push	{r7}
 8001252:	b085      	sub	sp, #20
 8001254:	af00      	add	r7, sp, #0
 8001256:	6078      	str	r0, [r7, #4]
 8001258:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800125a:	687b      	ldr	r3, [r7, #4]
 800125c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001260:	b2db      	uxtb	r3, r3
 8001262:	2b20      	cmp	r3, #32
 8001264:	d139      	bne.n	80012da <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001266:	687b      	ldr	r3, [r7, #4]
 8001268:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800126c:	2b01      	cmp	r3, #1
 800126e:	d101      	bne.n	8001274 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8001270:	2302      	movs	r3, #2
 8001272:	e033      	b.n	80012dc <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8001274:	687b      	ldr	r3, [r7, #4]
 8001276:	2201      	movs	r2, #1
 8001278:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800127c:	687b      	ldr	r3, [r7, #4]
 800127e:	2224      	movs	r2, #36	; 0x24
 8001280:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8001284:	687b      	ldr	r3, [r7, #4]
 8001286:	681b      	ldr	r3, [r3, #0]
 8001288:	681a      	ldr	r2, [r3, #0]
 800128a:	687b      	ldr	r3, [r7, #4]
 800128c:	681b      	ldr	r3, [r3, #0]
 800128e:	f022 0201 	bic.w	r2, r2, #1
 8001292:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8001294:	687b      	ldr	r3, [r7, #4]
 8001296:	681b      	ldr	r3, [r3, #0]
 8001298:	681b      	ldr	r3, [r3, #0]
 800129a:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 800129c:	68fb      	ldr	r3, [r7, #12]
 800129e:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 80012a2:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 80012a4:	683b      	ldr	r3, [r7, #0]
 80012a6:	021b      	lsls	r3, r3, #8
 80012a8:	68fa      	ldr	r2, [r7, #12]
 80012aa:	4313      	orrs	r3, r2
 80012ac:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 80012ae:	687b      	ldr	r3, [r7, #4]
 80012b0:	681b      	ldr	r3, [r3, #0]
 80012b2:	68fa      	ldr	r2, [r7, #12]
 80012b4:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80012b6:	687b      	ldr	r3, [r7, #4]
 80012b8:	681b      	ldr	r3, [r3, #0]
 80012ba:	681a      	ldr	r2, [r3, #0]
 80012bc:	687b      	ldr	r3, [r7, #4]
 80012be:	681b      	ldr	r3, [r3, #0]
 80012c0:	f042 0201 	orr.w	r2, r2, #1
 80012c4:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80012c6:	687b      	ldr	r3, [r7, #4]
 80012c8:	2220      	movs	r2, #32
 80012ca:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80012ce:	687b      	ldr	r3, [r7, #4]
 80012d0:	2200      	movs	r2, #0
 80012d2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80012d6:	2300      	movs	r3, #0
 80012d8:	e000      	b.n	80012dc <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 80012da:	2302      	movs	r3, #2
  }
}
 80012dc:	4618      	mov	r0, r3
 80012de:	3714      	adds	r7, #20
 80012e0:	46bd      	mov	sp, r7
 80012e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012e6:	4770      	bx	lr

080012e8 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 80012e8:	b480      	push	{r7}
 80012ea:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 80012ec:	4b04      	ldr	r3, [pc, #16]	; (8001300 <HAL_PWREx_GetVoltageRange+0x18>)
 80012ee:	681b      	ldr	r3, [r3, #0]
 80012f0:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 80012f4:	4618      	mov	r0, r3
 80012f6:	46bd      	mov	sp, r7
 80012f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012fc:	4770      	bx	lr
 80012fe:	bf00      	nop
 8001300:	40007000 	.word	0x40007000

08001304 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8001304:	b480      	push	{r7}
 8001306:	b085      	sub	sp, #20
 8001308:	af00      	add	r7, sp, #0
 800130a:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 800130c:	687b      	ldr	r3, [r7, #4]
 800130e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001312:	d130      	bne.n	8001376 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8001314:	4b23      	ldr	r3, [pc, #140]	; (80013a4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001316:	681b      	ldr	r3, [r3, #0]
 8001318:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800131c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001320:	d038      	beq.n	8001394 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8001322:	4b20      	ldr	r3, [pc, #128]	; (80013a4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001324:	681b      	ldr	r3, [r3, #0]
 8001326:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800132a:	4a1e      	ldr	r2, [pc, #120]	; (80013a4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800132c:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001330:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8001332:	4b1d      	ldr	r3, [pc, #116]	; (80013a8 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8001334:	681b      	ldr	r3, [r3, #0]
 8001336:	2232      	movs	r2, #50	; 0x32
 8001338:	fb02 f303 	mul.w	r3, r2, r3
 800133c:	4a1b      	ldr	r2, [pc, #108]	; (80013ac <HAL_PWREx_ControlVoltageScaling+0xa8>)
 800133e:	fba2 2303 	umull	r2, r3, r2, r3
 8001342:	0c9b      	lsrs	r3, r3, #18
 8001344:	3301      	adds	r3, #1
 8001346:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001348:	e002      	b.n	8001350 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 800134a:	68fb      	ldr	r3, [r7, #12]
 800134c:	3b01      	subs	r3, #1
 800134e:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001350:	4b14      	ldr	r3, [pc, #80]	; (80013a4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001352:	695b      	ldr	r3, [r3, #20]
 8001354:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001358:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800135c:	d102      	bne.n	8001364 <HAL_PWREx_ControlVoltageScaling+0x60>
 800135e:	68fb      	ldr	r3, [r7, #12]
 8001360:	2b00      	cmp	r3, #0
 8001362:	d1f2      	bne.n	800134a <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001364:	4b0f      	ldr	r3, [pc, #60]	; (80013a4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001366:	695b      	ldr	r3, [r3, #20]
 8001368:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800136c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001370:	d110      	bne.n	8001394 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8001372:	2303      	movs	r3, #3
 8001374:	e00f      	b.n	8001396 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8001376:	4b0b      	ldr	r3, [pc, #44]	; (80013a4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001378:	681b      	ldr	r3, [r3, #0]
 800137a:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800137e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001382:	d007      	beq.n	8001394 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8001384:	4b07      	ldr	r3, [pc, #28]	; (80013a4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001386:	681b      	ldr	r3, [r3, #0]
 8001388:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800138c:	4a05      	ldr	r2, [pc, #20]	; (80013a4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800138e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001392:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8001394:	2300      	movs	r3, #0
}
 8001396:	4618      	mov	r0, r3
 8001398:	3714      	adds	r7, #20
 800139a:	46bd      	mov	sp, r7
 800139c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013a0:	4770      	bx	lr
 80013a2:	bf00      	nop
 80013a4:	40007000 	.word	0x40007000
 80013a8:	20000000 	.word	0x20000000
 80013ac:	431bde83 	.word	0x431bde83

080013b0 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80013b0:	b580      	push	{r7, lr}
 80013b2:	b088      	sub	sp, #32
 80013b4:	af00      	add	r7, sp, #0
 80013b6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80013b8:	687b      	ldr	r3, [r7, #4]
 80013ba:	2b00      	cmp	r3, #0
 80013bc:	d101      	bne.n	80013c2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80013be:	2301      	movs	r3, #1
 80013c0:	e3d4      	b.n	8001b6c <HAL_RCC_OscConfig+0x7bc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80013c2:	4ba1      	ldr	r3, [pc, #644]	; (8001648 <HAL_RCC_OscConfig+0x298>)
 80013c4:	689b      	ldr	r3, [r3, #8]
 80013c6:	f003 030c 	and.w	r3, r3, #12
 80013ca:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 80013cc:	4b9e      	ldr	r3, [pc, #632]	; (8001648 <HAL_RCC_OscConfig+0x298>)
 80013ce:	68db      	ldr	r3, [r3, #12]
 80013d0:	f003 0303 	and.w	r3, r3, #3
 80013d4:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80013d6:	687b      	ldr	r3, [r7, #4]
 80013d8:	681b      	ldr	r3, [r3, #0]
 80013da:	f003 0310 	and.w	r3, r3, #16
 80013de:	2b00      	cmp	r3, #0
 80013e0:	f000 80e4 	beq.w	80015ac <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80013e4:	69bb      	ldr	r3, [r7, #24]
 80013e6:	2b00      	cmp	r3, #0
 80013e8:	d007      	beq.n	80013fa <HAL_RCC_OscConfig+0x4a>
 80013ea:	69bb      	ldr	r3, [r7, #24]
 80013ec:	2b0c      	cmp	r3, #12
 80013ee:	f040 808b 	bne.w	8001508 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 80013f2:	697b      	ldr	r3, [r7, #20]
 80013f4:	2b01      	cmp	r3, #1
 80013f6:	f040 8087 	bne.w	8001508 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80013fa:	4b93      	ldr	r3, [pc, #588]	; (8001648 <HAL_RCC_OscConfig+0x298>)
 80013fc:	681b      	ldr	r3, [r3, #0]
 80013fe:	f003 0302 	and.w	r3, r3, #2
 8001402:	2b00      	cmp	r3, #0
 8001404:	d005      	beq.n	8001412 <HAL_RCC_OscConfig+0x62>
 8001406:	687b      	ldr	r3, [r7, #4]
 8001408:	699b      	ldr	r3, [r3, #24]
 800140a:	2b00      	cmp	r3, #0
 800140c:	d101      	bne.n	8001412 <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 800140e:	2301      	movs	r3, #1
 8001410:	e3ac      	b.n	8001b6c <HAL_RCC_OscConfig+0x7bc>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8001412:	687b      	ldr	r3, [r7, #4]
 8001414:	6a1a      	ldr	r2, [r3, #32]
 8001416:	4b8c      	ldr	r3, [pc, #560]	; (8001648 <HAL_RCC_OscConfig+0x298>)
 8001418:	681b      	ldr	r3, [r3, #0]
 800141a:	f003 0308 	and.w	r3, r3, #8
 800141e:	2b00      	cmp	r3, #0
 8001420:	d004      	beq.n	800142c <HAL_RCC_OscConfig+0x7c>
 8001422:	4b89      	ldr	r3, [pc, #548]	; (8001648 <HAL_RCC_OscConfig+0x298>)
 8001424:	681b      	ldr	r3, [r3, #0]
 8001426:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800142a:	e005      	b.n	8001438 <HAL_RCC_OscConfig+0x88>
 800142c:	4b86      	ldr	r3, [pc, #536]	; (8001648 <HAL_RCC_OscConfig+0x298>)
 800142e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001432:	091b      	lsrs	r3, r3, #4
 8001434:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001438:	4293      	cmp	r3, r2
 800143a:	d223      	bcs.n	8001484 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800143c:	687b      	ldr	r3, [r7, #4]
 800143e:	6a1b      	ldr	r3, [r3, #32]
 8001440:	4618      	mov	r0, r3
 8001442:	f000 fd41 	bl	8001ec8 <RCC_SetFlashLatencyFromMSIRange>
 8001446:	4603      	mov	r3, r0
 8001448:	2b00      	cmp	r3, #0
 800144a:	d001      	beq.n	8001450 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 800144c:	2301      	movs	r3, #1
 800144e:	e38d      	b.n	8001b6c <HAL_RCC_OscConfig+0x7bc>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001450:	4b7d      	ldr	r3, [pc, #500]	; (8001648 <HAL_RCC_OscConfig+0x298>)
 8001452:	681b      	ldr	r3, [r3, #0]
 8001454:	4a7c      	ldr	r2, [pc, #496]	; (8001648 <HAL_RCC_OscConfig+0x298>)
 8001456:	f043 0308 	orr.w	r3, r3, #8
 800145a:	6013      	str	r3, [r2, #0]
 800145c:	4b7a      	ldr	r3, [pc, #488]	; (8001648 <HAL_RCC_OscConfig+0x298>)
 800145e:	681b      	ldr	r3, [r3, #0]
 8001460:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001464:	687b      	ldr	r3, [r7, #4]
 8001466:	6a1b      	ldr	r3, [r3, #32]
 8001468:	4977      	ldr	r1, [pc, #476]	; (8001648 <HAL_RCC_OscConfig+0x298>)
 800146a:	4313      	orrs	r3, r2
 800146c:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800146e:	4b76      	ldr	r3, [pc, #472]	; (8001648 <HAL_RCC_OscConfig+0x298>)
 8001470:	685b      	ldr	r3, [r3, #4]
 8001472:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001476:	687b      	ldr	r3, [r7, #4]
 8001478:	69db      	ldr	r3, [r3, #28]
 800147a:	021b      	lsls	r3, r3, #8
 800147c:	4972      	ldr	r1, [pc, #456]	; (8001648 <HAL_RCC_OscConfig+0x298>)
 800147e:	4313      	orrs	r3, r2
 8001480:	604b      	str	r3, [r1, #4]
 8001482:	e025      	b.n	80014d0 <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001484:	4b70      	ldr	r3, [pc, #448]	; (8001648 <HAL_RCC_OscConfig+0x298>)
 8001486:	681b      	ldr	r3, [r3, #0]
 8001488:	4a6f      	ldr	r2, [pc, #444]	; (8001648 <HAL_RCC_OscConfig+0x298>)
 800148a:	f043 0308 	orr.w	r3, r3, #8
 800148e:	6013      	str	r3, [r2, #0]
 8001490:	4b6d      	ldr	r3, [pc, #436]	; (8001648 <HAL_RCC_OscConfig+0x298>)
 8001492:	681b      	ldr	r3, [r3, #0]
 8001494:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001498:	687b      	ldr	r3, [r7, #4]
 800149a:	6a1b      	ldr	r3, [r3, #32]
 800149c:	496a      	ldr	r1, [pc, #424]	; (8001648 <HAL_RCC_OscConfig+0x298>)
 800149e:	4313      	orrs	r3, r2
 80014a0:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80014a2:	4b69      	ldr	r3, [pc, #420]	; (8001648 <HAL_RCC_OscConfig+0x298>)
 80014a4:	685b      	ldr	r3, [r3, #4]
 80014a6:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80014aa:	687b      	ldr	r3, [r7, #4]
 80014ac:	69db      	ldr	r3, [r3, #28]
 80014ae:	021b      	lsls	r3, r3, #8
 80014b0:	4965      	ldr	r1, [pc, #404]	; (8001648 <HAL_RCC_OscConfig+0x298>)
 80014b2:	4313      	orrs	r3, r2
 80014b4:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 80014b6:	69bb      	ldr	r3, [r7, #24]
 80014b8:	2b00      	cmp	r3, #0
 80014ba:	d109      	bne.n	80014d0 <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80014bc:	687b      	ldr	r3, [r7, #4]
 80014be:	6a1b      	ldr	r3, [r3, #32]
 80014c0:	4618      	mov	r0, r3
 80014c2:	f000 fd01 	bl	8001ec8 <RCC_SetFlashLatencyFromMSIRange>
 80014c6:	4603      	mov	r3, r0
 80014c8:	2b00      	cmp	r3, #0
 80014ca:	d001      	beq.n	80014d0 <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 80014cc:	2301      	movs	r3, #1
 80014ce:	e34d      	b.n	8001b6c <HAL_RCC_OscConfig+0x7bc>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80014d0:	f000 fc36 	bl	8001d40 <HAL_RCC_GetSysClockFreq>
 80014d4:	4602      	mov	r2, r0
 80014d6:	4b5c      	ldr	r3, [pc, #368]	; (8001648 <HAL_RCC_OscConfig+0x298>)
 80014d8:	689b      	ldr	r3, [r3, #8]
 80014da:	091b      	lsrs	r3, r3, #4
 80014dc:	f003 030f 	and.w	r3, r3, #15
 80014e0:	495a      	ldr	r1, [pc, #360]	; (800164c <HAL_RCC_OscConfig+0x29c>)
 80014e2:	5ccb      	ldrb	r3, [r1, r3]
 80014e4:	f003 031f 	and.w	r3, r3, #31
 80014e8:	fa22 f303 	lsr.w	r3, r2, r3
 80014ec:	4a58      	ldr	r2, [pc, #352]	; (8001650 <HAL_RCC_OscConfig+0x2a0>)
 80014ee:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 80014f0:	4b58      	ldr	r3, [pc, #352]	; (8001654 <HAL_RCC_OscConfig+0x2a4>)
 80014f2:	681b      	ldr	r3, [r3, #0]
 80014f4:	4618      	mov	r0, r3
 80014f6:	f7ff faa9 	bl	8000a4c <HAL_InitTick>
 80014fa:	4603      	mov	r3, r0
 80014fc:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 80014fe:	7bfb      	ldrb	r3, [r7, #15]
 8001500:	2b00      	cmp	r3, #0
 8001502:	d052      	beq.n	80015aa <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 8001504:	7bfb      	ldrb	r3, [r7, #15]
 8001506:	e331      	b.n	8001b6c <HAL_RCC_OscConfig+0x7bc>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8001508:	687b      	ldr	r3, [r7, #4]
 800150a:	699b      	ldr	r3, [r3, #24]
 800150c:	2b00      	cmp	r3, #0
 800150e:	d032      	beq.n	8001576 <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8001510:	4b4d      	ldr	r3, [pc, #308]	; (8001648 <HAL_RCC_OscConfig+0x298>)
 8001512:	681b      	ldr	r3, [r3, #0]
 8001514:	4a4c      	ldr	r2, [pc, #304]	; (8001648 <HAL_RCC_OscConfig+0x298>)
 8001516:	f043 0301 	orr.w	r3, r3, #1
 800151a:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 800151c:	f7ff fae6 	bl	8000aec <HAL_GetTick>
 8001520:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001522:	e008      	b.n	8001536 <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001524:	f7ff fae2 	bl	8000aec <HAL_GetTick>
 8001528:	4602      	mov	r2, r0
 800152a:	693b      	ldr	r3, [r7, #16]
 800152c:	1ad3      	subs	r3, r2, r3
 800152e:	2b02      	cmp	r3, #2
 8001530:	d901      	bls.n	8001536 <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 8001532:	2303      	movs	r3, #3
 8001534:	e31a      	b.n	8001b6c <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001536:	4b44      	ldr	r3, [pc, #272]	; (8001648 <HAL_RCC_OscConfig+0x298>)
 8001538:	681b      	ldr	r3, [r3, #0]
 800153a:	f003 0302 	and.w	r3, r3, #2
 800153e:	2b00      	cmp	r3, #0
 8001540:	d0f0      	beq.n	8001524 <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001542:	4b41      	ldr	r3, [pc, #260]	; (8001648 <HAL_RCC_OscConfig+0x298>)
 8001544:	681b      	ldr	r3, [r3, #0]
 8001546:	4a40      	ldr	r2, [pc, #256]	; (8001648 <HAL_RCC_OscConfig+0x298>)
 8001548:	f043 0308 	orr.w	r3, r3, #8
 800154c:	6013      	str	r3, [r2, #0]
 800154e:	4b3e      	ldr	r3, [pc, #248]	; (8001648 <HAL_RCC_OscConfig+0x298>)
 8001550:	681b      	ldr	r3, [r3, #0]
 8001552:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001556:	687b      	ldr	r3, [r7, #4]
 8001558:	6a1b      	ldr	r3, [r3, #32]
 800155a:	493b      	ldr	r1, [pc, #236]	; (8001648 <HAL_RCC_OscConfig+0x298>)
 800155c:	4313      	orrs	r3, r2
 800155e:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001560:	4b39      	ldr	r3, [pc, #228]	; (8001648 <HAL_RCC_OscConfig+0x298>)
 8001562:	685b      	ldr	r3, [r3, #4]
 8001564:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001568:	687b      	ldr	r3, [r7, #4]
 800156a:	69db      	ldr	r3, [r3, #28]
 800156c:	021b      	lsls	r3, r3, #8
 800156e:	4936      	ldr	r1, [pc, #216]	; (8001648 <HAL_RCC_OscConfig+0x298>)
 8001570:	4313      	orrs	r3, r2
 8001572:	604b      	str	r3, [r1, #4]
 8001574:	e01a      	b.n	80015ac <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8001576:	4b34      	ldr	r3, [pc, #208]	; (8001648 <HAL_RCC_OscConfig+0x298>)
 8001578:	681b      	ldr	r3, [r3, #0]
 800157a:	4a33      	ldr	r2, [pc, #204]	; (8001648 <HAL_RCC_OscConfig+0x298>)
 800157c:	f023 0301 	bic.w	r3, r3, #1
 8001580:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001582:	f7ff fab3 	bl	8000aec <HAL_GetTick>
 8001586:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8001588:	e008      	b.n	800159c <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800158a:	f7ff faaf 	bl	8000aec <HAL_GetTick>
 800158e:	4602      	mov	r2, r0
 8001590:	693b      	ldr	r3, [r7, #16]
 8001592:	1ad3      	subs	r3, r2, r3
 8001594:	2b02      	cmp	r3, #2
 8001596:	d901      	bls.n	800159c <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 8001598:	2303      	movs	r3, #3
 800159a:	e2e7      	b.n	8001b6c <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 800159c:	4b2a      	ldr	r3, [pc, #168]	; (8001648 <HAL_RCC_OscConfig+0x298>)
 800159e:	681b      	ldr	r3, [r3, #0]
 80015a0:	f003 0302 	and.w	r3, r3, #2
 80015a4:	2b00      	cmp	r3, #0
 80015a6:	d1f0      	bne.n	800158a <HAL_RCC_OscConfig+0x1da>
 80015a8:	e000      	b.n	80015ac <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80015aa:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80015ac:	687b      	ldr	r3, [r7, #4]
 80015ae:	681b      	ldr	r3, [r3, #0]
 80015b0:	f003 0301 	and.w	r3, r3, #1
 80015b4:	2b00      	cmp	r3, #0
 80015b6:	d074      	beq.n	80016a2 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 80015b8:	69bb      	ldr	r3, [r7, #24]
 80015ba:	2b08      	cmp	r3, #8
 80015bc:	d005      	beq.n	80015ca <HAL_RCC_OscConfig+0x21a>
 80015be:	69bb      	ldr	r3, [r7, #24]
 80015c0:	2b0c      	cmp	r3, #12
 80015c2:	d10e      	bne.n	80015e2 <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 80015c4:	697b      	ldr	r3, [r7, #20]
 80015c6:	2b03      	cmp	r3, #3
 80015c8:	d10b      	bne.n	80015e2 <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80015ca:	4b1f      	ldr	r3, [pc, #124]	; (8001648 <HAL_RCC_OscConfig+0x298>)
 80015cc:	681b      	ldr	r3, [r3, #0]
 80015ce:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80015d2:	2b00      	cmp	r3, #0
 80015d4:	d064      	beq.n	80016a0 <HAL_RCC_OscConfig+0x2f0>
 80015d6:	687b      	ldr	r3, [r7, #4]
 80015d8:	685b      	ldr	r3, [r3, #4]
 80015da:	2b00      	cmp	r3, #0
 80015dc:	d160      	bne.n	80016a0 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 80015de:	2301      	movs	r3, #1
 80015e0:	e2c4      	b.n	8001b6c <HAL_RCC_OscConfig+0x7bc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80015e2:	687b      	ldr	r3, [r7, #4]
 80015e4:	685b      	ldr	r3, [r3, #4]
 80015e6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80015ea:	d106      	bne.n	80015fa <HAL_RCC_OscConfig+0x24a>
 80015ec:	4b16      	ldr	r3, [pc, #88]	; (8001648 <HAL_RCC_OscConfig+0x298>)
 80015ee:	681b      	ldr	r3, [r3, #0]
 80015f0:	4a15      	ldr	r2, [pc, #84]	; (8001648 <HAL_RCC_OscConfig+0x298>)
 80015f2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80015f6:	6013      	str	r3, [r2, #0]
 80015f8:	e01d      	b.n	8001636 <HAL_RCC_OscConfig+0x286>
 80015fa:	687b      	ldr	r3, [r7, #4]
 80015fc:	685b      	ldr	r3, [r3, #4]
 80015fe:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001602:	d10c      	bne.n	800161e <HAL_RCC_OscConfig+0x26e>
 8001604:	4b10      	ldr	r3, [pc, #64]	; (8001648 <HAL_RCC_OscConfig+0x298>)
 8001606:	681b      	ldr	r3, [r3, #0]
 8001608:	4a0f      	ldr	r2, [pc, #60]	; (8001648 <HAL_RCC_OscConfig+0x298>)
 800160a:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800160e:	6013      	str	r3, [r2, #0]
 8001610:	4b0d      	ldr	r3, [pc, #52]	; (8001648 <HAL_RCC_OscConfig+0x298>)
 8001612:	681b      	ldr	r3, [r3, #0]
 8001614:	4a0c      	ldr	r2, [pc, #48]	; (8001648 <HAL_RCC_OscConfig+0x298>)
 8001616:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800161a:	6013      	str	r3, [r2, #0]
 800161c:	e00b      	b.n	8001636 <HAL_RCC_OscConfig+0x286>
 800161e:	4b0a      	ldr	r3, [pc, #40]	; (8001648 <HAL_RCC_OscConfig+0x298>)
 8001620:	681b      	ldr	r3, [r3, #0]
 8001622:	4a09      	ldr	r2, [pc, #36]	; (8001648 <HAL_RCC_OscConfig+0x298>)
 8001624:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001628:	6013      	str	r3, [r2, #0]
 800162a:	4b07      	ldr	r3, [pc, #28]	; (8001648 <HAL_RCC_OscConfig+0x298>)
 800162c:	681b      	ldr	r3, [r3, #0]
 800162e:	4a06      	ldr	r2, [pc, #24]	; (8001648 <HAL_RCC_OscConfig+0x298>)
 8001630:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001634:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001636:	687b      	ldr	r3, [r7, #4]
 8001638:	685b      	ldr	r3, [r3, #4]
 800163a:	2b00      	cmp	r3, #0
 800163c:	d01c      	beq.n	8001678 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800163e:	f7ff fa55 	bl	8000aec <HAL_GetTick>
 8001642:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001644:	e011      	b.n	800166a <HAL_RCC_OscConfig+0x2ba>
 8001646:	bf00      	nop
 8001648:	40021000 	.word	0x40021000
 800164c:	080033b8 	.word	0x080033b8
 8001650:	20000000 	.word	0x20000000
 8001654:	20000004 	.word	0x20000004
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001658:	f7ff fa48 	bl	8000aec <HAL_GetTick>
 800165c:	4602      	mov	r2, r0
 800165e:	693b      	ldr	r3, [r7, #16]
 8001660:	1ad3      	subs	r3, r2, r3
 8001662:	2b64      	cmp	r3, #100	; 0x64
 8001664:	d901      	bls.n	800166a <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8001666:	2303      	movs	r3, #3
 8001668:	e280      	b.n	8001b6c <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800166a:	4baf      	ldr	r3, [pc, #700]	; (8001928 <HAL_RCC_OscConfig+0x578>)
 800166c:	681b      	ldr	r3, [r3, #0]
 800166e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001672:	2b00      	cmp	r3, #0
 8001674:	d0f0      	beq.n	8001658 <HAL_RCC_OscConfig+0x2a8>
 8001676:	e014      	b.n	80016a2 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001678:	f7ff fa38 	bl	8000aec <HAL_GetTick>
 800167c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800167e:	e008      	b.n	8001692 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001680:	f7ff fa34 	bl	8000aec <HAL_GetTick>
 8001684:	4602      	mov	r2, r0
 8001686:	693b      	ldr	r3, [r7, #16]
 8001688:	1ad3      	subs	r3, r2, r3
 800168a:	2b64      	cmp	r3, #100	; 0x64
 800168c:	d901      	bls.n	8001692 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 800168e:	2303      	movs	r3, #3
 8001690:	e26c      	b.n	8001b6c <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001692:	4ba5      	ldr	r3, [pc, #660]	; (8001928 <HAL_RCC_OscConfig+0x578>)
 8001694:	681b      	ldr	r3, [r3, #0]
 8001696:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800169a:	2b00      	cmp	r3, #0
 800169c:	d1f0      	bne.n	8001680 <HAL_RCC_OscConfig+0x2d0>
 800169e:	e000      	b.n	80016a2 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80016a0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80016a2:	687b      	ldr	r3, [r7, #4]
 80016a4:	681b      	ldr	r3, [r3, #0]
 80016a6:	f003 0302 	and.w	r3, r3, #2
 80016aa:	2b00      	cmp	r3, #0
 80016ac:	d060      	beq.n	8001770 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 80016ae:	69bb      	ldr	r3, [r7, #24]
 80016b0:	2b04      	cmp	r3, #4
 80016b2:	d005      	beq.n	80016c0 <HAL_RCC_OscConfig+0x310>
 80016b4:	69bb      	ldr	r3, [r7, #24]
 80016b6:	2b0c      	cmp	r3, #12
 80016b8:	d119      	bne.n	80016ee <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 80016ba:	697b      	ldr	r3, [r7, #20]
 80016bc:	2b02      	cmp	r3, #2
 80016be:	d116      	bne.n	80016ee <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80016c0:	4b99      	ldr	r3, [pc, #612]	; (8001928 <HAL_RCC_OscConfig+0x578>)
 80016c2:	681b      	ldr	r3, [r3, #0]
 80016c4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80016c8:	2b00      	cmp	r3, #0
 80016ca:	d005      	beq.n	80016d8 <HAL_RCC_OscConfig+0x328>
 80016cc:	687b      	ldr	r3, [r7, #4]
 80016ce:	68db      	ldr	r3, [r3, #12]
 80016d0:	2b00      	cmp	r3, #0
 80016d2:	d101      	bne.n	80016d8 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 80016d4:	2301      	movs	r3, #1
 80016d6:	e249      	b.n	8001b6c <HAL_RCC_OscConfig+0x7bc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80016d8:	4b93      	ldr	r3, [pc, #588]	; (8001928 <HAL_RCC_OscConfig+0x578>)
 80016da:	685b      	ldr	r3, [r3, #4]
 80016dc:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 80016e0:	687b      	ldr	r3, [r7, #4]
 80016e2:	691b      	ldr	r3, [r3, #16]
 80016e4:	061b      	lsls	r3, r3, #24
 80016e6:	4990      	ldr	r1, [pc, #576]	; (8001928 <HAL_RCC_OscConfig+0x578>)
 80016e8:	4313      	orrs	r3, r2
 80016ea:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80016ec:	e040      	b.n	8001770 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80016ee:	687b      	ldr	r3, [r7, #4]
 80016f0:	68db      	ldr	r3, [r3, #12]
 80016f2:	2b00      	cmp	r3, #0
 80016f4:	d023      	beq.n	800173e <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80016f6:	4b8c      	ldr	r3, [pc, #560]	; (8001928 <HAL_RCC_OscConfig+0x578>)
 80016f8:	681b      	ldr	r3, [r3, #0]
 80016fa:	4a8b      	ldr	r2, [pc, #556]	; (8001928 <HAL_RCC_OscConfig+0x578>)
 80016fc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001700:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001702:	f7ff f9f3 	bl	8000aec <HAL_GetTick>
 8001706:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001708:	e008      	b.n	800171c <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800170a:	f7ff f9ef 	bl	8000aec <HAL_GetTick>
 800170e:	4602      	mov	r2, r0
 8001710:	693b      	ldr	r3, [r7, #16]
 8001712:	1ad3      	subs	r3, r2, r3
 8001714:	2b02      	cmp	r3, #2
 8001716:	d901      	bls.n	800171c <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8001718:	2303      	movs	r3, #3
 800171a:	e227      	b.n	8001b6c <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800171c:	4b82      	ldr	r3, [pc, #520]	; (8001928 <HAL_RCC_OscConfig+0x578>)
 800171e:	681b      	ldr	r3, [r3, #0]
 8001720:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001724:	2b00      	cmp	r3, #0
 8001726:	d0f0      	beq.n	800170a <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001728:	4b7f      	ldr	r3, [pc, #508]	; (8001928 <HAL_RCC_OscConfig+0x578>)
 800172a:	685b      	ldr	r3, [r3, #4]
 800172c:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8001730:	687b      	ldr	r3, [r7, #4]
 8001732:	691b      	ldr	r3, [r3, #16]
 8001734:	061b      	lsls	r3, r3, #24
 8001736:	497c      	ldr	r1, [pc, #496]	; (8001928 <HAL_RCC_OscConfig+0x578>)
 8001738:	4313      	orrs	r3, r2
 800173a:	604b      	str	r3, [r1, #4]
 800173c:	e018      	b.n	8001770 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800173e:	4b7a      	ldr	r3, [pc, #488]	; (8001928 <HAL_RCC_OscConfig+0x578>)
 8001740:	681b      	ldr	r3, [r3, #0]
 8001742:	4a79      	ldr	r2, [pc, #484]	; (8001928 <HAL_RCC_OscConfig+0x578>)
 8001744:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001748:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800174a:	f7ff f9cf 	bl	8000aec <HAL_GetTick>
 800174e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001750:	e008      	b.n	8001764 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001752:	f7ff f9cb 	bl	8000aec <HAL_GetTick>
 8001756:	4602      	mov	r2, r0
 8001758:	693b      	ldr	r3, [r7, #16]
 800175a:	1ad3      	subs	r3, r2, r3
 800175c:	2b02      	cmp	r3, #2
 800175e:	d901      	bls.n	8001764 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8001760:	2303      	movs	r3, #3
 8001762:	e203      	b.n	8001b6c <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001764:	4b70      	ldr	r3, [pc, #448]	; (8001928 <HAL_RCC_OscConfig+0x578>)
 8001766:	681b      	ldr	r3, [r3, #0]
 8001768:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800176c:	2b00      	cmp	r3, #0
 800176e:	d1f0      	bne.n	8001752 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001770:	687b      	ldr	r3, [r7, #4]
 8001772:	681b      	ldr	r3, [r3, #0]
 8001774:	f003 0308 	and.w	r3, r3, #8
 8001778:	2b00      	cmp	r3, #0
 800177a:	d03c      	beq.n	80017f6 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800177c:	687b      	ldr	r3, [r7, #4]
 800177e:	695b      	ldr	r3, [r3, #20]
 8001780:	2b00      	cmp	r3, #0
 8001782:	d01c      	beq.n	80017be <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001784:	4b68      	ldr	r3, [pc, #416]	; (8001928 <HAL_RCC_OscConfig+0x578>)
 8001786:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800178a:	4a67      	ldr	r2, [pc, #412]	; (8001928 <HAL_RCC_OscConfig+0x578>)
 800178c:	f043 0301 	orr.w	r3, r3, #1
 8001790:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001794:	f7ff f9aa 	bl	8000aec <HAL_GetTick>
 8001798:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800179a:	e008      	b.n	80017ae <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800179c:	f7ff f9a6 	bl	8000aec <HAL_GetTick>
 80017a0:	4602      	mov	r2, r0
 80017a2:	693b      	ldr	r3, [r7, #16]
 80017a4:	1ad3      	subs	r3, r2, r3
 80017a6:	2b02      	cmp	r3, #2
 80017a8:	d901      	bls.n	80017ae <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 80017aa:	2303      	movs	r3, #3
 80017ac:	e1de      	b.n	8001b6c <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80017ae:	4b5e      	ldr	r3, [pc, #376]	; (8001928 <HAL_RCC_OscConfig+0x578>)
 80017b0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80017b4:	f003 0302 	and.w	r3, r3, #2
 80017b8:	2b00      	cmp	r3, #0
 80017ba:	d0ef      	beq.n	800179c <HAL_RCC_OscConfig+0x3ec>
 80017bc:	e01b      	b.n	80017f6 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80017be:	4b5a      	ldr	r3, [pc, #360]	; (8001928 <HAL_RCC_OscConfig+0x578>)
 80017c0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80017c4:	4a58      	ldr	r2, [pc, #352]	; (8001928 <HAL_RCC_OscConfig+0x578>)
 80017c6:	f023 0301 	bic.w	r3, r3, #1
 80017ca:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80017ce:	f7ff f98d 	bl	8000aec <HAL_GetTick>
 80017d2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80017d4:	e008      	b.n	80017e8 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80017d6:	f7ff f989 	bl	8000aec <HAL_GetTick>
 80017da:	4602      	mov	r2, r0
 80017dc:	693b      	ldr	r3, [r7, #16]
 80017de:	1ad3      	subs	r3, r2, r3
 80017e0:	2b02      	cmp	r3, #2
 80017e2:	d901      	bls.n	80017e8 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 80017e4:	2303      	movs	r3, #3
 80017e6:	e1c1      	b.n	8001b6c <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80017e8:	4b4f      	ldr	r3, [pc, #316]	; (8001928 <HAL_RCC_OscConfig+0x578>)
 80017ea:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80017ee:	f003 0302 	and.w	r3, r3, #2
 80017f2:	2b00      	cmp	r3, #0
 80017f4:	d1ef      	bne.n	80017d6 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80017f6:	687b      	ldr	r3, [r7, #4]
 80017f8:	681b      	ldr	r3, [r3, #0]
 80017fa:	f003 0304 	and.w	r3, r3, #4
 80017fe:	2b00      	cmp	r3, #0
 8001800:	f000 80a6 	beq.w	8001950 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001804:	2300      	movs	r3, #0
 8001806:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8001808:	4b47      	ldr	r3, [pc, #284]	; (8001928 <HAL_RCC_OscConfig+0x578>)
 800180a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800180c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001810:	2b00      	cmp	r3, #0
 8001812:	d10d      	bne.n	8001830 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001814:	4b44      	ldr	r3, [pc, #272]	; (8001928 <HAL_RCC_OscConfig+0x578>)
 8001816:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001818:	4a43      	ldr	r2, [pc, #268]	; (8001928 <HAL_RCC_OscConfig+0x578>)
 800181a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800181e:	6593      	str	r3, [r2, #88]	; 0x58
 8001820:	4b41      	ldr	r3, [pc, #260]	; (8001928 <HAL_RCC_OscConfig+0x578>)
 8001822:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001824:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001828:	60bb      	str	r3, [r7, #8]
 800182a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800182c:	2301      	movs	r3, #1
 800182e:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001830:	4b3e      	ldr	r3, [pc, #248]	; (800192c <HAL_RCC_OscConfig+0x57c>)
 8001832:	681b      	ldr	r3, [r3, #0]
 8001834:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001838:	2b00      	cmp	r3, #0
 800183a:	d118      	bne.n	800186e <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800183c:	4b3b      	ldr	r3, [pc, #236]	; (800192c <HAL_RCC_OscConfig+0x57c>)
 800183e:	681b      	ldr	r3, [r3, #0]
 8001840:	4a3a      	ldr	r2, [pc, #232]	; (800192c <HAL_RCC_OscConfig+0x57c>)
 8001842:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001846:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001848:	f7ff f950 	bl	8000aec <HAL_GetTick>
 800184c:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800184e:	e008      	b.n	8001862 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001850:	f7ff f94c 	bl	8000aec <HAL_GetTick>
 8001854:	4602      	mov	r2, r0
 8001856:	693b      	ldr	r3, [r7, #16]
 8001858:	1ad3      	subs	r3, r2, r3
 800185a:	2b02      	cmp	r3, #2
 800185c:	d901      	bls.n	8001862 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 800185e:	2303      	movs	r3, #3
 8001860:	e184      	b.n	8001b6c <HAL_RCC_OscConfig+0x7bc>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001862:	4b32      	ldr	r3, [pc, #200]	; (800192c <HAL_RCC_OscConfig+0x57c>)
 8001864:	681b      	ldr	r3, [r3, #0]
 8001866:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800186a:	2b00      	cmp	r3, #0
 800186c:	d0f0      	beq.n	8001850 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800186e:	687b      	ldr	r3, [r7, #4]
 8001870:	689b      	ldr	r3, [r3, #8]
 8001872:	2b01      	cmp	r3, #1
 8001874:	d108      	bne.n	8001888 <HAL_RCC_OscConfig+0x4d8>
 8001876:	4b2c      	ldr	r3, [pc, #176]	; (8001928 <HAL_RCC_OscConfig+0x578>)
 8001878:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800187c:	4a2a      	ldr	r2, [pc, #168]	; (8001928 <HAL_RCC_OscConfig+0x578>)
 800187e:	f043 0301 	orr.w	r3, r3, #1
 8001882:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001886:	e024      	b.n	80018d2 <HAL_RCC_OscConfig+0x522>
 8001888:	687b      	ldr	r3, [r7, #4]
 800188a:	689b      	ldr	r3, [r3, #8]
 800188c:	2b05      	cmp	r3, #5
 800188e:	d110      	bne.n	80018b2 <HAL_RCC_OscConfig+0x502>
 8001890:	4b25      	ldr	r3, [pc, #148]	; (8001928 <HAL_RCC_OscConfig+0x578>)
 8001892:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001896:	4a24      	ldr	r2, [pc, #144]	; (8001928 <HAL_RCC_OscConfig+0x578>)
 8001898:	f043 0304 	orr.w	r3, r3, #4
 800189c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80018a0:	4b21      	ldr	r3, [pc, #132]	; (8001928 <HAL_RCC_OscConfig+0x578>)
 80018a2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80018a6:	4a20      	ldr	r2, [pc, #128]	; (8001928 <HAL_RCC_OscConfig+0x578>)
 80018a8:	f043 0301 	orr.w	r3, r3, #1
 80018ac:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80018b0:	e00f      	b.n	80018d2 <HAL_RCC_OscConfig+0x522>
 80018b2:	4b1d      	ldr	r3, [pc, #116]	; (8001928 <HAL_RCC_OscConfig+0x578>)
 80018b4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80018b8:	4a1b      	ldr	r2, [pc, #108]	; (8001928 <HAL_RCC_OscConfig+0x578>)
 80018ba:	f023 0301 	bic.w	r3, r3, #1
 80018be:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80018c2:	4b19      	ldr	r3, [pc, #100]	; (8001928 <HAL_RCC_OscConfig+0x578>)
 80018c4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80018c8:	4a17      	ldr	r2, [pc, #92]	; (8001928 <HAL_RCC_OscConfig+0x578>)
 80018ca:	f023 0304 	bic.w	r3, r3, #4
 80018ce:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80018d2:	687b      	ldr	r3, [r7, #4]
 80018d4:	689b      	ldr	r3, [r3, #8]
 80018d6:	2b00      	cmp	r3, #0
 80018d8:	d016      	beq.n	8001908 <HAL_RCC_OscConfig+0x558>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80018da:	f7ff f907 	bl	8000aec <HAL_GetTick>
 80018de:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80018e0:	e00a      	b.n	80018f8 <HAL_RCC_OscConfig+0x548>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80018e2:	f7ff f903 	bl	8000aec <HAL_GetTick>
 80018e6:	4602      	mov	r2, r0
 80018e8:	693b      	ldr	r3, [r7, #16]
 80018ea:	1ad3      	subs	r3, r2, r3
 80018ec:	f241 3288 	movw	r2, #5000	; 0x1388
 80018f0:	4293      	cmp	r3, r2
 80018f2:	d901      	bls.n	80018f8 <HAL_RCC_OscConfig+0x548>
        {
          return HAL_TIMEOUT;
 80018f4:	2303      	movs	r3, #3
 80018f6:	e139      	b.n	8001b6c <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80018f8:	4b0b      	ldr	r3, [pc, #44]	; (8001928 <HAL_RCC_OscConfig+0x578>)
 80018fa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80018fe:	f003 0302 	and.w	r3, r3, #2
 8001902:	2b00      	cmp	r3, #0
 8001904:	d0ed      	beq.n	80018e2 <HAL_RCC_OscConfig+0x532>
 8001906:	e01a      	b.n	800193e <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001908:	f7ff f8f0 	bl	8000aec <HAL_GetTick>
 800190c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800190e:	e00f      	b.n	8001930 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001910:	f7ff f8ec 	bl	8000aec <HAL_GetTick>
 8001914:	4602      	mov	r2, r0
 8001916:	693b      	ldr	r3, [r7, #16]
 8001918:	1ad3      	subs	r3, r2, r3
 800191a:	f241 3288 	movw	r2, #5000	; 0x1388
 800191e:	4293      	cmp	r3, r2
 8001920:	d906      	bls.n	8001930 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8001922:	2303      	movs	r3, #3
 8001924:	e122      	b.n	8001b6c <HAL_RCC_OscConfig+0x7bc>
 8001926:	bf00      	nop
 8001928:	40021000 	.word	0x40021000
 800192c:	40007000 	.word	0x40007000
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001930:	4b90      	ldr	r3, [pc, #576]	; (8001b74 <HAL_RCC_OscConfig+0x7c4>)
 8001932:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001936:	f003 0302 	and.w	r3, r3, #2
 800193a:	2b00      	cmp	r3, #0
 800193c:	d1e8      	bne.n	8001910 <HAL_RCC_OscConfig+0x560>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800193e:	7ffb      	ldrb	r3, [r7, #31]
 8001940:	2b01      	cmp	r3, #1
 8001942:	d105      	bne.n	8001950 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001944:	4b8b      	ldr	r3, [pc, #556]	; (8001b74 <HAL_RCC_OscConfig+0x7c4>)
 8001946:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001948:	4a8a      	ldr	r2, [pc, #552]	; (8001b74 <HAL_RCC_OscConfig+0x7c4>)
 800194a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800194e:	6593      	str	r3, [r2, #88]	; 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8001950:	687b      	ldr	r3, [r7, #4]
 8001952:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001954:	2b00      	cmp	r3, #0
 8001956:	f000 8108 	beq.w	8001b6a <HAL_RCC_OscConfig+0x7ba>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800195a:	687b      	ldr	r3, [r7, #4]
 800195c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800195e:	2b02      	cmp	r3, #2
 8001960:	f040 80d0 	bne.w	8001b04 <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8001964:	4b83      	ldr	r3, [pc, #524]	; (8001b74 <HAL_RCC_OscConfig+0x7c4>)
 8001966:	68db      	ldr	r3, [r3, #12]
 8001968:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800196a:	697b      	ldr	r3, [r7, #20]
 800196c:	f003 0203 	and.w	r2, r3, #3
 8001970:	687b      	ldr	r3, [r7, #4]
 8001972:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001974:	429a      	cmp	r2, r3
 8001976:	d130      	bne.n	80019da <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001978:	697b      	ldr	r3, [r7, #20]
 800197a:	f003 0270 	and.w	r2, r3, #112	; 0x70
 800197e:	687b      	ldr	r3, [r7, #4]
 8001980:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001982:	3b01      	subs	r3, #1
 8001984:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001986:	429a      	cmp	r2, r3
 8001988:	d127      	bne.n	80019da <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800198a:	697b      	ldr	r3, [r7, #20]
 800198c:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8001990:	687b      	ldr	r3, [r7, #4]
 8001992:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001994:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001996:	429a      	cmp	r2, r3
 8001998:	d11f      	bne.n	80019da <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 800199a:	697b      	ldr	r3, [r7, #20]
 800199c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80019a0:	687a      	ldr	r2, [r7, #4]
 80019a2:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80019a4:	2a07      	cmp	r2, #7
 80019a6:	bf14      	ite	ne
 80019a8:	2201      	movne	r2, #1
 80019aa:	2200      	moveq	r2, #0
 80019ac:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80019ae:	4293      	cmp	r3, r2
 80019b0:	d113      	bne.n	80019da <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80019b2:	697b      	ldr	r3, [r7, #20]
 80019b4:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 80019b8:	687b      	ldr	r3, [r7, #4]
 80019ba:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80019bc:	085b      	lsrs	r3, r3, #1
 80019be:	3b01      	subs	r3, #1
 80019c0:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 80019c2:	429a      	cmp	r2, r3
 80019c4:	d109      	bne.n	80019da <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 80019c6:	697b      	ldr	r3, [r7, #20]
 80019c8:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 80019cc:	687b      	ldr	r3, [r7, #4]
 80019ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019d0:	085b      	lsrs	r3, r3, #1
 80019d2:	3b01      	subs	r3, #1
 80019d4:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80019d6:	429a      	cmp	r2, r3
 80019d8:	d06e      	beq.n	8001ab8 <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80019da:	69bb      	ldr	r3, [r7, #24]
 80019dc:	2b0c      	cmp	r3, #12
 80019de:	d069      	beq.n	8001ab4 <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 80019e0:	4b64      	ldr	r3, [pc, #400]	; (8001b74 <HAL_RCC_OscConfig+0x7c4>)
 80019e2:	681b      	ldr	r3, [r3, #0]
 80019e4:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80019e8:	2b00      	cmp	r3, #0
 80019ea:	d105      	bne.n	80019f8 <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 80019ec:	4b61      	ldr	r3, [pc, #388]	; (8001b74 <HAL_RCC_OscConfig+0x7c4>)
 80019ee:	681b      	ldr	r3, [r3, #0]
 80019f0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80019f4:	2b00      	cmp	r3, #0
 80019f6:	d001      	beq.n	80019fc <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 80019f8:	2301      	movs	r3, #1
 80019fa:	e0b7      	b.n	8001b6c <HAL_RCC_OscConfig+0x7bc>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 80019fc:	4b5d      	ldr	r3, [pc, #372]	; (8001b74 <HAL_RCC_OscConfig+0x7c4>)
 80019fe:	681b      	ldr	r3, [r3, #0]
 8001a00:	4a5c      	ldr	r2, [pc, #368]	; (8001b74 <HAL_RCC_OscConfig+0x7c4>)
 8001a02:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001a06:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8001a08:	f7ff f870 	bl	8000aec <HAL_GetTick>
 8001a0c:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001a0e:	e008      	b.n	8001a22 <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001a10:	f7ff f86c 	bl	8000aec <HAL_GetTick>
 8001a14:	4602      	mov	r2, r0
 8001a16:	693b      	ldr	r3, [r7, #16]
 8001a18:	1ad3      	subs	r3, r2, r3
 8001a1a:	2b02      	cmp	r3, #2
 8001a1c:	d901      	bls.n	8001a22 <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 8001a1e:	2303      	movs	r3, #3
 8001a20:	e0a4      	b.n	8001b6c <HAL_RCC_OscConfig+0x7bc>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001a22:	4b54      	ldr	r3, [pc, #336]	; (8001b74 <HAL_RCC_OscConfig+0x7c4>)
 8001a24:	681b      	ldr	r3, [r3, #0]
 8001a26:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001a2a:	2b00      	cmp	r3, #0
 8001a2c:	d1f0      	bne.n	8001a10 <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001a2e:	4b51      	ldr	r3, [pc, #324]	; (8001b74 <HAL_RCC_OscConfig+0x7c4>)
 8001a30:	68da      	ldr	r2, [r3, #12]
 8001a32:	4b51      	ldr	r3, [pc, #324]	; (8001b78 <HAL_RCC_OscConfig+0x7c8>)
 8001a34:	4013      	ands	r3, r2
 8001a36:	687a      	ldr	r2, [r7, #4]
 8001a38:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8001a3a:	687a      	ldr	r2, [r7, #4]
 8001a3c:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8001a3e:	3a01      	subs	r2, #1
 8001a40:	0112      	lsls	r2, r2, #4
 8001a42:	4311      	orrs	r1, r2
 8001a44:	687a      	ldr	r2, [r7, #4]
 8001a46:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8001a48:	0212      	lsls	r2, r2, #8
 8001a4a:	4311      	orrs	r1, r2
 8001a4c:	687a      	ldr	r2, [r7, #4]
 8001a4e:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8001a50:	0852      	lsrs	r2, r2, #1
 8001a52:	3a01      	subs	r2, #1
 8001a54:	0552      	lsls	r2, r2, #21
 8001a56:	4311      	orrs	r1, r2
 8001a58:	687a      	ldr	r2, [r7, #4]
 8001a5a:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8001a5c:	0852      	lsrs	r2, r2, #1
 8001a5e:	3a01      	subs	r2, #1
 8001a60:	0652      	lsls	r2, r2, #25
 8001a62:	4311      	orrs	r1, r2
 8001a64:	687a      	ldr	r2, [r7, #4]
 8001a66:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8001a68:	0912      	lsrs	r2, r2, #4
 8001a6a:	0452      	lsls	r2, r2, #17
 8001a6c:	430a      	orrs	r2, r1
 8001a6e:	4941      	ldr	r1, [pc, #260]	; (8001b74 <HAL_RCC_OscConfig+0x7c4>)
 8001a70:	4313      	orrs	r3, r2
 8001a72:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8001a74:	4b3f      	ldr	r3, [pc, #252]	; (8001b74 <HAL_RCC_OscConfig+0x7c4>)
 8001a76:	681b      	ldr	r3, [r3, #0]
 8001a78:	4a3e      	ldr	r2, [pc, #248]	; (8001b74 <HAL_RCC_OscConfig+0x7c4>)
 8001a7a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001a7e:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001a80:	4b3c      	ldr	r3, [pc, #240]	; (8001b74 <HAL_RCC_OscConfig+0x7c4>)
 8001a82:	68db      	ldr	r3, [r3, #12]
 8001a84:	4a3b      	ldr	r2, [pc, #236]	; (8001b74 <HAL_RCC_OscConfig+0x7c4>)
 8001a86:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001a8a:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8001a8c:	f7ff f82e 	bl	8000aec <HAL_GetTick>
 8001a90:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001a92:	e008      	b.n	8001aa6 <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001a94:	f7ff f82a 	bl	8000aec <HAL_GetTick>
 8001a98:	4602      	mov	r2, r0
 8001a9a:	693b      	ldr	r3, [r7, #16]
 8001a9c:	1ad3      	subs	r3, r2, r3
 8001a9e:	2b02      	cmp	r3, #2
 8001aa0:	d901      	bls.n	8001aa6 <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 8001aa2:	2303      	movs	r3, #3
 8001aa4:	e062      	b.n	8001b6c <HAL_RCC_OscConfig+0x7bc>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001aa6:	4b33      	ldr	r3, [pc, #204]	; (8001b74 <HAL_RCC_OscConfig+0x7c4>)
 8001aa8:	681b      	ldr	r3, [r3, #0]
 8001aaa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001aae:	2b00      	cmp	r3, #0
 8001ab0:	d0f0      	beq.n	8001a94 <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001ab2:	e05a      	b.n	8001b6a <HAL_RCC_OscConfig+0x7ba>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8001ab4:	2301      	movs	r3, #1
 8001ab6:	e059      	b.n	8001b6c <HAL_RCC_OscConfig+0x7bc>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001ab8:	4b2e      	ldr	r3, [pc, #184]	; (8001b74 <HAL_RCC_OscConfig+0x7c4>)
 8001aba:	681b      	ldr	r3, [r3, #0]
 8001abc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001ac0:	2b00      	cmp	r3, #0
 8001ac2:	d152      	bne.n	8001b6a <HAL_RCC_OscConfig+0x7ba>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8001ac4:	4b2b      	ldr	r3, [pc, #172]	; (8001b74 <HAL_RCC_OscConfig+0x7c4>)
 8001ac6:	681b      	ldr	r3, [r3, #0]
 8001ac8:	4a2a      	ldr	r2, [pc, #168]	; (8001b74 <HAL_RCC_OscConfig+0x7c4>)
 8001aca:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001ace:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001ad0:	4b28      	ldr	r3, [pc, #160]	; (8001b74 <HAL_RCC_OscConfig+0x7c4>)
 8001ad2:	68db      	ldr	r3, [r3, #12]
 8001ad4:	4a27      	ldr	r2, [pc, #156]	; (8001b74 <HAL_RCC_OscConfig+0x7c4>)
 8001ad6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001ada:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8001adc:	f7ff f806 	bl	8000aec <HAL_GetTick>
 8001ae0:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001ae2:	e008      	b.n	8001af6 <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001ae4:	f7ff f802 	bl	8000aec <HAL_GetTick>
 8001ae8:	4602      	mov	r2, r0
 8001aea:	693b      	ldr	r3, [r7, #16]
 8001aec:	1ad3      	subs	r3, r2, r3
 8001aee:	2b02      	cmp	r3, #2
 8001af0:	d901      	bls.n	8001af6 <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 8001af2:	2303      	movs	r3, #3
 8001af4:	e03a      	b.n	8001b6c <HAL_RCC_OscConfig+0x7bc>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001af6:	4b1f      	ldr	r3, [pc, #124]	; (8001b74 <HAL_RCC_OscConfig+0x7c4>)
 8001af8:	681b      	ldr	r3, [r3, #0]
 8001afa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001afe:	2b00      	cmp	r3, #0
 8001b00:	d0f0      	beq.n	8001ae4 <HAL_RCC_OscConfig+0x734>
 8001b02:	e032      	b.n	8001b6a <HAL_RCC_OscConfig+0x7ba>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001b04:	69bb      	ldr	r3, [r7, #24]
 8001b06:	2b0c      	cmp	r3, #12
 8001b08:	d02d      	beq.n	8001b66 <HAL_RCC_OscConfig+0x7b6>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001b0a:	4b1a      	ldr	r3, [pc, #104]	; (8001b74 <HAL_RCC_OscConfig+0x7c4>)
 8001b0c:	681b      	ldr	r3, [r3, #0]
 8001b0e:	4a19      	ldr	r2, [pc, #100]	; (8001b74 <HAL_RCC_OscConfig+0x7c4>)
 8001b10:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001b14:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
#if defined(RCC_PLLSAI1_SUPPORT) && defined(RCC_CR_PLLSAI2RDY)
        if(READ_BIT(RCC->CR, (RCC_CR_PLLSAI1RDY | RCC_CR_PLLSAI2RDY)) == 0U)
 8001b16:	4b17      	ldr	r3, [pc, #92]	; (8001b74 <HAL_RCC_OscConfig+0x7c4>)
 8001b18:	681b      	ldr	r3, [r3, #0]
 8001b1a:	f003 5320 	and.w	r3, r3, #671088640	; 0x28000000
 8001b1e:	2b00      	cmp	r3, #0
 8001b20:	d105      	bne.n	8001b2e <HAL_RCC_OscConfig+0x77e>
        {
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 8001b22:	4b14      	ldr	r3, [pc, #80]	; (8001b74 <HAL_RCC_OscConfig+0x7c4>)
 8001b24:	68db      	ldr	r3, [r3, #12]
 8001b26:	4a13      	ldr	r2, [pc, #76]	; (8001b74 <HAL_RCC_OscConfig+0x7c4>)
 8001b28:	f023 0303 	bic.w	r3, r3, #3
 8001b2c:	60d3      	str	r3, [r2, #12]
#else
        MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
#endif /* RCC_PLLSAI1_SUPPORT && RCC_CR_PLLSAI2RDY */

#if defined(RCC_PLLSAI2_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8001b2e:	4b11      	ldr	r3, [pc, #68]	; (8001b74 <HAL_RCC_OscConfig+0x7c4>)
 8001b30:	68db      	ldr	r3, [r3, #12]
 8001b32:	4a10      	ldr	r2, [pc, #64]	; (8001b74 <HAL_RCC_OscConfig+0x7c4>)
 8001b34:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 8001b38:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001b3c:	60d3      	str	r3, [r2, #12]
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK);
#endif /* RCC_PLLSAI2_SUPPORT */

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001b3e:	f7fe ffd5 	bl	8000aec <HAL_GetTick>
 8001b42:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001b44:	e008      	b.n	8001b58 <HAL_RCC_OscConfig+0x7a8>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001b46:	f7fe ffd1 	bl	8000aec <HAL_GetTick>
 8001b4a:	4602      	mov	r2, r0
 8001b4c:	693b      	ldr	r3, [r7, #16]
 8001b4e:	1ad3      	subs	r3, r2, r3
 8001b50:	2b02      	cmp	r3, #2
 8001b52:	d901      	bls.n	8001b58 <HAL_RCC_OscConfig+0x7a8>
          {
            return HAL_TIMEOUT;
 8001b54:	2303      	movs	r3, #3
 8001b56:	e009      	b.n	8001b6c <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001b58:	4b06      	ldr	r3, [pc, #24]	; (8001b74 <HAL_RCC_OscConfig+0x7c4>)
 8001b5a:	681b      	ldr	r3, [r3, #0]
 8001b5c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001b60:	2b00      	cmp	r3, #0
 8001b62:	d1f0      	bne.n	8001b46 <HAL_RCC_OscConfig+0x796>
 8001b64:	e001      	b.n	8001b6a <HAL_RCC_OscConfig+0x7ba>
        }
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8001b66:	2301      	movs	r3, #1
 8001b68:	e000      	b.n	8001b6c <HAL_RCC_OscConfig+0x7bc>
      }
    }
  }
  return HAL_OK;
 8001b6a:	2300      	movs	r3, #0
}
 8001b6c:	4618      	mov	r0, r3
 8001b6e:	3720      	adds	r7, #32
 8001b70:	46bd      	mov	sp, r7
 8001b72:	bd80      	pop	{r7, pc}
 8001b74:	40021000 	.word	0x40021000
 8001b78:	f99d808c 	.word	0xf99d808c

08001b7c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001b7c:	b580      	push	{r7, lr}
 8001b7e:	b084      	sub	sp, #16
 8001b80:	af00      	add	r7, sp, #0
 8001b82:	6078      	str	r0, [r7, #4]
 8001b84:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001b86:	687b      	ldr	r3, [r7, #4]
 8001b88:	2b00      	cmp	r3, #0
 8001b8a:	d101      	bne.n	8001b90 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001b8c:	2301      	movs	r3, #1
 8001b8e:	e0c8      	b.n	8001d22 <HAL_RCC_ClockConfig+0x1a6>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001b90:	4b66      	ldr	r3, [pc, #408]	; (8001d2c <HAL_RCC_ClockConfig+0x1b0>)
 8001b92:	681b      	ldr	r3, [r3, #0]
 8001b94:	f003 0307 	and.w	r3, r3, #7
 8001b98:	683a      	ldr	r2, [r7, #0]
 8001b9a:	429a      	cmp	r2, r3
 8001b9c:	d910      	bls.n	8001bc0 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001b9e:	4b63      	ldr	r3, [pc, #396]	; (8001d2c <HAL_RCC_ClockConfig+0x1b0>)
 8001ba0:	681b      	ldr	r3, [r3, #0]
 8001ba2:	f023 0207 	bic.w	r2, r3, #7
 8001ba6:	4961      	ldr	r1, [pc, #388]	; (8001d2c <HAL_RCC_ClockConfig+0x1b0>)
 8001ba8:	683b      	ldr	r3, [r7, #0]
 8001baa:	4313      	orrs	r3, r2
 8001bac:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001bae:	4b5f      	ldr	r3, [pc, #380]	; (8001d2c <HAL_RCC_ClockConfig+0x1b0>)
 8001bb0:	681b      	ldr	r3, [r3, #0]
 8001bb2:	f003 0307 	and.w	r3, r3, #7
 8001bb6:	683a      	ldr	r2, [r7, #0]
 8001bb8:	429a      	cmp	r2, r3
 8001bba:	d001      	beq.n	8001bc0 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8001bbc:	2301      	movs	r3, #1
 8001bbe:	e0b0      	b.n	8001d22 <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001bc0:	687b      	ldr	r3, [r7, #4]
 8001bc2:	681b      	ldr	r3, [r3, #0]
 8001bc4:	f003 0301 	and.w	r3, r3, #1
 8001bc8:	2b00      	cmp	r3, #0
 8001bca:	d04c      	beq.n	8001c66 <HAL_RCC_ClockConfig+0xea>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	685b      	ldr	r3, [r3, #4]
 8001bd0:	2b03      	cmp	r3, #3
 8001bd2:	d107      	bne.n	8001be4 <HAL_RCC_ClockConfig+0x68>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001bd4:	4b56      	ldr	r3, [pc, #344]	; (8001d30 <HAL_RCC_ClockConfig+0x1b4>)
 8001bd6:	681b      	ldr	r3, [r3, #0]
 8001bd8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001bdc:	2b00      	cmp	r3, #0
 8001bde:	d121      	bne.n	8001c24 <HAL_RCC_ClockConfig+0xa8>
      {
        return HAL_ERROR;
 8001be0:	2301      	movs	r3, #1
 8001be2:	e09e      	b.n	8001d22 <HAL_RCC_ClockConfig+0x1a6>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001be4:	687b      	ldr	r3, [r7, #4]
 8001be6:	685b      	ldr	r3, [r3, #4]
 8001be8:	2b02      	cmp	r3, #2
 8001bea:	d107      	bne.n	8001bfc <HAL_RCC_ClockConfig+0x80>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001bec:	4b50      	ldr	r3, [pc, #320]	; (8001d30 <HAL_RCC_ClockConfig+0x1b4>)
 8001bee:	681b      	ldr	r3, [r3, #0]
 8001bf0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001bf4:	2b00      	cmp	r3, #0
 8001bf6:	d115      	bne.n	8001c24 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8001bf8:	2301      	movs	r3, #1
 8001bfa:	e092      	b.n	8001d22 <HAL_RCC_ClockConfig+0x1a6>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	685b      	ldr	r3, [r3, #4]
 8001c00:	2b00      	cmp	r3, #0
 8001c02:	d107      	bne.n	8001c14 <HAL_RCC_ClockConfig+0x98>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001c04:	4b4a      	ldr	r3, [pc, #296]	; (8001d30 <HAL_RCC_ClockConfig+0x1b4>)
 8001c06:	681b      	ldr	r3, [r3, #0]
 8001c08:	f003 0302 	and.w	r3, r3, #2
 8001c0c:	2b00      	cmp	r3, #0
 8001c0e:	d109      	bne.n	8001c24 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8001c10:	2301      	movs	r3, #1
 8001c12:	e086      	b.n	8001d22 <HAL_RCC_ClockConfig+0x1a6>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001c14:	4b46      	ldr	r3, [pc, #280]	; (8001d30 <HAL_RCC_ClockConfig+0x1b4>)
 8001c16:	681b      	ldr	r3, [r3, #0]
 8001c18:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001c1c:	2b00      	cmp	r3, #0
 8001c1e:	d101      	bne.n	8001c24 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8001c20:	2301      	movs	r3, #1
 8001c22:	e07e      	b.n	8001d22 <HAL_RCC_ClockConfig+0x1a6>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8001c24:	4b42      	ldr	r3, [pc, #264]	; (8001d30 <HAL_RCC_ClockConfig+0x1b4>)
 8001c26:	689b      	ldr	r3, [r3, #8]
 8001c28:	f023 0203 	bic.w	r2, r3, #3
 8001c2c:	687b      	ldr	r3, [r7, #4]
 8001c2e:	685b      	ldr	r3, [r3, #4]
 8001c30:	493f      	ldr	r1, [pc, #252]	; (8001d30 <HAL_RCC_ClockConfig+0x1b4>)
 8001c32:	4313      	orrs	r3, r2
 8001c34:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001c36:	f7fe ff59 	bl	8000aec <HAL_GetTick>
 8001c3a:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001c3c:	e00a      	b.n	8001c54 <HAL_RCC_ClockConfig+0xd8>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001c3e:	f7fe ff55 	bl	8000aec <HAL_GetTick>
 8001c42:	4602      	mov	r2, r0
 8001c44:	68fb      	ldr	r3, [r7, #12]
 8001c46:	1ad3      	subs	r3, r2, r3
 8001c48:	f241 3288 	movw	r2, #5000	; 0x1388
 8001c4c:	4293      	cmp	r3, r2
 8001c4e:	d901      	bls.n	8001c54 <HAL_RCC_ClockConfig+0xd8>
      {
        return HAL_TIMEOUT;
 8001c50:	2303      	movs	r3, #3
 8001c52:	e066      	b.n	8001d22 <HAL_RCC_ClockConfig+0x1a6>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001c54:	4b36      	ldr	r3, [pc, #216]	; (8001d30 <HAL_RCC_ClockConfig+0x1b4>)
 8001c56:	689b      	ldr	r3, [r3, #8]
 8001c58:	f003 020c 	and.w	r2, r3, #12
 8001c5c:	687b      	ldr	r3, [r7, #4]
 8001c5e:	685b      	ldr	r3, [r3, #4]
 8001c60:	009b      	lsls	r3, r3, #2
 8001c62:	429a      	cmp	r2, r3
 8001c64:	d1eb      	bne.n	8001c3e <HAL_RCC_ClockConfig+0xc2>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001c66:	687b      	ldr	r3, [r7, #4]
 8001c68:	681b      	ldr	r3, [r3, #0]
 8001c6a:	f003 0302 	and.w	r3, r3, #2
 8001c6e:	2b00      	cmp	r3, #0
 8001c70:	d008      	beq.n	8001c84 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001c72:	4b2f      	ldr	r3, [pc, #188]	; (8001d30 <HAL_RCC_ClockConfig+0x1b4>)
 8001c74:	689b      	ldr	r3, [r3, #8]
 8001c76:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001c7a:	687b      	ldr	r3, [r7, #4]
 8001c7c:	689b      	ldr	r3, [r3, #8]
 8001c7e:	492c      	ldr	r1, [pc, #176]	; (8001d30 <HAL_RCC_ClockConfig+0x1b4>)
 8001c80:	4313      	orrs	r3, r2
 8001c82:	608b      	str	r3, [r1, #8]
    }
  }
#endif

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001c84:	4b29      	ldr	r3, [pc, #164]	; (8001d2c <HAL_RCC_ClockConfig+0x1b0>)
 8001c86:	681b      	ldr	r3, [r3, #0]
 8001c88:	f003 0307 	and.w	r3, r3, #7
 8001c8c:	683a      	ldr	r2, [r7, #0]
 8001c8e:	429a      	cmp	r2, r3
 8001c90:	d210      	bcs.n	8001cb4 <HAL_RCC_ClockConfig+0x138>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001c92:	4b26      	ldr	r3, [pc, #152]	; (8001d2c <HAL_RCC_ClockConfig+0x1b0>)
 8001c94:	681b      	ldr	r3, [r3, #0]
 8001c96:	f023 0207 	bic.w	r2, r3, #7
 8001c9a:	4924      	ldr	r1, [pc, #144]	; (8001d2c <HAL_RCC_ClockConfig+0x1b0>)
 8001c9c:	683b      	ldr	r3, [r7, #0]
 8001c9e:	4313      	orrs	r3, r2
 8001ca0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001ca2:	4b22      	ldr	r3, [pc, #136]	; (8001d2c <HAL_RCC_ClockConfig+0x1b0>)
 8001ca4:	681b      	ldr	r3, [r3, #0]
 8001ca6:	f003 0307 	and.w	r3, r3, #7
 8001caa:	683a      	ldr	r2, [r7, #0]
 8001cac:	429a      	cmp	r2, r3
 8001cae:	d001      	beq.n	8001cb4 <HAL_RCC_ClockConfig+0x138>
    {
      return HAL_ERROR;
 8001cb0:	2301      	movs	r3, #1
 8001cb2:	e036      	b.n	8001d22 <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001cb4:	687b      	ldr	r3, [r7, #4]
 8001cb6:	681b      	ldr	r3, [r3, #0]
 8001cb8:	f003 0304 	and.w	r3, r3, #4
 8001cbc:	2b00      	cmp	r3, #0
 8001cbe:	d008      	beq.n	8001cd2 <HAL_RCC_ClockConfig+0x156>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001cc0:	4b1b      	ldr	r3, [pc, #108]	; (8001d30 <HAL_RCC_ClockConfig+0x1b4>)
 8001cc2:	689b      	ldr	r3, [r3, #8]
 8001cc4:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001cc8:	687b      	ldr	r3, [r7, #4]
 8001cca:	68db      	ldr	r3, [r3, #12]
 8001ccc:	4918      	ldr	r1, [pc, #96]	; (8001d30 <HAL_RCC_ClockConfig+0x1b4>)
 8001cce:	4313      	orrs	r3, r2
 8001cd0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001cd2:	687b      	ldr	r3, [r7, #4]
 8001cd4:	681b      	ldr	r3, [r3, #0]
 8001cd6:	f003 0308 	and.w	r3, r3, #8
 8001cda:	2b00      	cmp	r3, #0
 8001cdc:	d009      	beq.n	8001cf2 <HAL_RCC_ClockConfig+0x176>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001cde:	4b14      	ldr	r3, [pc, #80]	; (8001d30 <HAL_RCC_ClockConfig+0x1b4>)
 8001ce0:	689b      	ldr	r3, [r3, #8]
 8001ce2:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8001ce6:	687b      	ldr	r3, [r7, #4]
 8001ce8:	691b      	ldr	r3, [r3, #16]
 8001cea:	00db      	lsls	r3, r3, #3
 8001cec:	4910      	ldr	r1, [pc, #64]	; (8001d30 <HAL_RCC_ClockConfig+0x1b4>)
 8001cee:	4313      	orrs	r3, r2
 8001cf0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8001cf2:	f000 f825 	bl	8001d40 <HAL_RCC_GetSysClockFreq>
 8001cf6:	4602      	mov	r2, r0
 8001cf8:	4b0d      	ldr	r3, [pc, #52]	; (8001d30 <HAL_RCC_ClockConfig+0x1b4>)
 8001cfa:	689b      	ldr	r3, [r3, #8]
 8001cfc:	091b      	lsrs	r3, r3, #4
 8001cfe:	f003 030f 	and.w	r3, r3, #15
 8001d02:	490c      	ldr	r1, [pc, #48]	; (8001d34 <HAL_RCC_ClockConfig+0x1b8>)
 8001d04:	5ccb      	ldrb	r3, [r1, r3]
 8001d06:	f003 031f 	and.w	r3, r3, #31
 8001d0a:	fa22 f303 	lsr.w	r3, r2, r3
 8001d0e:	4a0a      	ldr	r2, [pc, #40]	; (8001d38 <HAL_RCC_ClockConfig+0x1bc>)
 8001d10:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8001d12:	4b0a      	ldr	r3, [pc, #40]	; (8001d3c <HAL_RCC_ClockConfig+0x1c0>)
 8001d14:	681b      	ldr	r3, [r3, #0]
 8001d16:	4618      	mov	r0, r3
 8001d18:	f7fe fe98 	bl	8000a4c <HAL_InitTick>
 8001d1c:	4603      	mov	r3, r0
 8001d1e:	72fb      	strb	r3, [r7, #11]

  return status;
 8001d20:	7afb      	ldrb	r3, [r7, #11]
}
 8001d22:	4618      	mov	r0, r3
 8001d24:	3710      	adds	r7, #16
 8001d26:	46bd      	mov	sp, r7
 8001d28:	bd80      	pop	{r7, pc}
 8001d2a:	bf00      	nop
 8001d2c:	40022000 	.word	0x40022000
 8001d30:	40021000 	.word	0x40021000
 8001d34:	080033b8 	.word	0x080033b8
 8001d38:	20000000 	.word	0x20000000
 8001d3c:	20000004 	.word	0x20000004

08001d40 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001d40:	b480      	push	{r7}
 8001d42:	b089      	sub	sp, #36	; 0x24
 8001d44:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8001d46:	2300      	movs	r3, #0
 8001d48:	61fb      	str	r3, [r7, #28]
 8001d4a:	2300      	movs	r3, #0
 8001d4c:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001d4e:	4b3e      	ldr	r3, [pc, #248]	; (8001e48 <HAL_RCC_GetSysClockFreq+0x108>)
 8001d50:	689b      	ldr	r3, [r3, #8]
 8001d52:	f003 030c 	and.w	r3, r3, #12
 8001d56:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001d58:	4b3b      	ldr	r3, [pc, #236]	; (8001e48 <HAL_RCC_GetSysClockFreq+0x108>)
 8001d5a:	68db      	ldr	r3, [r3, #12]
 8001d5c:	f003 0303 	and.w	r3, r3, #3
 8001d60:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8001d62:	693b      	ldr	r3, [r7, #16]
 8001d64:	2b00      	cmp	r3, #0
 8001d66:	d005      	beq.n	8001d74 <HAL_RCC_GetSysClockFreq+0x34>
 8001d68:	693b      	ldr	r3, [r7, #16]
 8001d6a:	2b0c      	cmp	r3, #12
 8001d6c:	d121      	bne.n	8001db2 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8001d6e:	68fb      	ldr	r3, [r7, #12]
 8001d70:	2b01      	cmp	r3, #1
 8001d72:	d11e      	bne.n	8001db2 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8001d74:	4b34      	ldr	r3, [pc, #208]	; (8001e48 <HAL_RCC_GetSysClockFreq+0x108>)
 8001d76:	681b      	ldr	r3, [r3, #0]
 8001d78:	f003 0308 	and.w	r3, r3, #8
 8001d7c:	2b00      	cmp	r3, #0
 8001d7e:	d107      	bne.n	8001d90 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8001d80:	4b31      	ldr	r3, [pc, #196]	; (8001e48 <HAL_RCC_GetSysClockFreq+0x108>)
 8001d82:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001d86:	0a1b      	lsrs	r3, r3, #8
 8001d88:	f003 030f 	and.w	r3, r3, #15
 8001d8c:	61fb      	str	r3, [r7, #28]
 8001d8e:	e005      	b.n	8001d9c <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8001d90:	4b2d      	ldr	r3, [pc, #180]	; (8001e48 <HAL_RCC_GetSysClockFreq+0x108>)
 8001d92:	681b      	ldr	r3, [r3, #0]
 8001d94:	091b      	lsrs	r3, r3, #4
 8001d96:	f003 030f 	and.w	r3, r3, #15
 8001d9a:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8001d9c:	4a2b      	ldr	r2, [pc, #172]	; (8001e4c <HAL_RCC_GetSysClockFreq+0x10c>)
 8001d9e:	69fb      	ldr	r3, [r7, #28]
 8001da0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001da4:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001da6:	693b      	ldr	r3, [r7, #16]
 8001da8:	2b00      	cmp	r3, #0
 8001daa:	d10d      	bne.n	8001dc8 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8001dac:	69fb      	ldr	r3, [r7, #28]
 8001dae:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001db0:	e00a      	b.n	8001dc8 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8001db2:	693b      	ldr	r3, [r7, #16]
 8001db4:	2b04      	cmp	r3, #4
 8001db6:	d102      	bne.n	8001dbe <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8001db8:	4b25      	ldr	r3, [pc, #148]	; (8001e50 <HAL_RCC_GetSysClockFreq+0x110>)
 8001dba:	61bb      	str	r3, [r7, #24]
 8001dbc:	e004      	b.n	8001dc8 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8001dbe:	693b      	ldr	r3, [r7, #16]
 8001dc0:	2b08      	cmp	r3, #8
 8001dc2:	d101      	bne.n	8001dc8 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8001dc4:	4b23      	ldr	r3, [pc, #140]	; (8001e54 <HAL_RCC_GetSysClockFreq+0x114>)
 8001dc6:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8001dc8:	693b      	ldr	r3, [r7, #16]
 8001dca:	2b0c      	cmp	r3, #12
 8001dcc:	d134      	bne.n	8001e38 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8001dce:	4b1e      	ldr	r3, [pc, #120]	; (8001e48 <HAL_RCC_GetSysClockFreq+0x108>)
 8001dd0:	68db      	ldr	r3, [r3, #12]
 8001dd2:	f003 0303 	and.w	r3, r3, #3
 8001dd6:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8001dd8:	68bb      	ldr	r3, [r7, #8]
 8001dda:	2b02      	cmp	r3, #2
 8001ddc:	d003      	beq.n	8001de6 <HAL_RCC_GetSysClockFreq+0xa6>
 8001dde:	68bb      	ldr	r3, [r7, #8]
 8001de0:	2b03      	cmp	r3, #3
 8001de2:	d003      	beq.n	8001dec <HAL_RCC_GetSysClockFreq+0xac>
 8001de4:	e005      	b.n	8001df2 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8001de6:	4b1a      	ldr	r3, [pc, #104]	; (8001e50 <HAL_RCC_GetSysClockFreq+0x110>)
 8001de8:	617b      	str	r3, [r7, #20]
      break;
 8001dea:	e005      	b.n	8001df8 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8001dec:	4b19      	ldr	r3, [pc, #100]	; (8001e54 <HAL_RCC_GetSysClockFreq+0x114>)
 8001dee:	617b      	str	r3, [r7, #20]
      break;
 8001df0:	e002      	b.n	8001df8 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8001df2:	69fb      	ldr	r3, [r7, #28]
 8001df4:	617b      	str	r3, [r7, #20]
      break;
 8001df6:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8001df8:	4b13      	ldr	r3, [pc, #76]	; (8001e48 <HAL_RCC_GetSysClockFreq+0x108>)
 8001dfa:	68db      	ldr	r3, [r3, #12]
 8001dfc:	091b      	lsrs	r3, r3, #4
 8001dfe:	f003 0307 	and.w	r3, r3, #7
 8001e02:	3301      	adds	r3, #1
 8001e04:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8001e06:	4b10      	ldr	r3, [pc, #64]	; (8001e48 <HAL_RCC_GetSysClockFreq+0x108>)
 8001e08:	68db      	ldr	r3, [r3, #12]
 8001e0a:	0a1b      	lsrs	r3, r3, #8
 8001e0c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8001e10:	697a      	ldr	r2, [r7, #20]
 8001e12:	fb02 f203 	mul.w	r2, r2, r3
 8001e16:	687b      	ldr	r3, [r7, #4]
 8001e18:	fbb2 f3f3 	udiv	r3, r2, r3
 8001e1c:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8001e1e:	4b0a      	ldr	r3, [pc, #40]	; (8001e48 <HAL_RCC_GetSysClockFreq+0x108>)
 8001e20:	68db      	ldr	r3, [r3, #12]
 8001e22:	0e5b      	lsrs	r3, r3, #25
 8001e24:	f003 0303 	and.w	r3, r3, #3
 8001e28:	3301      	adds	r3, #1
 8001e2a:	005b      	lsls	r3, r3, #1
 8001e2c:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8001e2e:	697a      	ldr	r2, [r7, #20]
 8001e30:	683b      	ldr	r3, [r7, #0]
 8001e32:	fbb2 f3f3 	udiv	r3, r2, r3
 8001e36:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8001e38:	69bb      	ldr	r3, [r7, #24]
}
 8001e3a:	4618      	mov	r0, r3
 8001e3c:	3724      	adds	r7, #36	; 0x24
 8001e3e:	46bd      	mov	sp, r7
 8001e40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e44:	4770      	bx	lr
 8001e46:	bf00      	nop
 8001e48:	40021000 	.word	0x40021000
 8001e4c:	080033d0 	.word	0x080033d0
 8001e50:	00f42400 	.word	0x00f42400
 8001e54:	007a1200 	.word	0x007a1200

08001e58 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001e58:	b480      	push	{r7}
 8001e5a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001e5c:	4b03      	ldr	r3, [pc, #12]	; (8001e6c <HAL_RCC_GetHCLKFreq+0x14>)
 8001e5e:	681b      	ldr	r3, [r3, #0]
}
 8001e60:	4618      	mov	r0, r3
 8001e62:	46bd      	mov	sp, r7
 8001e64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e68:	4770      	bx	lr
 8001e6a:	bf00      	nop
 8001e6c:	20000000 	.word	0x20000000

08001e70 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001e70:	b580      	push	{r7, lr}
 8001e72:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8001e74:	f7ff fff0 	bl	8001e58 <HAL_RCC_GetHCLKFreq>
 8001e78:	4602      	mov	r2, r0
 8001e7a:	4b06      	ldr	r3, [pc, #24]	; (8001e94 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001e7c:	689b      	ldr	r3, [r3, #8]
 8001e7e:	0a1b      	lsrs	r3, r3, #8
 8001e80:	f003 0307 	and.w	r3, r3, #7
 8001e84:	4904      	ldr	r1, [pc, #16]	; (8001e98 <HAL_RCC_GetPCLK1Freq+0x28>)
 8001e86:	5ccb      	ldrb	r3, [r1, r3]
 8001e88:	f003 031f 	and.w	r3, r3, #31
 8001e8c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001e90:	4618      	mov	r0, r3
 8001e92:	bd80      	pop	{r7, pc}
 8001e94:	40021000 	.word	0x40021000
 8001e98:	080033c8 	.word	0x080033c8

08001e9c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001e9c:	b580      	push	{r7, lr}
 8001e9e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8001ea0:	f7ff ffda 	bl	8001e58 <HAL_RCC_GetHCLKFreq>
 8001ea4:	4602      	mov	r2, r0
 8001ea6:	4b06      	ldr	r3, [pc, #24]	; (8001ec0 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001ea8:	689b      	ldr	r3, [r3, #8]
 8001eaa:	0adb      	lsrs	r3, r3, #11
 8001eac:	f003 0307 	and.w	r3, r3, #7
 8001eb0:	4904      	ldr	r1, [pc, #16]	; (8001ec4 <HAL_RCC_GetPCLK2Freq+0x28>)
 8001eb2:	5ccb      	ldrb	r3, [r1, r3]
 8001eb4:	f003 031f 	and.w	r3, r3, #31
 8001eb8:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001ebc:	4618      	mov	r0, r3
 8001ebe:	bd80      	pop	{r7, pc}
 8001ec0:	40021000 	.word	0x40021000
 8001ec4:	080033c8 	.word	0x080033c8

08001ec8 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8001ec8:	b580      	push	{r7, lr}
 8001eca:	b086      	sub	sp, #24
 8001ecc:	af00      	add	r7, sp, #0
 8001ece:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8001ed0:	2300      	movs	r3, #0
 8001ed2:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8001ed4:	4b2a      	ldr	r3, [pc, #168]	; (8001f80 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001ed6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001ed8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001edc:	2b00      	cmp	r3, #0
 8001ede:	d003      	beq.n	8001ee8 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8001ee0:	f7ff fa02 	bl	80012e8 <HAL_PWREx_GetVoltageRange>
 8001ee4:	6178      	str	r0, [r7, #20]
 8001ee6:	e014      	b.n	8001f12 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8001ee8:	4b25      	ldr	r3, [pc, #148]	; (8001f80 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001eea:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001eec:	4a24      	ldr	r2, [pc, #144]	; (8001f80 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001eee:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001ef2:	6593      	str	r3, [r2, #88]	; 0x58
 8001ef4:	4b22      	ldr	r3, [pc, #136]	; (8001f80 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001ef6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001ef8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001efc:	60fb      	str	r3, [r7, #12]
 8001efe:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8001f00:	f7ff f9f2 	bl	80012e8 <HAL_PWREx_GetVoltageRange>
 8001f04:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8001f06:	4b1e      	ldr	r3, [pc, #120]	; (8001f80 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001f08:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001f0a:	4a1d      	ldr	r2, [pc, #116]	; (8001f80 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001f0c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001f10:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001f12:	697b      	ldr	r3, [r7, #20]
 8001f14:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001f18:	d10b      	bne.n	8001f32 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	2b80      	cmp	r3, #128	; 0x80
 8001f1e:	d919      	bls.n	8001f54 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	2ba0      	cmp	r3, #160	; 0xa0
 8001f24:	d902      	bls.n	8001f2c <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8001f26:	2302      	movs	r3, #2
 8001f28:	613b      	str	r3, [r7, #16]
 8001f2a:	e013      	b.n	8001f54 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8001f2c:	2301      	movs	r3, #1
 8001f2e:	613b      	str	r3, [r7, #16]
 8001f30:	e010      	b.n	8001f54 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	2b80      	cmp	r3, #128	; 0x80
 8001f36:	d902      	bls.n	8001f3e <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8001f38:	2303      	movs	r3, #3
 8001f3a:	613b      	str	r3, [r7, #16]
 8001f3c:	e00a      	b.n	8001f54 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	2b80      	cmp	r3, #128	; 0x80
 8001f42:	d102      	bne.n	8001f4a <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8001f44:	2302      	movs	r3, #2
 8001f46:	613b      	str	r3, [r7, #16]
 8001f48:	e004      	b.n	8001f54 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	2b70      	cmp	r3, #112	; 0x70
 8001f4e:	d101      	bne.n	8001f54 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8001f50:	2301      	movs	r3, #1
 8001f52:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8001f54:	4b0b      	ldr	r3, [pc, #44]	; (8001f84 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8001f56:	681b      	ldr	r3, [r3, #0]
 8001f58:	f023 0207 	bic.w	r2, r3, #7
 8001f5c:	4909      	ldr	r1, [pc, #36]	; (8001f84 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8001f5e:	693b      	ldr	r3, [r7, #16]
 8001f60:	4313      	orrs	r3, r2
 8001f62:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8001f64:	4b07      	ldr	r3, [pc, #28]	; (8001f84 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8001f66:	681b      	ldr	r3, [r3, #0]
 8001f68:	f003 0307 	and.w	r3, r3, #7
 8001f6c:	693a      	ldr	r2, [r7, #16]
 8001f6e:	429a      	cmp	r2, r3
 8001f70:	d001      	beq.n	8001f76 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8001f72:	2301      	movs	r3, #1
 8001f74:	e000      	b.n	8001f78 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8001f76:	2300      	movs	r3, #0
}
 8001f78:	4618      	mov	r0, r3
 8001f7a:	3718      	adds	r7, #24
 8001f7c:	46bd      	mov	sp, r7
 8001f7e:	bd80      	pop	{r7, pc}
 8001f80:	40021000 	.word	0x40021000
 8001f84:	40022000 	.word	0x40022000

08001f88 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8001f88:	b580      	push	{r7, lr}
 8001f8a:	b086      	sub	sp, #24
 8001f8c:	af00      	add	r7, sp, #0
 8001f8e:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8001f90:	2300      	movs	r3, #0
 8001f92:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8001f94:	2300      	movs	r3, #0
 8001f96:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	681b      	ldr	r3, [r3, #0]
 8001f9c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001fa0:	2b00      	cmp	r3, #0
 8001fa2:	d041      	beq.n	8002028 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8001fa8:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8001fac:	d02a      	beq.n	8002004 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 8001fae:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8001fb2:	d824      	bhi.n	8001ffe <HAL_RCCEx_PeriphCLKConfig+0x76>
 8001fb4:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8001fb8:	d008      	beq.n	8001fcc <HAL_RCCEx_PeriphCLKConfig+0x44>
 8001fba:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8001fbe:	d81e      	bhi.n	8001ffe <HAL_RCCEx_PeriphCLKConfig+0x76>
 8001fc0:	2b00      	cmp	r3, #0
 8001fc2:	d00a      	beq.n	8001fda <HAL_RCCEx_PeriphCLKConfig+0x52>
 8001fc4:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001fc8:	d010      	beq.n	8001fec <HAL_RCCEx_PeriphCLKConfig+0x64>
 8001fca:	e018      	b.n	8001ffe <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8001fcc:	4b86      	ldr	r3, [pc, #536]	; (80021e8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001fce:	68db      	ldr	r3, [r3, #12]
 8001fd0:	4a85      	ldr	r2, [pc, #532]	; (80021e8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001fd2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001fd6:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8001fd8:	e015      	b.n	8002006 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	3304      	adds	r3, #4
 8001fde:	2100      	movs	r1, #0
 8001fe0:	4618      	mov	r0, r3
 8001fe2:	f000 fabb 	bl	800255c <RCCEx_PLLSAI1_Config>
 8001fe6:	4603      	mov	r3, r0
 8001fe8:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8001fea:	e00c      	b.n	8002006 <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	3320      	adds	r3, #32
 8001ff0:	2100      	movs	r1, #0
 8001ff2:	4618      	mov	r0, r3
 8001ff4:	f000 fba6 	bl	8002744 <RCCEx_PLLSAI2_Config>
 8001ff8:	4603      	mov	r3, r0
 8001ffa:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8001ffc:	e003      	b.n	8002006 <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8001ffe:	2301      	movs	r3, #1
 8002000:	74fb      	strb	r3, [r7, #19]
      break;
 8002002:	e000      	b.n	8002006 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8002004:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002006:	7cfb      	ldrb	r3, [r7, #19]
 8002008:	2b00      	cmp	r3, #0
 800200a:	d10b      	bne.n	8002024 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800200c:	4b76      	ldr	r3, [pc, #472]	; (80021e8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800200e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002012:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8002016:	687b      	ldr	r3, [r7, #4]
 8002018:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800201a:	4973      	ldr	r1, [pc, #460]	; (80021e8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800201c:	4313      	orrs	r3, r2
 800201e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8002022:	e001      	b.n	8002028 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002024:	7cfb      	ldrb	r3, [r7, #19]
 8002026:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	681b      	ldr	r3, [r3, #0]
 800202c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002030:	2b00      	cmp	r3, #0
 8002032:	d041      	beq.n	80020b8 <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002038:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800203c:	d02a      	beq.n	8002094 <HAL_RCCEx_PeriphCLKConfig+0x10c>
 800203e:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8002042:	d824      	bhi.n	800208e <HAL_RCCEx_PeriphCLKConfig+0x106>
 8002044:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8002048:	d008      	beq.n	800205c <HAL_RCCEx_PeriphCLKConfig+0xd4>
 800204a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800204e:	d81e      	bhi.n	800208e <HAL_RCCEx_PeriphCLKConfig+0x106>
 8002050:	2b00      	cmp	r3, #0
 8002052:	d00a      	beq.n	800206a <HAL_RCCEx_PeriphCLKConfig+0xe2>
 8002054:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002058:	d010      	beq.n	800207c <HAL_RCCEx_PeriphCLKConfig+0xf4>
 800205a:	e018      	b.n	800208e <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 800205c:	4b62      	ldr	r3, [pc, #392]	; (80021e8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800205e:	68db      	ldr	r3, [r3, #12]
 8002060:	4a61      	ldr	r2, [pc, #388]	; (80021e8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002062:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002066:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8002068:	e015      	b.n	8002096 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	3304      	adds	r3, #4
 800206e:	2100      	movs	r1, #0
 8002070:	4618      	mov	r0, r3
 8002072:	f000 fa73 	bl	800255c <RCCEx_PLLSAI1_Config>
 8002076:	4603      	mov	r3, r0
 8002078:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 800207a:	e00c      	b.n	8002096 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	3320      	adds	r3, #32
 8002080:	2100      	movs	r1, #0
 8002082:	4618      	mov	r0, r3
 8002084:	f000 fb5e 	bl	8002744 <RCCEx_PLLSAI2_Config>
 8002088:	4603      	mov	r3, r0
 800208a:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 800208c:	e003      	b.n	8002096 <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800208e:	2301      	movs	r3, #1
 8002090:	74fb      	strb	r3, [r7, #19]
      break;
 8002092:	e000      	b.n	8002096 <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 8002094:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002096:	7cfb      	ldrb	r3, [r7, #19]
 8002098:	2b00      	cmp	r3, #0
 800209a:	d10b      	bne.n	80020b4 <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 800209c:	4b52      	ldr	r3, [pc, #328]	; (80021e8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800209e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80020a2:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80020aa:	494f      	ldr	r1, [pc, #316]	; (80021e8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80020ac:	4313      	orrs	r3, r2
 80020ae:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 80020b2:	e001      	b.n	80020b8 <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80020b4:	7cfb      	ldrb	r3, [r7, #19]
 80020b6:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	681b      	ldr	r3, [r3, #0]
 80020bc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80020c0:	2b00      	cmp	r3, #0
 80020c2:	f000 80a0 	beq.w	8002206 <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 80020c6:	2300      	movs	r3, #0
 80020c8:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80020ca:	4b47      	ldr	r3, [pc, #284]	; (80021e8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80020cc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80020ce:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80020d2:	2b00      	cmp	r3, #0
 80020d4:	d101      	bne.n	80020da <HAL_RCCEx_PeriphCLKConfig+0x152>
 80020d6:	2301      	movs	r3, #1
 80020d8:	e000      	b.n	80020dc <HAL_RCCEx_PeriphCLKConfig+0x154>
 80020da:	2300      	movs	r3, #0
 80020dc:	2b00      	cmp	r3, #0
 80020de:	d00d      	beq.n	80020fc <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80020e0:	4b41      	ldr	r3, [pc, #260]	; (80021e8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80020e2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80020e4:	4a40      	ldr	r2, [pc, #256]	; (80021e8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80020e6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80020ea:	6593      	str	r3, [r2, #88]	; 0x58
 80020ec:	4b3e      	ldr	r3, [pc, #248]	; (80021e8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80020ee:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80020f0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80020f4:	60bb      	str	r3, [r7, #8]
 80020f6:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80020f8:	2301      	movs	r3, #1
 80020fa:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80020fc:	4b3b      	ldr	r3, [pc, #236]	; (80021ec <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80020fe:	681b      	ldr	r3, [r3, #0]
 8002100:	4a3a      	ldr	r2, [pc, #232]	; (80021ec <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8002102:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002106:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8002108:	f7fe fcf0 	bl	8000aec <HAL_GetTick>
 800210c:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 800210e:	e009      	b.n	8002124 <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002110:	f7fe fcec 	bl	8000aec <HAL_GetTick>
 8002114:	4602      	mov	r2, r0
 8002116:	68fb      	ldr	r3, [r7, #12]
 8002118:	1ad3      	subs	r3, r2, r3
 800211a:	2b02      	cmp	r3, #2
 800211c:	d902      	bls.n	8002124 <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 800211e:	2303      	movs	r3, #3
 8002120:	74fb      	strb	r3, [r7, #19]
        break;
 8002122:	e005      	b.n	8002130 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8002124:	4b31      	ldr	r3, [pc, #196]	; (80021ec <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8002126:	681b      	ldr	r3, [r3, #0]
 8002128:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800212c:	2b00      	cmp	r3, #0
 800212e:	d0ef      	beq.n	8002110 <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 8002130:	7cfb      	ldrb	r3, [r7, #19]
 8002132:	2b00      	cmp	r3, #0
 8002134:	d15c      	bne.n	80021f0 <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8002136:	4b2c      	ldr	r3, [pc, #176]	; (80021e8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002138:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800213c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002140:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8002142:	697b      	ldr	r3, [r7, #20]
 8002144:	2b00      	cmp	r3, #0
 8002146:	d01f      	beq.n	8002188 <HAL_RCCEx_PeriphCLKConfig+0x200>
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800214e:	697a      	ldr	r2, [r7, #20]
 8002150:	429a      	cmp	r2, r3
 8002152:	d019      	beq.n	8002188 <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8002154:	4b24      	ldr	r3, [pc, #144]	; (80021e8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002156:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800215a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800215e:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8002160:	4b21      	ldr	r3, [pc, #132]	; (80021e8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002162:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002166:	4a20      	ldr	r2, [pc, #128]	; (80021e8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002168:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800216c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8002170:	4b1d      	ldr	r3, [pc, #116]	; (80021e8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002172:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002176:	4a1c      	ldr	r2, [pc, #112]	; (80021e8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002178:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800217c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8002180:	4a19      	ldr	r2, [pc, #100]	; (80021e8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002182:	697b      	ldr	r3, [r7, #20]
 8002184:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8002188:	697b      	ldr	r3, [r7, #20]
 800218a:	f003 0301 	and.w	r3, r3, #1
 800218e:	2b00      	cmp	r3, #0
 8002190:	d016      	beq.n	80021c0 <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002192:	f7fe fcab 	bl	8000aec <HAL_GetTick>
 8002196:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002198:	e00b      	b.n	80021b2 <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800219a:	f7fe fca7 	bl	8000aec <HAL_GetTick>
 800219e:	4602      	mov	r2, r0
 80021a0:	68fb      	ldr	r3, [r7, #12]
 80021a2:	1ad3      	subs	r3, r2, r3
 80021a4:	f241 3288 	movw	r2, #5000	; 0x1388
 80021a8:	4293      	cmp	r3, r2
 80021aa:	d902      	bls.n	80021b2 <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 80021ac:	2303      	movs	r3, #3
 80021ae:	74fb      	strb	r3, [r7, #19]
            break;
 80021b0:	e006      	b.n	80021c0 <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80021b2:	4b0d      	ldr	r3, [pc, #52]	; (80021e8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80021b4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80021b8:	f003 0302 	and.w	r3, r3, #2
 80021bc:	2b00      	cmp	r3, #0
 80021be:	d0ec      	beq.n	800219a <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 80021c0:	7cfb      	ldrb	r3, [r7, #19]
 80021c2:	2b00      	cmp	r3, #0
 80021c4:	d10c      	bne.n	80021e0 <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80021c6:	4b08      	ldr	r3, [pc, #32]	; (80021e8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80021c8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80021cc:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80021d6:	4904      	ldr	r1, [pc, #16]	; (80021e8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80021d8:	4313      	orrs	r3, r2
 80021da:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 80021de:	e009      	b.n	80021f4 <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80021e0:	7cfb      	ldrb	r3, [r7, #19]
 80021e2:	74bb      	strb	r3, [r7, #18]
 80021e4:	e006      	b.n	80021f4 <HAL_RCCEx_PeriphCLKConfig+0x26c>
 80021e6:	bf00      	nop
 80021e8:	40021000 	.word	0x40021000
 80021ec:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80021f0:	7cfb      	ldrb	r3, [r7, #19]
 80021f2:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80021f4:	7c7b      	ldrb	r3, [r7, #17]
 80021f6:	2b01      	cmp	r3, #1
 80021f8:	d105      	bne.n	8002206 <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80021fa:	4b9e      	ldr	r3, [pc, #632]	; (8002474 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80021fc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80021fe:	4a9d      	ldr	r2, [pc, #628]	; (8002474 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002200:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002204:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	681b      	ldr	r3, [r3, #0]
 800220a:	f003 0301 	and.w	r3, r3, #1
 800220e:	2b00      	cmp	r3, #0
 8002210:	d00a      	beq.n	8002228 <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002212:	4b98      	ldr	r3, [pc, #608]	; (8002474 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002214:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002218:	f023 0203 	bic.w	r2, r3, #3
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002220:	4994      	ldr	r1, [pc, #592]	; (8002474 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002222:	4313      	orrs	r3, r2
 8002224:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	681b      	ldr	r3, [r3, #0]
 800222c:	f003 0302 	and.w	r3, r3, #2
 8002230:	2b00      	cmp	r3, #0
 8002232:	d00a      	beq.n	800224a <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002234:	4b8f      	ldr	r3, [pc, #572]	; (8002474 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002236:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800223a:	f023 020c 	bic.w	r2, r3, #12
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002242:	498c      	ldr	r1, [pc, #560]	; (8002474 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002244:	4313      	orrs	r3, r2
 8002246:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	681b      	ldr	r3, [r3, #0]
 800224e:	f003 0304 	and.w	r3, r3, #4
 8002252:	2b00      	cmp	r3, #0
 8002254:	d00a      	beq.n	800226c <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8002256:	4b87      	ldr	r3, [pc, #540]	; (8002474 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002258:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800225c:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002264:	4983      	ldr	r1, [pc, #524]	; (8002474 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002266:	4313      	orrs	r3, r2
 8002268:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	681b      	ldr	r3, [r3, #0]
 8002270:	f003 0308 	and.w	r3, r3, #8
 8002274:	2b00      	cmp	r3, #0
 8002276:	d00a      	beq.n	800228e <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8002278:	4b7e      	ldr	r3, [pc, #504]	; (8002474 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800227a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800227e:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002286:	497b      	ldr	r1, [pc, #492]	; (8002474 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002288:	4313      	orrs	r3, r2
 800228a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	681b      	ldr	r3, [r3, #0]
 8002292:	f003 0310 	and.w	r3, r3, #16
 8002296:	2b00      	cmp	r3, #0
 8002298:	d00a      	beq.n	80022b0 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 800229a:	4b76      	ldr	r3, [pc, #472]	; (8002474 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800229c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80022a0:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80022a8:	4972      	ldr	r1, [pc, #456]	; (8002474 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80022aa:	4313      	orrs	r3, r2
 80022ac:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	681b      	ldr	r3, [r3, #0]
 80022b4:	f003 0320 	and.w	r3, r3, #32
 80022b8:	2b00      	cmp	r3, #0
 80022ba:	d00a      	beq.n	80022d2 <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80022bc:	4b6d      	ldr	r3, [pc, #436]	; (8002474 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80022be:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80022c2:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80022ca:	496a      	ldr	r1, [pc, #424]	; (8002474 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80022cc:	4313      	orrs	r3, r2
 80022ce:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	681b      	ldr	r3, [r3, #0]
 80022d6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80022da:	2b00      	cmp	r3, #0
 80022dc:	d00a      	beq.n	80022f4 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80022de:	4b65      	ldr	r3, [pc, #404]	; (8002474 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80022e0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80022e4:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80022ec:	4961      	ldr	r1, [pc, #388]	; (8002474 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80022ee:	4313      	orrs	r3, r2
 80022f0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	681b      	ldr	r3, [r3, #0]
 80022f8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80022fc:	2b00      	cmp	r3, #0
 80022fe:	d00a      	beq.n	8002316 <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8002300:	4b5c      	ldr	r3, [pc, #368]	; (8002474 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002302:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002306:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800230e:	4959      	ldr	r1, [pc, #356]	; (8002474 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002310:	4313      	orrs	r3, r2
 8002312:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	681b      	ldr	r3, [r3, #0]
 800231a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800231e:	2b00      	cmp	r3, #0
 8002320:	d00a      	beq.n	8002338 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002322:	4b54      	ldr	r3, [pc, #336]	; (8002474 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002324:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002328:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002330:	4950      	ldr	r1, [pc, #320]	; (8002474 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002332:	4313      	orrs	r3, r2
 8002334:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	681b      	ldr	r3, [r3, #0]
 800233c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002340:	2b00      	cmp	r3, #0
 8002342:	d00a      	beq.n	800235a <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8002344:	4b4b      	ldr	r3, [pc, #300]	; (8002474 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002346:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800234a:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002352:	4948      	ldr	r1, [pc, #288]	; (8002474 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002354:	4313      	orrs	r3, r2
 8002356:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	681b      	ldr	r3, [r3, #0]
 800235e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002362:	2b00      	cmp	r3, #0
 8002364:	d00a      	beq.n	800237c <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8002366:	4b43      	ldr	r3, [pc, #268]	; (8002474 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002368:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800236c:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002374:	493f      	ldr	r1, [pc, #252]	; (8002474 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002376:	4313      	orrs	r3, r2
 8002378:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	681b      	ldr	r3, [r3, #0]
 8002380:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002384:	2b00      	cmp	r3, #0
 8002386:	d028      	beq.n	80023da <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8002388:	4b3a      	ldr	r3, [pc, #232]	; (8002474 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800238a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800238e:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002396:	4937      	ldr	r1, [pc, #220]	; (8002474 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002398:	4313      	orrs	r3, r2
 800239a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80023a2:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80023a6:	d106      	bne.n	80023b6 <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80023a8:	4b32      	ldr	r3, [pc, #200]	; (8002474 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80023aa:	68db      	ldr	r3, [r3, #12]
 80023ac:	4a31      	ldr	r2, [pc, #196]	; (8002474 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80023ae:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80023b2:	60d3      	str	r3, [r2, #12]
 80023b4:	e011      	b.n	80023da <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80023ba:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80023be:	d10c      	bne.n	80023da <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	3304      	adds	r3, #4
 80023c4:	2101      	movs	r1, #1
 80023c6:	4618      	mov	r0, r3
 80023c8:	f000 f8c8 	bl	800255c <RCCEx_PLLSAI1_Config>
 80023cc:	4603      	mov	r3, r0
 80023ce:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 80023d0:	7cfb      	ldrb	r3, [r7, #19]
 80023d2:	2b00      	cmp	r3, #0
 80023d4:	d001      	beq.n	80023da <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 80023d6:	7cfb      	ldrb	r3, [r7, #19]
 80023d8:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	681b      	ldr	r3, [r3, #0]
 80023de:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80023e2:	2b00      	cmp	r3, #0
 80023e4:	d028      	beq.n	8002438 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 80023e6:	4b23      	ldr	r3, [pc, #140]	; (8002474 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80023e8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80023ec:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80023f4:	491f      	ldr	r1, [pc, #124]	; (8002474 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80023f6:	4313      	orrs	r3, r2
 80023f8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002400:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002404:	d106      	bne.n	8002414 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002406:	4b1b      	ldr	r3, [pc, #108]	; (8002474 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002408:	68db      	ldr	r3, [r3, #12]
 800240a:	4a1a      	ldr	r2, [pc, #104]	; (8002474 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800240c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002410:	60d3      	str	r3, [r2, #12]
 8002412:	e011      	b.n	8002438 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002418:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800241c:	d10c      	bne.n	8002438 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	3304      	adds	r3, #4
 8002422:	2101      	movs	r1, #1
 8002424:	4618      	mov	r0, r3
 8002426:	f000 f899 	bl	800255c <RCCEx_PLLSAI1_Config>
 800242a:	4603      	mov	r3, r0
 800242c:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800242e:	7cfb      	ldrb	r3, [r7, #19]
 8002430:	2b00      	cmp	r3, #0
 8002432:	d001      	beq.n	8002438 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 8002434:	7cfb      	ldrb	r3, [r7, #19]
 8002436:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	681b      	ldr	r3, [r3, #0]
 800243c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002440:	2b00      	cmp	r3, #0
 8002442:	d02b      	beq.n	800249c <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8002444:	4b0b      	ldr	r3, [pc, #44]	; (8002474 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002446:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800244a:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002452:	4908      	ldr	r1, [pc, #32]	; (8002474 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002454:	4313      	orrs	r3, r2
 8002456:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800245e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002462:	d109      	bne.n	8002478 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002464:	4b03      	ldr	r3, [pc, #12]	; (8002474 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002466:	68db      	ldr	r3, [r3, #12]
 8002468:	4a02      	ldr	r2, [pc, #8]	; (8002474 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800246a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800246e:	60d3      	str	r3, [r2, #12]
 8002470:	e014      	b.n	800249c <HAL_RCCEx_PeriphCLKConfig+0x514>
 8002472:	bf00      	nop
 8002474:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800247c:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002480:	d10c      	bne.n	800249c <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	3304      	adds	r3, #4
 8002486:	2101      	movs	r1, #1
 8002488:	4618      	mov	r0, r3
 800248a:	f000 f867 	bl	800255c <RCCEx_PLLSAI1_Config>
 800248e:	4603      	mov	r3, r0
 8002490:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002492:	7cfb      	ldrb	r3, [r7, #19]
 8002494:	2b00      	cmp	r3, #0
 8002496:	d001      	beq.n	800249c <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 8002498:	7cfb      	ldrb	r3, [r7, #19]
 800249a:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	681b      	ldr	r3, [r3, #0]
 80024a0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80024a4:	2b00      	cmp	r3, #0
 80024a6:	d02f      	beq.n	8002508 <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80024a8:	4b2b      	ldr	r3, [pc, #172]	; (8002558 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80024aa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80024ae:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80024b6:	4928      	ldr	r1, [pc, #160]	; (8002558 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80024b8:	4313      	orrs	r3, r2
 80024ba:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80024c2:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80024c6:	d10d      	bne.n	80024e4 <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	3304      	adds	r3, #4
 80024cc:	2102      	movs	r1, #2
 80024ce:	4618      	mov	r0, r3
 80024d0:	f000 f844 	bl	800255c <RCCEx_PLLSAI1_Config>
 80024d4:	4603      	mov	r3, r0
 80024d6:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80024d8:	7cfb      	ldrb	r3, [r7, #19]
 80024da:	2b00      	cmp	r3, #0
 80024dc:	d014      	beq.n	8002508 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 80024de:	7cfb      	ldrb	r3, [r7, #19]
 80024e0:	74bb      	strb	r3, [r7, #18]
 80024e2:	e011      	b.n	8002508 <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80024e8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80024ec:	d10c      	bne.n	8002508 <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	3320      	adds	r3, #32
 80024f2:	2102      	movs	r1, #2
 80024f4:	4618      	mov	r0, r3
 80024f6:	f000 f925 	bl	8002744 <RCCEx_PLLSAI2_Config>
 80024fa:	4603      	mov	r3, r0
 80024fc:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80024fe:	7cfb      	ldrb	r3, [r7, #19]
 8002500:	2b00      	cmp	r3, #0
 8002502:	d001      	beq.n	8002508 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8002504:	7cfb      	ldrb	r3, [r7, #19]
 8002506:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	681b      	ldr	r3, [r3, #0]
 800250c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002510:	2b00      	cmp	r3, #0
 8002512:	d00a      	beq.n	800252a <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8002514:	4b10      	ldr	r3, [pc, #64]	; (8002558 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002516:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800251a:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002522:	490d      	ldr	r1, [pc, #52]	; (8002558 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002524:	4313      	orrs	r3, r2
 8002526:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	681b      	ldr	r3, [r3, #0]
 800252e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002532:	2b00      	cmp	r3, #0
 8002534:	d00b      	beq.n	800254e <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8002536:	4b08      	ldr	r3, [pc, #32]	; (8002558 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002538:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800253c:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002546:	4904      	ldr	r1, [pc, #16]	; (8002558 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002548:	4313      	orrs	r3, r2
 800254a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 800254e:	7cbb      	ldrb	r3, [r7, #18]
}
 8002550:	4618      	mov	r0, r3
 8002552:	3718      	adds	r7, #24
 8002554:	46bd      	mov	sp, r7
 8002556:	bd80      	pop	{r7, pc}
 8002558:	40021000 	.word	0x40021000

0800255c <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 800255c:	b580      	push	{r7, lr}
 800255e:	b084      	sub	sp, #16
 8002560:	af00      	add	r7, sp, #0
 8002562:	6078      	str	r0, [r7, #4]
 8002564:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8002566:	2300      	movs	r3, #0
 8002568:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800256a:	4b75      	ldr	r3, [pc, #468]	; (8002740 <RCCEx_PLLSAI1_Config+0x1e4>)
 800256c:	68db      	ldr	r3, [r3, #12]
 800256e:	f003 0303 	and.w	r3, r3, #3
 8002572:	2b00      	cmp	r3, #0
 8002574:	d018      	beq.n	80025a8 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8002576:	4b72      	ldr	r3, [pc, #456]	; (8002740 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002578:	68db      	ldr	r3, [r3, #12]
 800257a:	f003 0203 	and.w	r2, r3, #3
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	681b      	ldr	r3, [r3, #0]
 8002582:	429a      	cmp	r2, r3
 8002584:	d10d      	bne.n	80025a2 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	681b      	ldr	r3, [r3, #0]
       ||
 800258a:	2b00      	cmp	r3, #0
 800258c:	d009      	beq.n	80025a2 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 800258e:	4b6c      	ldr	r3, [pc, #432]	; (8002740 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002590:	68db      	ldr	r3, [r3, #12]
 8002592:	091b      	lsrs	r3, r3, #4
 8002594:	f003 0307 	and.w	r3, r3, #7
 8002598:	1c5a      	adds	r2, r3, #1
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	685b      	ldr	r3, [r3, #4]
       ||
 800259e:	429a      	cmp	r2, r3
 80025a0:	d047      	beq.n	8002632 <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 80025a2:	2301      	movs	r3, #1
 80025a4:	73fb      	strb	r3, [r7, #15]
 80025a6:	e044      	b.n	8002632 <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	681b      	ldr	r3, [r3, #0]
 80025ac:	2b03      	cmp	r3, #3
 80025ae:	d018      	beq.n	80025e2 <RCCEx_PLLSAI1_Config+0x86>
 80025b0:	2b03      	cmp	r3, #3
 80025b2:	d825      	bhi.n	8002600 <RCCEx_PLLSAI1_Config+0xa4>
 80025b4:	2b01      	cmp	r3, #1
 80025b6:	d002      	beq.n	80025be <RCCEx_PLLSAI1_Config+0x62>
 80025b8:	2b02      	cmp	r3, #2
 80025ba:	d009      	beq.n	80025d0 <RCCEx_PLLSAI1_Config+0x74>
 80025bc:	e020      	b.n	8002600 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80025be:	4b60      	ldr	r3, [pc, #384]	; (8002740 <RCCEx_PLLSAI1_Config+0x1e4>)
 80025c0:	681b      	ldr	r3, [r3, #0]
 80025c2:	f003 0302 	and.w	r3, r3, #2
 80025c6:	2b00      	cmp	r3, #0
 80025c8:	d11d      	bne.n	8002606 <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 80025ca:	2301      	movs	r3, #1
 80025cc:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80025ce:	e01a      	b.n	8002606 <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80025d0:	4b5b      	ldr	r3, [pc, #364]	; (8002740 <RCCEx_PLLSAI1_Config+0x1e4>)
 80025d2:	681b      	ldr	r3, [r3, #0]
 80025d4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80025d8:	2b00      	cmp	r3, #0
 80025da:	d116      	bne.n	800260a <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 80025dc:	2301      	movs	r3, #1
 80025de:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80025e0:	e013      	b.n	800260a <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 80025e2:	4b57      	ldr	r3, [pc, #348]	; (8002740 <RCCEx_PLLSAI1_Config+0x1e4>)
 80025e4:	681b      	ldr	r3, [r3, #0]
 80025e6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80025ea:	2b00      	cmp	r3, #0
 80025ec:	d10f      	bne.n	800260e <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80025ee:	4b54      	ldr	r3, [pc, #336]	; (8002740 <RCCEx_PLLSAI1_Config+0x1e4>)
 80025f0:	681b      	ldr	r3, [r3, #0]
 80025f2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80025f6:	2b00      	cmp	r3, #0
 80025f8:	d109      	bne.n	800260e <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 80025fa:	2301      	movs	r3, #1
 80025fc:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80025fe:	e006      	b.n	800260e <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8002600:	2301      	movs	r3, #1
 8002602:	73fb      	strb	r3, [r7, #15]
      break;
 8002604:	e004      	b.n	8002610 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8002606:	bf00      	nop
 8002608:	e002      	b.n	8002610 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800260a:	bf00      	nop
 800260c:	e000      	b.n	8002610 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800260e:	bf00      	nop
    }

    if(status == HAL_OK)
 8002610:	7bfb      	ldrb	r3, [r7, #15]
 8002612:	2b00      	cmp	r3, #0
 8002614:	d10d      	bne.n	8002632 <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8002616:	4b4a      	ldr	r3, [pc, #296]	; (8002740 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002618:	68db      	ldr	r3, [r3, #12]
 800261a:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	6819      	ldr	r1, [r3, #0]
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	685b      	ldr	r3, [r3, #4]
 8002626:	3b01      	subs	r3, #1
 8002628:	011b      	lsls	r3, r3, #4
 800262a:	430b      	orrs	r3, r1
 800262c:	4944      	ldr	r1, [pc, #272]	; (8002740 <RCCEx_PLLSAI1_Config+0x1e4>)
 800262e:	4313      	orrs	r3, r2
 8002630:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8002632:	7bfb      	ldrb	r3, [r7, #15]
 8002634:	2b00      	cmp	r3, #0
 8002636:	d17d      	bne.n	8002734 <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8002638:	4b41      	ldr	r3, [pc, #260]	; (8002740 <RCCEx_PLLSAI1_Config+0x1e4>)
 800263a:	681b      	ldr	r3, [r3, #0]
 800263c:	4a40      	ldr	r2, [pc, #256]	; (8002740 <RCCEx_PLLSAI1_Config+0x1e4>)
 800263e:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8002642:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002644:	f7fe fa52 	bl	8000aec <HAL_GetTick>
 8002648:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 800264a:	e009      	b.n	8002660 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800264c:	f7fe fa4e 	bl	8000aec <HAL_GetTick>
 8002650:	4602      	mov	r2, r0
 8002652:	68bb      	ldr	r3, [r7, #8]
 8002654:	1ad3      	subs	r3, r2, r3
 8002656:	2b02      	cmp	r3, #2
 8002658:	d902      	bls.n	8002660 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 800265a:	2303      	movs	r3, #3
 800265c:	73fb      	strb	r3, [r7, #15]
        break;
 800265e:	e005      	b.n	800266c <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8002660:	4b37      	ldr	r3, [pc, #220]	; (8002740 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002662:	681b      	ldr	r3, [r3, #0]
 8002664:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002668:	2b00      	cmp	r3, #0
 800266a:	d1ef      	bne.n	800264c <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 800266c:	7bfb      	ldrb	r3, [r7, #15]
 800266e:	2b00      	cmp	r3, #0
 8002670:	d160      	bne.n	8002734 <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8002672:	683b      	ldr	r3, [r7, #0]
 8002674:	2b00      	cmp	r3, #0
 8002676:	d111      	bne.n	800269c <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002678:	4b31      	ldr	r3, [pc, #196]	; (8002740 <RCCEx_PLLSAI1_Config+0x1e4>)
 800267a:	691b      	ldr	r3, [r3, #16]
 800267c:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8002680:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002684:	687a      	ldr	r2, [r7, #4]
 8002686:	6892      	ldr	r2, [r2, #8]
 8002688:	0211      	lsls	r1, r2, #8
 800268a:	687a      	ldr	r2, [r7, #4]
 800268c:	68d2      	ldr	r2, [r2, #12]
 800268e:	0912      	lsrs	r2, r2, #4
 8002690:	0452      	lsls	r2, r2, #17
 8002692:	430a      	orrs	r2, r1
 8002694:	492a      	ldr	r1, [pc, #168]	; (8002740 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002696:	4313      	orrs	r3, r2
 8002698:	610b      	str	r3, [r1, #16]
 800269a:	e027      	b.n	80026ec <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 800269c:	683b      	ldr	r3, [r7, #0]
 800269e:	2b01      	cmp	r3, #1
 80026a0:	d112      	bne.n	80026c8 <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80026a2:	4b27      	ldr	r3, [pc, #156]	; (8002740 <RCCEx_PLLSAI1_Config+0x1e4>)
 80026a4:	691b      	ldr	r3, [r3, #16]
 80026a6:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 80026aa:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80026ae:	687a      	ldr	r2, [r7, #4]
 80026b0:	6892      	ldr	r2, [r2, #8]
 80026b2:	0211      	lsls	r1, r2, #8
 80026b4:	687a      	ldr	r2, [r7, #4]
 80026b6:	6912      	ldr	r2, [r2, #16]
 80026b8:	0852      	lsrs	r2, r2, #1
 80026ba:	3a01      	subs	r2, #1
 80026bc:	0552      	lsls	r2, r2, #21
 80026be:	430a      	orrs	r2, r1
 80026c0:	491f      	ldr	r1, [pc, #124]	; (8002740 <RCCEx_PLLSAI1_Config+0x1e4>)
 80026c2:	4313      	orrs	r3, r2
 80026c4:	610b      	str	r3, [r1, #16]
 80026c6:	e011      	b.n	80026ec <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80026c8:	4b1d      	ldr	r3, [pc, #116]	; (8002740 <RCCEx_PLLSAI1_Config+0x1e4>)
 80026ca:	691b      	ldr	r3, [r3, #16]
 80026cc:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 80026d0:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80026d4:	687a      	ldr	r2, [r7, #4]
 80026d6:	6892      	ldr	r2, [r2, #8]
 80026d8:	0211      	lsls	r1, r2, #8
 80026da:	687a      	ldr	r2, [r7, #4]
 80026dc:	6952      	ldr	r2, [r2, #20]
 80026de:	0852      	lsrs	r2, r2, #1
 80026e0:	3a01      	subs	r2, #1
 80026e2:	0652      	lsls	r2, r2, #25
 80026e4:	430a      	orrs	r2, r1
 80026e6:	4916      	ldr	r1, [pc, #88]	; (8002740 <RCCEx_PLLSAI1_Config+0x1e4>)
 80026e8:	4313      	orrs	r3, r2
 80026ea:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 80026ec:	4b14      	ldr	r3, [pc, #80]	; (8002740 <RCCEx_PLLSAI1_Config+0x1e4>)
 80026ee:	681b      	ldr	r3, [r3, #0]
 80026f0:	4a13      	ldr	r2, [pc, #76]	; (8002740 <RCCEx_PLLSAI1_Config+0x1e4>)
 80026f2:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80026f6:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80026f8:	f7fe f9f8 	bl	8000aec <HAL_GetTick>
 80026fc:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80026fe:	e009      	b.n	8002714 <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8002700:	f7fe f9f4 	bl	8000aec <HAL_GetTick>
 8002704:	4602      	mov	r2, r0
 8002706:	68bb      	ldr	r3, [r7, #8]
 8002708:	1ad3      	subs	r3, r2, r3
 800270a:	2b02      	cmp	r3, #2
 800270c:	d902      	bls.n	8002714 <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 800270e:	2303      	movs	r3, #3
 8002710:	73fb      	strb	r3, [r7, #15]
          break;
 8002712:	e005      	b.n	8002720 <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8002714:	4b0a      	ldr	r3, [pc, #40]	; (8002740 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002716:	681b      	ldr	r3, [r3, #0]
 8002718:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800271c:	2b00      	cmp	r3, #0
 800271e:	d0ef      	beq.n	8002700 <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 8002720:	7bfb      	ldrb	r3, [r7, #15]
 8002722:	2b00      	cmp	r3, #0
 8002724:	d106      	bne.n	8002734 <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8002726:	4b06      	ldr	r3, [pc, #24]	; (8002740 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002728:	691a      	ldr	r2, [r3, #16]
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	699b      	ldr	r3, [r3, #24]
 800272e:	4904      	ldr	r1, [pc, #16]	; (8002740 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002730:	4313      	orrs	r3, r2
 8002732:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8002734:	7bfb      	ldrb	r3, [r7, #15]
}
 8002736:	4618      	mov	r0, r3
 8002738:	3710      	adds	r7, #16
 800273a:	46bd      	mov	sp, r7
 800273c:	bd80      	pop	{r7, pc}
 800273e:	bf00      	nop
 8002740:	40021000 	.word	0x40021000

08002744 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8002744:	b580      	push	{r7, lr}
 8002746:	b084      	sub	sp, #16
 8002748:	af00      	add	r7, sp, #0
 800274a:	6078      	str	r0, [r7, #4]
 800274c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800274e:	2300      	movs	r3, #0
 8002750:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8002752:	4b6a      	ldr	r3, [pc, #424]	; (80028fc <RCCEx_PLLSAI2_Config+0x1b8>)
 8002754:	68db      	ldr	r3, [r3, #12]
 8002756:	f003 0303 	and.w	r3, r3, #3
 800275a:	2b00      	cmp	r3, #0
 800275c:	d018      	beq.n	8002790 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 800275e:	4b67      	ldr	r3, [pc, #412]	; (80028fc <RCCEx_PLLSAI2_Config+0x1b8>)
 8002760:	68db      	ldr	r3, [r3, #12]
 8002762:	f003 0203 	and.w	r2, r3, #3
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	681b      	ldr	r3, [r3, #0]
 800276a:	429a      	cmp	r2, r3
 800276c:	d10d      	bne.n	800278a <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	681b      	ldr	r3, [r3, #0]
       ||
 8002772:	2b00      	cmp	r3, #0
 8002774:	d009      	beq.n	800278a <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 8002776:	4b61      	ldr	r3, [pc, #388]	; (80028fc <RCCEx_PLLSAI2_Config+0x1b8>)
 8002778:	68db      	ldr	r3, [r3, #12]
 800277a:	091b      	lsrs	r3, r3, #4
 800277c:	f003 0307 	and.w	r3, r3, #7
 8002780:	1c5a      	adds	r2, r3, #1
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	685b      	ldr	r3, [r3, #4]
       ||
 8002786:	429a      	cmp	r2, r3
 8002788:	d047      	beq.n	800281a <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 800278a:	2301      	movs	r3, #1
 800278c:	73fb      	strb	r3, [r7, #15]
 800278e:	e044      	b.n	800281a <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	681b      	ldr	r3, [r3, #0]
 8002794:	2b03      	cmp	r3, #3
 8002796:	d018      	beq.n	80027ca <RCCEx_PLLSAI2_Config+0x86>
 8002798:	2b03      	cmp	r3, #3
 800279a:	d825      	bhi.n	80027e8 <RCCEx_PLLSAI2_Config+0xa4>
 800279c:	2b01      	cmp	r3, #1
 800279e:	d002      	beq.n	80027a6 <RCCEx_PLLSAI2_Config+0x62>
 80027a0:	2b02      	cmp	r3, #2
 80027a2:	d009      	beq.n	80027b8 <RCCEx_PLLSAI2_Config+0x74>
 80027a4:	e020      	b.n	80027e8 <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80027a6:	4b55      	ldr	r3, [pc, #340]	; (80028fc <RCCEx_PLLSAI2_Config+0x1b8>)
 80027a8:	681b      	ldr	r3, [r3, #0]
 80027aa:	f003 0302 	and.w	r3, r3, #2
 80027ae:	2b00      	cmp	r3, #0
 80027b0:	d11d      	bne.n	80027ee <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 80027b2:	2301      	movs	r3, #1
 80027b4:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80027b6:	e01a      	b.n	80027ee <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80027b8:	4b50      	ldr	r3, [pc, #320]	; (80028fc <RCCEx_PLLSAI2_Config+0x1b8>)
 80027ba:	681b      	ldr	r3, [r3, #0]
 80027bc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80027c0:	2b00      	cmp	r3, #0
 80027c2:	d116      	bne.n	80027f2 <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 80027c4:	2301      	movs	r3, #1
 80027c6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80027c8:	e013      	b.n	80027f2 <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 80027ca:	4b4c      	ldr	r3, [pc, #304]	; (80028fc <RCCEx_PLLSAI2_Config+0x1b8>)
 80027cc:	681b      	ldr	r3, [r3, #0]
 80027ce:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80027d2:	2b00      	cmp	r3, #0
 80027d4:	d10f      	bne.n	80027f6 <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80027d6:	4b49      	ldr	r3, [pc, #292]	; (80028fc <RCCEx_PLLSAI2_Config+0x1b8>)
 80027d8:	681b      	ldr	r3, [r3, #0]
 80027da:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80027de:	2b00      	cmp	r3, #0
 80027e0:	d109      	bne.n	80027f6 <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 80027e2:	2301      	movs	r3, #1
 80027e4:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80027e6:	e006      	b.n	80027f6 <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 80027e8:	2301      	movs	r3, #1
 80027ea:	73fb      	strb	r3, [r7, #15]
      break;
 80027ec:	e004      	b.n	80027f8 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 80027ee:	bf00      	nop
 80027f0:	e002      	b.n	80027f8 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 80027f2:	bf00      	nop
 80027f4:	e000      	b.n	80027f8 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 80027f6:	bf00      	nop
    }

    if(status == HAL_OK)
 80027f8:	7bfb      	ldrb	r3, [r7, #15]
 80027fa:	2b00      	cmp	r3, #0
 80027fc:	d10d      	bne.n	800281a <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 80027fe:	4b3f      	ldr	r3, [pc, #252]	; (80028fc <RCCEx_PLLSAI2_Config+0x1b8>)
 8002800:	68db      	ldr	r3, [r3, #12]
 8002802:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	6819      	ldr	r1, [r3, #0]
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	685b      	ldr	r3, [r3, #4]
 800280e:	3b01      	subs	r3, #1
 8002810:	011b      	lsls	r3, r3, #4
 8002812:	430b      	orrs	r3, r1
 8002814:	4939      	ldr	r1, [pc, #228]	; (80028fc <RCCEx_PLLSAI2_Config+0x1b8>)
 8002816:	4313      	orrs	r3, r2
 8002818:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 800281a:	7bfb      	ldrb	r3, [r7, #15]
 800281c:	2b00      	cmp	r3, #0
 800281e:	d167      	bne.n	80028f0 <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8002820:	4b36      	ldr	r3, [pc, #216]	; (80028fc <RCCEx_PLLSAI2_Config+0x1b8>)
 8002822:	681b      	ldr	r3, [r3, #0]
 8002824:	4a35      	ldr	r2, [pc, #212]	; (80028fc <RCCEx_PLLSAI2_Config+0x1b8>)
 8002826:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800282a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800282c:	f7fe f95e 	bl	8000aec <HAL_GetTick>
 8002830:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8002832:	e009      	b.n	8002848 <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8002834:	f7fe f95a 	bl	8000aec <HAL_GetTick>
 8002838:	4602      	mov	r2, r0
 800283a:	68bb      	ldr	r3, [r7, #8]
 800283c:	1ad3      	subs	r3, r2, r3
 800283e:	2b02      	cmp	r3, #2
 8002840:	d902      	bls.n	8002848 <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8002842:	2303      	movs	r3, #3
 8002844:	73fb      	strb	r3, [r7, #15]
        break;
 8002846:	e005      	b.n	8002854 <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8002848:	4b2c      	ldr	r3, [pc, #176]	; (80028fc <RCCEx_PLLSAI2_Config+0x1b8>)
 800284a:	681b      	ldr	r3, [r3, #0]
 800284c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002850:	2b00      	cmp	r3, #0
 8002852:	d1ef      	bne.n	8002834 <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8002854:	7bfb      	ldrb	r3, [r7, #15]
 8002856:	2b00      	cmp	r3, #0
 8002858:	d14a      	bne.n	80028f0 <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 800285a:	683b      	ldr	r3, [r7, #0]
 800285c:	2b00      	cmp	r3, #0
 800285e:	d111      	bne.n	8002884 <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8002860:	4b26      	ldr	r3, [pc, #152]	; (80028fc <RCCEx_PLLSAI2_Config+0x1b8>)
 8002862:	695b      	ldr	r3, [r3, #20]
 8002864:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8002868:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800286c:	687a      	ldr	r2, [r7, #4]
 800286e:	6892      	ldr	r2, [r2, #8]
 8002870:	0211      	lsls	r1, r2, #8
 8002872:	687a      	ldr	r2, [r7, #4]
 8002874:	68d2      	ldr	r2, [r2, #12]
 8002876:	0912      	lsrs	r2, r2, #4
 8002878:	0452      	lsls	r2, r2, #17
 800287a:	430a      	orrs	r2, r1
 800287c:	491f      	ldr	r1, [pc, #124]	; (80028fc <RCCEx_PLLSAI2_Config+0x1b8>)
 800287e:	4313      	orrs	r3, r2
 8002880:	614b      	str	r3, [r1, #20]
 8002882:	e011      	b.n	80028a8 <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8002884:	4b1d      	ldr	r3, [pc, #116]	; (80028fc <RCCEx_PLLSAI2_Config+0x1b8>)
 8002886:	695b      	ldr	r3, [r3, #20]
 8002888:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 800288c:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8002890:	687a      	ldr	r2, [r7, #4]
 8002892:	6892      	ldr	r2, [r2, #8]
 8002894:	0211      	lsls	r1, r2, #8
 8002896:	687a      	ldr	r2, [r7, #4]
 8002898:	6912      	ldr	r2, [r2, #16]
 800289a:	0852      	lsrs	r2, r2, #1
 800289c:	3a01      	subs	r2, #1
 800289e:	0652      	lsls	r2, r2, #25
 80028a0:	430a      	orrs	r2, r1
 80028a2:	4916      	ldr	r1, [pc, #88]	; (80028fc <RCCEx_PLLSAI2_Config+0x1b8>)
 80028a4:	4313      	orrs	r3, r2
 80028a6:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 80028a8:	4b14      	ldr	r3, [pc, #80]	; (80028fc <RCCEx_PLLSAI2_Config+0x1b8>)
 80028aa:	681b      	ldr	r3, [r3, #0]
 80028ac:	4a13      	ldr	r2, [pc, #76]	; (80028fc <RCCEx_PLLSAI2_Config+0x1b8>)
 80028ae:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80028b2:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80028b4:	f7fe f91a 	bl	8000aec <HAL_GetTick>
 80028b8:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 80028ba:	e009      	b.n	80028d0 <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 80028bc:	f7fe f916 	bl	8000aec <HAL_GetTick>
 80028c0:	4602      	mov	r2, r0
 80028c2:	68bb      	ldr	r3, [r7, #8]
 80028c4:	1ad3      	subs	r3, r2, r3
 80028c6:	2b02      	cmp	r3, #2
 80028c8:	d902      	bls.n	80028d0 <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 80028ca:	2303      	movs	r3, #3
 80028cc:	73fb      	strb	r3, [r7, #15]
          break;
 80028ce:	e005      	b.n	80028dc <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 80028d0:	4b0a      	ldr	r3, [pc, #40]	; (80028fc <RCCEx_PLLSAI2_Config+0x1b8>)
 80028d2:	681b      	ldr	r3, [r3, #0]
 80028d4:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80028d8:	2b00      	cmp	r3, #0
 80028da:	d0ef      	beq.n	80028bc <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 80028dc:	7bfb      	ldrb	r3, [r7, #15]
 80028de:	2b00      	cmp	r3, #0
 80028e0:	d106      	bne.n	80028f0 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 80028e2:	4b06      	ldr	r3, [pc, #24]	; (80028fc <RCCEx_PLLSAI2_Config+0x1b8>)
 80028e4:	695a      	ldr	r2, [r3, #20]
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	695b      	ldr	r3, [r3, #20]
 80028ea:	4904      	ldr	r1, [pc, #16]	; (80028fc <RCCEx_PLLSAI2_Config+0x1b8>)
 80028ec:	4313      	orrs	r3, r2
 80028ee:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 80028f0:	7bfb      	ldrb	r3, [r7, #15]
}
 80028f2:	4618      	mov	r0, r3
 80028f4:	3710      	adds	r7, #16
 80028f6:	46bd      	mov	sp, r7
 80028f8:	bd80      	pop	{r7, pc}
 80028fa:	bf00      	nop
 80028fc:	40021000 	.word	0x40021000

08002900 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002900:	b580      	push	{r7, lr}
 8002902:	b082      	sub	sp, #8
 8002904:	af00      	add	r7, sp, #0
 8002906:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	2b00      	cmp	r3, #0
 800290c:	d101      	bne.n	8002912 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800290e:	2301      	movs	r3, #1
 8002910:	e040      	b.n	8002994 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002916:	2b00      	cmp	r3, #0
 8002918:	d106      	bne.n	8002928 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	2200      	movs	r2, #0
 800291e:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002922:	6878      	ldr	r0, [r7, #4]
 8002924:	f7fd ffb0 	bl	8000888 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	2224      	movs	r2, #36	; 0x24
 800292c:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	681b      	ldr	r3, [r3, #0]
 8002932:	681a      	ldr	r2, [r3, #0]
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	681b      	ldr	r3, [r3, #0]
 8002938:	f022 0201 	bic.w	r2, r2, #1
 800293c:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800293e:	6878      	ldr	r0, [r7, #4]
 8002940:	f000 f8c0 	bl	8002ac4 <UART_SetConfig>
 8002944:	4603      	mov	r3, r0
 8002946:	2b01      	cmp	r3, #1
 8002948:	d101      	bne.n	800294e <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 800294a:	2301      	movs	r3, #1
 800294c:	e022      	b.n	8002994 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002952:	2b00      	cmp	r3, #0
 8002954:	d002      	beq.n	800295c <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8002956:	6878      	ldr	r0, [r7, #4]
 8002958:	f000 fb3e 	bl	8002fd8 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	681b      	ldr	r3, [r3, #0]
 8002960:	685a      	ldr	r2, [r3, #4]
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	681b      	ldr	r3, [r3, #0]
 8002966:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800296a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	681b      	ldr	r3, [r3, #0]
 8002970:	689a      	ldr	r2, [r3, #8]
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	681b      	ldr	r3, [r3, #0]
 8002976:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800297a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	681b      	ldr	r3, [r3, #0]
 8002980:	681a      	ldr	r2, [r3, #0]
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	681b      	ldr	r3, [r3, #0]
 8002986:	f042 0201 	orr.w	r2, r2, #1
 800298a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800298c:	6878      	ldr	r0, [r7, #4]
 800298e:	f000 fbc5 	bl	800311c <UART_CheckIdleState>
 8002992:	4603      	mov	r3, r0
}
 8002994:	4618      	mov	r0, r3
 8002996:	3708      	adds	r7, #8
 8002998:	46bd      	mov	sp, r7
 800299a:	bd80      	pop	{r7, pc}

0800299c <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800299c:	b580      	push	{r7, lr}
 800299e:	b08a      	sub	sp, #40	; 0x28
 80029a0:	af02      	add	r7, sp, #8
 80029a2:	60f8      	str	r0, [r7, #12]
 80029a4:	60b9      	str	r1, [r7, #8]
 80029a6:	603b      	str	r3, [r7, #0]
 80029a8:	4613      	mov	r3, r2
 80029aa:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80029ac:	68fb      	ldr	r3, [r7, #12]
 80029ae:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80029b0:	2b20      	cmp	r3, #32
 80029b2:	f040 8082 	bne.w	8002aba <HAL_UART_Transmit+0x11e>
  {
    if ((pData == NULL) || (Size == 0U))
 80029b6:	68bb      	ldr	r3, [r7, #8]
 80029b8:	2b00      	cmp	r3, #0
 80029ba:	d002      	beq.n	80029c2 <HAL_UART_Transmit+0x26>
 80029bc:	88fb      	ldrh	r3, [r7, #6]
 80029be:	2b00      	cmp	r3, #0
 80029c0:	d101      	bne.n	80029c6 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 80029c2:	2301      	movs	r3, #1
 80029c4:	e07a      	b.n	8002abc <HAL_UART_Transmit+0x120>
    }

    __HAL_LOCK(huart);
 80029c6:	68fb      	ldr	r3, [r7, #12]
 80029c8:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 80029cc:	2b01      	cmp	r3, #1
 80029ce:	d101      	bne.n	80029d4 <HAL_UART_Transmit+0x38>
 80029d0:	2302      	movs	r3, #2
 80029d2:	e073      	b.n	8002abc <HAL_UART_Transmit+0x120>
 80029d4:	68fb      	ldr	r3, [r7, #12]
 80029d6:	2201      	movs	r2, #1
 80029d8:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80029dc:	68fb      	ldr	r3, [r7, #12]
 80029de:	2200      	movs	r2, #0
 80029e0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80029e4:	68fb      	ldr	r3, [r7, #12]
 80029e6:	2221      	movs	r2, #33	; 0x21
 80029e8:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80029ea:	f7fe f87f 	bl	8000aec <HAL_GetTick>
 80029ee:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 80029f0:	68fb      	ldr	r3, [r7, #12]
 80029f2:	88fa      	ldrh	r2, [r7, #6]
 80029f4:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 80029f8:	68fb      	ldr	r3, [r7, #12]
 80029fa:	88fa      	ldrh	r2, [r7, #6]
 80029fc:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002a00:	68fb      	ldr	r3, [r7, #12]
 8002a02:	689b      	ldr	r3, [r3, #8]
 8002a04:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002a08:	d108      	bne.n	8002a1c <HAL_UART_Transmit+0x80>
 8002a0a:	68fb      	ldr	r3, [r7, #12]
 8002a0c:	691b      	ldr	r3, [r3, #16]
 8002a0e:	2b00      	cmp	r3, #0
 8002a10:	d104      	bne.n	8002a1c <HAL_UART_Transmit+0x80>
    {
      pdata8bits  = NULL;
 8002a12:	2300      	movs	r3, #0
 8002a14:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8002a16:	68bb      	ldr	r3, [r7, #8]
 8002a18:	61bb      	str	r3, [r7, #24]
 8002a1a:	e003      	b.n	8002a24 <HAL_UART_Transmit+0x88>
    }
    else
    {
      pdata8bits  = pData;
 8002a1c:	68bb      	ldr	r3, [r7, #8]
 8002a1e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002a20:	2300      	movs	r3, #0
 8002a22:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8002a24:	68fb      	ldr	r3, [r7, #12]
 8002a26:	2200      	movs	r2, #0
 8002a28:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    while (huart->TxXferCount > 0U)
 8002a2c:	e02d      	b.n	8002a8a <HAL_UART_Transmit+0xee>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002a2e:	683b      	ldr	r3, [r7, #0]
 8002a30:	9300      	str	r3, [sp, #0]
 8002a32:	697b      	ldr	r3, [r7, #20]
 8002a34:	2200      	movs	r2, #0
 8002a36:	2180      	movs	r1, #128	; 0x80
 8002a38:	68f8      	ldr	r0, [r7, #12]
 8002a3a:	f000 fbb8 	bl	80031ae <UART_WaitOnFlagUntilTimeout>
 8002a3e:	4603      	mov	r3, r0
 8002a40:	2b00      	cmp	r3, #0
 8002a42:	d001      	beq.n	8002a48 <HAL_UART_Transmit+0xac>
      {
        return HAL_TIMEOUT;
 8002a44:	2303      	movs	r3, #3
 8002a46:	e039      	b.n	8002abc <HAL_UART_Transmit+0x120>
      }
      if (pdata8bits == NULL)
 8002a48:	69fb      	ldr	r3, [r7, #28]
 8002a4a:	2b00      	cmp	r3, #0
 8002a4c:	d10b      	bne.n	8002a66 <HAL_UART_Transmit+0xca>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8002a4e:	69bb      	ldr	r3, [r7, #24]
 8002a50:	881a      	ldrh	r2, [r3, #0]
 8002a52:	68fb      	ldr	r3, [r7, #12]
 8002a54:	681b      	ldr	r3, [r3, #0]
 8002a56:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002a5a:	b292      	uxth	r2, r2
 8002a5c:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8002a5e:	69bb      	ldr	r3, [r7, #24]
 8002a60:	3302      	adds	r3, #2
 8002a62:	61bb      	str	r3, [r7, #24]
 8002a64:	e008      	b.n	8002a78 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8002a66:	69fb      	ldr	r3, [r7, #28]
 8002a68:	781a      	ldrb	r2, [r3, #0]
 8002a6a:	68fb      	ldr	r3, [r7, #12]
 8002a6c:	681b      	ldr	r3, [r3, #0]
 8002a6e:	b292      	uxth	r2, r2
 8002a70:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8002a72:	69fb      	ldr	r3, [r7, #28]
 8002a74:	3301      	adds	r3, #1
 8002a76:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8002a78:	68fb      	ldr	r3, [r7, #12]
 8002a7a:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8002a7e:	b29b      	uxth	r3, r3
 8002a80:	3b01      	subs	r3, #1
 8002a82:	b29a      	uxth	r2, r3
 8002a84:	68fb      	ldr	r3, [r7, #12]
 8002a86:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8002a8a:	68fb      	ldr	r3, [r7, #12]
 8002a8c:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8002a90:	b29b      	uxth	r3, r3
 8002a92:	2b00      	cmp	r3, #0
 8002a94:	d1cb      	bne.n	8002a2e <HAL_UART_Transmit+0x92>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002a96:	683b      	ldr	r3, [r7, #0]
 8002a98:	9300      	str	r3, [sp, #0]
 8002a9a:	697b      	ldr	r3, [r7, #20]
 8002a9c:	2200      	movs	r2, #0
 8002a9e:	2140      	movs	r1, #64	; 0x40
 8002aa0:	68f8      	ldr	r0, [r7, #12]
 8002aa2:	f000 fb84 	bl	80031ae <UART_WaitOnFlagUntilTimeout>
 8002aa6:	4603      	mov	r3, r0
 8002aa8:	2b00      	cmp	r3, #0
 8002aaa:	d001      	beq.n	8002ab0 <HAL_UART_Transmit+0x114>
    {
      return HAL_TIMEOUT;
 8002aac:	2303      	movs	r3, #3
 8002aae:	e005      	b.n	8002abc <HAL_UART_Transmit+0x120>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8002ab0:	68fb      	ldr	r3, [r7, #12]
 8002ab2:	2220      	movs	r2, #32
 8002ab4:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 8002ab6:	2300      	movs	r3, #0
 8002ab8:	e000      	b.n	8002abc <HAL_UART_Transmit+0x120>
  }
  else
  {
    return HAL_BUSY;
 8002aba:	2302      	movs	r3, #2
  }
}
 8002abc:	4618      	mov	r0, r3
 8002abe:	3720      	adds	r7, #32
 8002ac0:	46bd      	mov	sp, r7
 8002ac2:	bd80      	pop	{r7, pc}

08002ac4 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002ac4:	b5b0      	push	{r4, r5, r7, lr}
 8002ac6:	b088      	sub	sp, #32
 8002ac8:	af00      	add	r7, sp, #0
 8002aca:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8002acc:	2300      	movs	r3, #0
 8002ace:	76bb      	strb	r3, [r7, #26]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	689a      	ldr	r2, [r3, #8]
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	691b      	ldr	r3, [r3, #16]
 8002ad8:	431a      	orrs	r2, r3
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	695b      	ldr	r3, [r3, #20]
 8002ade:	431a      	orrs	r2, r3
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	69db      	ldr	r3, [r3, #28]
 8002ae4:	4313      	orrs	r3, r2
 8002ae6:	61fb      	str	r3, [r7, #28]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	681b      	ldr	r3, [r3, #0]
 8002aec:	681a      	ldr	r2, [r3, #0]
 8002aee:	4bad      	ldr	r3, [pc, #692]	; (8002da4 <UART_SetConfig+0x2e0>)
 8002af0:	4013      	ands	r3, r2
 8002af2:	687a      	ldr	r2, [r7, #4]
 8002af4:	6812      	ldr	r2, [r2, #0]
 8002af6:	69f9      	ldr	r1, [r7, #28]
 8002af8:	430b      	orrs	r3, r1
 8002afa:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	681b      	ldr	r3, [r3, #0]
 8002b00:	685b      	ldr	r3, [r3, #4]
 8002b02:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	68da      	ldr	r2, [r3, #12]
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	681b      	ldr	r3, [r3, #0]
 8002b0e:	430a      	orrs	r2, r1
 8002b10:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	699b      	ldr	r3, [r3, #24]
 8002b16:	61fb      	str	r3, [r7, #28]

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	681b      	ldr	r3, [r3, #0]
 8002b1c:	4aa2      	ldr	r2, [pc, #648]	; (8002da8 <UART_SetConfig+0x2e4>)
 8002b1e:	4293      	cmp	r3, r2
 8002b20:	d004      	beq.n	8002b2c <UART_SetConfig+0x68>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	6a1b      	ldr	r3, [r3, #32]
 8002b26:	69fa      	ldr	r2, [r7, #28]
 8002b28:	4313      	orrs	r3, r2
 8002b2a:	61fb      	str	r3, [r7, #28]
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	681b      	ldr	r3, [r3, #0]
 8002b30:	689b      	ldr	r3, [r3, #8]
 8002b32:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	681b      	ldr	r3, [r3, #0]
 8002b3a:	69fa      	ldr	r2, [r7, #28]
 8002b3c:	430a      	orrs	r2, r1
 8002b3e:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	681b      	ldr	r3, [r3, #0]
 8002b44:	4a99      	ldr	r2, [pc, #612]	; (8002dac <UART_SetConfig+0x2e8>)
 8002b46:	4293      	cmp	r3, r2
 8002b48:	d121      	bne.n	8002b8e <UART_SetConfig+0xca>
 8002b4a:	4b99      	ldr	r3, [pc, #612]	; (8002db0 <UART_SetConfig+0x2ec>)
 8002b4c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002b50:	f003 0303 	and.w	r3, r3, #3
 8002b54:	2b03      	cmp	r3, #3
 8002b56:	d817      	bhi.n	8002b88 <UART_SetConfig+0xc4>
 8002b58:	a201      	add	r2, pc, #4	; (adr r2, 8002b60 <UART_SetConfig+0x9c>)
 8002b5a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002b5e:	bf00      	nop
 8002b60:	08002b71 	.word	0x08002b71
 8002b64:	08002b7d 	.word	0x08002b7d
 8002b68:	08002b77 	.word	0x08002b77
 8002b6c:	08002b83 	.word	0x08002b83
 8002b70:	2301      	movs	r3, #1
 8002b72:	76fb      	strb	r3, [r7, #27]
 8002b74:	e0e7      	b.n	8002d46 <UART_SetConfig+0x282>
 8002b76:	2302      	movs	r3, #2
 8002b78:	76fb      	strb	r3, [r7, #27]
 8002b7a:	e0e4      	b.n	8002d46 <UART_SetConfig+0x282>
 8002b7c:	2304      	movs	r3, #4
 8002b7e:	76fb      	strb	r3, [r7, #27]
 8002b80:	e0e1      	b.n	8002d46 <UART_SetConfig+0x282>
 8002b82:	2308      	movs	r3, #8
 8002b84:	76fb      	strb	r3, [r7, #27]
 8002b86:	e0de      	b.n	8002d46 <UART_SetConfig+0x282>
 8002b88:	2310      	movs	r3, #16
 8002b8a:	76fb      	strb	r3, [r7, #27]
 8002b8c:	e0db      	b.n	8002d46 <UART_SetConfig+0x282>
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	681b      	ldr	r3, [r3, #0]
 8002b92:	4a88      	ldr	r2, [pc, #544]	; (8002db4 <UART_SetConfig+0x2f0>)
 8002b94:	4293      	cmp	r3, r2
 8002b96:	d132      	bne.n	8002bfe <UART_SetConfig+0x13a>
 8002b98:	4b85      	ldr	r3, [pc, #532]	; (8002db0 <UART_SetConfig+0x2ec>)
 8002b9a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002b9e:	f003 030c 	and.w	r3, r3, #12
 8002ba2:	2b0c      	cmp	r3, #12
 8002ba4:	d828      	bhi.n	8002bf8 <UART_SetConfig+0x134>
 8002ba6:	a201      	add	r2, pc, #4	; (adr r2, 8002bac <UART_SetConfig+0xe8>)
 8002ba8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002bac:	08002be1 	.word	0x08002be1
 8002bb0:	08002bf9 	.word	0x08002bf9
 8002bb4:	08002bf9 	.word	0x08002bf9
 8002bb8:	08002bf9 	.word	0x08002bf9
 8002bbc:	08002bed 	.word	0x08002bed
 8002bc0:	08002bf9 	.word	0x08002bf9
 8002bc4:	08002bf9 	.word	0x08002bf9
 8002bc8:	08002bf9 	.word	0x08002bf9
 8002bcc:	08002be7 	.word	0x08002be7
 8002bd0:	08002bf9 	.word	0x08002bf9
 8002bd4:	08002bf9 	.word	0x08002bf9
 8002bd8:	08002bf9 	.word	0x08002bf9
 8002bdc:	08002bf3 	.word	0x08002bf3
 8002be0:	2300      	movs	r3, #0
 8002be2:	76fb      	strb	r3, [r7, #27]
 8002be4:	e0af      	b.n	8002d46 <UART_SetConfig+0x282>
 8002be6:	2302      	movs	r3, #2
 8002be8:	76fb      	strb	r3, [r7, #27]
 8002bea:	e0ac      	b.n	8002d46 <UART_SetConfig+0x282>
 8002bec:	2304      	movs	r3, #4
 8002bee:	76fb      	strb	r3, [r7, #27]
 8002bf0:	e0a9      	b.n	8002d46 <UART_SetConfig+0x282>
 8002bf2:	2308      	movs	r3, #8
 8002bf4:	76fb      	strb	r3, [r7, #27]
 8002bf6:	e0a6      	b.n	8002d46 <UART_SetConfig+0x282>
 8002bf8:	2310      	movs	r3, #16
 8002bfa:	76fb      	strb	r3, [r7, #27]
 8002bfc:	e0a3      	b.n	8002d46 <UART_SetConfig+0x282>
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	681b      	ldr	r3, [r3, #0]
 8002c02:	4a6d      	ldr	r2, [pc, #436]	; (8002db8 <UART_SetConfig+0x2f4>)
 8002c04:	4293      	cmp	r3, r2
 8002c06:	d120      	bne.n	8002c4a <UART_SetConfig+0x186>
 8002c08:	4b69      	ldr	r3, [pc, #420]	; (8002db0 <UART_SetConfig+0x2ec>)
 8002c0a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002c0e:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8002c12:	2b30      	cmp	r3, #48	; 0x30
 8002c14:	d013      	beq.n	8002c3e <UART_SetConfig+0x17a>
 8002c16:	2b30      	cmp	r3, #48	; 0x30
 8002c18:	d814      	bhi.n	8002c44 <UART_SetConfig+0x180>
 8002c1a:	2b20      	cmp	r3, #32
 8002c1c:	d009      	beq.n	8002c32 <UART_SetConfig+0x16e>
 8002c1e:	2b20      	cmp	r3, #32
 8002c20:	d810      	bhi.n	8002c44 <UART_SetConfig+0x180>
 8002c22:	2b00      	cmp	r3, #0
 8002c24:	d002      	beq.n	8002c2c <UART_SetConfig+0x168>
 8002c26:	2b10      	cmp	r3, #16
 8002c28:	d006      	beq.n	8002c38 <UART_SetConfig+0x174>
 8002c2a:	e00b      	b.n	8002c44 <UART_SetConfig+0x180>
 8002c2c:	2300      	movs	r3, #0
 8002c2e:	76fb      	strb	r3, [r7, #27]
 8002c30:	e089      	b.n	8002d46 <UART_SetConfig+0x282>
 8002c32:	2302      	movs	r3, #2
 8002c34:	76fb      	strb	r3, [r7, #27]
 8002c36:	e086      	b.n	8002d46 <UART_SetConfig+0x282>
 8002c38:	2304      	movs	r3, #4
 8002c3a:	76fb      	strb	r3, [r7, #27]
 8002c3c:	e083      	b.n	8002d46 <UART_SetConfig+0x282>
 8002c3e:	2308      	movs	r3, #8
 8002c40:	76fb      	strb	r3, [r7, #27]
 8002c42:	e080      	b.n	8002d46 <UART_SetConfig+0x282>
 8002c44:	2310      	movs	r3, #16
 8002c46:	76fb      	strb	r3, [r7, #27]
 8002c48:	e07d      	b.n	8002d46 <UART_SetConfig+0x282>
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	681b      	ldr	r3, [r3, #0]
 8002c4e:	4a5b      	ldr	r2, [pc, #364]	; (8002dbc <UART_SetConfig+0x2f8>)
 8002c50:	4293      	cmp	r3, r2
 8002c52:	d120      	bne.n	8002c96 <UART_SetConfig+0x1d2>
 8002c54:	4b56      	ldr	r3, [pc, #344]	; (8002db0 <UART_SetConfig+0x2ec>)
 8002c56:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002c5a:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8002c5e:	2bc0      	cmp	r3, #192	; 0xc0
 8002c60:	d013      	beq.n	8002c8a <UART_SetConfig+0x1c6>
 8002c62:	2bc0      	cmp	r3, #192	; 0xc0
 8002c64:	d814      	bhi.n	8002c90 <UART_SetConfig+0x1cc>
 8002c66:	2b80      	cmp	r3, #128	; 0x80
 8002c68:	d009      	beq.n	8002c7e <UART_SetConfig+0x1ba>
 8002c6a:	2b80      	cmp	r3, #128	; 0x80
 8002c6c:	d810      	bhi.n	8002c90 <UART_SetConfig+0x1cc>
 8002c6e:	2b00      	cmp	r3, #0
 8002c70:	d002      	beq.n	8002c78 <UART_SetConfig+0x1b4>
 8002c72:	2b40      	cmp	r3, #64	; 0x40
 8002c74:	d006      	beq.n	8002c84 <UART_SetConfig+0x1c0>
 8002c76:	e00b      	b.n	8002c90 <UART_SetConfig+0x1cc>
 8002c78:	2300      	movs	r3, #0
 8002c7a:	76fb      	strb	r3, [r7, #27]
 8002c7c:	e063      	b.n	8002d46 <UART_SetConfig+0x282>
 8002c7e:	2302      	movs	r3, #2
 8002c80:	76fb      	strb	r3, [r7, #27]
 8002c82:	e060      	b.n	8002d46 <UART_SetConfig+0x282>
 8002c84:	2304      	movs	r3, #4
 8002c86:	76fb      	strb	r3, [r7, #27]
 8002c88:	e05d      	b.n	8002d46 <UART_SetConfig+0x282>
 8002c8a:	2308      	movs	r3, #8
 8002c8c:	76fb      	strb	r3, [r7, #27]
 8002c8e:	e05a      	b.n	8002d46 <UART_SetConfig+0x282>
 8002c90:	2310      	movs	r3, #16
 8002c92:	76fb      	strb	r3, [r7, #27]
 8002c94:	e057      	b.n	8002d46 <UART_SetConfig+0x282>
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	681b      	ldr	r3, [r3, #0]
 8002c9a:	4a49      	ldr	r2, [pc, #292]	; (8002dc0 <UART_SetConfig+0x2fc>)
 8002c9c:	4293      	cmp	r3, r2
 8002c9e:	d125      	bne.n	8002cec <UART_SetConfig+0x228>
 8002ca0:	4b43      	ldr	r3, [pc, #268]	; (8002db0 <UART_SetConfig+0x2ec>)
 8002ca2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002ca6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002caa:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8002cae:	d017      	beq.n	8002ce0 <UART_SetConfig+0x21c>
 8002cb0:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8002cb4:	d817      	bhi.n	8002ce6 <UART_SetConfig+0x222>
 8002cb6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002cba:	d00b      	beq.n	8002cd4 <UART_SetConfig+0x210>
 8002cbc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002cc0:	d811      	bhi.n	8002ce6 <UART_SetConfig+0x222>
 8002cc2:	2b00      	cmp	r3, #0
 8002cc4:	d003      	beq.n	8002cce <UART_SetConfig+0x20a>
 8002cc6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002cca:	d006      	beq.n	8002cda <UART_SetConfig+0x216>
 8002ccc:	e00b      	b.n	8002ce6 <UART_SetConfig+0x222>
 8002cce:	2300      	movs	r3, #0
 8002cd0:	76fb      	strb	r3, [r7, #27]
 8002cd2:	e038      	b.n	8002d46 <UART_SetConfig+0x282>
 8002cd4:	2302      	movs	r3, #2
 8002cd6:	76fb      	strb	r3, [r7, #27]
 8002cd8:	e035      	b.n	8002d46 <UART_SetConfig+0x282>
 8002cda:	2304      	movs	r3, #4
 8002cdc:	76fb      	strb	r3, [r7, #27]
 8002cde:	e032      	b.n	8002d46 <UART_SetConfig+0x282>
 8002ce0:	2308      	movs	r3, #8
 8002ce2:	76fb      	strb	r3, [r7, #27]
 8002ce4:	e02f      	b.n	8002d46 <UART_SetConfig+0x282>
 8002ce6:	2310      	movs	r3, #16
 8002ce8:	76fb      	strb	r3, [r7, #27]
 8002cea:	e02c      	b.n	8002d46 <UART_SetConfig+0x282>
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	681b      	ldr	r3, [r3, #0]
 8002cf0:	4a2d      	ldr	r2, [pc, #180]	; (8002da8 <UART_SetConfig+0x2e4>)
 8002cf2:	4293      	cmp	r3, r2
 8002cf4:	d125      	bne.n	8002d42 <UART_SetConfig+0x27e>
 8002cf6:	4b2e      	ldr	r3, [pc, #184]	; (8002db0 <UART_SetConfig+0x2ec>)
 8002cf8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002cfc:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8002d00:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8002d04:	d017      	beq.n	8002d36 <UART_SetConfig+0x272>
 8002d06:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8002d0a:	d817      	bhi.n	8002d3c <UART_SetConfig+0x278>
 8002d0c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002d10:	d00b      	beq.n	8002d2a <UART_SetConfig+0x266>
 8002d12:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002d16:	d811      	bhi.n	8002d3c <UART_SetConfig+0x278>
 8002d18:	2b00      	cmp	r3, #0
 8002d1a:	d003      	beq.n	8002d24 <UART_SetConfig+0x260>
 8002d1c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002d20:	d006      	beq.n	8002d30 <UART_SetConfig+0x26c>
 8002d22:	e00b      	b.n	8002d3c <UART_SetConfig+0x278>
 8002d24:	2300      	movs	r3, #0
 8002d26:	76fb      	strb	r3, [r7, #27]
 8002d28:	e00d      	b.n	8002d46 <UART_SetConfig+0x282>
 8002d2a:	2302      	movs	r3, #2
 8002d2c:	76fb      	strb	r3, [r7, #27]
 8002d2e:	e00a      	b.n	8002d46 <UART_SetConfig+0x282>
 8002d30:	2304      	movs	r3, #4
 8002d32:	76fb      	strb	r3, [r7, #27]
 8002d34:	e007      	b.n	8002d46 <UART_SetConfig+0x282>
 8002d36:	2308      	movs	r3, #8
 8002d38:	76fb      	strb	r3, [r7, #27]
 8002d3a:	e004      	b.n	8002d46 <UART_SetConfig+0x282>
 8002d3c:	2310      	movs	r3, #16
 8002d3e:	76fb      	strb	r3, [r7, #27]
 8002d40:	e001      	b.n	8002d46 <UART_SetConfig+0x282>
 8002d42:	2310      	movs	r3, #16
 8002d44:	76fb      	strb	r3, [r7, #27]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	681b      	ldr	r3, [r3, #0]
 8002d4a:	4a17      	ldr	r2, [pc, #92]	; (8002da8 <UART_SetConfig+0x2e4>)
 8002d4c:	4293      	cmp	r3, r2
 8002d4e:	f040 8087 	bne.w	8002e60 <UART_SetConfig+0x39c>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8002d52:	7efb      	ldrb	r3, [r7, #27]
 8002d54:	2b08      	cmp	r3, #8
 8002d56:	d837      	bhi.n	8002dc8 <UART_SetConfig+0x304>
 8002d58:	a201      	add	r2, pc, #4	; (adr r2, 8002d60 <UART_SetConfig+0x29c>)
 8002d5a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002d5e:	bf00      	nop
 8002d60:	08002d85 	.word	0x08002d85
 8002d64:	08002dc9 	.word	0x08002dc9
 8002d68:	08002d8d 	.word	0x08002d8d
 8002d6c:	08002dc9 	.word	0x08002dc9
 8002d70:	08002d93 	.word	0x08002d93
 8002d74:	08002dc9 	.word	0x08002dc9
 8002d78:	08002dc9 	.word	0x08002dc9
 8002d7c:	08002dc9 	.word	0x08002dc9
 8002d80:	08002d9b 	.word	0x08002d9b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8002d84:	f7ff f874 	bl	8001e70 <HAL_RCC_GetPCLK1Freq>
 8002d88:	6178      	str	r0, [r7, #20]
        break;
 8002d8a:	e022      	b.n	8002dd2 <UART_SetConfig+0x30e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8002d8c:	4b0d      	ldr	r3, [pc, #52]	; (8002dc4 <UART_SetConfig+0x300>)
 8002d8e:	617b      	str	r3, [r7, #20]
        break;
 8002d90:	e01f      	b.n	8002dd2 <UART_SetConfig+0x30e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8002d92:	f7fe ffd5 	bl	8001d40 <HAL_RCC_GetSysClockFreq>
 8002d96:	6178      	str	r0, [r7, #20]
        break;
 8002d98:	e01b      	b.n	8002dd2 <UART_SetConfig+0x30e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8002d9a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002d9e:	617b      	str	r3, [r7, #20]
        break;
 8002da0:	e017      	b.n	8002dd2 <UART_SetConfig+0x30e>
 8002da2:	bf00      	nop
 8002da4:	efff69f3 	.word	0xefff69f3
 8002da8:	40008000 	.word	0x40008000
 8002dac:	40013800 	.word	0x40013800
 8002db0:	40021000 	.word	0x40021000
 8002db4:	40004400 	.word	0x40004400
 8002db8:	40004800 	.word	0x40004800
 8002dbc:	40004c00 	.word	0x40004c00
 8002dc0:	40005000 	.word	0x40005000
 8002dc4:	00f42400 	.word	0x00f42400
      default:
        pclk = 0U;
 8002dc8:	2300      	movs	r3, #0
 8002dca:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8002dcc:	2301      	movs	r3, #1
 8002dce:	76bb      	strb	r3, [r7, #26]
        break;
 8002dd0:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8002dd2:	697b      	ldr	r3, [r7, #20]
 8002dd4:	2b00      	cmp	r3, #0
 8002dd6:	f000 80f1 	beq.w	8002fbc <UART_SetConfig+0x4f8>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	685a      	ldr	r2, [r3, #4]
 8002dde:	4613      	mov	r3, r2
 8002de0:	005b      	lsls	r3, r3, #1
 8002de2:	4413      	add	r3, r2
 8002de4:	697a      	ldr	r2, [r7, #20]
 8002de6:	429a      	cmp	r2, r3
 8002de8:	d305      	bcc.n	8002df6 <UART_SetConfig+0x332>
          (pclk > (4096U * huart->Init.BaudRate)))
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	685b      	ldr	r3, [r3, #4]
 8002dee:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8002df0:	697a      	ldr	r2, [r7, #20]
 8002df2:	429a      	cmp	r2, r3
 8002df4:	d902      	bls.n	8002dfc <UART_SetConfig+0x338>
      {
        ret = HAL_ERROR;
 8002df6:	2301      	movs	r3, #1
 8002df8:	76bb      	strb	r3, [r7, #26]
 8002dfa:	e0df      	b.n	8002fbc <UART_SetConfig+0x4f8>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8002dfc:	697b      	ldr	r3, [r7, #20]
 8002dfe:	4618      	mov	r0, r3
 8002e00:	f04f 0100 	mov.w	r1, #0
 8002e04:	f04f 0200 	mov.w	r2, #0
 8002e08:	f04f 0300 	mov.w	r3, #0
 8002e0c:	020b      	lsls	r3, r1, #8
 8002e0e:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8002e12:	0202      	lsls	r2, r0, #8
 8002e14:	6879      	ldr	r1, [r7, #4]
 8002e16:	6849      	ldr	r1, [r1, #4]
 8002e18:	0849      	lsrs	r1, r1, #1
 8002e1a:	4608      	mov	r0, r1
 8002e1c:	f04f 0100 	mov.w	r1, #0
 8002e20:	1814      	adds	r4, r2, r0
 8002e22:	eb43 0501 	adc.w	r5, r3, r1
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	685b      	ldr	r3, [r3, #4]
 8002e2a:	461a      	mov	r2, r3
 8002e2c:	f04f 0300 	mov.w	r3, #0
 8002e30:	4620      	mov	r0, r4
 8002e32:	4629      	mov	r1, r5
 8002e34:	f7fd f9d0 	bl	80001d8 <__aeabi_uldivmod>
 8002e38:	4602      	mov	r2, r0
 8002e3a:	460b      	mov	r3, r1
 8002e3c:	4613      	mov	r3, r2
 8002e3e:	613b      	str	r3, [r7, #16]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8002e40:	693b      	ldr	r3, [r7, #16]
 8002e42:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8002e46:	d308      	bcc.n	8002e5a <UART_SetConfig+0x396>
 8002e48:	693b      	ldr	r3, [r7, #16]
 8002e4a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002e4e:	d204      	bcs.n	8002e5a <UART_SetConfig+0x396>
        {
          huart->Instance->BRR = usartdiv;
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	681b      	ldr	r3, [r3, #0]
 8002e54:	693a      	ldr	r2, [r7, #16]
 8002e56:	60da      	str	r2, [r3, #12]
 8002e58:	e0b0      	b.n	8002fbc <UART_SetConfig+0x4f8>
        }
        else
        {
          ret = HAL_ERROR;
 8002e5a:	2301      	movs	r3, #1
 8002e5c:	76bb      	strb	r3, [r7, #26]
 8002e5e:	e0ad      	b.n	8002fbc <UART_SetConfig+0x4f8>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	69db      	ldr	r3, [r3, #28]
 8002e64:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002e68:	d15b      	bne.n	8002f22 <UART_SetConfig+0x45e>
  {
    switch (clocksource)
 8002e6a:	7efb      	ldrb	r3, [r7, #27]
 8002e6c:	2b08      	cmp	r3, #8
 8002e6e:	d828      	bhi.n	8002ec2 <UART_SetConfig+0x3fe>
 8002e70:	a201      	add	r2, pc, #4	; (adr r2, 8002e78 <UART_SetConfig+0x3b4>)
 8002e72:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002e76:	bf00      	nop
 8002e78:	08002e9d 	.word	0x08002e9d
 8002e7c:	08002ea5 	.word	0x08002ea5
 8002e80:	08002ead 	.word	0x08002ead
 8002e84:	08002ec3 	.word	0x08002ec3
 8002e88:	08002eb3 	.word	0x08002eb3
 8002e8c:	08002ec3 	.word	0x08002ec3
 8002e90:	08002ec3 	.word	0x08002ec3
 8002e94:	08002ec3 	.word	0x08002ec3
 8002e98:	08002ebb 	.word	0x08002ebb
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8002e9c:	f7fe ffe8 	bl	8001e70 <HAL_RCC_GetPCLK1Freq>
 8002ea0:	6178      	str	r0, [r7, #20]
        break;
 8002ea2:	e013      	b.n	8002ecc <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8002ea4:	f7fe fffa 	bl	8001e9c <HAL_RCC_GetPCLK2Freq>
 8002ea8:	6178      	str	r0, [r7, #20]
        break;
 8002eaa:	e00f      	b.n	8002ecc <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8002eac:	4b49      	ldr	r3, [pc, #292]	; (8002fd4 <UART_SetConfig+0x510>)
 8002eae:	617b      	str	r3, [r7, #20]
        break;
 8002eb0:	e00c      	b.n	8002ecc <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8002eb2:	f7fe ff45 	bl	8001d40 <HAL_RCC_GetSysClockFreq>
 8002eb6:	6178      	str	r0, [r7, #20]
        break;
 8002eb8:	e008      	b.n	8002ecc <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8002eba:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002ebe:	617b      	str	r3, [r7, #20]
        break;
 8002ec0:	e004      	b.n	8002ecc <UART_SetConfig+0x408>
      default:
        pclk = 0U;
 8002ec2:	2300      	movs	r3, #0
 8002ec4:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8002ec6:	2301      	movs	r3, #1
 8002ec8:	76bb      	strb	r3, [r7, #26]
        break;
 8002eca:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8002ecc:	697b      	ldr	r3, [r7, #20]
 8002ece:	2b00      	cmp	r3, #0
 8002ed0:	d074      	beq.n	8002fbc <UART_SetConfig+0x4f8>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8002ed2:	697b      	ldr	r3, [r7, #20]
 8002ed4:	005a      	lsls	r2, r3, #1
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	685b      	ldr	r3, [r3, #4]
 8002eda:	085b      	lsrs	r3, r3, #1
 8002edc:	441a      	add	r2, r3
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	685b      	ldr	r3, [r3, #4]
 8002ee2:	fbb2 f3f3 	udiv	r3, r2, r3
 8002ee6:	613b      	str	r3, [r7, #16]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8002ee8:	693b      	ldr	r3, [r7, #16]
 8002eea:	2b0f      	cmp	r3, #15
 8002eec:	d916      	bls.n	8002f1c <UART_SetConfig+0x458>
 8002eee:	693b      	ldr	r3, [r7, #16]
 8002ef0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002ef4:	d212      	bcs.n	8002f1c <UART_SetConfig+0x458>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8002ef6:	693b      	ldr	r3, [r7, #16]
 8002ef8:	b29b      	uxth	r3, r3
 8002efa:	f023 030f 	bic.w	r3, r3, #15
 8002efe:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8002f00:	693b      	ldr	r3, [r7, #16]
 8002f02:	085b      	lsrs	r3, r3, #1
 8002f04:	b29b      	uxth	r3, r3
 8002f06:	f003 0307 	and.w	r3, r3, #7
 8002f0a:	b29a      	uxth	r2, r3
 8002f0c:	89fb      	ldrh	r3, [r7, #14]
 8002f0e:	4313      	orrs	r3, r2
 8002f10:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	681b      	ldr	r3, [r3, #0]
 8002f16:	89fa      	ldrh	r2, [r7, #14]
 8002f18:	60da      	str	r2, [r3, #12]
 8002f1a:	e04f      	b.n	8002fbc <UART_SetConfig+0x4f8>
      }
      else
      {
        ret = HAL_ERROR;
 8002f1c:	2301      	movs	r3, #1
 8002f1e:	76bb      	strb	r3, [r7, #26]
 8002f20:	e04c      	b.n	8002fbc <UART_SetConfig+0x4f8>
      }
    }
  }
  else
  {
    switch (clocksource)
 8002f22:	7efb      	ldrb	r3, [r7, #27]
 8002f24:	2b08      	cmp	r3, #8
 8002f26:	d828      	bhi.n	8002f7a <UART_SetConfig+0x4b6>
 8002f28:	a201      	add	r2, pc, #4	; (adr r2, 8002f30 <UART_SetConfig+0x46c>)
 8002f2a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002f2e:	bf00      	nop
 8002f30:	08002f55 	.word	0x08002f55
 8002f34:	08002f5d 	.word	0x08002f5d
 8002f38:	08002f65 	.word	0x08002f65
 8002f3c:	08002f7b 	.word	0x08002f7b
 8002f40:	08002f6b 	.word	0x08002f6b
 8002f44:	08002f7b 	.word	0x08002f7b
 8002f48:	08002f7b 	.word	0x08002f7b
 8002f4c:	08002f7b 	.word	0x08002f7b
 8002f50:	08002f73 	.word	0x08002f73
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8002f54:	f7fe ff8c 	bl	8001e70 <HAL_RCC_GetPCLK1Freq>
 8002f58:	6178      	str	r0, [r7, #20]
        break;
 8002f5a:	e013      	b.n	8002f84 <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8002f5c:	f7fe ff9e 	bl	8001e9c <HAL_RCC_GetPCLK2Freq>
 8002f60:	6178      	str	r0, [r7, #20]
        break;
 8002f62:	e00f      	b.n	8002f84 <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8002f64:	4b1b      	ldr	r3, [pc, #108]	; (8002fd4 <UART_SetConfig+0x510>)
 8002f66:	617b      	str	r3, [r7, #20]
        break;
 8002f68:	e00c      	b.n	8002f84 <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8002f6a:	f7fe fee9 	bl	8001d40 <HAL_RCC_GetSysClockFreq>
 8002f6e:	6178      	str	r0, [r7, #20]
        break;
 8002f70:	e008      	b.n	8002f84 <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8002f72:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002f76:	617b      	str	r3, [r7, #20]
        break;
 8002f78:	e004      	b.n	8002f84 <UART_SetConfig+0x4c0>
      default:
        pclk = 0U;
 8002f7a:	2300      	movs	r3, #0
 8002f7c:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8002f7e:	2301      	movs	r3, #1
 8002f80:	76bb      	strb	r3, [r7, #26]
        break;
 8002f82:	bf00      	nop
    }

    if (pclk != 0U)
 8002f84:	697b      	ldr	r3, [r7, #20]
 8002f86:	2b00      	cmp	r3, #0
 8002f88:	d018      	beq.n	8002fbc <UART_SetConfig+0x4f8>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	685b      	ldr	r3, [r3, #4]
 8002f8e:	085a      	lsrs	r2, r3, #1
 8002f90:	697b      	ldr	r3, [r7, #20]
 8002f92:	441a      	add	r2, r3
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	685b      	ldr	r3, [r3, #4]
 8002f98:	fbb2 f3f3 	udiv	r3, r2, r3
 8002f9c:	613b      	str	r3, [r7, #16]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8002f9e:	693b      	ldr	r3, [r7, #16]
 8002fa0:	2b0f      	cmp	r3, #15
 8002fa2:	d909      	bls.n	8002fb8 <UART_SetConfig+0x4f4>
 8002fa4:	693b      	ldr	r3, [r7, #16]
 8002fa6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002faa:	d205      	bcs.n	8002fb8 <UART_SetConfig+0x4f4>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8002fac:	693b      	ldr	r3, [r7, #16]
 8002fae:	b29a      	uxth	r2, r3
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	681b      	ldr	r3, [r3, #0]
 8002fb4:	60da      	str	r2, [r3, #12]
 8002fb6:	e001      	b.n	8002fbc <UART_SetConfig+0x4f8>
      }
      else
      {
        ret = HAL_ERROR;
 8002fb8:	2301      	movs	r3, #1
 8002fba:	76bb      	strb	r3, [r7, #26]
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	2200      	movs	r2, #0
 8002fc0:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	2200      	movs	r2, #0
 8002fc6:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8002fc8:	7ebb      	ldrb	r3, [r7, #26]
}
 8002fca:	4618      	mov	r0, r3
 8002fcc:	3720      	adds	r7, #32
 8002fce:	46bd      	mov	sp, r7
 8002fd0:	bdb0      	pop	{r4, r5, r7, pc}
 8002fd2:	bf00      	nop
 8002fd4:	00f42400 	.word	0x00f42400

08002fd8 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8002fd8:	b480      	push	{r7}
 8002fda:	b083      	sub	sp, #12
 8002fdc:	af00      	add	r7, sp, #0
 8002fde:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002fe4:	f003 0301 	and.w	r3, r3, #1
 8002fe8:	2b00      	cmp	r3, #0
 8002fea:	d00a      	beq.n	8003002 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	681b      	ldr	r3, [r3, #0]
 8002ff0:	685b      	ldr	r3, [r3, #4]
 8002ff2:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	681b      	ldr	r3, [r3, #0]
 8002ffe:	430a      	orrs	r2, r1
 8003000:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003006:	f003 0302 	and.w	r3, r3, #2
 800300a:	2b00      	cmp	r3, #0
 800300c:	d00a      	beq.n	8003024 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	681b      	ldr	r3, [r3, #0]
 8003012:	685b      	ldr	r3, [r3, #4]
 8003014:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	681b      	ldr	r3, [r3, #0]
 8003020:	430a      	orrs	r2, r1
 8003022:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003028:	f003 0304 	and.w	r3, r3, #4
 800302c:	2b00      	cmp	r3, #0
 800302e:	d00a      	beq.n	8003046 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	681b      	ldr	r3, [r3, #0]
 8003034:	685b      	ldr	r3, [r3, #4]
 8003036:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	681b      	ldr	r3, [r3, #0]
 8003042:	430a      	orrs	r2, r1
 8003044:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800304a:	f003 0308 	and.w	r3, r3, #8
 800304e:	2b00      	cmp	r3, #0
 8003050:	d00a      	beq.n	8003068 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	681b      	ldr	r3, [r3, #0]
 8003056:	685b      	ldr	r3, [r3, #4]
 8003058:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	681b      	ldr	r3, [r3, #0]
 8003064:	430a      	orrs	r2, r1
 8003066:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800306c:	f003 0310 	and.w	r3, r3, #16
 8003070:	2b00      	cmp	r3, #0
 8003072:	d00a      	beq.n	800308a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	681b      	ldr	r3, [r3, #0]
 8003078:	689b      	ldr	r3, [r3, #8]
 800307a:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	681b      	ldr	r3, [r3, #0]
 8003086:	430a      	orrs	r2, r1
 8003088:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800308e:	f003 0320 	and.w	r3, r3, #32
 8003092:	2b00      	cmp	r3, #0
 8003094:	d00a      	beq.n	80030ac <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	681b      	ldr	r3, [r3, #0]
 800309a:	689b      	ldr	r3, [r3, #8]
 800309c:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	681b      	ldr	r3, [r3, #0]
 80030a8:	430a      	orrs	r2, r1
 80030aa:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80030b0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80030b4:	2b00      	cmp	r3, #0
 80030b6:	d01a      	beq.n	80030ee <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	681b      	ldr	r3, [r3, #0]
 80030bc:	685b      	ldr	r3, [r3, #4]
 80030be:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	681b      	ldr	r3, [r3, #0]
 80030ca:	430a      	orrs	r2, r1
 80030cc:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030d2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80030d6:	d10a      	bne.n	80030ee <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	681b      	ldr	r3, [r3, #0]
 80030dc:	685b      	ldr	r3, [r3, #4]
 80030de:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	681b      	ldr	r3, [r3, #0]
 80030ea:	430a      	orrs	r2, r1
 80030ec:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80030f2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80030f6:	2b00      	cmp	r3, #0
 80030f8:	d00a      	beq.n	8003110 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	681b      	ldr	r3, [r3, #0]
 80030fe:	685b      	ldr	r3, [r3, #4]
 8003100:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	681b      	ldr	r3, [r3, #0]
 800310c:	430a      	orrs	r2, r1
 800310e:	605a      	str	r2, [r3, #4]
  }
}
 8003110:	bf00      	nop
 8003112:	370c      	adds	r7, #12
 8003114:	46bd      	mov	sp, r7
 8003116:	f85d 7b04 	ldr.w	r7, [sp], #4
 800311a:	4770      	bx	lr

0800311c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800311c:	b580      	push	{r7, lr}
 800311e:	b086      	sub	sp, #24
 8003120:	af02      	add	r7, sp, #8
 8003122:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	2200      	movs	r2, #0
 8003128:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800312c:	f7fd fcde 	bl	8000aec <HAL_GetTick>
 8003130:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	681b      	ldr	r3, [r3, #0]
 8003136:	681b      	ldr	r3, [r3, #0]
 8003138:	f003 0308 	and.w	r3, r3, #8
 800313c:	2b08      	cmp	r3, #8
 800313e:	d10e      	bne.n	800315e <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003140:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8003144:	9300      	str	r3, [sp, #0]
 8003146:	68fb      	ldr	r3, [r7, #12]
 8003148:	2200      	movs	r2, #0
 800314a:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800314e:	6878      	ldr	r0, [r7, #4]
 8003150:	f000 f82d 	bl	80031ae <UART_WaitOnFlagUntilTimeout>
 8003154:	4603      	mov	r3, r0
 8003156:	2b00      	cmp	r3, #0
 8003158:	d001      	beq.n	800315e <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800315a:	2303      	movs	r3, #3
 800315c:	e023      	b.n	80031a6 <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	681b      	ldr	r3, [r3, #0]
 8003162:	681b      	ldr	r3, [r3, #0]
 8003164:	f003 0304 	and.w	r3, r3, #4
 8003168:	2b04      	cmp	r3, #4
 800316a:	d10e      	bne.n	800318a <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800316c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8003170:	9300      	str	r3, [sp, #0]
 8003172:	68fb      	ldr	r3, [r7, #12]
 8003174:	2200      	movs	r2, #0
 8003176:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800317a:	6878      	ldr	r0, [r7, #4]
 800317c:	f000 f817 	bl	80031ae <UART_WaitOnFlagUntilTimeout>
 8003180:	4603      	mov	r3, r0
 8003182:	2b00      	cmp	r3, #0
 8003184:	d001      	beq.n	800318a <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003186:	2303      	movs	r3, #3
 8003188:	e00d      	b.n	80031a6 <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	2220      	movs	r2, #32
 800318e:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	2220      	movs	r2, #32
 8003194:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	2200      	movs	r2, #0
 800319a:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	2200      	movs	r2, #0
 80031a0:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 80031a4:	2300      	movs	r3, #0
}
 80031a6:	4618      	mov	r0, r3
 80031a8:	3710      	adds	r7, #16
 80031aa:	46bd      	mov	sp, r7
 80031ac:	bd80      	pop	{r7, pc}

080031ae <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80031ae:	b580      	push	{r7, lr}
 80031b0:	b09c      	sub	sp, #112	; 0x70
 80031b2:	af00      	add	r7, sp, #0
 80031b4:	60f8      	str	r0, [r7, #12]
 80031b6:	60b9      	str	r1, [r7, #8]
 80031b8:	603b      	str	r3, [r7, #0]
 80031ba:	4613      	mov	r3, r2
 80031bc:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80031be:	e0a5      	b.n	800330c <UART_WaitOnFlagUntilTimeout+0x15e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80031c0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80031c2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80031c6:	f000 80a1 	beq.w	800330c <UART_WaitOnFlagUntilTimeout+0x15e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80031ca:	f7fd fc8f 	bl	8000aec <HAL_GetTick>
 80031ce:	4602      	mov	r2, r0
 80031d0:	683b      	ldr	r3, [r7, #0]
 80031d2:	1ad3      	subs	r3, r2, r3
 80031d4:	6fba      	ldr	r2, [r7, #120]	; 0x78
 80031d6:	429a      	cmp	r2, r3
 80031d8:	d302      	bcc.n	80031e0 <UART_WaitOnFlagUntilTimeout+0x32>
 80031da:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80031dc:	2b00      	cmp	r3, #0
 80031de:	d13e      	bne.n	800325e <UART_WaitOnFlagUntilTimeout+0xb0>
           interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                USART_CR1_TXEIE_TXFNFIE));
#else
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80031e0:	68fb      	ldr	r3, [r7, #12]
 80031e2:	681b      	ldr	r3, [r3, #0]
 80031e4:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80031e6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80031e8:	e853 3f00 	ldrex	r3, [r3]
 80031ec:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 80031ee:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80031f0:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80031f4:	667b      	str	r3, [r7, #100]	; 0x64
 80031f6:	68fb      	ldr	r3, [r7, #12]
 80031f8:	681b      	ldr	r3, [r3, #0]
 80031fa:	461a      	mov	r2, r3
 80031fc:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80031fe:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003200:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003202:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8003204:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8003206:	e841 2300 	strex	r3, r2, [r1]
 800320a:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 800320c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800320e:	2b00      	cmp	r3, #0
 8003210:	d1e6      	bne.n	80031e0 <UART_WaitOnFlagUntilTimeout+0x32>
#endif /* USART_CR1_FIFOEN */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003212:	68fb      	ldr	r3, [r7, #12]
 8003214:	681b      	ldr	r3, [r3, #0]
 8003216:	3308      	adds	r3, #8
 8003218:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800321a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800321c:	e853 3f00 	ldrex	r3, [r3]
 8003220:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8003222:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003224:	f023 0301 	bic.w	r3, r3, #1
 8003228:	663b      	str	r3, [r7, #96]	; 0x60
 800322a:	68fb      	ldr	r3, [r7, #12]
 800322c:	681b      	ldr	r3, [r3, #0]
 800322e:	3308      	adds	r3, #8
 8003230:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8003232:	64ba      	str	r2, [r7, #72]	; 0x48
 8003234:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003236:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8003238:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800323a:	e841 2300 	strex	r3, r2, [r1]
 800323e:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8003240:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003242:	2b00      	cmp	r3, #0
 8003244:	d1e5      	bne.n	8003212 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8003246:	68fb      	ldr	r3, [r7, #12]
 8003248:	2220      	movs	r2, #32
 800324a:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 800324c:	68fb      	ldr	r3, [r7, #12]
 800324e:	2220      	movs	r2, #32
 8003250:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 8003252:	68fb      	ldr	r3, [r7, #12]
 8003254:	2200      	movs	r2, #0
 8003256:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 800325a:	2303      	movs	r3, #3
 800325c:	e067      	b.n	800332e <UART_WaitOnFlagUntilTimeout+0x180>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800325e:	68fb      	ldr	r3, [r7, #12]
 8003260:	681b      	ldr	r3, [r3, #0]
 8003262:	681b      	ldr	r3, [r3, #0]
 8003264:	f003 0304 	and.w	r3, r3, #4
 8003268:	2b00      	cmp	r3, #0
 800326a:	d04f      	beq.n	800330c <UART_WaitOnFlagUntilTimeout+0x15e>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800326c:	68fb      	ldr	r3, [r7, #12]
 800326e:	681b      	ldr	r3, [r3, #0]
 8003270:	69db      	ldr	r3, [r3, #28]
 8003272:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003276:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800327a:	d147      	bne.n	800330c <UART_WaitOnFlagUntilTimeout+0x15e>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800327c:	68fb      	ldr	r3, [r7, #12]
 800327e:	681b      	ldr	r3, [r3, #0]
 8003280:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003284:	621a      	str	r2, [r3, #32]
             interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                  USART_CR1_TXEIE_TXFNFIE));
#else
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003286:	68fb      	ldr	r3, [r7, #12]
 8003288:	681b      	ldr	r3, [r3, #0]
 800328a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800328c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800328e:	e853 3f00 	ldrex	r3, [r3]
 8003292:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8003294:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003296:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800329a:	66fb      	str	r3, [r7, #108]	; 0x6c
 800329c:	68fb      	ldr	r3, [r7, #12]
 800329e:	681b      	ldr	r3, [r3, #0]
 80032a0:	461a      	mov	r2, r3
 80032a2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80032a4:	637b      	str	r3, [r7, #52]	; 0x34
 80032a6:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80032a8:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80032aa:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80032ac:	e841 2300 	strex	r3, r2, [r1]
 80032b0:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80032b2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80032b4:	2b00      	cmp	r3, #0
 80032b6:	d1e6      	bne.n	8003286 <UART_WaitOnFlagUntilTimeout+0xd8>
#endif
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80032b8:	68fb      	ldr	r3, [r7, #12]
 80032ba:	681b      	ldr	r3, [r3, #0]
 80032bc:	3308      	adds	r3, #8
 80032be:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80032c0:	697b      	ldr	r3, [r7, #20]
 80032c2:	e853 3f00 	ldrex	r3, [r3]
 80032c6:	613b      	str	r3, [r7, #16]
   return(result);
 80032c8:	693b      	ldr	r3, [r7, #16]
 80032ca:	f023 0301 	bic.w	r3, r3, #1
 80032ce:	66bb      	str	r3, [r7, #104]	; 0x68
 80032d0:	68fb      	ldr	r3, [r7, #12]
 80032d2:	681b      	ldr	r3, [r3, #0]
 80032d4:	3308      	adds	r3, #8
 80032d6:	6eba      	ldr	r2, [r7, #104]	; 0x68
 80032d8:	623a      	str	r2, [r7, #32]
 80032da:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80032dc:	69f9      	ldr	r1, [r7, #28]
 80032de:	6a3a      	ldr	r2, [r7, #32]
 80032e0:	e841 2300 	strex	r3, r2, [r1]
 80032e4:	61bb      	str	r3, [r7, #24]
   return(result);
 80032e6:	69bb      	ldr	r3, [r7, #24]
 80032e8:	2b00      	cmp	r3, #0
 80032ea:	d1e5      	bne.n	80032b8 <UART_WaitOnFlagUntilTimeout+0x10a>

          huart->gState = HAL_UART_STATE_READY;
 80032ec:	68fb      	ldr	r3, [r7, #12]
 80032ee:	2220      	movs	r2, #32
 80032f0:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 80032f2:	68fb      	ldr	r3, [r7, #12]
 80032f4:	2220      	movs	r2, #32
 80032f6:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80032f8:	68fb      	ldr	r3, [r7, #12]
 80032fa:	2220      	movs	r2, #32
 80032fc:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003300:	68fb      	ldr	r3, [r7, #12]
 8003302:	2200      	movs	r2, #0
 8003304:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 8003308:	2303      	movs	r3, #3
 800330a:	e010      	b.n	800332e <UART_WaitOnFlagUntilTimeout+0x180>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800330c:	68fb      	ldr	r3, [r7, #12]
 800330e:	681b      	ldr	r3, [r3, #0]
 8003310:	69da      	ldr	r2, [r3, #28]
 8003312:	68bb      	ldr	r3, [r7, #8]
 8003314:	4013      	ands	r3, r2
 8003316:	68ba      	ldr	r2, [r7, #8]
 8003318:	429a      	cmp	r2, r3
 800331a:	bf0c      	ite	eq
 800331c:	2301      	moveq	r3, #1
 800331e:	2300      	movne	r3, #0
 8003320:	b2db      	uxtb	r3, r3
 8003322:	461a      	mov	r2, r3
 8003324:	79fb      	ldrb	r3, [r7, #7]
 8003326:	429a      	cmp	r2, r3
 8003328:	f43f af4a 	beq.w	80031c0 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800332c:	2300      	movs	r3, #0
}
 800332e:	4618      	mov	r0, r3
 8003330:	3770      	adds	r7, #112	; 0x70
 8003332:	46bd      	mov	sp, r7
 8003334:	bd80      	pop	{r7, pc}
	...

08003338 <__libc_init_array>:
 8003338:	b570      	push	{r4, r5, r6, lr}
 800333a:	4d0d      	ldr	r5, [pc, #52]	; (8003370 <__libc_init_array+0x38>)
 800333c:	4c0d      	ldr	r4, [pc, #52]	; (8003374 <__libc_init_array+0x3c>)
 800333e:	1b64      	subs	r4, r4, r5
 8003340:	10a4      	asrs	r4, r4, #2
 8003342:	2600      	movs	r6, #0
 8003344:	42a6      	cmp	r6, r4
 8003346:	d109      	bne.n	800335c <__libc_init_array+0x24>
 8003348:	4d0b      	ldr	r5, [pc, #44]	; (8003378 <__libc_init_array+0x40>)
 800334a:	4c0c      	ldr	r4, [pc, #48]	; (800337c <__libc_init_array+0x44>)
 800334c:	f000 f820 	bl	8003390 <_init>
 8003350:	1b64      	subs	r4, r4, r5
 8003352:	10a4      	asrs	r4, r4, #2
 8003354:	2600      	movs	r6, #0
 8003356:	42a6      	cmp	r6, r4
 8003358:	d105      	bne.n	8003366 <__libc_init_array+0x2e>
 800335a:	bd70      	pop	{r4, r5, r6, pc}
 800335c:	f855 3b04 	ldr.w	r3, [r5], #4
 8003360:	4798      	blx	r3
 8003362:	3601      	adds	r6, #1
 8003364:	e7ee      	b.n	8003344 <__libc_init_array+0xc>
 8003366:	f855 3b04 	ldr.w	r3, [r5], #4
 800336a:	4798      	blx	r3
 800336c:	3601      	adds	r6, #1
 800336e:	e7f2      	b.n	8003356 <__libc_init_array+0x1e>
 8003370:	08003408 	.word	0x08003408
 8003374:	08003408 	.word	0x08003408
 8003378:	08003408 	.word	0x08003408
 800337c:	0800340c 	.word	0x0800340c

08003380 <memset>:
 8003380:	4402      	add	r2, r0
 8003382:	4603      	mov	r3, r0
 8003384:	4293      	cmp	r3, r2
 8003386:	d100      	bne.n	800338a <memset+0xa>
 8003388:	4770      	bx	lr
 800338a:	f803 1b01 	strb.w	r1, [r3], #1
 800338e:	e7f9      	b.n	8003384 <memset+0x4>

08003390 <_init>:
 8003390:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003392:	bf00      	nop
 8003394:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003396:	bc08      	pop	{r3}
 8003398:	469e      	mov	lr, r3
 800339a:	4770      	bx	lr

0800339c <_fini>:
 800339c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800339e:	bf00      	nop
 80033a0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80033a2:	bc08      	pop	{r3}
 80033a4:	469e      	mov	lr, r3
 80033a6:	4770      	bx	lr
