
Execution _time.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003b88  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000094  08003d18  08003d18  00013d18  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003dac  08003dac  00020070  2**0
                  CONTENTS
  4 .ARM          00000008  08003dac  08003dac  00013dac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08003db4  08003db4  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003db4  08003db4  00013db4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003db8  08003db8  00013db8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  08003dbc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000010c  20000070  08003e2c  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000017c  08003e2c  0002017c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   000102e9  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001be1  00000000  00000000  00030389  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000cb0  00000000  00000000  00031f70  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000c08  00000000  00000000  00032c20  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00026e8c  00000000  00000000  00033828  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000e923  00000000  00000000  0005a6b4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000f4279  00000000  00000000  00068fd7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  0015d250  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000038f0  00000000  00000000  0015d2a4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000070 	.word	0x20000070
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08003d00 	.word	0x08003d00

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000074 	.word	0x20000074
 80001cc:	08003d00 	.word	0x08003d00

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <__aeabi_uldivmod>:
 8000270:	b953      	cbnz	r3, 8000288 <__aeabi_uldivmod+0x18>
 8000272:	b94a      	cbnz	r2, 8000288 <__aeabi_uldivmod+0x18>
 8000274:	2900      	cmp	r1, #0
 8000276:	bf08      	it	eq
 8000278:	2800      	cmpeq	r0, #0
 800027a:	bf1c      	itt	ne
 800027c:	f04f 31ff 	movne.w	r1, #4294967295
 8000280:	f04f 30ff 	movne.w	r0, #4294967295
 8000284:	f000 b96e 	b.w	8000564 <__aeabi_idiv0>
 8000288:	f1ad 0c08 	sub.w	ip, sp, #8
 800028c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000290:	f000 f806 	bl	80002a0 <__udivmoddi4>
 8000294:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000298:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800029c:	b004      	add	sp, #16
 800029e:	4770      	bx	lr

080002a0 <__udivmoddi4>:
 80002a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002a4:	9d08      	ldr	r5, [sp, #32]
 80002a6:	4604      	mov	r4, r0
 80002a8:	468c      	mov	ip, r1
 80002aa:	2b00      	cmp	r3, #0
 80002ac:	f040 8083 	bne.w	80003b6 <__udivmoddi4+0x116>
 80002b0:	428a      	cmp	r2, r1
 80002b2:	4617      	mov	r7, r2
 80002b4:	d947      	bls.n	8000346 <__udivmoddi4+0xa6>
 80002b6:	fab2 f282 	clz	r2, r2
 80002ba:	b142      	cbz	r2, 80002ce <__udivmoddi4+0x2e>
 80002bc:	f1c2 0020 	rsb	r0, r2, #32
 80002c0:	fa24 f000 	lsr.w	r0, r4, r0
 80002c4:	4091      	lsls	r1, r2
 80002c6:	4097      	lsls	r7, r2
 80002c8:	ea40 0c01 	orr.w	ip, r0, r1
 80002cc:	4094      	lsls	r4, r2
 80002ce:	ea4f 4817 	mov.w	r8, r7, lsr #16
 80002d2:	0c23      	lsrs	r3, r4, #16
 80002d4:	fbbc f6f8 	udiv	r6, ip, r8
 80002d8:	fa1f fe87 	uxth.w	lr, r7
 80002dc:	fb08 c116 	mls	r1, r8, r6, ip
 80002e0:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002e4:	fb06 f10e 	mul.w	r1, r6, lr
 80002e8:	4299      	cmp	r1, r3
 80002ea:	d909      	bls.n	8000300 <__udivmoddi4+0x60>
 80002ec:	18fb      	adds	r3, r7, r3
 80002ee:	f106 30ff 	add.w	r0, r6, #4294967295
 80002f2:	f080 8119 	bcs.w	8000528 <__udivmoddi4+0x288>
 80002f6:	4299      	cmp	r1, r3
 80002f8:	f240 8116 	bls.w	8000528 <__udivmoddi4+0x288>
 80002fc:	3e02      	subs	r6, #2
 80002fe:	443b      	add	r3, r7
 8000300:	1a5b      	subs	r3, r3, r1
 8000302:	b2a4      	uxth	r4, r4
 8000304:	fbb3 f0f8 	udiv	r0, r3, r8
 8000308:	fb08 3310 	mls	r3, r8, r0, r3
 800030c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000310:	fb00 fe0e 	mul.w	lr, r0, lr
 8000314:	45a6      	cmp	lr, r4
 8000316:	d909      	bls.n	800032c <__udivmoddi4+0x8c>
 8000318:	193c      	adds	r4, r7, r4
 800031a:	f100 33ff 	add.w	r3, r0, #4294967295
 800031e:	f080 8105 	bcs.w	800052c <__udivmoddi4+0x28c>
 8000322:	45a6      	cmp	lr, r4
 8000324:	f240 8102 	bls.w	800052c <__udivmoddi4+0x28c>
 8000328:	3802      	subs	r0, #2
 800032a:	443c      	add	r4, r7
 800032c:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000330:	eba4 040e 	sub.w	r4, r4, lr
 8000334:	2600      	movs	r6, #0
 8000336:	b11d      	cbz	r5, 8000340 <__udivmoddi4+0xa0>
 8000338:	40d4      	lsrs	r4, r2
 800033a:	2300      	movs	r3, #0
 800033c:	e9c5 4300 	strd	r4, r3, [r5]
 8000340:	4631      	mov	r1, r6
 8000342:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000346:	b902      	cbnz	r2, 800034a <__udivmoddi4+0xaa>
 8000348:	deff      	udf	#255	; 0xff
 800034a:	fab2 f282 	clz	r2, r2
 800034e:	2a00      	cmp	r2, #0
 8000350:	d150      	bne.n	80003f4 <__udivmoddi4+0x154>
 8000352:	1bcb      	subs	r3, r1, r7
 8000354:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000358:	fa1f f887 	uxth.w	r8, r7
 800035c:	2601      	movs	r6, #1
 800035e:	fbb3 fcfe 	udiv	ip, r3, lr
 8000362:	0c21      	lsrs	r1, r4, #16
 8000364:	fb0e 331c 	mls	r3, lr, ip, r3
 8000368:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800036c:	fb08 f30c 	mul.w	r3, r8, ip
 8000370:	428b      	cmp	r3, r1
 8000372:	d907      	bls.n	8000384 <__udivmoddi4+0xe4>
 8000374:	1879      	adds	r1, r7, r1
 8000376:	f10c 30ff 	add.w	r0, ip, #4294967295
 800037a:	d202      	bcs.n	8000382 <__udivmoddi4+0xe2>
 800037c:	428b      	cmp	r3, r1
 800037e:	f200 80e9 	bhi.w	8000554 <__udivmoddi4+0x2b4>
 8000382:	4684      	mov	ip, r0
 8000384:	1ac9      	subs	r1, r1, r3
 8000386:	b2a3      	uxth	r3, r4
 8000388:	fbb1 f0fe 	udiv	r0, r1, lr
 800038c:	fb0e 1110 	mls	r1, lr, r0, r1
 8000390:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000394:	fb08 f800 	mul.w	r8, r8, r0
 8000398:	45a0      	cmp	r8, r4
 800039a:	d907      	bls.n	80003ac <__udivmoddi4+0x10c>
 800039c:	193c      	adds	r4, r7, r4
 800039e:	f100 33ff 	add.w	r3, r0, #4294967295
 80003a2:	d202      	bcs.n	80003aa <__udivmoddi4+0x10a>
 80003a4:	45a0      	cmp	r8, r4
 80003a6:	f200 80d9 	bhi.w	800055c <__udivmoddi4+0x2bc>
 80003aa:	4618      	mov	r0, r3
 80003ac:	eba4 0408 	sub.w	r4, r4, r8
 80003b0:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 80003b4:	e7bf      	b.n	8000336 <__udivmoddi4+0x96>
 80003b6:	428b      	cmp	r3, r1
 80003b8:	d909      	bls.n	80003ce <__udivmoddi4+0x12e>
 80003ba:	2d00      	cmp	r5, #0
 80003bc:	f000 80b1 	beq.w	8000522 <__udivmoddi4+0x282>
 80003c0:	2600      	movs	r6, #0
 80003c2:	e9c5 0100 	strd	r0, r1, [r5]
 80003c6:	4630      	mov	r0, r6
 80003c8:	4631      	mov	r1, r6
 80003ca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003ce:	fab3 f683 	clz	r6, r3
 80003d2:	2e00      	cmp	r6, #0
 80003d4:	d14a      	bne.n	800046c <__udivmoddi4+0x1cc>
 80003d6:	428b      	cmp	r3, r1
 80003d8:	d302      	bcc.n	80003e0 <__udivmoddi4+0x140>
 80003da:	4282      	cmp	r2, r0
 80003dc:	f200 80b8 	bhi.w	8000550 <__udivmoddi4+0x2b0>
 80003e0:	1a84      	subs	r4, r0, r2
 80003e2:	eb61 0103 	sbc.w	r1, r1, r3
 80003e6:	2001      	movs	r0, #1
 80003e8:	468c      	mov	ip, r1
 80003ea:	2d00      	cmp	r5, #0
 80003ec:	d0a8      	beq.n	8000340 <__udivmoddi4+0xa0>
 80003ee:	e9c5 4c00 	strd	r4, ip, [r5]
 80003f2:	e7a5      	b.n	8000340 <__udivmoddi4+0xa0>
 80003f4:	f1c2 0320 	rsb	r3, r2, #32
 80003f8:	fa20 f603 	lsr.w	r6, r0, r3
 80003fc:	4097      	lsls	r7, r2
 80003fe:	fa01 f002 	lsl.w	r0, r1, r2
 8000402:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000406:	40d9      	lsrs	r1, r3
 8000408:	4330      	orrs	r0, r6
 800040a:	0c03      	lsrs	r3, r0, #16
 800040c:	fbb1 f6fe 	udiv	r6, r1, lr
 8000410:	fa1f f887 	uxth.w	r8, r7
 8000414:	fb0e 1116 	mls	r1, lr, r6, r1
 8000418:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800041c:	fb06 f108 	mul.w	r1, r6, r8
 8000420:	4299      	cmp	r1, r3
 8000422:	fa04 f402 	lsl.w	r4, r4, r2
 8000426:	d909      	bls.n	800043c <__udivmoddi4+0x19c>
 8000428:	18fb      	adds	r3, r7, r3
 800042a:	f106 3cff 	add.w	ip, r6, #4294967295
 800042e:	f080 808d 	bcs.w	800054c <__udivmoddi4+0x2ac>
 8000432:	4299      	cmp	r1, r3
 8000434:	f240 808a 	bls.w	800054c <__udivmoddi4+0x2ac>
 8000438:	3e02      	subs	r6, #2
 800043a:	443b      	add	r3, r7
 800043c:	1a5b      	subs	r3, r3, r1
 800043e:	b281      	uxth	r1, r0
 8000440:	fbb3 f0fe 	udiv	r0, r3, lr
 8000444:	fb0e 3310 	mls	r3, lr, r0, r3
 8000448:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800044c:	fb00 f308 	mul.w	r3, r0, r8
 8000450:	428b      	cmp	r3, r1
 8000452:	d907      	bls.n	8000464 <__udivmoddi4+0x1c4>
 8000454:	1879      	adds	r1, r7, r1
 8000456:	f100 3cff 	add.w	ip, r0, #4294967295
 800045a:	d273      	bcs.n	8000544 <__udivmoddi4+0x2a4>
 800045c:	428b      	cmp	r3, r1
 800045e:	d971      	bls.n	8000544 <__udivmoddi4+0x2a4>
 8000460:	3802      	subs	r0, #2
 8000462:	4439      	add	r1, r7
 8000464:	1acb      	subs	r3, r1, r3
 8000466:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 800046a:	e778      	b.n	800035e <__udivmoddi4+0xbe>
 800046c:	f1c6 0c20 	rsb	ip, r6, #32
 8000470:	fa03 f406 	lsl.w	r4, r3, r6
 8000474:	fa22 f30c 	lsr.w	r3, r2, ip
 8000478:	431c      	orrs	r4, r3
 800047a:	fa20 f70c 	lsr.w	r7, r0, ip
 800047e:	fa01 f306 	lsl.w	r3, r1, r6
 8000482:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000486:	fa21 f10c 	lsr.w	r1, r1, ip
 800048a:	431f      	orrs	r7, r3
 800048c:	0c3b      	lsrs	r3, r7, #16
 800048e:	fbb1 f9fe 	udiv	r9, r1, lr
 8000492:	fa1f f884 	uxth.w	r8, r4
 8000496:	fb0e 1119 	mls	r1, lr, r9, r1
 800049a:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 800049e:	fb09 fa08 	mul.w	sl, r9, r8
 80004a2:	458a      	cmp	sl, r1
 80004a4:	fa02 f206 	lsl.w	r2, r2, r6
 80004a8:	fa00 f306 	lsl.w	r3, r0, r6
 80004ac:	d908      	bls.n	80004c0 <__udivmoddi4+0x220>
 80004ae:	1861      	adds	r1, r4, r1
 80004b0:	f109 30ff 	add.w	r0, r9, #4294967295
 80004b4:	d248      	bcs.n	8000548 <__udivmoddi4+0x2a8>
 80004b6:	458a      	cmp	sl, r1
 80004b8:	d946      	bls.n	8000548 <__udivmoddi4+0x2a8>
 80004ba:	f1a9 0902 	sub.w	r9, r9, #2
 80004be:	4421      	add	r1, r4
 80004c0:	eba1 010a 	sub.w	r1, r1, sl
 80004c4:	b2bf      	uxth	r7, r7
 80004c6:	fbb1 f0fe 	udiv	r0, r1, lr
 80004ca:	fb0e 1110 	mls	r1, lr, r0, r1
 80004ce:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 80004d2:	fb00 f808 	mul.w	r8, r0, r8
 80004d6:	45b8      	cmp	r8, r7
 80004d8:	d907      	bls.n	80004ea <__udivmoddi4+0x24a>
 80004da:	19e7      	adds	r7, r4, r7
 80004dc:	f100 31ff 	add.w	r1, r0, #4294967295
 80004e0:	d22e      	bcs.n	8000540 <__udivmoddi4+0x2a0>
 80004e2:	45b8      	cmp	r8, r7
 80004e4:	d92c      	bls.n	8000540 <__udivmoddi4+0x2a0>
 80004e6:	3802      	subs	r0, #2
 80004e8:	4427      	add	r7, r4
 80004ea:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80004ee:	eba7 0708 	sub.w	r7, r7, r8
 80004f2:	fba0 8902 	umull	r8, r9, r0, r2
 80004f6:	454f      	cmp	r7, r9
 80004f8:	46c6      	mov	lr, r8
 80004fa:	4649      	mov	r1, r9
 80004fc:	d31a      	bcc.n	8000534 <__udivmoddi4+0x294>
 80004fe:	d017      	beq.n	8000530 <__udivmoddi4+0x290>
 8000500:	b15d      	cbz	r5, 800051a <__udivmoddi4+0x27a>
 8000502:	ebb3 020e 	subs.w	r2, r3, lr
 8000506:	eb67 0701 	sbc.w	r7, r7, r1
 800050a:	fa07 fc0c 	lsl.w	ip, r7, ip
 800050e:	40f2      	lsrs	r2, r6
 8000510:	ea4c 0202 	orr.w	r2, ip, r2
 8000514:	40f7      	lsrs	r7, r6
 8000516:	e9c5 2700 	strd	r2, r7, [r5]
 800051a:	2600      	movs	r6, #0
 800051c:	4631      	mov	r1, r6
 800051e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000522:	462e      	mov	r6, r5
 8000524:	4628      	mov	r0, r5
 8000526:	e70b      	b.n	8000340 <__udivmoddi4+0xa0>
 8000528:	4606      	mov	r6, r0
 800052a:	e6e9      	b.n	8000300 <__udivmoddi4+0x60>
 800052c:	4618      	mov	r0, r3
 800052e:	e6fd      	b.n	800032c <__udivmoddi4+0x8c>
 8000530:	4543      	cmp	r3, r8
 8000532:	d2e5      	bcs.n	8000500 <__udivmoddi4+0x260>
 8000534:	ebb8 0e02 	subs.w	lr, r8, r2
 8000538:	eb69 0104 	sbc.w	r1, r9, r4
 800053c:	3801      	subs	r0, #1
 800053e:	e7df      	b.n	8000500 <__udivmoddi4+0x260>
 8000540:	4608      	mov	r0, r1
 8000542:	e7d2      	b.n	80004ea <__udivmoddi4+0x24a>
 8000544:	4660      	mov	r0, ip
 8000546:	e78d      	b.n	8000464 <__udivmoddi4+0x1c4>
 8000548:	4681      	mov	r9, r0
 800054a:	e7b9      	b.n	80004c0 <__udivmoddi4+0x220>
 800054c:	4666      	mov	r6, ip
 800054e:	e775      	b.n	800043c <__udivmoddi4+0x19c>
 8000550:	4630      	mov	r0, r6
 8000552:	e74a      	b.n	80003ea <__udivmoddi4+0x14a>
 8000554:	f1ac 0c02 	sub.w	ip, ip, #2
 8000558:	4439      	add	r1, r7
 800055a:	e713      	b.n	8000384 <__udivmoddi4+0xe4>
 800055c:	3802      	subs	r0, #2
 800055e:	443c      	add	r4, r7
 8000560:	e724      	b.n	80003ac <__udivmoddi4+0x10c>
 8000562:	bf00      	nop

08000564 <__aeabi_idiv0>:
 8000564:	4770      	bx	lr
 8000566:	bf00      	nop

08000568 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000568:	b580      	push	{r7, lr}
 800056a:	b08e      	sub	sp, #56	; 0x38
 800056c:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800056e:	f000 fa9d 	bl	8000aac <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000572:	f000 f84b 	bl	800060c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000576:	f000 f8f1 	bl	800075c <MX_GPIO_Init>
  MX_USART2_UART_Init();
 800057a:	f000 f8bf 	bl	80006fc <MX_USART2_UART_Init>
  MX_TIM16_Init();
 800057e:	f000 f897 	bl	80006b0 <MX_TIM16_Init>
  /* USER CODE BEGIN 2 */

  // Say something
    uart_buf_len = sprintf(uart_buf, "Timer Test\r\n");
 8000582:	463b      	mov	r3, r7
 8000584:	491d      	ldr	r1, [pc, #116]	; (80005fc <main+0x94>)
 8000586:	4618      	mov	r0, r3
 8000588:	f002 ff8c 	bl	80034a4 <siprintf>
 800058c:	6378      	str	r0, [r7, #52]	; 0x34
    HAL_UART_Transmit(&huart2, (uint8_t *)uart_buf, uart_buf_len, 100);
 800058e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000590:	b29a      	uxth	r2, r3
 8000592:	4639      	mov	r1, r7
 8000594:	2364      	movs	r3, #100	; 0x64
 8000596:	481a      	ldr	r0, [pc, #104]	; (8000600 <main+0x98>)
 8000598:	f002 fa84 	bl	8002aa4 <HAL_UART_Transmit>

    // Start timer
    HAL_TIM_Base_Start(&htim16);
 800059c:	4819      	ldr	r0, [pc, #100]	; (8000604 <main+0x9c>)
 800059e:	f002 f931 	bl	8002804 <HAL_TIM_Base_Start>
  /* USER CODE BEGIN WHILE */
  while (1)
  {

	  // Get current time (microseconds)
	      timer_val = __HAL_TIM_GET_COUNTER(&htim16);
 80005a2:	4b18      	ldr	r3, [pc, #96]	; (8000604 <main+0x9c>)
 80005a4:	681b      	ldr	r3, [r3, #0]
 80005a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80005a8:	867b      	strh	r3, [r7, #50]	; 0x32

	      // Wait for 50 ms
	      HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_SET);
 80005aa:	2201      	movs	r2, #1
 80005ac:	2120      	movs	r1, #32
 80005ae:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80005b2:	f000 fdab 	bl	800110c <HAL_GPIO_WritePin>
	      HAL_Delay(50);
 80005b6:	2032      	movs	r0, #50	; 0x32
 80005b8:	f000 faf4 	bl	8000ba4 <HAL_Delay>
	      HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_RESET);
 80005bc:	2200      	movs	r2, #0
 80005be:	2120      	movs	r1, #32
 80005c0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80005c4:	f000 fda2 	bl	800110c <HAL_GPIO_WritePin>

	      // Get time elapsed
	      timer_val = __HAL_TIM_GET_COUNTER(&htim16) - timer_val;
 80005c8:	4b0e      	ldr	r3, [pc, #56]	; (8000604 <main+0x9c>)
 80005ca:	681b      	ldr	r3, [r3, #0]
 80005cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80005ce:	b29a      	uxth	r2, r3
 80005d0:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 80005d2:	1ad3      	subs	r3, r2, r3
 80005d4:	867b      	strh	r3, [r7, #50]	; 0x32

	      // Show elapsed time
	      uart_buf_len = sprintf(uart_buf, "%u us\r\n", timer_val);
 80005d6:	8e7a      	ldrh	r2, [r7, #50]	; 0x32
 80005d8:	463b      	mov	r3, r7
 80005da:	490b      	ldr	r1, [pc, #44]	; (8000608 <main+0xa0>)
 80005dc:	4618      	mov	r0, r3
 80005de:	f002 ff61 	bl	80034a4 <siprintf>
 80005e2:	6378      	str	r0, [r7, #52]	; 0x34
	      HAL_UART_Transmit(&huart2, (uint8_t *)uart_buf, uart_buf_len, 100);
 80005e4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80005e6:	b29a      	uxth	r2, r3
 80005e8:	4639      	mov	r1, r7
 80005ea:	2364      	movs	r3, #100	; 0x64
 80005ec:	4804      	ldr	r0, [pc, #16]	; (8000600 <main+0x98>)
 80005ee:	f002 fa59 	bl	8002aa4 <HAL_UART_Transmit>

	      // Wait again so we don't flood the Serial terminal
	      HAL_Delay(1000);
 80005f2:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80005f6:	f000 fad5 	bl	8000ba4 <HAL_Delay>
	      timer_val = __HAL_TIM_GET_COUNTER(&htim16);
 80005fa:	e7d2      	b.n	80005a2 <main+0x3a>
 80005fc:	08003d18 	.word	0x08003d18
 8000600:	20000098 	.word	0x20000098
 8000604:	2000011c 	.word	0x2000011c
 8000608:	08003d28 	.word	0x08003d28

0800060c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800060c:	b580      	push	{r7, lr}
 800060e:	b096      	sub	sp, #88	; 0x58
 8000610:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000612:	f107 0314 	add.w	r3, r7, #20
 8000616:	2244      	movs	r2, #68	; 0x44
 8000618:	2100      	movs	r1, #0
 800061a:	4618      	mov	r0, r3
 800061c:	f002 ff3a 	bl	8003494 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000620:	463b      	mov	r3, r7
 8000622:	2200      	movs	r2, #0
 8000624:	601a      	str	r2, [r3, #0]
 8000626:	605a      	str	r2, [r3, #4]
 8000628:	609a      	str	r2, [r3, #8]
 800062a:	60da      	str	r2, [r3, #12]
 800062c:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 800062e:	f44f 7000 	mov.w	r0, #512	; 0x200
 8000632:	f000 fd91 	bl	8001158 <HAL_PWREx_ControlVoltageScaling>
 8000636:	4603      	mov	r3, r0
 8000638:	2b00      	cmp	r3, #0
 800063a:	d001      	beq.n	8000640 <SystemClock_Config+0x34>
  {
    Error_Handler();
 800063c:	f000 f8f4 	bl	8000828 <Error_Handler>
  }
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000640:	2302      	movs	r3, #2
 8000642:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000644:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000648:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800064a:	2310      	movs	r3, #16
 800064c:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800064e:	2302      	movs	r3, #2
 8000650:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000652:	2302      	movs	r3, #2
 8000654:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 8000656:	2301      	movs	r3, #1
 8000658:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 10;
 800065a:	230a      	movs	r3, #10
 800065c:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 800065e:	2307      	movs	r3, #7
 8000660:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000662:	2302      	movs	r3, #2
 8000664:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000666:	2302      	movs	r3, #2
 8000668:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800066a:	f107 0314 	add.w	r3, r7, #20
 800066e:	4618      	mov	r0, r3
 8000670:	f000 fdc8 	bl	8001204 <HAL_RCC_OscConfig>
 8000674:	4603      	mov	r3, r0
 8000676:	2b00      	cmp	r3, #0
 8000678:	d001      	beq.n	800067e <SystemClock_Config+0x72>
  {
    Error_Handler();
 800067a:	f000 f8d5 	bl	8000828 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800067e:	230f      	movs	r3, #15
 8000680:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000682:	2303      	movs	r3, #3
 8000684:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000686:	2300      	movs	r3, #0
 8000688:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800068a:	2300      	movs	r3, #0
 800068c:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800068e:	2300      	movs	r3, #0
 8000690:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8000692:	463b      	mov	r3, r7
 8000694:	2104      	movs	r1, #4
 8000696:	4618      	mov	r0, r3
 8000698:	f001 f99a 	bl	80019d0 <HAL_RCC_ClockConfig>
 800069c:	4603      	mov	r3, r0
 800069e:	2b00      	cmp	r3, #0
 80006a0:	d001      	beq.n	80006a6 <SystemClock_Config+0x9a>
  {
    Error_Handler();
 80006a2:	f000 f8c1 	bl	8000828 <Error_Handler>
  }
}
 80006a6:	bf00      	nop
 80006a8:	3758      	adds	r7, #88	; 0x58
 80006aa:	46bd      	mov	sp, r7
 80006ac:	bd80      	pop	{r7, pc}
	...

080006b0 <MX_TIM16_Init>:
  * @brief TIM16 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM16_Init(void)
{
 80006b0:	b580      	push	{r7, lr}
 80006b2:	af00      	add	r7, sp, #0
  /* USER CODE END TIM16_Init 0 */

  /* USER CODE BEGIN TIM16_Init 1 */

  /* USER CODE END TIM16_Init 1 */
  htim16.Instance = TIM16;
 80006b4:	4b0f      	ldr	r3, [pc, #60]	; (80006f4 <MX_TIM16_Init+0x44>)
 80006b6:	4a10      	ldr	r2, [pc, #64]	; (80006f8 <MX_TIM16_Init+0x48>)
 80006b8:	601a      	str	r2, [r3, #0]
  htim16.Init.Prescaler = 80-1;
 80006ba:	4b0e      	ldr	r3, [pc, #56]	; (80006f4 <MX_TIM16_Init+0x44>)
 80006bc:	224f      	movs	r2, #79	; 0x4f
 80006be:	605a      	str	r2, [r3, #4]
  htim16.Init.CounterMode = TIM_COUNTERMODE_UP;
 80006c0:	4b0c      	ldr	r3, [pc, #48]	; (80006f4 <MX_TIM16_Init+0x44>)
 80006c2:	2200      	movs	r2, #0
 80006c4:	609a      	str	r2, [r3, #8]
  htim16.Init.Period = 65536-1;
 80006c6:	4b0b      	ldr	r3, [pc, #44]	; (80006f4 <MX_TIM16_Init+0x44>)
 80006c8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80006cc:	60da      	str	r2, [r3, #12]
  htim16.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80006ce:	4b09      	ldr	r3, [pc, #36]	; (80006f4 <MX_TIM16_Init+0x44>)
 80006d0:	2200      	movs	r2, #0
 80006d2:	611a      	str	r2, [r3, #16]
  htim16.Init.RepetitionCounter = 0;
 80006d4:	4b07      	ldr	r3, [pc, #28]	; (80006f4 <MX_TIM16_Init+0x44>)
 80006d6:	2200      	movs	r2, #0
 80006d8:	615a      	str	r2, [r3, #20]
  htim16.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80006da:	4b06      	ldr	r3, [pc, #24]	; (80006f4 <MX_TIM16_Init+0x44>)
 80006dc:	2200      	movs	r2, #0
 80006de:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim16) != HAL_OK)
 80006e0:	4804      	ldr	r0, [pc, #16]	; (80006f4 <MX_TIM16_Init+0x44>)
 80006e2:	f002 f837 	bl	8002754 <HAL_TIM_Base_Init>
 80006e6:	4603      	mov	r3, r0
 80006e8:	2b00      	cmp	r3, #0
 80006ea:	d001      	beq.n	80006f0 <MX_TIM16_Init+0x40>
  {
    Error_Handler();
 80006ec:	f000 f89c 	bl	8000828 <Error_Handler>
  }
  /* USER CODE BEGIN TIM16_Init 2 */

  /* USER CODE END TIM16_Init 2 */

}
 80006f0:	bf00      	nop
 80006f2:	bd80      	pop	{r7, pc}
 80006f4:	2000011c 	.word	0x2000011c
 80006f8:	40014400 	.word	0x40014400

080006fc <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80006fc:	b580      	push	{r7, lr}
 80006fe:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000700:	4b14      	ldr	r3, [pc, #80]	; (8000754 <MX_USART2_UART_Init+0x58>)
 8000702:	4a15      	ldr	r2, [pc, #84]	; (8000758 <MX_USART2_UART_Init+0x5c>)
 8000704:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000706:	4b13      	ldr	r3, [pc, #76]	; (8000754 <MX_USART2_UART_Init+0x58>)
 8000708:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800070c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800070e:	4b11      	ldr	r3, [pc, #68]	; (8000754 <MX_USART2_UART_Init+0x58>)
 8000710:	2200      	movs	r2, #0
 8000712:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000714:	4b0f      	ldr	r3, [pc, #60]	; (8000754 <MX_USART2_UART_Init+0x58>)
 8000716:	2200      	movs	r2, #0
 8000718:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800071a:	4b0e      	ldr	r3, [pc, #56]	; (8000754 <MX_USART2_UART_Init+0x58>)
 800071c:	2200      	movs	r2, #0
 800071e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000720:	4b0c      	ldr	r3, [pc, #48]	; (8000754 <MX_USART2_UART_Init+0x58>)
 8000722:	220c      	movs	r2, #12
 8000724:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000726:	4b0b      	ldr	r3, [pc, #44]	; (8000754 <MX_USART2_UART_Init+0x58>)
 8000728:	2200      	movs	r2, #0
 800072a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800072c:	4b09      	ldr	r3, [pc, #36]	; (8000754 <MX_USART2_UART_Init+0x58>)
 800072e:	2200      	movs	r2, #0
 8000730:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000732:	4b08      	ldr	r3, [pc, #32]	; (8000754 <MX_USART2_UART_Init+0x58>)
 8000734:	2200      	movs	r2, #0
 8000736:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000738:	4b06      	ldr	r3, [pc, #24]	; (8000754 <MX_USART2_UART_Init+0x58>)
 800073a:	2200      	movs	r2, #0
 800073c:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800073e:	4805      	ldr	r0, [pc, #20]	; (8000754 <MX_USART2_UART_Init+0x58>)
 8000740:	f002 f962 	bl	8002a08 <HAL_UART_Init>
 8000744:	4603      	mov	r3, r0
 8000746:	2b00      	cmp	r3, #0
 8000748:	d001      	beq.n	800074e <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 800074a:	f000 f86d 	bl	8000828 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800074e:	bf00      	nop
 8000750:	bd80      	pop	{r7, pc}
 8000752:	bf00      	nop
 8000754:	20000098 	.word	0x20000098
 8000758:	40004400 	.word	0x40004400

0800075c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800075c:	b580      	push	{r7, lr}
 800075e:	b08a      	sub	sp, #40	; 0x28
 8000760:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000762:	f107 0314 	add.w	r3, r7, #20
 8000766:	2200      	movs	r2, #0
 8000768:	601a      	str	r2, [r3, #0]
 800076a:	605a      	str	r2, [r3, #4]
 800076c:	609a      	str	r2, [r3, #8]
 800076e:	60da      	str	r2, [r3, #12]
 8000770:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000772:	4b2b      	ldr	r3, [pc, #172]	; (8000820 <MX_GPIO_Init+0xc4>)
 8000774:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000776:	4a2a      	ldr	r2, [pc, #168]	; (8000820 <MX_GPIO_Init+0xc4>)
 8000778:	f043 0304 	orr.w	r3, r3, #4
 800077c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800077e:	4b28      	ldr	r3, [pc, #160]	; (8000820 <MX_GPIO_Init+0xc4>)
 8000780:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000782:	f003 0304 	and.w	r3, r3, #4
 8000786:	613b      	str	r3, [r7, #16]
 8000788:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800078a:	4b25      	ldr	r3, [pc, #148]	; (8000820 <MX_GPIO_Init+0xc4>)
 800078c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800078e:	4a24      	ldr	r2, [pc, #144]	; (8000820 <MX_GPIO_Init+0xc4>)
 8000790:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000794:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000796:	4b22      	ldr	r3, [pc, #136]	; (8000820 <MX_GPIO_Init+0xc4>)
 8000798:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800079a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800079e:	60fb      	str	r3, [r7, #12]
 80007a0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80007a2:	4b1f      	ldr	r3, [pc, #124]	; (8000820 <MX_GPIO_Init+0xc4>)
 80007a4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80007a6:	4a1e      	ldr	r2, [pc, #120]	; (8000820 <MX_GPIO_Init+0xc4>)
 80007a8:	f043 0301 	orr.w	r3, r3, #1
 80007ac:	64d3      	str	r3, [r2, #76]	; 0x4c
 80007ae:	4b1c      	ldr	r3, [pc, #112]	; (8000820 <MX_GPIO_Init+0xc4>)
 80007b0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80007b2:	f003 0301 	and.w	r3, r3, #1
 80007b6:	60bb      	str	r3, [r7, #8]
 80007b8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80007ba:	4b19      	ldr	r3, [pc, #100]	; (8000820 <MX_GPIO_Init+0xc4>)
 80007bc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80007be:	4a18      	ldr	r2, [pc, #96]	; (8000820 <MX_GPIO_Init+0xc4>)
 80007c0:	f043 0302 	orr.w	r3, r3, #2
 80007c4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80007c6:	4b16      	ldr	r3, [pc, #88]	; (8000820 <MX_GPIO_Init+0xc4>)
 80007c8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80007ca:	f003 0302 	and.w	r3, r3, #2
 80007ce:	607b      	str	r3, [r7, #4]
 80007d0:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 80007d2:	2200      	movs	r2, #0
 80007d4:	2120      	movs	r1, #32
 80007d6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80007da:	f000 fc97 	bl	800110c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 80007de:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80007e2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80007e4:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 80007e8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007ea:	2300      	movs	r3, #0
 80007ec:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80007ee:	f107 0314 	add.w	r3, r7, #20
 80007f2:	4619      	mov	r1, r3
 80007f4:	480b      	ldr	r0, [pc, #44]	; (8000824 <MX_GPIO_Init+0xc8>)
 80007f6:	f000 fadf 	bl	8000db8 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 80007fa:	2320      	movs	r3, #32
 80007fc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80007fe:	2301      	movs	r3, #1
 8000800:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000802:	2300      	movs	r3, #0
 8000804:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000806:	2300      	movs	r3, #0
 8000808:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 800080a:	f107 0314 	add.w	r3, r7, #20
 800080e:	4619      	mov	r1, r3
 8000810:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000814:	f000 fad0 	bl	8000db8 <HAL_GPIO_Init>

}
 8000818:	bf00      	nop
 800081a:	3728      	adds	r7, #40	; 0x28
 800081c:	46bd      	mov	sp, r7
 800081e:	bd80      	pop	{r7, pc}
 8000820:	40021000 	.word	0x40021000
 8000824:	48000800 	.word	0x48000800

08000828 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000828:	b480      	push	{r7}
 800082a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800082c:	b672      	cpsid	i
}
 800082e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000830:	e7fe      	b.n	8000830 <Error_Handler+0x8>
	...

08000834 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000834:	b480      	push	{r7}
 8000836:	b083      	sub	sp, #12
 8000838:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800083a:	4b0f      	ldr	r3, [pc, #60]	; (8000878 <HAL_MspInit+0x44>)
 800083c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800083e:	4a0e      	ldr	r2, [pc, #56]	; (8000878 <HAL_MspInit+0x44>)
 8000840:	f043 0301 	orr.w	r3, r3, #1
 8000844:	6613      	str	r3, [r2, #96]	; 0x60
 8000846:	4b0c      	ldr	r3, [pc, #48]	; (8000878 <HAL_MspInit+0x44>)
 8000848:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800084a:	f003 0301 	and.w	r3, r3, #1
 800084e:	607b      	str	r3, [r7, #4]
 8000850:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000852:	4b09      	ldr	r3, [pc, #36]	; (8000878 <HAL_MspInit+0x44>)
 8000854:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000856:	4a08      	ldr	r2, [pc, #32]	; (8000878 <HAL_MspInit+0x44>)
 8000858:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800085c:	6593      	str	r3, [r2, #88]	; 0x58
 800085e:	4b06      	ldr	r3, [pc, #24]	; (8000878 <HAL_MspInit+0x44>)
 8000860:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000862:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000866:	603b      	str	r3, [r7, #0]
 8000868:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800086a:	bf00      	nop
 800086c:	370c      	adds	r7, #12
 800086e:	46bd      	mov	sp, r7
 8000870:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000874:	4770      	bx	lr
 8000876:	bf00      	nop
 8000878:	40021000 	.word	0x40021000

0800087c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 800087c:	b480      	push	{r7}
 800087e:	b085      	sub	sp, #20
 8000880:	af00      	add	r7, sp, #0
 8000882:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM16)
 8000884:	687b      	ldr	r3, [r7, #4]
 8000886:	681b      	ldr	r3, [r3, #0]
 8000888:	4a0a      	ldr	r2, [pc, #40]	; (80008b4 <HAL_TIM_Base_MspInit+0x38>)
 800088a:	4293      	cmp	r3, r2
 800088c:	d10b      	bne.n	80008a6 <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM16_MspInit 0 */

  /* USER CODE END TIM16_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM16_CLK_ENABLE();
 800088e:	4b0a      	ldr	r3, [pc, #40]	; (80008b8 <HAL_TIM_Base_MspInit+0x3c>)
 8000890:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000892:	4a09      	ldr	r2, [pc, #36]	; (80008b8 <HAL_TIM_Base_MspInit+0x3c>)
 8000894:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000898:	6613      	str	r3, [r2, #96]	; 0x60
 800089a:	4b07      	ldr	r3, [pc, #28]	; (80008b8 <HAL_TIM_Base_MspInit+0x3c>)
 800089c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800089e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80008a2:	60fb      	str	r3, [r7, #12]
 80008a4:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM16_MspInit 1 */

  /* USER CODE END TIM16_MspInit 1 */
  }

}
 80008a6:	bf00      	nop
 80008a8:	3714      	adds	r7, #20
 80008aa:	46bd      	mov	sp, r7
 80008ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008b0:	4770      	bx	lr
 80008b2:	bf00      	nop
 80008b4:	40014400 	.word	0x40014400
 80008b8:	40021000 	.word	0x40021000

080008bc <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80008bc:	b580      	push	{r7, lr}
 80008be:	b0ac      	sub	sp, #176	; 0xb0
 80008c0:	af00      	add	r7, sp, #0
 80008c2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80008c4:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 80008c8:	2200      	movs	r2, #0
 80008ca:	601a      	str	r2, [r3, #0]
 80008cc:	605a      	str	r2, [r3, #4]
 80008ce:	609a      	str	r2, [r3, #8]
 80008d0:	60da      	str	r2, [r3, #12]
 80008d2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80008d4:	f107 0314 	add.w	r3, r7, #20
 80008d8:	2288      	movs	r2, #136	; 0x88
 80008da:	2100      	movs	r1, #0
 80008dc:	4618      	mov	r0, r3
 80008de:	f002 fdd9 	bl	8003494 <memset>
  if(huart->Instance==USART2)
 80008e2:	687b      	ldr	r3, [r7, #4]
 80008e4:	681b      	ldr	r3, [r3, #0]
 80008e6:	4a21      	ldr	r2, [pc, #132]	; (800096c <HAL_UART_MspInit+0xb0>)
 80008e8:	4293      	cmp	r3, r2
 80008ea:	d13b      	bne.n	8000964 <HAL_UART_MspInit+0xa8>
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 80008ec:	2302      	movs	r3, #2
 80008ee:	617b      	str	r3, [r7, #20]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 80008f0:	2300      	movs	r3, #0
 80008f2:	653b      	str	r3, [r7, #80]	; 0x50
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80008f4:	f107 0314 	add.w	r3, r7, #20
 80008f8:	4618      	mov	r0, r3
 80008fa:	f001 fa6f 	bl	8001ddc <HAL_RCCEx_PeriphCLKConfig>
 80008fe:	4603      	mov	r3, r0
 8000900:	2b00      	cmp	r3, #0
 8000902:	d001      	beq.n	8000908 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8000904:	f7ff ff90 	bl	8000828 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000908:	4b19      	ldr	r3, [pc, #100]	; (8000970 <HAL_UART_MspInit+0xb4>)
 800090a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800090c:	4a18      	ldr	r2, [pc, #96]	; (8000970 <HAL_UART_MspInit+0xb4>)
 800090e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000912:	6593      	str	r3, [r2, #88]	; 0x58
 8000914:	4b16      	ldr	r3, [pc, #88]	; (8000970 <HAL_UART_MspInit+0xb4>)
 8000916:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000918:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800091c:	613b      	str	r3, [r7, #16]
 800091e:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000920:	4b13      	ldr	r3, [pc, #76]	; (8000970 <HAL_UART_MspInit+0xb4>)
 8000922:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000924:	4a12      	ldr	r2, [pc, #72]	; (8000970 <HAL_UART_MspInit+0xb4>)
 8000926:	f043 0301 	orr.w	r3, r3, #1
 800092a:	64d3      	str	r3, [r2, #76]	; 0x4c
 800092c:	4b10      	ldr	r3, [pc, #64]	; (8000970 <HAL_UART_MspInit+0xb4>)
 800092e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000930:	f003 0301 	and.w	r3, r3, #1
 8000934:	60fb      	str	r3, [r7, #12]
 8000936:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8000938:	230c      	movs	r3, #12
 800093a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800093e:	2302      	movs	r3, #2
 8000940:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000944:	2300      	movs	r3, #0
 8000946:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800094a:	2303      	movs	r3, #3
 800094c:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000950:	2307      	movs	r3, #7
 8000952:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000956:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 800095a:	4619      	mov	r1, r3
 800095c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000960:	f000 fa2a 	bl	8000db8 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000964:	bf00      	nop
 8000966:	37b0      	adds	r7, #176	; 0xb0
 8000968:	46bd      	mov	sp, r7
 800096a:	bd80      	pop	{r7, pc}
 800096c:	40004400 	.word	0x40004400
 8000970:	40021000 	.word	0x40021000

08000974 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000974:	b480      	push	{r7}
 8000976:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000978:	e7fe      	b.n	8000978 <NMI_Handler+0x4>

0800097a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800097a:	b480      	push	{r7}
 800097c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800097e:	e7fe      	b.n	800097e <HardFault_Handler+0x4>

08000980 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000980:	b480      	push	{r7}
 8000982:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000984:	e7fe      	b.n	8000984 <MemManage_Handler+0x4>

08000986 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000986:	b480      	push	{r7}
 8000988:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800098a:	e7fe      	b.n	800098a <BusFault_Handler+0x4>

0800098c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800098c:	b480      	push	{r7}
 800098e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000990:	e7fe      	b.n	8000990 <UsageFault_Handler+0x4>

08000992 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000992:	b480      	push	{r7}
 8000994:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000996:	bf00      	nop
 8000998:	46bd      	mov	sp, r7
 800099a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800099e:	4770      	bx	lr

080009a0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80009a0:	b480      	push	{r7}
 80009a2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80009a4:	bf00      	nop
 80009a6:	46bd      	mov	sp, r7
 80009a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009ac:	4770      	bx	lr

080009ae <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80009ae:	b480      	push	{r7}
 80009b0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80009b2:	bf00      	nop
 80009b4:	46bd      	mov	sp, r7
 80009b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009ba:	4770      	bx	lr

080009bc <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80009bc:	b580      	push	{r7, lr}
 80009be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80009c0:	f000 f8d0 	bl	8000b64 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80009c4:	bf00      	nop
 80009c6:	bd80      	pop	{r7, pc}

080009c8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80009c8:	b580      	push	{r7, lr}
 80009ca:	b086      	sub	sp, #24
 80009cc:	af00      	add	r7, sp, #0
 80009ce:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80009d0:	4a14      	ldr	r2, [pc, #80]	; (8000a24 <_sbrk+0x5c>)
 80009d2:	4b15      	ldr	r3, [pc, #84]	; (8000a28 <_sbrk+0x60>)
 80009d4:	1ad3      	subs	r3, r2, r3
 80009d6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80009d8:	697b      	ldr	r3, [r7, #20]
 80009da:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80009dc:	4b13      	ldr	r3, [pc, #76]	; (8000a2c <_sbrk+0x64>)
 80009de:	681b      	ldr	r3, [r3, #0]
 80009e0:	2b00      	cmp	r3, #0
 80009e2:	d102      	bne.n	80009ea <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80009e4:	4b11      	ldr	r3, [pc, #68]	; (8000a2c <_sbrk+0x64>)
 80009e6:	4a12      	ldr	r2, [pc, #72]	; (8000a30 <_sbrk+0x68>)
 80009e8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80009ea:	4b10      	ldr	r3, [pc, #64]	; (8000a2c <_sbrk+0x64>)
 80009ec:	681a      	ldr	r2, [r3, #0]
 80009ee:	687b      	ldr	r3, [r7, #4]
 80009f0:	4413      	add	r3, r2
 80009f2:	693a      	ldr	r2, [r7, #16]
 80009f4:	429a      	cmp	r2, r3
 80009f6:	d207      	bcs.n	8000a08 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80009f8:	f002 fd22 	bl	8003440 <__errno>
 80009fc:	4603      	mov	r3, r0
 80009fe:	220c      	movs	r2, #12
 8000a00:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000a02:	f04f 33ff 	mov.w	r3, #4294967295
 8000a06:	e009      	b.n	8000a1c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000a08:	4b08      	ldr	r3, [pc, #32]	; (8000a2c <_sbrk+0x64>)
 8000a0a:	681b      	ldr	r3, [r3, #0]
 8000a0c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000a0e:	4b07      	ldr	r3, [pc, #28]	; (8000a2c <_sbrk+0x64>)
 8000a10:	681a      	ldr	r2, [r3, #0]
 8000a12:	687b      	ldr	r3, [r7, #4]
 8000a14:	4413      	add	r3, r2
 8000a16:	4a05      	ldr	r2, [pc, #20]	; (8000a2c <_sbrk+0x64>)
 8000a18:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000a1a:	68fb      	ldr	r3, [r7, #12]
}
 8000a1c:	4618      	mov	r0, r3
 8000a1e:	3718      	adds	r7, #24
 8000a20:	46bd      	mov	sp, r7
 8000a22:	bd80      	pop	{r7, pc}
 8000a24:	20018000 	.word	0x20018000
 8000a28:	00000400 	.word	0x00000400
 8000a2c:	2000008c 	.word	0x2000008c
 8000a30:	20000180 	.word	0x20000180

08000a34 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8000a34:	b480      	push	{r7}
 8000a36:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8000a38:	4b06      	ldr	r3, [pc, #24]	; (8000a54 <SystemInit+0x20>)
 8000a3a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000a3e:	4a05      	ldr	r2, [pc, #20]	; (8000a54 <SystemInit+0x20>)
 8000a40:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000a44:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 8000a48:	bf00      	nop
 8000a4a:	46bd      	mov	sp, r7
 8000a4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a50:	4770      	bx	lr
 8000a52:	bf00      	nop
 8000a54:	e000ed00 	.word	0xe000ed00

08000a58 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8000a58:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000a90 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000a5c:	f7ff ffea 	bl	8000a34 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000a60:	480c      	ldr	r0, [pc, #48]	; (8000a94 <LoopForever+0x6>)
  ldr r1, =_edata
 8000a62:	490d      	ldr	r1, [pc, #52]	; (8000a98 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000a64:	4a0d      	ldr	r2, [pc, #52]	; (8000a9c <LoopForever+0xe>)
  movs r3, #0
 8000a66:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000a68:	e002      	b.n	8000a70 <LoopCopyDataInit>

08000a6a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000a6a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000a6c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000a6e:	3304      	adds	r3, #4

08000a70 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000a70:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000a72:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000a74:	d3f9      	bcc.n	8000a6a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000a76:	4a0a      	ldr	r2, [pc, #40]	; (8000aa0 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000a78:	4c0a      	ldr	r4, [pc, #40]	; (8000aa4 <LoopForever+0x16>)
  movs r3, #0
 8000a7a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000a7c:	e001      	b.n	8000a82 <LoopFillZerobss>

08000a7e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000a7e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000a80:	3204      	adds	r2, #4

08000a82 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000a82:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000a84:	d3fb      	bcc.n	8000a7e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000a86:	f002 fce1 	bl	800344c <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000a8a:	f7ff fd6d 	bl	8000568 <main>

08000a8e <LoopForever>:

LoopForever:
    b LoopForever
 8000a8e:	e7fe      	b.n	8000a8e <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8000a90:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8000a94:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000a98:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 8000a9c:	08003dbc 	.word	0x08003dbc
  ldr r2, =_sbss
 8000aa0:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 8000aa4:	2000017c 	.word	0x2000017c

08000aa8 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000aa8:	e7fe      	b.n	8000aa8 <ADC1_2_IRQHandler>
	...

08000aac <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000aac:	b580      	push	{r7, lr}
 8000aae:	b082      	sub	sp, #8
 8000ab0:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000ab2:	2300      	movs	r3, #0
 8000ab4:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0)
   __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000ab6:	4b0c      	ldr	r3, [pc, #48]	; (8000ae8 <HAL_Init+0x3c>)
 8000ab8:	681b      	ldr	r3, [r3, #0]
 8000aba:	4a0b      	ldr	r2, [pc, #44]	; (8000ae8 <HAL_Init+0x3c>)
 8000abc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000ac0:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000ac2:	2003      	movs	r0, #3
 8000ac4:	f000 f944 	bl	8000d50 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000ac8:	2000      	movs	r0, #0
 8000aca:	f000 f80f 	bl	8000aec <HAL_InitTick>
 8000ace:	4603      	mov	r3, r0
 8000ad0:	2b00      	cmp	r3, #0
 8000ad2:	d002      	beq.n	8000ada <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 8000ad4:	2301      	movs	r3, #1
 8000ad6:	71fb      	strb	r3, [r7, #7]
 8000ad8:	e001      	b.n	8000ade <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000ada:	f7ff feab 	bl	8000834 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000ade:	79fb      	ldrb	r3, [r7, #7]
}
 8000ae0:	4618      	mov	r0, r3
 8000ae2:	3708      	adds	r7, #8
 8000ae4:	46bd      	mov	sp, r7
 8000ae6:	bd80      	pop	{r7, pc}
 8000ae8:	40022000 	.word	0x40022000

08000aec <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000aec:	b580      	push	{r7, lr}
 8000aee:	b084      	sub	sp, #16
 8000af0:	af00      	add	r7, sp, #0
 8000af2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000af4:	2300      	movs	r3, #0
 8000af6:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8000af8:	4b17      	ldr	r3, [pc, #92]	; (8000b58 <HAL_InitTick+0x6c>)
 8000afa:	781b      	ldrb	r3, [r3, #0]
 8000afc:	2b00      	cmp	r3, #0
 8000afe:	d023      	beq.n	8000b48 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8000b00:	4b16      	ldr	r3, [pc, #88]	; (8000b5c <HAL_InitTick+0x70>)
 8000b02:	681a      	ldr	r2, [r3, #0]
 8000b04:	4b14      	ldr	r3, [pc, #80]	; (8000b58 <HAL_InitTick+0x6c>)
 8000b06:	781b      	ldrb	r3, [r3, #0]
 8000b08:	4619      	mov	r1, r3
 8000b0a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000b0e:	fbb3 f3f1 	udiv	r3, r3, r1
 8000b12:	fbb2 f3f3 	udiv	r3, r2, r3
 8000b16:	4618      	mov	r0, r3
 8000b18:	f000 f941 	bl	8000d9e <HAL_SYSTICK_Config>
 8000b1c:	4603      	mov	r3, r0
 8000b1e:	2b00      	cmp	r3, #0
 8000b20:	d10f      	bne.n	8000b42 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000b22:	687b      	ldr	r3, [r7, #4]
 8000b24:	2b0f      	cmp	r3, #15
 8000b26:	d809      	bhi.n	8000b3c <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000b28:	2200      	movs	r2, #0
 8000b2a:	6879      	ldr	r1, [r7, #4]
 8000b2c:	f04f 30ff 	mov.w	r0, #4294967295
 8000b30:	f000 f919 	bl	8000d66 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000b34:	4a0a      	ldr	r2, [pc, #40]	; (8000b60 <HAL_InitTick+0x74>)
 8000b36:	687b      	ldr	r3, [r7, #4]
 8000b38:	6013      	str	r3, [r2, #0]
 8000b3a:	e007      	b.n	8000b4c <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8000b3c:	2301      	movs	r3, #1
 8000b3e:	73fb      	strb	r3, [r7, #15]
 8000b40:	e004      	b.n	8000b4c <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000b42:	2301      	movs	r3, #1
 8000b44:	73fb      	strb	r3, [r7, #15]
 8000b46:	e001      	b.n	8000b4c <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000b48:	2301      	movs	r3, #1
 8000b4a:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8000b4c:	7bfb      	ldrb	r3, [r7, #15]
}
 8000b4e:	4618      	mov	r0, r3
 8000b50:	3710      	adds	r7, #16
 8000b52:	46bd      	mov	sp, r7
 8000b54:	bd80      	pop	{r7, pc}
 8000b56:	bf00      	nop
 8000b58:	20000008 	.word	0x20000008
 8000b5c:	20000000 	.word	0x20000000
 8000b60:	20000004 	.word	0x20000004

08000b64 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000b64:	b480      	push	{r7}
 8000b66:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000b68:	4b06      	ldr	r3, [pc, #24]	; (8000b84 <HAL_IncTick+0x20>)
 8000b6a:	781b      	ldrb	r3, [r3, #0]
 8000b6c:	461a      	mov	r2, r3
 8000b6e:	4b06      	ldr	r3, [pc, #24]	; (8000b88 <HAL_IncTick+0x24>)
 8000b70:	681b      	ldr	r3, [r3, #0]
 8000b72:	4413      	add	r3, r2
 8000b74:	4a04      	ldr	r2, [pc, #16]	; (8000b88 <HAL_IncTick+0x24>)
 8000b76:	6013      	str	r3, [r2, #0]
}
 8000b78:	bf00      	nop
 8000b7a:	46bd      	mov	sp, r7
 8000b7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b80:	4770      	bx	lr
 8000b82:	bf00      	nop
 8000b84:	20000008 	.word	0x20000008
 8000b88:	20000168 	.word	0x20000168

08000b8c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000b8c:	b480      	push	{r7}
 8000b8e:	af00      	add	r7, sp, #0
  return uwTick;
 8000b90:	4b03      	ldr	r3, [pc, #12]	; (8000ba0 <HAL_GetTick+0x14>)
 8000b92:	681b      	ldr	r3, [r3, #0]
}
 8000b94:	4618      	mov	r0, r3
 8000b96:	46bd      	mov	sp, r7
 8000b98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b9c:	4770      	bx	lr
 8000b9e:	bf00      	nop
 8000ba0:	20000168 	.word	0x20000168

08000ba4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000ba4:	b580      	push	{r7, lr}
 8000ba6:	b084      	sub	sp, #16
 8000ba8:	af00      	add	r7, sp, #0
 8000baa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000bac:	f7ff ffee 	bl	8000b8c <HAL_GetTick>
 8000bb0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000bb2:	687b      	ldr	r3, [r7, #4]
 8000bb4:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000bb6:	68fb      	ldr	r3, [r7, #12]
 8000bb8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000bbc:	d005      	beq.n	8000bca <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8000bbe:	4b0a      	ldr	r3, [pc, #40]	; (8000be8 <HAL_Delay+0x44>)
 8000bc0:	781b      	ldrb	r3, [r3, #0]
 8000bc2:	461a      	mov	r2, r3
 8000bc4:	68fb      	ldr	r3, [r7, #12]
 8000bc6:	4413      	add	r3, r2
 8000bc8:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000bca:	bf00      	nop
 8000bcc:	f7ff ffde 	bl	8000b8c <HAL_GetTick>
 8000bd0:	4602      	mov	r2, r0
 8000bd2:	68bb      	ldr	r3, [r7, #8]
 8000bd4:	1ad3      	subs	r3, r2, r3
 8000bd6:	68fa      	ldr	r2, [r7, #12]
 8000bd8:	429a      	cmp	r2, r3
 8000bda:	d8f7      	bhi.n	8000bcc <HAL_Delay+0x28>
  {
  }
}
 8000bdc:	bf00      	nop
 8000bde:	bf00      	nop
 8000be0:	3710      	adds	r7, #16
 8000be2:	46bd      	mov	sp, r7
 8000be4:	bd80      	pop	{r7, pc}
 8000be6:	bf00      	nop
 8000be8:	20000008 	.word	0x20000008

08000bec <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000bec:	b480      	push	{r7}
 8000bee:	b085      	sub	sp, #20
 8000bf0:	af00      	add	r7, sp, #0
 8000bf2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000bf4:	687b      	ldr	r3, [r7, #4]
 8000bf6:	f003 0307 	and.w	r3, r3, #7
 8000bfa:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000bfc:	4b0c      	ldr	r3, [pc, #48]	; (8000c30 <__NVIC_SetPriorityGrouping+0x44>)
 8000bfe:	68db      	ldr	r3, [r3, #12]
 8000c00:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000c02:	68ba      	ldr	r2, [r7, #8]
 8000c04:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000c08:	4013      	ands	r3, r2
 8000c0a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000c0c:	68fb      	ldr	r3, [r7, #12]
 8000c0e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000c10:	68bb      	ldr	r3, [r7, #8]
 8000c12:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000c14:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000c18:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000c1c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000c1e:	4a04      	ldr	r2, [pc, #16]	; (8000c30 <__NVIC_SetPriorityGrouping+0x44>)
 8000c20:	68bb      	ldr	r3, [r7, #8]
 8000c22:	60d3      	str	r3, [r2, #12]
}
 8000c24:	bf00      	nop
 8000c26:	3714      	adds	r7, #20
 8000c28:	46bd      	mov	sp, r7
 8000c2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c2e:	4770      	bx	lr
 8000c30:	e000ed00 	.word	0xe000ed00

08000c34 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000c34:	b480      	push	{r7}
 8000c36:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000c38:	4b04      	ldr	r3, [pc, #16]	; (8000c4c <__NVIC_GetPriorityGrouping+0x18>)
 8000c3a:	68db      	ldr	r3, [r3, #12]
 8000c3c:	0a1b      	lsrs	r3, r3, #8
 8000c3e:	f003 0307 	and.w	r3, r3, #7
}
 8000c42:	4618      	mov	r0, r3
 8000c44:	46bd      	mov	sp, r7
 8000c46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c4a:	4770      	bx	lr
 8000c4c:	e000ed00 	.word	0xe000ed00

08000c50 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000c50:	b480      	push	{r7}
 8000c52:	b083      	sub	sp, #12
 8000c54:	af00      	add	r7, sp, #0
 8000c56:	4603      	mov	r3, r0
 8000c58:	6039      	str	r1, [r7, #0]
 8000c5a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000c5c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c60:	2b00      	cmp	r3, #0
 8000c62:	db0a      	blt.n	8000c7a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000c64:	683b      	ldr	r3, [r7, #0]
 8000c66:	b2da      	uxtb	r2, r3
 8000c68:	490c      	ldr	r1, [pc, #48]	; (8000c9c <__NVIC_SetPriority+0x4c>)
 8000c6a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c6e:	0112      	lsls	r2, r2, #4
 8000c70:	b2d2      	uxtb	r2, r2
 8000c72:	440b      	add	r3, r1
 8000c74:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000c78:	e00a      	b.n	8000c90 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000c7a:	683b      	ldr	r3, [r7, #0]
 8000c7c:	b2da      	uxtb	r2, r3
 8000c7e:	4908      	ldr	r1, [pc, #32]	; (8000ca0 <__NVIC_SetPriority+0x50>)
 8000c80:	79fb      	ldrb	r3, [r7, #7]
 8000c82:	f003 030f 	and.w	r3, r3, #15
 8000c86:	3b04      	subs	r3, #4
 8000c88:	0112      	lsls	r2, r2, #4
 8000c8a:	b2d2      	uxtb	r2, r2
 8000c8c:	440b      	add	r3, r1
 8000c8e:	761a      	strb	r2, [r3, #24]
}
 8000c90:	bf00      	nop
 8000c92:	370c      	adds	r7, #12
 8000c94:	46bd      	mov	sp, r7
 8000c96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c9a:	4770      	bx	lr
 8000c9c:	e000e100 	.word	0xe000e100
 8000ca0:	e000ed00 	.word	0xe000ed00

08000ca4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000ca4:	b480      	push	{r7}
 8000ca6:	b089      	sub	sp, #36	; 0x24
 8000ca8:	af00      	add	r7, sp, #0
 8000caa:	60f8      	str	r0, [r7, #12]
 8000cac:	60b9      	str	r1, [r7, #8]
 8000cae:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000cb0:	68fb      	ldr	r3, [r7, #12]
 8000cb2:	f003 0307 	and.w	r3, r3, #7
 8000cb6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000cb8:	69fb      	ldr	r3, [r7, #28]
 8000cba:	f1c3 0307 	rsb	r3, r3, #7
 8000cbe:	2b04      	cmp	r3, #4
 8000cc0:	bf28      	it	cs
 8000cc2:	2304      	movcs	r3, #4
 8000cc4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000cc6:	69fb      	ldr	r3, [r7, #28]
 8000cc8:	3304      	adds	r3, #4
 8000cca:	2b06      	cmp	r3, #6
 8000ccc:	d902      	bls.n	8000cd4 <NVIC_EncodePriority+0x30>
 8000cce:	69fb      	ldr	r3, [r7, #28]
 8000cd0:	3b03      	subs	r3, #3
 8000cd2:	e000      	b.n	8000cd6 <NVIC_EncodePriority+0x32>
 8000cd4:	2300      	movs	r3, #0
 8000cd6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000cd8:	f04f 32ff 	mov.w	r2, #4294967295
 8000cdc:	69bb      	ldr	r3, [r7, #24]
 8000cde:	fa02 f303 	lsl.w	r3, r2, r3
 8000ce2:	43da      	mvns	r2, r3
 8000ce4:	68bb      	ldr	r3, [r7, #8]
 8000ce6:	401a      	ands	r2, r3
 8000ce8:	697b      	ldr	r3, [r7, #20]
 8000cea:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000cec:	f04f 31ff 	mov.w	r1, #4294967295
 8000cf0:	697b      	ldr	r3, [r7, #20]
 8000cf2:	fa01 f303 	lsl.w	r3, r1, r3
 8000cf6:	43d9      	mvns	r1, r3
 8000cf8:	687b      	ldr	r3, [r7, #4]
 8000cfa:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000cfc:	4313      	orrs	r3, r2
         );
}
 8000cfe:	4618      	mov	r0, r3
 8000d00:	3724      	adds	r7, #36	; 0x24
 8000d02:	46bd      	mov	sp, r7
 8000d04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d08:	4770      	bx	lr
	...

08000d0c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000d0c:	b580      	push	{r7, lr}
 8000d0e:	b082      	sub	sp, #8
 8000d10:	af00      	add	r7, sp, #0
 8000d12:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000d14:	687b      	ldr	r3, [r7, #4]
 8000d16:	3b01      	subs	r3, #1
 8000d18:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000d1c:	d301      	bcc.n	8000d22 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000d1e:	2301      	movs	r3, #1
 8000d20:	e00f      	b.n	8000d42 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000d22:	4a0a      	ldr	r2, [pc, #40]	; (8000d4c <SysTick_Config+0x40>)
 8000d24:	687b      	ldr	r3, [r7, #4]
 8000d26:	3b01      	subs	r3, #1
 8000d28:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000d2a:	210f      	movs	r1, #15
 8000d2c:	f04f 30ff 	mov.w	r0, #4294967295
 8000d30:	f7ff ff8e 	bl	8000c50 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000d34:	4b05      	ldr	r3, [pc, #20]	; (8000d4c <SysTick_Config+0x40>)
 8000d36:	2200      	movs	r2, #0
 8000d38:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000d3a:	4b04      	ldr	r3, [pc, #16]	; (8000d4c <SysTick_Config+0x40>)
 8000d3c:	2207      	movs	r2, #7
 8000d3e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000d40:	2300      	movs	r3, #0
}
 8000d42:	4618      	mov	r0, r3
 8000d44:	3708      	adds	r7, #8
 8000d46:	46bd      	mov	sp, r7
 8000d48:	bd80      	pop	{r7, pc}
 8000d4a:	bf00      	nop
 8000d4c:	e000e010 	.word	0xe000e010

08000d50 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000d50:	b580      	push	{r7, lr}
 8000d52:	b082      	sub	sp, #8
 8000d54:	af00      	add	r7, sp, #0
 8000d56:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000d58:	6878      	ldr	r0, [r7, #4]
 8000d5a:	f7ff ff47 	bl	8000bec <__NVIC_SetPriorityGrouping>
}
 8000d5e:	bf00      	nop
 8000d60:	3708      	adds	r7, #8
 8000d62:	46bd      	mov	sp, r7
 8000d64:	bd80      	pop	{r7, pc}

08000d66 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000d66:	b580      	push	{r7, lr}
 8000d68:	b086      	sub	sp, #24
 8000d6a:	af00      	add	r7, sp, #0
 8000d6c:	4603      	mov	r3, r0
 8000d6e:	60b9      	str	r1, [r7, #8]
 8000d70:	607a      	str	r2, [r7, #4]
 8000d72:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8000d74:	2300      	movs	r3, #0
 8000d76:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8000d78:	f7ff ff5c 	bl	8000c34 <__NVIC_GetPriorityGrouping>
 8000d7c:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000d7e:	687a      	ldr	r2, [r7, #4]
 8000d80:	68b9      	ldr	r1, [r7, #8]
 8000d82:	6978      	ldr	r0, [r7, #20]
 8000d84:	f7ff ff8e 	bl	8000ca4 <NVIC_EncodePriority>
 8000d88:	4602      	mov	r2, r0
 8000d8a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000d8e:	4611      	mov	r1, r2
 8000d90:	4618      	mov	r0, r3
 8000d92:	f7ff ff5d 	bl	8000c50 <__NVIC_SetPriority>
}
 8000d96:	bf00      	nop
 8000d98:	3718      	adds	r7, #24
 8000d9a:	46bd      	mov	sp, r7
 8000d9c:	bd80      	pop	{r7, pc}

08000d9e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000d9e:	b580      	push	{r7, lr}
 8000da0:	b082      	sub	sp, #8
 8000da2:	af00      	add	r7, sp, #0
 8000da4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000da6:	6878      	ldr	r0, [r7, #4]
 8000da8:	f7ff ffb0 	bl	8000d0c <SysTick_Config>
 8000dac:	4603      	mov	r3, r0
}
 8000dae:	4618      	mov	r0, r3
 8000db0:	3708      	adds	r7, #8
 8000db2:	46bd      	mov	sp, r7
 8000db4:	bd80      	pop	{r7, pc}
	...

08000db8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000db8:	b480      	push	{r7}
 8000dba:	b087      	sub	sp, #28
 8000dbc:	af00      	add	r7, sp, #0
 8000dbe:	6078      	str	r0, [r7, #4]
 8000dc0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000dc2:	2300      	movs	r3, #0
 8000dc4:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000dc6:	e17f      	b.n	80010c8 <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8000dc8:	683b      	ldr	r3, [r7, #0]
 8000dca:	681a      	ldr	r2, [r3, #0]
 8000dcc:	2101      	movs	r1, #1
 8000dce:	697b      	ldr	r3, [r7, #20]
 8000dd0:	fa01 f303 	lsl.w	r3, r1, r3
 8000dd4:	4013      	ands	r3, r2
 8000dd6:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8000dd8:	68fb      	ldr	r3, [r7, #12]
 8000dda:	2b00      	cmp	r3, #0
 8000ddc:	f000 8171 	beq.w	80010c2 <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000de0:	683b      	ldr	r3, [r7, #0]
 8000de2:	685b      	ldr	r3, [r3, #4]
 8000de4:	f003 0303 	and.w	r3, r3, #3
 8000de8:	2b01      	cmp	r3, #1
 8000dea:	d005      	beq.n	8000df8 <HAL_GPIO_Init+0x40>
 8000dec:	683b      	ldr	r3, [r7, #0]
 8000dee:	685b      	ldr	r3, [r3, #4]
 8000df0:	f003 0303 	and.w	r3, r3, #3
 8000df4:	2b02      	cmp	r3, #2
 8000df6:	d130      	bne.n	8000e5a <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000df8:	687b      	ldr	r3, [r7, #4]
 8000dfa:	689b      	ldr	r3, [r3, #8]
 8000dfc:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8000dfe:	697b      	ldr	r3, [r7, #20]
 8000e00:	005b      	lsls	r3, r3, #1
 8000e02:	2203      	movs	r2, #3
 8000e04:	fa02 f303 	lsl.w	r3, r2, r3
 8000e08:	43db      	mvns	r3, r3
 8000e0a:	693a      	ldr	r2, [r7, #16]
 8000e0c:	4013      	ands	r3, r2
 8000e0e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8000e10:	683b      	ldr	r3, [r7, #0]
 8000e12:	68da      	ldr	r2, [r3, #12]
 8000e14:	697b      	ldr	r3, [r7, #20]
 8000e16:	005b      	lsls	r3, r3, #1
 8000e18:	fa02 f303 	lsl.w	r3, r2, r3
 8000e1c:	693a      	ldr	r2, [r7, #16]
 8000e1e:	4313      	orrs	r3, r2
 8000e20:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000e22:	687b      	ldr	r3, [r7, #4]
 8000e24:	693a      	ldr	r2, [r7, #16]
 8000e26:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000e28:	687b      	ldr	r3, [r7, #4]
 8000e2a:	685b      	ldr	r3, [r3, #4]
 8000e2c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8000e2e:	2201      	movs	r2, #1
 8000e30:	697b      	ldr	r3, [r7, #20]
 8000e32:	fa02 f303 	lsl.w	r3, r2, r3
 8000e36:	43db      	mvns	r3, r3
 8000e38:	693a      	ldr	r2, [r7, #16]
 8000e3a:	4013      	ands	r3, r2
 8000e3c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000e3e:	683b      	ldr	r3, [r7, #0]
 8000e40:	685b      	ldr	r3, [r3, #4]
 8000e42:	091b      	lsrs	r3, r3, #4
 8000e44:	f003 0201 	and.w	r2, r3, #1
 8000e48:	697b      	ldr	r3, [r7, #20]
 8000e4a:	fa02 f303 	lsl.w	r3, r2, r3
 8000e4e:	693a      	ldr	r2, [r7, #16]
 8000e50:	4313      	orrs	r3, r2
 8000e52:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000e54:	687b      	ldr	r3, [r7, #4]
 8000e56:	693a      	ldr	r2, [r7, #16]
 8000e58:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 8000e5a:	683b      	ldr	r3, [r7, #0]
 8000e5c:	685b      	ldr	r3, [r3, #4]
 8000e5e:	f003 0303 	and.w	r3, r3, #3
 8000e62:	2b03      	cmp	r3, #3
 8000e64:	d118      	bne.n	8000e98 <HAL_GPIO_Init+0xe0>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 8000e66:	687b      	ldr	r3, [r7, #4]
 8000e68:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000e6a:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 8000e6c:	2201      	movs	r2, #1
 8000e6e:	697b      	ldr	r3, [r7, #20]
 8000e70:	fa02 f303 	lsl.w	r3, r2, r3
 8000e74:	43db      	mvns	r3, r3
 8000e76:	693a      	ldr	r2, [r7, #16]
 8000e78:	4013      	ands	r3, r2
 8000e7a:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 8000e7c:	683b      	ldr	r3, [r7, #0]
 8000e7e:	685b      	ldr	r3, [r3, #4]
 8000e80:	08db      	lsrs	r3, r3, #3
 8000e82:	f003 0201 	and.w	r2, r3, #1
 8000e86:	697b      	ldr	r3, [r7, #20]
 8000e88:	fa02 f303 	lsl.w	r3, r2, r3
 8000e8c:	693a      	ldr	r2, [r7, #16]
 8000e8e:	4313      	orrs	r3, r2
 8000e90:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 8000e92:	687b      	ldr	r3, [r7, #4]
 8000e94:	693a      	ldr	r2, [r7, #16]
 8000e96:	62da      	str	r2, [r3, #44]	; 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000e98:	683b      	ldr	r3, [r7, #0]
 8000e9a:	685b      	ldr	r3, [r3, #4]
 8000e9c:	f003 0303 	and.w	r3, r3, #3
 8000ea0:	2b03      	cmp	r3, #3
 8000ea2:	d017      	beq.n	8000ed4 <HAL_GPIO_Init+0x11c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8000ea4:	687b      	ldr	r3, [r7, #4]
 8000ea6:	68db      	ldr	r3, [r3, #12]
 8000ea8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8000eaa:	697b      	ldr	r3, [r7, #20]
 8000eac:	005b      	lsls	r3, r3, #1
 8000eae:	2203      	movs	r2, #3
 8000eb0:	fa02 f303 	lsl.w	r3, r2, r3
 8000eb4:	43db      	mvns	r3, r3
 8000eb6:	693a      	ldr	r2, [r7, #16]
 8000eb8:	4013      	ands	r3, r2
 8000eba:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000ebc:	683b      	ldr	r3, [r7, #0]
 8000ebe:	689a      	ldr	r2, [r3, #8]
 8000ec0:	697b      	ldr	r3, [r7, #20]
 8000ec2:	005b      	lsls	r3, r3, #1
 8000ec4:	fa02 f303 	lsl.w	r3, r2, r3
 8000ec8:	693a      	ldr	r2, [r7, #16]
 8000eca:	4313      	orrs	r3, r2
 8000ecc:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8000ece:	687b      	ldr	r3, [r7, #4]
 8000ed0:	693a      	ldr	r2, [r7, #16]
 8000ed2:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000ed4:	683b      	ldr	r3, [r7, #0]
 8000ed6:	685b      	ldr	r3, [r3, #4]
 8000ed8:	f003 0303 	and.w	r3, r3, #3
 8000edc:	2b02      	cmp	r3, #2
 8000ede:	d123      	bne.n	8000f28 <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8000ee0:	697b      	ldr	r3, [r7, #20]
 8000ee2:	08da      	lsrs	r2, r3, #3
 8000ee4:	687b      	ldr	r3, [r7, #4]
 8000ee6:	3208      	adds	r2, #8
 8000ee8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000eec:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8000eee:	697b      	ldr	r3, [r7, #20]
 8000ef0:	f003 0307 	and.w	r3, r3, #7
 8000ef4:	009b      	lsls	r3, r3, #2
 8000ef6:	220f      	movs	r2, #15
 8000ef8:	fa02 f303 	lsl.w	r3, r2, r3
 8000efc:	43db      	mvns	r3, r3
 8000efe:	693a      	ldr	r2, [r7, #16]
 8000f00:	4013      	ands	r3, r2
 8000f02:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8000f04:	683b      	ldr	r3, [r7, #0]
 8000f06:	691a      	ldr	r2, [r3, #16]
 8000f08:	697b      	ldr	r3, [r7, #20]
 8000f0a:	f003 0307 	and.w	r3, r3, #7
 8000f0e:	009b      	lsls	r3, r3, #2
 8000f10:	fa02 f303 	lsl.w	r3, r2, r3
 8000f14:	693a      	ldr	r2, [r7, #16]
 8000f16:	4313      	orrs	r3, r2
 8000f18:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8000f1a:	697b      	ldr	r3, [r7, #20]
 8000f1c:	08da      	lsrs	r2, r3, #3
 8000f1e:	687b      	ldr	r3, [r7, #4]
 8000f20:	3208      	adds	r2, #8
 8000f22:	6939      	ldr	r1, [r7, #16]
 8000f24:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000f28:	687b      	ldr	r3, [r7, #4]
 8000f2a:	681b      	ldr	r3, [r3, #0]
 8000f2c:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8000f2e:	697b      	ldr	r3, [r7, #20]
 8000f30:	005b      	lsls	r3, r3, #1
 8000f32:	2203      	movs	r2, #3
 8000f34:	fa02 f303 	lsl.w	r3, r2, r3
 8000f38:	43db      	mvns	r3, r3
 8000f3a:	693a      	ldr	r2, [r7, #16]
 8000f3c:	4013      	ands	r3, r2
 8000f3e:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8000f40:	683b      	ldr	r3, [r7, #0]
 8000f42:	685b      	ldr	r3, [r3, #4]
 8000f44:	f003 0203 	and.w	r2, r3, #3
 8000f48:	697b      	ldr	r3, [r7, #20]
 8000f4a:	005b      	lsls	r3, r3, #1
 8000f4c:	fa02 f303 	lsl.w	r3, r2, r3
 8000f50:	693a      	ldr	r2, [r7, #16]
 8000f52:	4313      	orrs	r3, r2
 8000f54:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8000f56:	687b      	ldr	r3, [r7, #4]
 8000f58:	693a      	ldr	r2, [r7, #16]
 8000f5a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8000f5c:	683b      	ldr	r3, [r7, #0]
 8000f5e:	685b      	ldr	r3, [r3, #4]
 8000f60:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8000f64:	2b00      	cmp	r3, #0
 8000f66:	f000 80ac 	beq.w	80010c2 <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000f6a:	4b5f      	ldr	r3, [pc, #380]	; (80010e8 <HAL_GPIO_Init+0x330>)
 8000f6c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000f6e:	4a5e      	ldr	r2, [pc, #376]	; (80010e8 <HAL_GPIO_Init+0x330>)
 8000f70:	f043 0301 	orr.w	r3, r3, #1
 8000f74:	6613      	str	r3, [r2, #96]	; 0x60
 8000f76:	4b5c      	ldr	r3, [pc, #368]	; (80010e8 <HAL_GPIO_Init+0x330>)
 8000f78:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000f7a:	f003 0301 	and.w	r3, r3, #1
 8000f7e:	60bb      	str	r3, [r7, #8]
 8000f80:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8000f82:	4a5a      	ldr	r2, [pc, #360]	; (80010ec <HAL_GPIO_Init+0x334>)
 8000f84:	697b      	ldr	r3, [r7, #20]
 8000f86:	089b      	lsrs	r3, r3, #2
 8000f88:	3302      	adds	r3, #2
 8000f8a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000f8e:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8000f90:	697b      	ldr	r3, [r7, #20]
 8000f92:	f003 0303 	and.w	r3, r3, #3
 8000f96:	009b      	lsls	r3, r3, #2
 8000f98:	220f      	movs	r2, #15
 8000f9a:	fa02 f303 	lsl.w	r3, r2, r3
 8000f9e:	43db      	mvns	r3, r3
 8000fa0:	693a      	ldr	r2, [r7, #16]
 8000fa2:	4013      	ands	r3, r2
 8000fa4:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8000fa6:	687b      	ldr	r3, [r7, #4]
 8000fa8:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8000fac:	d025      	beq.n	8000ffa <HAL_GPIO_Init+0x242>
 8000fae:	687b      	ldr	r3, [r7, #4]
 8000fb0:	4a4f      	ldr	r2, [pc, #316]	; (80010f0 <HAL_GPIO_Init+0x338>)
 8000fb2:	4293      	cmp	r3, r2
 8000fb4:	d01f      	beq.n	8000ff6 <HAL_GPIO_Init+0x23e>
 8000fb6:	687b      	ldr	r3, [r7, #4]
 8000fb8:	4a4e      	ldr	r2, [pc, #312]	; (80010f4 <HAL_GPIO_Init+0x33c>)
 8000fba:	4293      	cmp	r3, r2
 8000fbc:	d019      	beq.n	8000ff2 <HAL_GPIO_Init+0x23a>
 8000fbe:	687b      	ldr	r3, [r7, #4]
 8000fc0:	4a4d      	ldr	r2, [pc, #308]	; (80010f8 <HAL_GPIO_Init+0x340>)
 8000fc2:	4293      	cmp	r3, r2
 8000fc4:	d013      	beq.n	8000fee <HAL_GPIO_Init+0x236>
 8000fc6:	687b      	ldr	r3, [r7, #4]
 8000fc8:	4a4c      	ldr	r2, [pc, #304]	; (80010fc <HAL_GPIO_Init+0x344>)
 8000fca:	4293      	cmp	r3, r2
 8000fcc:	d00d      	beq.n	8000fea <HAL_GPIO_Init+0x232>
 8000fce:	687b      	ldr	r3, [r7, #4]
 8000fd0:	4a4b      	ldr	r2, [pc, #300]	; (8001100 <HAL_GPIO_Init+0x348>)
 8000fd2:	4293      	cmp	r3, r2
 8000fd4:	d007      	beq.n	8000fe6 <HAL_GPIO_Init+0x22e>
 8000fd6:	687b      	ldr	r3, [r7, #4]
 8000fd8:	4a4a      	ldr	r2, [pc, #296]	; (8001104 <HAL_GPIO_Init+0x34c>)
 8000fda:	4293      	cmp	r3, r2
 8000fdc:	d101      	bne.n	8000fe2 <HAL_GPIO_Init+0x22a>
 8000fde:	2306      	movs	r3, #6
 8000fe0:	e00c      	b.n	8000ffc <HAL_GPIO_Init+0x244>
 8000fe2:	2307      	movs	r3, #7
 8000fe4:	e00a      	b.n	8000ffc <HAL_GPIO_Init+0x244>
 8000fe6:	2305      	movs	r3, #5
 8000fe8:	e008      	b.n	8000ffc <HAL_GPIO_Init+0x244>
 8000fea:	2304      	movs	r3, #4
 8000fec:	e006      	b.n	8000ffc <HAL_GPIO_Init+0x244>
 8000fee:	2303      	movs	r3, #3
 8000ff0:	e004      	b.n	8000ffc <HAL_GPIO_Init+0x244>
 8000ff2:	2302      	movs	r3, #2
 8000ff4:	e002      	b.n	8000ffc <HAL_GPIO_Init+0x244>
 8000ff6:	2301      	movs	r3, #1
 8000ff8:	e000      	b.n	8000ffc <HAL_GPIO_Init+0x244>
 8000ffa:	2300      	movs	r3, #0
 8000ffc:	697a      	ldr	r2, [r7, #20]
 8000ffe:	f002 0203 	and.w	r2, r2, #3
 8001002:	0092      	lsls	r2, r2, #2
 8001004:	4093      	lsls	r3, r2
 8001006:	693a      	ldr	r2, [r7, #16]
 8001008:	4313      	orrs	r3, r2
 800100a:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 800100c:	4937      	ldr	r1, [pc, #220]	; (80010ec <HAL_GPIO_Init+0x334>)
 800100e:	697b      	ldr	r3, [r7, #20]
 8001010:	089b      	lsrs	r3, r3, #2
 8001012:	3302      	adds	r3, #2
 8001014:	693a      	ldr	r2, [r7, #16]
 8001016:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800101a:	4b3b      	ldr	r3, [pc, #236]	; (8001108 <HAL_GPIO_Init+0x350>)
 800101c:	689b      	ldr	r3, [r3, #8]
 800101e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001020:	68fb      	ldr	r3, [r7, #12]
 8001022:	43db      	mvns	r3, r3
 8001024:	693a      	ldr	r2, [r7, #16]
 8001026:	4013      	ands	r3, r2
 8001028:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 800102a:	683b      	ldr	r3, [r7, #0]
 800102c:	685b      	ldr	r3, [r3, #4]
 800102e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001032:	2b00      	cmp	r3, #0
 8001034:	d003      	beq.n	800103e <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 8001036:	693a      	ldr	r2, [r7, #16]
 8001038:	68fb      	ldr	r3, [r7, #12]
 800103a:	4313      	orrs	r3, r2
 800103c:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 800103e:	4a32      	ldr	r2, [pc, #200]	; (8001108 <HAL_GPIO_Init+0x350>)
 8001040:	693b      	ldr	r3, [r7, #16]
 8001042:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8001044:	4b30      	ldr	r3, [pc, #192]	; (8001108 <HAL_GPIO_Init+0x350>)
 8001046:	68db      	ldr	r3, [r3, #12]
 8001048:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800104a:	68fb      	ldr	r3, [r7, #12]
 800104c:	43db      	mvns	r3, r3
 800104e:	693a      	ldr	r2, [r7, #16]
 8001050:	4013      	ands	r3, r2
 8001052:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001054:	683b      	ldr	r3, [r7, #0]
 8001056:	685b      	ldr	r3, [r3, #4]
 8001058:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800105c:	2b00      	cmp	r3, #0
 800105e:	d003      	beq.n	8001068 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8001060:	693a      	ldr	r2, [r7, #16]
 8001062:	68fb      	ldr	r3, [r7, #12]
 8001064:	4313      	orrs	r3, r2
 8001066:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8001068:	4a27      	ldr	r2, [pc, #156]	; (8001108 <HAL_GPIO_Init+0x350>)
 800106a:	693b      	ldr	r3, [r7, #16]
 800106c:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 800106e:	4b26      	ldr	r3, [pc, #152]	; (8001108 <HAL_GPIO_Init+0x350>)
 8001070:	685b      	ldr	r3, [r3, #4]
 8001072:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001074:	68fb      	ldr	r3, [r7, #12]
 8001076:	43db      	mvns	r3, r3
 8001078:	693a      	ldr	r2, [r7, #16]
 800107a:	4013      	ands	r3, r2
 800107c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 800107e:	683b      	ldr	r3, [r7, #0]
 8001080:	685b      	ldr	r3, [r3, #4]
 8001082:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001086:	2b00      	cmp	r3, #0
 8001088:	d003      	beq.n	8001092 <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 800108a:	693a      	ldr	r2, [r7, #16]
 800108c:	68fb      	ldr	r3, [r7, #12]
 800108e:	4313      	orrs	r3, r2
 8001090:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8001092:	4a1d      	ldr	r2, [pc, #116]	; (8001108 <HAL_GPIO_Init+0x350>)
 8001094:	693b      	ldr	r3, [r7, #16]
 8001096:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8001098:	4b1b      	ldr	r3, [pc, #108]	; (8001108 <HAL_GPIO_Init+0x350>)
 800109a:	681b      	ldr	r3, [r3, #0]
 800109c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800109e:	68fb      	ldr	r3, [r7, #12]
 80010a0:	43db      	mvns	r3, r3
 80010a2:	693a      	ldr	r2, [r7, #16]
 80010a4:	4013      	ands	r3, r2
 80010a6:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80010a8:	683b      	ldr	r3, [r7, #0]
 80010aa:	685b      	ldr	r3, [r3, #4]
 80010ac:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80010b0:	2b00      	cmp	r3, #0
 80010b2:	d003      	beq.n	80010bc <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 80010b4:	693a      	ldr	r2, [r7, #16]
 80010b6:	68fb      	ldr	r3, [r7, #12]
 80010b8:	4313      	orrs	r3, r2
 80010ba:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80010bc:	4a12      	ldr	r2, [pc, #72]	; (8001108 <HAL_GPIO_Init+0x350>)
 80010be:	693b      	ldr	r3, [r7, #16]
 80010c0:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 80010c2:	697b      	ldr	r3, [r7, #20]
 80010c4:	3301      	adds	r3, #1
 80010c6:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80010c8:	683b      	ldr	r3, [r7, #0]
 80010ca:	681a      	ldr	r2, [r3, #0]
 80010cc:	697b      	ldr	r3, [r7, #20]
 80010ce:	fa22 f303 	lsr.w	r3, r2, r3
 80010d2:	2b00      	cmp	r3, #0
 80010d4:	f47f ae78 	bne.w	8000dc8 <HAL_GPIO_Init+0x10>
  }
}
 80010d8:	bf00      	nop
 80010da:	bf00      	nop
 80010dc:	371c      	adds	r7, #28
 80010de:	46bd      	mov	sp, r7
 80010e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010e4:	4770      	bx	lr
 80010e6:	bf00      	nop
 80010e8:	40021000 	.word	0x40021000
 80010ec:	40010000 	.word	0x40010000
 80010f0:	48000400 	.word	0x48000400
 80010f4:	48000800 	.word	0x48000800
 80010f8:	48000c00 	.word	0x48000c00
 80010fc:	48001000 	.word	0x48001000
 8001100:	48001400 	.word	0x48001400
 8001104:	48001800 	.word	0x48001800
 8001108:	40010400 	.word	0x40010400

0800110c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800110c:	b480      	push	{r7}
 800110e:	b083      	sub	sp, #12
 8001110:	af00      	add	r7, sp, #0
 8001112:	6078      	str	r0, [r7, #4]
 8001114:	460b      	mov	r3, r1
 8001116:	807b      	strh	r3, [r7, #2]
 8001118:	4613      	mov	r3, r2
 800111a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800111c:	787b      	ldrb	r3, [r7, #1]
 800111e:	2b00      	cmp	r3, #0
 8001120:	d003      	beq.n	800112a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001122:	887a      	ldrh	r2, [r7, #2]
 8001124:	687b      	ldr	r3, [r7, #4]
 8001126:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001128:	e002      	b.n	8001130 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800112a:	887a      	ldrh	r2, [r7, #2]
 800112c:	687b      	ldr	r3, [r7, #4]
 800112e:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001130:	bf00      	nop
 8001132:	370c      	adds	r7, #12
 8001134:	46bd      	mov	sp, r7
 8001136:	f85d 7b04 	ldr.w	r7, [sp], #4
 800113a:	4770      	bx	lr

0800113c <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 800113c:	b480      	push	{r7}
 800113e:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8001140:	4b04      	ldr	r3, [pc, #16]	; (8001154 <HAL_PWREx_GetVoltageRange+0x18>)
 8001142:	681b      	ldr	r3, [r3, #0]
 8001144:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8001148:	4618      	mov	r0, r3
 800114a:	46bd      	mov	sp, r7
 800114c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001150:	4770      	bx	lr
 8001152:	bf00      	nop
 8001154:	40007000 	.word	0x40007000

08001158 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8001158:	b480      	push	{r7}
 800115a:	b085      	sub	sp, #20
 800115c:	af00      	add	r7, sp, #0
 800115e:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001160:	687b      	ldr	r3, [r7, #4]
 8001162:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001166:	d130      	bne.n	80011ca <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8001168:	4b23      	ldr	r3, [pc, #140]	; (80011f8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800116a:	681b      	ldr	r3, [r3, #0]
 800116c:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8001170:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001174:	d038      	beq.n	80011e8 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8001176:	4b20      	ldr	r3, [pc, #128]	; (80011f8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001178:	681b      	ldr	r3, [r3, #0]
 800117a:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800117e:	4a1e      	ldr	r2, [pc, #120]	; (80011f8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001180:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001184:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8001186:	4b1d      	ldr	r3, [pc, #116]	; (80011fc <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8001188:	681b      	ldr	r3, [r3, #0]
 800118a:	2232      	movs	r2, #50	; 0x32
 800118c:	fb02 f303 	mul.w	r3, r2, r3
 8001190:	4a1b      	ldr	r2, [pc, #108]	; (8001200 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8001192:	fba2 2303 	umull	r2, r3, r2, r3
 8001196:	0c9b      	lsrs	r3, r3, #18
 8001198:	3301      	adds	r3, #1
 800119a:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800119c:	e002      	b.n	80011a4 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 800119e:	68fb      	ldr	r3, [r7, #12]
 80011a0:	3b01      	subs	r3, #1
 80011a2:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80011a4:	4b14      	ldr	r3, [pc, #80]	; (80011f8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80011a6:	695b      	ldr	r3, [r3, #20]
 80011a8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80011ac:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80011b0:	d102      	bne.n	80011b8 <HAL_PWREx_ControlVoltageScaling+0x60>
 80011b2:	68fb      	ldr	r3, [r7, #12]
 80011b4:	2b00      	cmp	r3, #0
 80011b6:	d1f2      	bne.n	800119e <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80011b8:	4b0f      	ldr	r3, [pc, #60]	; (80011f8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80011ba:	695b      	ldr	r3, [r3, #20]
 80011bc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80011c0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80011c4:	d110      	bne.n	80011e8 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 80011c6:	2303      	movs	r3, #3
 80011c8:	e00f      	b.n	80011ea <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 80011ca:	4b0b      	ldr	r3, [pc, #44]	; (80011f8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80011cc:	681b      	ldr	r3, [r3, #0]
 80011ce:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80011d2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80011d6:	d007      	beq.n	80011e8 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 80011d8:	4b07      	ldr	r3, [pc, #28]	; (80011f8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80011da:	681b      	ldr	r3, [r3, #0]
 80011dc:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80011e0:	4a05      	ldr	r2, [pc, #20]	; (80011f8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80011e2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80011e6:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 80011e8:	2300      	movs	r3, #0
}
 80011ea:	4618      	mov	r0, r3
 80011ec:	3714      	adds	r7, #20
 80011ee:	46bd      	mov	sp, r7
 80011f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011f4:	4770      	bx	lr
 80011f6:	bf00      	nop
 80011f8:	40007000 	.word	0x40007000
 80011fc:	20000000 	.word	0x20000000
 8001200:	431bde83 	.word	0x431bde83

08001204 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001204:	b580      	push	{r7, lr}
 8001206:	b088      	sub	sp, #32
 8001208:	af00      	add	r7, sp, #0
 800120a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800120c:	687b      	ldr	r3, [r7, #4]
 800120e:	2b00      	cmp	r3, #0
 8001210:	d101      	bne.n	8001216 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001212:	2301      	movs	r3, #1
 8001214:	e3d4      	b.n	80019c0 <HAL_RCC_OscConfig+0x7bc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001216:	4ba1      	ldr	r3, [pc, #644]	; (800149c <HAL_RCC_OscConfig+0x298>)
 8001218:	689b      	ldr	r3, [r3, #8]
 800121a:	f003 030c 	and.w	r3, r3, #12
 800121e:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001220:	4b9e      	ldr	r3, [pc, #632]	; (800149c <HAL_RCC_OscConfig+0x298>)
 8001222:	68db      	ldr	r3, [r3, #12]
 8001224:	f003 0303 	and.w	r3, r3, #3
 8001228:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 800122a:	687b      	ldr	r3, [r7, #4]
 800122c:	681b      	ldr	r3, [r3, #0]
 800122e:	f003 0310 	and.w	r3, r3, #16
 8001232:	2b00      	cmp	r3, #0
 8001234:	f000 80e4 	beq.w	8001400 <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8001238:	69bb      	ldr	r3, [r7, #24]
 800123a:	2b00      	cmp	r3, #0
 800123c:	d007      	beq.n	800124e <HAL_RCC_OscConfig+0x4a>
 800123e:	69bb      	ldr	r3, [r7, #24]
 8001240:	2b0c      	cmp	r3, #12
 8001242:	f040 808b 	bne.w	800135c <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8001246:	697b      	ldr	r3, [r7, #20]
 8001248:	2b01      	cmp	r3, #1
 800124a:	f040 8087 	bne.w	800135c <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800124e:	4b93      	ldr	r3, [pc, #588]	; (800149c <HAL_RCC_OscConfig+0x298>)
 8001250:	681b      	ldr	r3, [r3, #0]
 8001252:	f003 0302 	and.w	r3, r3, #2
 8001256:	2b00      	cmp	r3, #0
 8001258:	d005      	beq.n	8001266 <HAL_RCC_OscConfig+0x62>
 800125a:	687b      	ldr	r3, [r7, #4]
 800125c:	699b      	ldr	r3, [r3, #24]
 800125e:	2b00      	cmp	r3, #0
 8001260:	d101      	bne.n	8001266 <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 8001262:	2301      	movs	r3, #1
 8001264:	e3ac      	b.n	80019c0 <HAL_RCC_OscConfig+0x7bc>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8001266:	687b      	ldr	r3, [r7, #4]
 8001268:	6a1a      	ldr	r2, [r3, #32]
 800126a:	4b8c      	ldr	r3, [pc, #560]	; (800149c <HAL_RCC_OscConfig+0x298>)
 800126c:	681b      	ldr	r3, [r3, #0]
 800126e:	f003 0308 	and.w	r3, r3, #8
 8001272:	2b00      	cmp	r3, #0
 8001274:	d004      	beq.n	8001280 <HAL_RCC_OscConfig+0x7c>
 8001276:	4b89      	ldr	r3, [pc, #548]	; (800149c <HAL_RCC_OscConfig+0x298>)
 8001278:	681b      	ldr	r3, [r3, #0]
 800127a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800127e:	e005      	b.n	800128c <HAL_RCC_OscConfig+0x88>
 8001280:	4b86      	ldr	r3, [pc, #536]	; (800149c <HAL_RCC_OscConfig+0x298>)
 8001282:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001286:	091b      	lsrs	r3, r3, #4
 8001288:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800128c:	4293      	cmp	r3, r2
 800128e:	d223      	bcs.n	80012d8 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001290:	687b      	ldr	r3, [r7, #4]
 8001292:	6a1b      	ldr	r3, [r3, #32]
 8001294:	4618      	mov	r0, r3
 8001296:	f000 fd41 	bl	8001d1c <RCC_SetFlashLatencyFromMSIRange>
 800129a:	4603      	mov	r3, r0
 800129c:	2b00      	cmp	r3, #0
 800129e:	d001      	beq.n	80012a4 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 80012a0:	2301      	movs	r3, #1
 80012a2:	e38d      	b.n	80019c0 <HAL_RCC_OscConfig+0x7bc>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80012a4:	4b7d      	ldr	r3, [pc, #500]	; (800149c <HAL_RCC_OscConfig+0x298>)
 80012a6:	681b      	ldr	r3, [r3, #0]
 80012a8:	4a7c      	ldr	r2, [pc, #496]	; (800149c <HAL_RCC_OscConfig+0x298>)
 80012aa:	f043 0308 	orr.w	r3, r3, #8
 80012ae:	6013      	str	r3, [r2, #0]
 80012b0:	4b7a      	ldr	r3, [pc, #488]	; (800149c <HAL_RCC_OscConfig+0x298>)
 80012b2:	681b      	ldr	r3, [r3, #0]
 80012b4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80012b8:	687b      	ldr	r3, [r7, #4]
 80012ba:	6a1b      	ldr	r3, [r3, #32]
 80012bc:	4977      	ldr	r1, [pc, #476]	; (800149c <HAL_RCC_OscConfig+0x298>)
 80012be:	4313      	orrs	r3, r2
 80012c0:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80012c2:	4b76      	ldr	r3, [pc, #472]	; (800149c <HAL_RCC_OscConfig+0x298>)
 80012c4:	685b      	ldr	r3, [r3, #4]
 80012c6:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80012ca:	687b      	ldr	r3, [r7, #4]
 80012cc:	69db      	ldr	r3, [r3, #28]
 80012ce:	021b      	lsls	r3, r3, #8
 80012d0:	4972      	ldr	r1, [pc, #456]	; (800149c <HAL_RCC_OscConfig+0x298>)
 80012d2:	4313      	orrs	r3, r2
 80012d4:	604b      	str	r3, [r1, #4]
 80012d6:	e025      	b.n	8001324 <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80012d8:	4b70      	ldr	r3, [pc, #448]	; (800149c <HAL_RCC_OscConfig+0x298>)
 80012da:	681b      	ldr	r3, [r3, #0]
 80012dc:	4a6f      	ldr	r2, [pc, #444]	; (800149c <HAL_RCC_OscConfig+0x298>)
 80012de:	f043 0308 	orr.w	r3, r3, #8
 80012e2:	6013      	str	r3, [r2, #0]
 80012e4:	4b6d      	ldr	r3, [pc, #436]	; (800149c <HAL_RCC_OscConfig+0x298>)
 80012e6:	681b      	ldr	r3, [r3, #0]
 80012e8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80012ec:	687b      	ldr	r3, [r7, #4]
 80012ee:	6a1b      	ldr	r3, [r3, #32]
 80012f0:	496a      	ldr	r1, [pc, #424]	; (800149c <HAL_RCC_OscConfig+0x298>)
 80012f2:	4313      	orrs	r3, r2
 80012f4:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80012f6:	4b69      	ldr	r3, [pc, #420]	; (800149c <HAL_RCC_OscConfig+0x298>)
 80012f8:	685b      	ldr	r3, [r3, #4]
 80012fa:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80012fe:	687b      	ldr	r3, [r7, #4]
 8001300:	69db      	ldr	r3, [r3, #28]
 8001302:	021b      	lsls	r3, r3, #8
 8001304:	4965      	ldr	r1, [pc, #404]	; (800149c <HAL_RCC_OscConfig+0x298>)
 8001306:	4313      	orrs	r3, r2
 8001308:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 800130a:	69bb      	ldr	r3, [r7, #24]
 800130c:	2b00      	cmp	r3, #0
 800130e:	d109      	bne.n	8001324 <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001310:	687b      	ldr	r3, [r7, #4]
 8001312:	6a1b      	ldr	r3, [r3, #32]
 8001314:	4618      	mov	r0, r3
 8001316:	f000 fd01 	bl	8001d1c <RCC_SetFlashLatencyFromMSIRange>
 800131a:	4603      	mov	r3, r0
 800131c:	2b00      	cmp	r3, #0
 800131e:	d001      	beq.n	8001324 <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 8001320:	2301      	movs	r3, #1
 8001322:	e34d      	b.n	80019c0 <HAL_RCC_OscConfig+0x7bc>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8001324:	f000 fc36 	bl	8001b94 <HAL_RCC_GetSysClockFreq>
 8001328:	4602      	mov	r2, r0
 800132a:	4b5c      	ldr	r3, [pc, #368]	; (800149c <HAL_RCC_OscConfig+0x298>)
 800132c:	689b      	ldr	r3, [r3, #8]
 800132e:	091b      	lsrs	r3, r3, #4
 8001330:	f003 030f 	and.w	r3, r3, #15
 8001334:	495a      	ldr	r1, [pc, #360]	; (80014a0 <HAL_RCC_OscConfig+0x29c>)
 8001336:	5ccb      	ldrb	r3, [r1, r3]
 8001338:	f003 031f 	and.w	r3, r3, #31
 800133c:	fa22 f303 	lsr.w	r3, r2, r3
 8001340:	4a58      	ldr	r2, [pc, #352]	; (80014a4 <HAL_RCC_OscConfig+0x2a0>)
 8001342:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8001344:	4b58      	ldr	r3, [pc, #352]	; (80014a8 <HAL_RCC_OscConfig+0x2a4>)
 8001346:	681b      	ldr	r3, [r3, #0]
 8001348:	4618      	mov	r0, r3
 800134a:	f7ff fbcf 	bl	8000aec <HAL_InitTick>
 800134e:	4603      	mov	r3, r0
 8001350:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8001352:	7bfb      	ldrb	r3, [r7, #15]
 8001354:	2b00      	cmp	r3, #0
 8001356:	d052      	beq.n	80013fe <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 8001358:	7bfb      	ldrb	r3, [r7, #15]
 800135a:	e331      	b.n	80019c0 <HAL_RCC_OscConfig+0x7bc>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 800135c:	687b      	ldr	r3, [r7, #4]
 800135e:	699b      	ldr	r3, [r3, #24]
 8001360:	2b00      	cmp	r3, #0
 8001362:	d032      	beq.n	80013ca <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8001364:	4b4d      	ldr	r3, [pc, #308]	; (800149c <HAL_RCC_OscConfig+0x298>)
 8001366:	681b      	ldr	r3, [r3, #0]
 8001368:	4a4c      	ldr	r2, [pc, #304]	; (800149c <HAL_RCC_OscConfig+0x298>)
 800136a:	f043 0301 	orr.w	r3, r3, #1
 800136e:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001370:	f7ff fc0c 	bl	8000b8c <HAL_GetTick>
 8001374:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001376:	e008      	b.n	800138a <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001378:	f7ff fc08 	bl	8000b8c <HAL_GetTick>
 800137c:	4602      	mov	r2, r0
 800137e:	693b      	ldr	r3, [r7, #16]
 8001380:	1ad3      	subs	r3, r2, r3
 8001382:	2b02      	cmp	r3, #2
 8001384:	d901      	bls.n	800138a <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 8001386:	2303      	movs	r3, #3
 8001388:	e31a      	b.n	80019c0 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800138a:	4b44      	ldr	r3, [pc, #272]	; (800149c <HAL_RCC_OscConfig+0x298>)
 800138c:	681b      	ldr	r3, [r3, #0]
 800138e:	f003 0302 	and.w	r3, r3, #2
 8001392:	2b00      	cmp	r3, #0
 8001394:	d0f0      	beq.n	8001378 <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001396:	4b41      	ldr	r3, [pc, #260]	; (800149c <HAL_RCC_OscConfig+0x298>)
 8001398:	681b      	ldr	r3, [r3, #0]
 800139a:	4a40      	ldr	r2, [pc, #256]	; (800149c <HAL_RCC_OscConfig+0x298>)
 800139c:	f043 0308 	orr.w	r3, r3, #8
 80013a0:	6013      	str	r3, [r2, #0]
 80013a2:	4b3e      	ldr	r3, [pc, #248]	; (800149c <HAL_RCC_OscConfig+0x298>)
 80013a4:	681b      	ldr	r3, [r3, #0]
 80013a6:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80013aa:	687b      	ldr	r3, [r7, #4]
 80013ac:	6a1b      	ldr	r3, [r3, #32]
 80013ae:	493b      	ldr	r1, [pc, #236]	; (800149c <HAL_RCC_OscConfig+0x298>)
 80013b0:	4313      	orrs	r3, r2
 80013b2:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80013b4:	4b39      	ldr	r3, [pc, #228]	; (800149c <HAL_RCC_OscConfig+0x298>)
 80013b6:	685b      	ldr	r3, [r3, #4]
 80013b8:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80013bc:	687b      	ldr	r3, [r7, #4]
 80013be:	69db      	ldr	r3, [r3, #28]
 80013c0:	021b      	lsls	r3, r3, #8
 80013c2:	4936      	ldr	r1, [pc, #216]	; (800149c <HAL_RCC_OscConfig+0x298>)
 80013c4:	4313      	orrs	r3, r2
 80013c6:	604b      	str	r3, [r1, #4]
 80013c8:	e01a      	b.n	8001400 <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 80013ca:	4b34      	ldr	r3, [pc, #208]	; (800149c <HAL_RCC_OscConfig+0x298>)
 80013cc:	681b      	ldr	r3, [r3, #0]
 80013ce:	4a33      	ldr	r2, [pc, #204]	; (800149c <HAL_RCC_OscConfig+0x298>)
 80013d0:	f023 0301 	bic.w	r3, r3, #1
 80013d4:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80013d6:	f7ff fbd9 	bl	8000b8c <HAL_GetTick>
 80013da:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80013dc:	e008      	b.n	80013f0 <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80013de:	f7ff fbd5 	bl	8000b8c <HAL_GetTick>
 80013e2:	4602      	mov	r2, r0
 80013e4:	693b      	ldr	r3, [r7, #16]
 80013e6:	1ad3      	subs	r3, r2, r3
 80013e8:	2b02      	cmp	r3, #2
 80013ea:	d901      	bls.n	80013f0 <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 80013ec:	2303      	movs	r3, #3
 80013ee:	e2e7      	b.n	80019c0 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80013f0:	4b2a      	ldr	r3, [pc, #168]	; (800149c <HAL_RCC_OscConfig+0x298>)
 80013f2:	681b      	ldr	r3, [r3, #0]
 80013f4:	f003 0302 	and.w	r3, r3, #2
 80013f8:	2b00      	cmp	r3, #0
 80013fa:	d1f0      	bne.n	80013de <HAL_RCC_OscConfig+0x1da>
 80013fc:	e000      	b.n	8001400 <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80013fe:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001400:	687b      	ldr	r3, [r7, #4]
 8001402:	681b      	ldr	r3, [r3, #0]
 8001404:	f003 0301 	and.w	r3, r3, #1
 8001408:	2b00      	cmp	r3, #0
 800140a:	d074      	beq.n	80014f6 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 800140c:	69bb      	ldr	r3, [r7, #24]
 800140e:	2b08      	cmp	r3, #8
 8001410:	d005      	beq.n	800141e <HAL_RCC_OscConfig+0x21a>
 8001412:	69bb      	ldr	r3, [r7, #24]
 8001414:	2b0c      	cmp	r3, #12
 8001416:	d10e      	bne.n	8001436 <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8001418:	697b      	ldr	r3, [r7, #20]
 800141a:	2b03      	cmp	r3, #3
 800141c:	d10b      	bne.n	8001436 <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800141e:	4b1f      	ldr	r3, [pc, #124]	; (800149c <HAL_RCC_OscConfig+0x298>)
 8001420:	681b      	ldr	r3, [r3, #0]
 8001422:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001426:	2b00      	cmp	r3, #0
 8001428:	d064      	beq.n	80014f4 <HAL_RCC_OscConfig+0x2f0>
 800142a:	687b      	ldr	r3, [r7, #4]
 800142c:	685b      	ldr	r3, [r3, #4]
 800142e:	2b00      	cmp	r3, #0
 8001430:	d160      	bne.n	80014f4 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8001432:	2301      	movs	r3, #1
 8001434:	e2c4      	b.n	80019c0 <HAL_RCC_OscConfig+0x7bc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001436:	687b      	ldr	r3, [r7, #4]
 8001438:	685b      	ldr	r3, [r3, #4]
 800143a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800143e:	d106      	bne.n	800144e <HAL_RCC_OscConfig+0x24a>
 8001440:	4b16      	ldr	r3, [pc, #88]	; (800149c <HAL_RCC_OscConfig+0x298>)
 8001442:	681b      	ldr	r3, [r3, #0]
 8001444:	4a15      	ldr	r2, [pc, #84]	; (800149c <HAL_RCC_OscConfig+0x298>)
 8001446:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800144a:	6013      	str	r3, [r2, #0]
 800144c:	e01d      	b.n	800148a <HAL_RCC_OscConfig+0x286>
 800144e:	687b      	ldr	r3, [r7, #4]
 8001450:	685b      	ldr	r3, [r3, #4]
 8001452:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001456:	d10c      	bne.n	8001472 <HAL_RCC_OscConfig+0x26e>
 8001458:	4b10      	ldr	r3, [pc, #64]	; (800149c <HAL_RCC_OscConfig+0x298>)
 800145a:	681b      	ldr	r3, [r3, #0]
 800145c:	4a0f      	ldr	r2, [pc, #60]	; (800149c <HAL_RCC_OscConfig+0x298>)
 800145e:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001462:	6013      	str	r3, [r2, #0]
 8001464:	4b0d      	ldr	r3, [pc, #52]	; (800149c <HAL_RCC_OscConfig+0x298>)
 8001466:	681b      	ldr	r3, [r3, #0]
 8001468:	4a0c      	ldr	r2, [pc, #48]	; (800149c <HAL_RCC_OscConfig+0x298>)
 800146a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800146e:	6013      	str	r3, [r2, #0]
 8001470:	e00b      	b.n	800148a <HAL_RCC_OscConfig+0x286>
 8001472:	4b0a      	ldr	r3, [pc, #40]	; (800149c <HAL_RCC_OscConfig+0x298>)
 8001474:	681b      	ldr	r3, [r3, #0]
 8001476:	4a09      	ldr	r2, [pc, #36]	; (800149c <HAL_RCC_OscConfig+0x298>)
 8001478:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800147c:	6013      	str	r3, [r2, #0]
 800147e:	4b07      	ldr	r3, [pc, #28]	; (800149c <HAL_RCC_OscConfig+0x298>)
 8001480:	681b      	ldr	r3, [r3, #0]
 8001482:	4a06      	ldr	r2, [pc, #24]	; (800149c <HAL_RCC_OscConfig+0x298>)
 8001484:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001488:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800148a:	687b      	ldr	r3, [r7, #4]
 800148c:	685b      	ldr	r3, [r3, #4]
 800148e:	2b00      	cmp	r3, #0
 8001490:	d01c      	beq.n	80014cc <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001492:	f7ff fb7b 	bl	8000b8c <HAL_GetTick>
 8001496:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001498:	e011      	b.n	80014be <HAL_RCC_OscConfig+0x2ba>
 800149a:	bf00      	nop
 800149c:	40021000 	.word	0x40021000
 80014a0:	08003d30 	.word	0x08003d30
 80014a4:	20000000 	.word	0x20000000
 80014a8:	20000004 	.word	0x20000004
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80014ac:	f7ff fb6e 	bl	8000b8c <HAL_GetTick>
 80014b0:	4602      	mov	r2, r0
 80014b2:	693b      	ldr	r3, [r7, #16]
 80014b4:	1ad3      	subs	r3, r2, r3
 80014b6:	2b64      	cmp	r3, #100	; 0x64
 80014b8:	d901      	bls.n	80014be <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 80014ba:	2303      	movs	r3, #3
 80014bc:	e280      	b.n	80019c0 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80014be:	4baf      	ldr	r3, [pc, #700]	; (800177c <HAL_RCC_OscConfig+0x578>)
 80014c0:	681b      	ldr	r3, [r3, #0]
 80014c2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80014c6:	2b00      	cmp	r3, #0
 80014c8:	d0f0      	beq.n	80014ac <HAL_RCC_OscConfig+0x2a8>
 80014ca:	e014      	b.n	80014f6 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80014cc:	f7ff fb5e 	bl	8000b8c <HAL_GetTick>
 80014d0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80014d2:	e008      	b.n	80014e6 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80014d4:	f7ff fb5a 	bl	8000b8c <HAL_GetTick>
 80014d8:	4602      	mov	r2, r0
 80014da:	693b      	ldr	r3, [r7, #16]
 80014dc:	1ad3      	subs	r3, r2, r3
 80014de:	2b64      	cmp	r3, #100	; 0x64
 80014e0:	d901      	bls.n	80014e6 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 80014e2:	2303      	movs	r3, #3
 80014e4:	e26c      	b.n	80019c0 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80014e6:	4ba5      	ldr	r3, [pc, #660]	; (800177c <HAL_RCC_OscConfig+0x578>)
 80014e8:	681b      	ldr	r3, [r3, #0]
 80014ea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80014ee:	2b00      	cmp	r3, #0
 80014f0:	d1f0      	bne.n	80014d4 <HAL_RCC_OscConfig+0x2d0>
 80014f2:	e000      	b.n	80014f6 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80014f4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80014f6:	687b      	ldr	r3, [r7, #4]
 80014f8:	681b      	ldr	r3, [r3, #0]
 80014fa:	f003 0302 	and.w	r3, r3, #2
 80014fe:	2b00      	cmp	r3, #0
 8001500:	d060      	beq.n	80015c4 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8001502:	69bb      	ldr	r3, [r7, #24]
 8001504:	2b04      	cmp	r3, #4
 8001506:	d005      	beq.n	8001514 <HAL_RCC_OscConfig+0x310>
 8001508:	69bb      	ldr	r3, [r7, #24]
 800150a:	2b0c      	cmp	r3, #12
 800150c:	d119      	bne.n	8001542 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 800150e:	697b      	ldr	r3, [r7, #20]
 8001510:	2b02      	cmp	r3, #2
 8001512:	d116      	bne.n	8001542 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001514:	4b99      	ldr	r3, [pc, #612]	; (800177c <HAL_RCC_OscConfig+0x578>)
 8001516:	681b      	ldr	r3, [r3, #0]
 8001518:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800151c:	2b00      	cmp	r3, #0
 800151e:	d005      	beq.n	800152c <HAL_RCC_OscConfig+0x328>
 8001520:	687b      	ldr	r3, [r7, #4]
 8001522:	68db      	ldr	r3, [r3, #12]
 8001524:	2b00      	cmp	r3, #0
 8001526:	d101      	bne.n	800152c <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8001528:	2301      	movs	r3, #1
 800152a:	e249      	b.n	80019c0 <HAL_RCC_OscConfig+0x7bc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800152c:	4b93      	ldr	r3, [pc, #588]	; (800177c <HAL_RCC_OscConfig+0x578>)
 800152e:	685b      	ldr	r3, [r3, #4]
 8001530:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8001534:	687b      	ldr	r3, [r7, #4]
 8001536:	691b      	ldr	r3, [r3, #16]
 8001538:	061b      	lsls	r3, r3, #24
 800153a:	4990      	ldr	r1, [pc, #576]	; (800177c <HAL_RCC_OscConfig+0x578>)
 800153c:	4313      	orrs	r3, r2
 800153e:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001540:	e040      	b.n	80015c4 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001542:	687b      	ldr	r3, [r7, #4]
 8001544:	68db      	ldr	r3, [r3, #12]
 8001546:	2b00      	cmp	r3, #0
 8001548:	d023      	beq.n	8001592 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800154a:	4b8c      	ldr	r3, [pc, #560]	; (800177c <HAL_RCC_OscConfig+0x578>)
 800154c:	681b      	ldr	r3, [r3, #0]
 800154e:	4a8b      	ldr	r2, [pc, #556]	; (800177c <HAL_RCC_OscConfig+0x578>)
 8001550:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001554:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001556:	f7ff fb19 	bl	8000b8c <HAL_GetTick>
 800155a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800155c:	e008      	b.n	8001570 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800155e:	f7ff fb15 	bl	8000b8c <HAL_GetTick>
 8001562:	4602      	mov	r2, r0
 8001564:	693b      	ldr	r3, [r7, #16]
 8001566:	1ad3      	subs	r3, r2, r3
 8001568:	2b02      	cmp	r3, #2
 800156a:	d901      	bls.n	8001570 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 800156c:	2303      	movs	r3, #3
 800156e:	e227      	b.n	80019c0 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001570:	4b82      	ldr	r3, [pc, #520]	; (800177c <HAL_RCC_OscConfig+0x578>)
 8001572:	681b      	ldr	r3, [r3, #0]
 8001574:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001578:	2b00      	cmp	r3, #0
 800157a:	d0f0      	beq.n	800155e <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800157c:	4b7f      	ldr	r3, [pc, #508]	; (800177c <HAL_RCC_OscConfig+0x578>)
 800157e:	685b      	ldr	r3, [r3, #4]
 8001580:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8001584:	687b      	ldr	r3, [r7, #4]
 8001586:	691b      	ldr	r3, [r3, #16]
 8001588:	061b      	lsls	r3, r3, #24
 800158a:	497c      	ldr	r1, [pc, #496]	; (800177c <HAL_RCC_OscConfig+0x578>)
 800158c:	4313      	orrs	r3, r2
 800158e:	604b      	str	r3, [r1, #4]
 8001590:	e018      	b.n	80015c4 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001592:	4b7a      	ldr	r3, [pc, #488]	; (800177c <HAL_RCC_OscConfig+0x578>)
 8001594:	681b      	ldr	r3, [r3, #0]
 8001596:	4a79      	ldr	r2, [pc, #484]	; (800177c <HAL_RCC_OscConfig+0x578>)
 8001598:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800159c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800159e:	f7ff faf5 	bl	8000b8c <HAL_GetTick>
 80015a2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80015a4:	e008      	b.n	80015b8 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80015a6:	f7ff faf1 	bl	8000b8c <HAL_GetTick>
 80015aa:	4602      	mov	r2, r0
 80015ac:	693b      	ldr	r3, [r7, #16]
 80015ae:	1ad3      	subs	r3, r2, r3
 80015b0:	2b02      	cmp	r3, #2
 80015b2:	d901      	bls.n	80015b8 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 80015b4:	2303      	movs	r3, #3
 80015b6:	e203      	b.n	80019c0 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80015b8:	4b70      	ldr	r3, [pc, #448]	; (800177c <HAL_RCC_OscConfig+0x578>)
 80015ba:	681b      	ldr	r3, [r3, #0]
 80015bc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80015c0:	2b00      	cmp	r3, #0
 80015c2:	d1f0      	bne.n	80015a6 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80015c4:	687b      	ldr	r3, [r7, #4]
 80015c6:	681b      	ldr	r3, [r3, #0]
 80015c8:	f003 0308 	and.w	r3, r3, #8
 80015cc:	2b00      	cmp	r3, #0
 80015ce:	d03c      	beq.n	800164a <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80015d0:	687b      	ldr	r3, [r7, #4]
 80015d2:	695b      	ldr	r3, [r3, #20]
 80015d4:	2b00      	cmp	r3, #0
 80015d6:	d01c      	beq.n	8001612 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80015d8:	4b68      	ldr	r3, [pc, #416]	; (800177c <HAL_RCC_OscConfig+0x578>)
 80015da:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80015de:	4a67      	ldr	r2, [pc, #412]	; (800177c <HAL_RCC_OscConfig+0x578>)
 80015e0:	f043 0301 	orr.w	r3, r3, #1
 80015e4:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80015e8:	f7ff fad0 	bl	8000b8c <HAL_GetTick>
 80015ec:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80015ee:	e008      	b.n	8001602 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80015f0:	f7ff facc 	bl	8000b8c <HAL_GetTick>
 80015f4:	4602      	mov	r2, r0
 80015f6:	693b      	ldr	r3, [r7, #16]
 80015f8:	1ad3      	subs	r3, r2, r3
 80015fa:	2b02      	cmp	r3, #2
 80015fc:	d901      	bls.n	8001602 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 80015fe:	2303      	movs	r3, #3
 8001600:	e1de      	b.n	80019c0 <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001602:	4b5e      	ldr	r3, [pc, #376]	; (800177c <HAL_RCC_OscConfig+0x578>)
 8001604:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001608:	f003 0302 	and.w	r3, r3, #2
 800160c:	2b00      	cmp	r3, #0
 800160e:	d0ef      	beq.n	80015f0 <HAL_RCC_OscConfig+0x3ec>
 8001610:	e01b      	b.n	800164a <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001612:	4b5a      	ldr	r3, [pc, #360]	; (800177c <HAL_RCC_OscConfig+0x578>)
 8001614:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001618:	4a58      	ldr	r2, [pc, #352]	; (800177c <HAL_RCC_OscConfig+0x578>)
 800161a:	f023 0301 	bic.w	r3, r3, #1
 800161e:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001622:	f7ff fab3 	bl	8000b8c <HAL_GetTick>
 8001626:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001628:	e008      	b.n	800163c <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800162a:	f7ff faaf 	bl	8000b8c <HAL_GetTick>
 800162e:	4602      	mov	r2, r0
 8001630:	693b      	ldr	r3, [r7, #16]
 8001632:	1ad3      	subs	r3, r2, r3
 8001634:	2b02      	cmp	r3, #2
 8001636:	d901      	bls.n	800163c <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8001638:	2303      	movs	r3, #3
 800163a:	e1c1      	b.n	80019c0 <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800163c:	4b4f      	ldr	r3, [pc, #316]	; (800177c <HAL_RCC_OscConfig+0x578>)
 800163e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001642:	f003 0302 	and.w	r3, r3, #2
 8001646:	2b00      	cmp	r3, #0
 8001648:	d1ef      	bne.n	800162a <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800164a:	687b      	ldr	r3, [r7, #4]
 800164c:	681b      	ldr	r3, [r3, #0]
 800164e:	f003 0304 	and.w	r3, r3, #4
 8001652:	2b00      	cmp	r3, #0
 8001654:	f000 80a6 	beq.w	80017a4 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001658:	2300      	movs	r3, #0
 800165a:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 800165c:	4b47      	ldr	r3, [pc, #284]	; (800177c <HAL_RCC_OscConfig+0x578>)
 800165e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001660:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001664:	2b00      	cmp	r3, #0
 8001666:	d10d      	bne.n	8001684 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001668:	4b44      	ldr	r3, [pc, #272]	; (800177c <HAL_RCC_OscConfig+0x578>)
 800166a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800166c:	4a43      	ldr	r2, [pc, #268]	; (800177c <HAL_RCC_OscConfig+0x578>)
 800166e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001672:	6593      	str	r3, [r2, #88]	; 0x58
 8001674:	4b41      	ldr	r3, [pc, #260]	; (800177c <HAL_RCC_OscConfig+0x578>)
 8001676:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001678:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800167c:	60bb      	str	r3, [r7, #8]
 800167e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001680:	2301      	movs	r3, #1
 8001682:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001684:	4b3e      	ldr	r3, [pc, #248]	; (8001780 <HAL_RCC_OscConfig+0x57c>)
 8001686:	681b      	ldr	r3, [r3, #0]
 8001688:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800168c:	2b00      	cmp	r3, #0
 800168e:	d118      	bne.n	80016c2 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001690:	4b3b      	ldr	r3, [pc, #236]	; (8001780 <HAL_RCC_OscConfig+0x57c>)
 8001692:	681b      	ldr	r3, [r3, #0]
 8001694:	4a3a      	ldr	r2, [pc, #232]	; (8001780 <HAL_RCC_OscConfig+0x57c>)
 8001696:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800169a:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800169c:	f7ff fa76 	bl	8000b8c <HAL_GetTick>
 80016a0:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80016a2:	e008      	b.n	80016b6 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80016a4:	f7ff fa72 	bl	8000b8c <HAL_GetTick>
 80016a8:	4602      	mov	r2, r0
 80016aa:	693b      	ldr	r3, [r7, #16]
 80016ac:	1ad3      	subs	r3, r2, r3
 80016ae:	2b02      	cmp	r3, #2
 80016b0:	d901      	bls.n	80016b6 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 80016b2:	2303      	movs	r3, #3
 80016b4:	e184      	b.n	80019c0 <HAL_RCC_OscConfig+0x7bc>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80016b6:	4b32      	ldr	r3, [pc, #200]	; (8001780 <HAL_RCC_OscConfig+0x57c>)
 80016b8:	681b      	ldr	r3, [r3, #0]
 80016ba:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80016be:	2b00      	cmp	r3, #0
 80016c0:	d0f0      	beq.n	80016a4 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80016c2:	687b      	ldr	r3, [r7, #4]
 80016c4:	689b      	ldr	r3, [r3, #8]
 80016c6:	2b01      	cmp	r3, #1
 80016c8:	d108      	bne.n	80016dc <HAL_RCC_OscConfig+0x4d8>
 80016ca:	4b2c      	ldr	r3, [pc, #176]	; (800177c <HAL_RCC_OscConfig+0x578>)
 80016cc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80016d0:	4a2a      	ldr	r2, [pc, #168]	; (800177c <HAL_RCC_OscConfig+0x578>)
 80016d2:	f043 0301 	orr.w	r3, r3, #1
 80016d6:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80016da:	e024      	b.n	8001726 <HAL_RCC_OscConfig+0x522>
 80016dc:	687b      	ldr	r3, [r7, #4]
 80016de:	689b      	ldr	r3, [r3, #8]
 80016e0:	2b05      	cmp	r3, #5
 80016e2:	d110      	bne.n	8001706 <HAL_RCC_OscConfig+0x502>
 80016e4:	4b25      	ldr	r3, [pc, #148]	; (800177c <HAL_RCC_OscConfig+0x578>)
 80016e6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80016ea:	4a24      	ldr	r2, [pc, #144]	; (800177c <HAL_RCC_OscConfig+0x578>)
 80016ec:	f043 0304 	orr.w	r3, r3, #4
 80016f0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80016f4:	4b21      	ldr	r3, [pc, #132]	; (800177c <HAL_RCC_OscConfig+0x578>)
 80016f6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80016fa:	4a20      	ldr	r2, [pc, #128]	; (800177c <HAL_RCC_OscConfig+0x578>)
 80016fc:	f043 0301 	orr.w	r3, r3, #1
 8001700:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001704:	e00f      	b.n	8001726 <HAL_RCC_OscConfig+0x522>
 8001706:	4b1d      	ldr	r3, [pc, #116]	; (800177c <HAL_RCC_OscConfig+0x578>)
 8001708:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800170c:	4a1b      	ldr	r2, [pc, #108]	; (800177c <HAL_RCC_OscConfig+0x578>)
 800170e:	f023 0301 	bic.w	r3, r3, #1
 8001712:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001716:	4b19      	ldr	r3, [pc, #100]	; (800177c <HAL_RCC_OscConfig+0x578>)
 8001718:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800171c:	4a17      	ldr	r2, [pc, #92]	; (800177c <HAL_RCC_OscConfig+0x578>)
 800171e:	f023 0304 	bic.w	r3, r3, #4
 8001722:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001726:	687b      	ldr	r3, [r7, #4]
 8001728:	689b      	ldr	r3, [r3, #8]
 800172a:	2b00      	cmp	r3, #0
 800172c:	d016      	beq.n	800175c <HAL_RCC_OscConfig+0x558>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800172e:	f7ff fa2d 	bl	8000b8c <HAL_GetTick>
 8001732:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001734:	e00a      	b.n	800174c <HAL_RCC_OscConfig+0x548>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001736:	f7ff fa29 	bl	8000b8c <HAL_GetTick>
 800173a:	4602      	mov	r2, r0
 800173c:	693b      	ldr	r3, [r7, #16]
 800173e:	1ad3      	subs	r3, r2, r3
 8001740:	f241 3288 	movw	r2, #5000	; 0x1388
 8001744:	4293      	cmp	r3, r2
 8001746:	d901      	bls.n	800174c <HAL_RCC_OscConfig+0x548>
        {
          return HAL_TIMEOUT;
 8001748:	2303      	movs	r3, #3
 800174a:	e139      	b.n	80019c0 <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800174c:	4b0b      	ldr	r3, [pc, #44]	; (800177c <HAL_RCC_OscConfig+0x578>)
 800174e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001752:	f003 0302 	and.w	r3, r3, #2
 8001756:	2b00      	cmp	r3, #0
 8001758:	d0ed      	beq.n	8001736 <HAL_RCC_OscConfig+0x532>
 800175a:	e01a      	b.n	8001792 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800175c:	f7ff fa16 	bl	8000b8c <HAL_GetTick>
 8001760:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001762:	e00f      	b.n	8001784 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001764:	f7ff fa12 	bl	8000b8c <HAL_GetTick>
 8001768:	4602      	mov	r2, r0
 800176a:	693b      	ldr	r3, [r7, #16]
 800176c:	1ad3      	subs	r3, r2, r3
 800176e:	f241 3288 	movw	r2, #5000	; 0x1388
 8001772:	4293      	cmp	r3, r2
 8001774:	d906      	bls.n	8001784 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8001776:	2303      	movs	r3, #3
 8001778:	e122      	b.n	80019c0 <HAL_RCC_OscConfig+0x7bc>
 800177a:	bf00      	nop
 800177c:	40021000 	.word	0x40021000
 8001780:	40007000 	.word	0x40007000
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001784:	4b90      	ldr	r3, [pc, #576]	; (80019c8 <HAL_RCC_OscConfig+0x7c4>)
 8001786:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800178a:	f003 0302 	and.w	r3, r3, #2
 800178e:	2b00      	cmp	r3, #0
 8001790:	d1e8      	bne.n	8001764 <HAL_RCC_OscConfig+0x560>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001792:	7ffb      	ldrb	r3, [r7, #31]
 8001794:	2b01      	cmp	r3, #1
 8001796:	d105      	bne.n	80017a4 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001798:	4b8b      	ldr	r3, [pc, #556]	; (80019c8 <HAL_RCC_OscConfig+0x7c4>)
 800179a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800179c:	4a8a      	ldr	r2, [pc, #552]	; (80019c8 <HAL_RCC_OscConfig+0x7c4>)
 800179e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80017a2:	6593      	str	r3, [r2, #88]	; 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80017a4:	687b      	ldr	r3, [r7, #4]
 80017a6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80017a8:	2b00      	cmp	r3, #0
 80017aa:	f000 8108 	beq.w	80019be <HAL_RCC_OscConfig+0x7ba>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80017ae:	687b      	ldr	r3, [r7, #4]
 80017b0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80017b2:	2b02      	cmp	r3, #2
 80017b4:	f040 80d0 	bne.w	8001958 <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 80017b8:	4b83      	ldr	r3, [pc, #524]	; (80019c8 <HAL_RCC_OscConfig+0x7c4>)
 80017ba:	68db      	ldr	r3, [r3, #12]
 80017bc:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80017be:	697b      	ldr	r3, [r7, #20]
 80017c0:	f003 0203 	and.w	r2, r3, #3
 80017c4:	687b      	ldr	r3, [r7, #4]
 80017c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80017c8:	429a      	cmp	r2, r3
 80017ca:	d130      	bne.n	800182e <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80017cc:	697b      	ldr	r3, [r7, #20]
 80017ce:	f003 0270 	and.w	r2, r3, #112	; 0x70
 80017d2:	687b      	ldr	r3, [r7, #4]
 80017d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017d6:	3b01      	subs	r3, #1
 80017d8:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80017da:	429a      	cmp	r2, r3
 80017dc:	d127      	bne.n	800182e <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80017de:	697b      	ldr	r3, [r7, #20]
 80017e0:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 80017e4:	687b      	ldr	r3, [r7, #4]
 80017e6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80017e8:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80017ea:	429a      	cmp	r2, r3
 80017ec:	d11f      	bne.n	800182e <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 80017ee:	697b      	ldr	r3, [r7, #20]
 80017f0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80017f4:	687a      	ldr	r2, [r7, #4]
 80017f6:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80017f8:	2a07      	cmp	r2, #7
 80017fa:	bf14      	ite	ne
 80017fc:	2201      	movne	r2, #1
 80017fe:	2200      	moveq	r2, #0
 8001800:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001802:	4293      	cmp	r3, r2
 8001804:	d113      	bne.n	800182e <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001806:	697b      	ldr	r3, [r7, #20]
 8001808:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 800180c:	687b      	ldr	r3, [r7, #4]
 800180e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001810:	085b      	lsrs	r3, r3, #1
 8001812:	3b01      	subs	r3, #1
 8001814:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8001816:	429a      	cmp	r2, r3
 8001818:	d109      	bne.n	800182e <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 800181a:	697b      	ldr	r3, [r7, #20]
 800181c:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8001820:	687b      	ldr	r3, [r7, #4]
 8001822:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001824:	085b      	lsrs	r3, r3, #1
 8001826:	3b01      	subs	r3, #1
 8001828:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800182a:	429a      	cmp	r2, r3
 800182c:	d06e      	beq.n	800190c <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 800182e:	69bb      	ldr	r3, [r7, #24]
 8001830:	2b0c      	cmp	r3, #12
 8001832:	d069      	beq.n	8001908 <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8001834:	4b64      	ldr	r3, [pc, #400]	; (80019c8 <HAL_RCC_OscConfig+0x7c4>)
 8001836:	681b      	ldr	r3, [r3, #0]
 8001838:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800183c:	2b00      	cmp	r3, #0
 800183e:	d105      	bne.n	800184c <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8001840:	4b61      	ldr	r3, [pc, #388]	; (80019c8 <HAL_RCC_OscConfig+0x7c4>)
 8001842:	681b      	ldr	r3, [r3, #0]
 8001844:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001848:	2b00      	cmp	r3, #0
 800184a:	d001      	beq.n	8001850 <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 800184c:	2301      	movs	r3, #1
 800184e:	e0b7      	b.n	80019c0 <HAL_RCC_OscConfig+0x7bc>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8001850:	4b5d      	ldr	r3, [pc, #372]	; (80019c8 <HAL_RCC_OscConfig+0x7c4>)
 8001852:	681b      	ldr	r3, [r3, #0]
 8001854:	4a5c      	ldr	r2, [pc, #368]	; (80019c8 <HAL_RCC_OscConfig+0x7c4>)
 8001856:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800185a:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 800185c:	f7ff f996 	bl	8000b8c <HAL_GetTick>
 8001860:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001862:	e008      	b.n	8001876 <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001864:	f7ff f992 	bl	8000b8c <HAL_GetTick>
 8001868:	4602      	mov	r2, r0
 800186a:	693b      	ldr	r3, [r7, #16]
 800186c:	1ad3      	subs	r3, r2, r3
 800186e:	2b02      	cmp	r3, #2
 8001870:	d901      	bls.n	8001876 <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 8001872:	2303      	movs	r3, #3
 8001874:	e0a4      	b.n	80019c0 <HAL_RCC_OscConfig+0x7bc>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001876:	4b54      	ldr	r3, [pc, #336]	; (80019c8 <HAL_RCC_OscConfig+0x7c4>)
 8001878:	681b      	ldr	r3, [r3, #0]
 800187a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800187e:	2b00      	cmp	r3, #0
 8001880:	d1f0      	bne.n	8001864 <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001882:	4b51      	ldr	r3, [pc, #324]	; (80019c8 <HAL_RCC_OscConfig+0x7c4>)
 8001884:	68da      	ldr	r2, [r3, #12]
 8001886:	4b51      	ldr	r3, [pc, #324]	; (80019cc <HAL_RCC_OscConfig+0x7c8>)
 8001888:	4013      	ands	r3, r2
 800188a:	687a      	ldr	r2, [r7, #4]
 800188c:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 800188e:	687a      	ldr	r2, [r7, #4]
 8001890:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8001892:	3a01      	subs	r2, #1
 8001894:	0112      	lsls	r2, r2, #4
 8001896:	4311      	orrs	r1, r2
 8001898:	687a      	ldr	r2, [r7, #4]
 800189a:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800189c:	0212      	lsls	r2, r2, #8
 800189e:	4311      	orrs	r1, r2
 80018a0:	687a      	ldr	r2, [r7, #4]
 80018a2:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 80018a4:	0852      	lsrs	r2, r2, #1
 80018a6:	3a01      	subs	r2, #1
 80018a8:	0552      	lsls	r2, r2, #21
 80018aa:	4311      	orrs	r1, r2
 80018ac:	687a      	ldr	r2, [r7, #4]
 80018ae:	6c12      	ldr	r2, [r2, #64]	; 0x40
 80018b0:	0852      	lsrs	r2, r2, #1
 80018b2:	3a01      	subs	r2, #1
 80018b4:	0652      	lsls	r2, r2, #25
 80018b6:	4311      	orrs	r1, r2
 80018b8:	687a      	ldr	r2, [r7, #4]
 80018ba:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80018bc:	0912      	lsrs	r2, r2, #4
 80018be:	0452      	lsls	r2, r2, #17
 80018c0:	430a      	orrs	r2, r1
 80018c2:	4941      	ldr	r1, [pc, #260]	; (80019c8 <HAL_RCC_OscConfig+0x7c4>)
 80018c4:	4313      	orrs	r3, r2
 80018c6:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 80018c8:	4b3f      	ldr	r3, [pc, #252]	; (80019c8 <HAL_RCC_OscConfig+0x7c4>)
 80018ca:	681b      	ldr	r3, [r3, #0]
 80018cc:	4a3e      	ldr	r2, [pc, #248]	; (80019c8 <HAL_RCC_OscConfig+0x7c4>)
 80018ce:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80018d2:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80018d4:	4b3c      	ldr	r3, [pc, #240]	; (80019c8 <HAL_RCC_OscConfig+0x7c4>)
 80018d6:	68db      	ldr	r3, [r3, #12]
 80018d8:	4a3b      	ldr	r2, [pc, #236]	; (80019c8 <HAL_RCC_OscConfig+0x7c4>)
 80018da:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80018de:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80018e0:	f7ff f954 	bl	8000b8c <HAL_GetTick>
 80018e4:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80018e6:	e008      	b.n	80018fa <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80018e8:	f7ff f950 	bl	8000b8c <HAL_GetTick>
 80018ec:	4602      	mov	r2, r0
 80018ee:	693b      	ldr	r3, [r7, #16]
 80018f0:	1ad3      	subs	r3, r2, r3
 80018f2:	2b02      	cmp	r3, #2
 80018f4:	d901      	bls.n	80018fa <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 80018f6:	2303      	movs	r3, #3
 80018f8:	e062      	b.n	80019c0 <HAL_RCC_OscConfig+0x7bc>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80018fa:	4b33      	ldr	r3, [pc, #204]	; (80019c8 <HAL_RCC_OscConfig+0x7c4>)
 80018fc:	681b      	ldr	r3, [r3, #0]
 80018fe:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001902:	2b00      	cmp	r3, #0
 8001904:	d0f0      	beq.n	80018e8 <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001906:	e05a      	b.n	80019be <HAL_RCC_OscConfig+0x7ba>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8001908:	2301      	movs	r3, #1
 800190a:	e059      	b.n	80019c0 <HAL_RCC_OscConfig+0x7bc>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800190c:	4b2e      	ldr	r3, [pc, #184]	; (80019c8 <HAL_RCC_OscConfig+0x7c4>)
 800190e:	681b      	ldr	r3, [r3, #0]
 8001910:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001914:	2b00      	cmp	r3, #0
 8001916:	d152      	bne.n	80019be <HAL_RCC_OscConfig+0x7ba>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8001918:	4b2b      	ldr	r3, [pc, #172]	; (80019c8 <HAL_RCC_OscConfig+0x7c4>)
 800191a:	681b      	ldr	r3, [r3, #0]
 800191c:	4a2a      	ldr	r2, [pc, #168]	; (80019c8 <HAL_RCC_OscConfig+0x7c4>)
 800191e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001922:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001924:	4b28      	ldr	r3, [pc, #160]	; (80019c8 <HAL_RCC_OscConfig+0x7c4>)
 8001926:	68db      	ldr	r3, [r3, #12]
 8001928:	4a27      	ldr	r2, [pc, #156]	; (80019c8 <HAL_RCC_OscConfig+0x7c4>)
 800192a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800192e:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8001930:	f7ff f92c 	bl	8000b8c <HAL_GetTick>
 8001934:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001936:	e008      	b.n	800194a <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001938:	f7ff f928 	bl	8000b8c <HAL_GetTick>
 800193c:	4602      	mov	r2, r0
 800193e:	693b      	ldr	r3, [r7, #16]
 8001940:	1ad3      	subs	r3, r2, r3
 8001942:	2b02      	cmp	r3, #2
 8001944:	d901      	bls.n	800194a <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 8001946:	2303      	movs	r3, #3
 8001948:	e03a      	b.n	80019c0 <HAL_RCC_OscConfig+0x7bc>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800194a:	4b1f      	ldr	r3, [pc, #124]	; (80019c8 <HAL_RCC_OscConfig+0x7c4>)
 800194c:	681b      	ldr	r3, [r3, #0]
 800194e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001952:	2b00      	cmp	r3, #0
 8001954:	d0f0      	beq.n	8001938 <HAL_RCC_OscConfig+0x734>
 8001956:	e032      	b.n	80019be <HAL_RCC_OscConfig+0x7ba>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001958:	69bb      	ldr	r3, [r7, #24]
 800195a:	2b0c      	cmp	r3, #12
 800195c:	d02d      	beq.n	80019ba <HAL_RCC_OscConfig+0x7b6>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800195e:	4b1a      	ldr	r3, [pc, #104]	; (80019c8 <HAL_RCC_OscConfig+0x7c4>)
 8001960:	681b      	ldr	r3, [r3, #0]
 8001962:	4a19      	ldr	r2, [pc, #100]	; (80019c8 <HAL_RCC_OscConfig+0x7c4>)
 8001964:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001968:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
#if defined(RCC_PLLSAI1_SUPPORT) && defined(RCC_CR_PLLSAI2RDY)
        if(READ_BIT(RCC->CR, (RCC_CR_PLLSAI1RDY | RCC_CR_PLLSAI2RDY)) == 0U)
 800196a:	4b17      	ldr	r3, [pc, #92]	; (80019c8 <HAL_RCC_OscConfig+0x7c4>)
 800196c:	681b      	ldr	r3, [r3, #0]
 800196e:	f003 5320 	and.w	r3, r3, #671088640	; 0x28000000
 8001972:	2b00      	cmp	r3, #0
 8001974:	d105      	bne.n	8001982 <HAL_RCC_OscConfig+0x77e>
        {
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 8001976:	4b14      	ldr	r3, [pc, #80]	; (80019c8 <HAL_RCC_OscConfig+0x7c4>)
 8001978:	68db      	ldr	r3, [r3, #12]
 800197a:	4a13      	ldr	r2, [pc, #76]	; (80019c8 <HAL_RCC_OscConfig+0x7c4>)
 800197c:	f023 0303 	bic.w	r3, r3, #3
 8001980:	60d3      	str	r3, [r2, #12]
#else
        MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
#endif /* RCC_PLLSAI1_SUPPORT && RCC_CR_PLLSAI2RDY */

#if defined(RCC_PLLSAI2_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8001982:	4b11      	ldr	r3, [pc, #68]	; (80019c8 <HAL_RCC_OscConfig+0x7c4>)
 8001984:	68db      	ldr	r3, [r3, #12]
 8001986:	4a10      	ldr	r2, [pc, #64]	; (80019c8 <HAL_RCC_OscConfig+0x7c4>)
 8001988:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 800198c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001990:	60d3      	str	r3, [r2, #12]
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK);
#endif /* RCC_PLLSAI2_SUPPORT */

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001992:	f7ff f8fb 	bl	8000b8c <HAL_GetTick>
 8001996:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001998:	e008      	b.n	80019ac <HAL_RCC_OscConfig+0x7a8>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800199a:	f7ff f8f7 	bl	8000b8c <HAL_GetTick>
 800199e:	4602      	mov	r2, r0
 80019a0:	693b      	ldr	r3, [r7, #16]
 80019a2:	1ad3      	subs	r3, r2, r3
 80019a4:	2b02      	cmp	r3, #2
 80019a6:	d901      	bls.n	80019ac <HAL_RCC_OscConfig+0x7a8>
          {
            return HAL_TIMEOUT;
 80019a8:	2303      	movs	r3, #3
 80019aa:	e009      	b.n	80019c0 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80019ac:	4b06      	ldr	r3, [pc, #24]	; (80019c8 <HAL_RCC_OscConfig+0x7c4>)
 80019ae:	681b      	ldr	r3, [r3, #0]
 80019b0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80019b4:	2b00      	cmp	r3, #0
 80019b6:	d1f0      	bne.n	800199a <HAL_RCC_OscConfig+0x796>
 80019b8:	e001      	b.n	80019be <HAL_RCC_OscConfig+0x7ba>
        }
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 80019ba:	2301      	movs	r3, #1
 80019bc:	e000      	b.n	80019c0 <HAL_RCC_OscConfig+0x7bc>
      }
    }
  }
  return HAL_OK;
 80019be:	2300      	movs	r3, #0
}
 80019c0:	4618      	mov	r0, r3
 80019c2:	3720      	adds	r7, #32
 80019c4:	46bd      	mov	sp, r7
 80019c6:	bd80      	pop	{r7, pc}
 80019c8:	40021000 	.word	0x40021000
 80019cc:	f99d808c 	.word	0xf99d808c

080019d0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80019d0:	b580      	push	{r7, lr}
 80019d2:	b084      	sub	sp, #16
 80019d4:	af00      	add	r7, sp, #0
 80019d6:	6078      	str	r0, [r7, #4]
 80019d8:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80019da:	687b      	ldr	r3, [r7, #4]
 80019dc:	2b00      	cmp	r3, #0
 80019de:	d101      	bne.n	80019e4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80019e0:	2301      	movs	r3, #1
 80019e2:	e0c8      	b.n	8001b76 <HAL_RCC_ClockConfig+0x1a6>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80019e4:	4b66      	ldr	r3, [pc, #408]	; (8001b80 <HAL_RCC_ClockConfig+0x1b0>)
 80019e6:	681b      	ldr	r3, [r3, #0]
 80019e8:	f003 0307 	and.w	r3, r3, #7
 80019ec:	683a      	ldr	r2, [r7, #0]
 80019ee:	429a      	cmp	r2, r3
 80019f0:	d910      	bls.n	8001a14 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80019f2:	4b63      	ldr	r3, [pc, #396]	; (8001b80 <HAL_RCC_ClockConfig+0x1b0>)
 80019f4:	681b      	ldr	r3, [r3, #0]
 80019f6:	f023 0207 	bic.w	r2, r3, #7
 80019fa:	4961      	ldr	r1, [pc, #388]	; (8001b80 <HAL_RCC_ClockConfig+0x1b0>)
 80019fc:	683b      	ldr	r3, [r7, #0]
 80019fe:	4313      	orrs	r3, r2
 8001a00:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001a02:	4b5f      	ldr	r3, [pc, #380]	; (8001b80 <HAL_RCC_ClockConfig+0x1b0>)
 8001a04:	681b      	ldr	r3, [r3, #0]
 8001a06:	f003 0307 	and.w	r3, r3, #7
 8001a0a:	683a      	ldr	r2, [r7, #0]
 8001a0c:	429a      	cmp	r2, r3
 8001a0e:	d001      	beq.n	8001a14 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8001a10:	2301      	movs	r3, #1
 8001a12:	e0b0      	b.n	8001b76 <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001a14:	687b      	ldr	r3, [r7, #4]
 8001a16:	681b      	ldr	r3, [r3, #0]
 8001a18:	f003 0301 	and.w	r3, r3, #1
 8001a1c:	2b00      	cmp	r3, #0
 8001a1e:	d04c      	beq.n	8001aba <HAL_RCC_ClockConfig+0xea>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001a20:	687b      	ldr	r3, [r7, #4]
 8001a22:	685b      	ldr	r3, [r3, #4]
 8001a24:	2b03      	cmp	r3, #3
 8001a26:	d107      	bne.n	8001a38 <HAL_RCC_ClockConfig+0x68>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001a28:	4b56      	ldr	r3, [pc, #344]	; (8001b84 <HAL_RCC_ClockConfig+0x1b4>)
 8001a2a:	681b      	ldr	r3, [r3, #0]
 8001a2c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001a30:	2b00      	cmp	r3, #0
 8001a32:	d121      	bne.n	8001a78 <HAL_RCC_ClockConfig+0xa8>
      {
        return HAL_ERROR;
 8001a34:	2301      	movs	r3, #1
 8001a36:	e09e      	b.n	8001b76 <HAL_RCC_ClockConfig+0x1a6>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001a38:	687b      	ldr	r3, [r7, #4]
 8001a3a:	685b      	ldr	r3, [r3, #4]
 8001a3c:	2b02      	cmp	r3, #2
 8001a3e:	d107      	bne.n	8001a50 <HAL_RCC_ClockConfig+0x80>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001a40:	4b50      	ldr	r3, [pc, #320]	; (8001b84 <HAL_RCC_ClockConfig+0x1b4>)
 8001a42:	681b      	ldr	r3, [r3, #0]
 8001a44:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001a48:	2b00      	cmp	r3, #0
 8001a4a:	d115      	bne.n	8001a78 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8001a4c:	2301      	movs	r3, #1
 8001a4e:	e092      	b.n	8001b76 <HAL_RCC_ClockConfig+0x1a6>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8001a50:	687b      	ldr	r3, [r7, #4]
 8001a52:	685b      	ldr	r3, [r3, #4]
 8001a54:	2b00      	cmp	r3, #0
 8001a56:	d107      	bne.n	8001a68 <HAL_RCC_ClockConfig+0x98>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001a58:	4b4a      	ldr	r3, [pc, #296]	; (8001b84 <HAL_RCC_ClockConfig+0x1b4>)
 8001a5a:	681b      	ldr	r3, [r3, #0]
 8001a5c:	f003 0302 	and.w	r3, r3, #2
 8001a60:	2b00      	cmp	r3, #0
 8001a62:	d109      	bne.n	8001a78 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8001a64:	2301      	movs	r3, #1
 8001a66:	e086      	b.n	8001b76 <HAL_RCC_ClockConfig+0x1a6>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001a68:	4b46      	ldr	r3, [pc, #280]	; (8001b84 <HAL_RCC_ClockConfig+0x1b4>)
 8001a6a:	681b      	ldr	r3, [r3, #0]
 8001a6c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001a70:	2b00      	cmp	r3, #0
 8001a72:	d101      	bne.n	8001a78 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8001a74:	2301      	movs	r3, #1
 8001a76:	e07e      	b.n	8001b76 <HAL_RCC_ClockConfig+0x1a6>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8001a78:	4b42      	ldr	r3, [pc, #264]	; (8001b84 <HAL_RCC_ClockConfig+0x1b4>)
 8001a7a:	689b      	ldr	r3, [r3, #8]
 8001a7c:	f023 0203 	bic.w	r2, r3, #3
 8001a80:	687b      	ldr	r3, [r7, #4]
 8001a82:	685b      	ldr	r3, [r3, #4]
 8001a84:	493f      	ldr	r1, [pc, #252]	; (8001b84 <HAL_RCC_ClockConfig+0x1b4>)
 8001a86:	4313      	orrs	r3, r2
 8001a88:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001a8a:	f7ff f87f 	bl	8000b8c <HAL_GetTick>
 8001a8e:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001a90:	e00a      	b.n	8001aa8 <HAL_RCC_ClockConfig+0xd8>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001a92:	f7ff f87b 	bl	8000b8c <HAL_GetTick>
 8001a96:	4602      	mov	r2, r0
 8001a98:	68fb      	ldr	r3, [r7, #12]
 8001a9a:	1ad3      	subs	r3, r2, r3
 8001a9c:	f241 3288 	movw	r2, #5000	; 0x1388
 8001aa0:	4293      	cmp	r3, r2
 8001aa2:	d901      	bls.n	8001aa8 <HAL_RCC_ClockConfig+0xd8>
      {
        return HAL_TIMEOUT;
 8001aa4:	2303      	movs	r3, #3
 8001aa6:	e066      	b.n	8001b76 <HAL_RCC_ClockConfig+0x1a6>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001aa8:	4b36      	ldr	r3, [pc, #216]	; (8001b84 <HAL_RCC_ClockConfig+0x1b4>)
 8001aaa:	689b      	ldr	r3, [r3, #8]
 8001aac:	f003 020c 	and.w	r2, r3, #12
 8001ab0:	687b      	ldr	r3, [r7, #4]
 8001ab2:	685b      	ldr	r3, [r3, #4]
 8001ab4:	009b      	lsls	r3, r3, #2
 8001ab6:	429a      	cmp	r2, r3
 8001ab8:	d1eb      	bne.n	8001a92 <HAL_RCC_ClockConfig+0xc2>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001aba:	687b      	ldr	r3, [r7, #4]
 8001abc:	681b      	ldr	r3, [r3, #0]
 8001abe:	f003 0302 	and.w	r3, r3, #2
 8001ac2:	2b00      	cmp	r3, #0
 8001ac4:	d008      	beq.n	8001ad8 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001ac6:	4b2f      	ldr	r3, [pc, #188]	; (8001b84 <HAL_RCC_ClockConfig+0x1b4>)
 8001ac8:	689b      	ldr	r3, [r3, #8]
 8001aca:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001ace:	687b      	ldr	r3, [r7, #4]
 8001ad0:	689b      	ldr	r3, [r3, #8]
 8001ad2:	492c      	ldr	r1, [pc, #176]	; (8001b84 <HAL_RCC_ClockConfig+0x1b4>)
 8001ad4:	4313      	orrs	r3, r2
 8001ad6:	608b      	str	r3, [r1, #8]
    }
  }
#endif

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001ad8:	4b29      	ldr	r3, [pc, #164]	; (8001b80 <HAL_RCC_ClockConfig+0x1b0>)
 8001ada:	681b      	ldr	r3, [r3, #0]
 8001adc:	f003 0307 	and.w	r3, r3, #7
 8001ae0:	683a      	ldr	r2, [r7, #0]
 8001ae2:	429a      	cmp	r2, r3
 8001ae4:	d210      	bcs.n	8001b08 <HAL_RCC_ClockConfig+0x138>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001ae6:	4b26      	ldr	r3, [pc, #152]	; (8001b80 <HAL_RCC_ClockConfig+0x1b0>)
 8001ae8:	681b      	ldr	r3, [r3, #0]
 8001aea:	f023 0207 	bic.w	r2, r3, #7
 8001aee:	4924      	ldr	r1, [pc, #144]	; (8001b80 <HAL_RCC_ClockConfig+0x1b0>)
 8001af0:	683b      	ldr	r3, [r7, #0]
 8001af2:	4313      	orrs	r3, r2
 8001af4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001af6:	4b22      	ldr	r3, [pc, #136]	; (8001b80 <HAL_RCC_ClockConfig+0x1b0>)
 8001af8:	681b      	ldr	r3, [r3, #0]
 8001afa:	f003 0307 	and.w	r3, r3, #7
 8001afe:	683a      	ldr	r2, [r7, #0]
 8001b00:	429a      	cmp	r2, r3
 8001b02:	d001      	beq.n	8001b08 <HAL_RCC_ClockConfig+0x138>
    {
      return HAL_ERROR;
 8001b04:	2301      	movs	r3, #1
 8001b06:	e036      	b.n	8001b76 <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001b08:	687b      	ldr	r3, [r7, #4]
 8001b0a:	681b      	ldr	r3, [r3, #0]
 8001b0c:	f003 0304 	and.w	r3, r3, #4
 8001b10:	2b00      	cmp	r3, #0
 8001b12:	d008      	beq.n	8001b26 <HAL_RCC_ClockConfig+0x156>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001b14:	4b1b      	ldr	r3, [pc, #108]	; (8001b84 <HAL_RCC_ClockConfig+0x1b4>)
 8001b16:	689b      	ldr	r3, [r3, #8]
 8001b18:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001b1c:	687b      	ldr	r3, [r7, #4]
 8001b1e:	68db      	ldr	r3, [r3, #12]
 8001b20:	4918      	ldr	r1, [pc, #96]	; (8001b84 <HAL_RCC_ClockConfig+0x1b4>)
 8001b22:	4313      	orrs	r3, r2
 8001b24:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001b26:	687b      	ldr	r3, [r7, #4]
 8001b28:	681b      	ldr	r3, [r3, #0]
 8001b2a:	f003 0308 	and.w	r3, r3, #8
 8001b2e:	2b00      	cmp	r3, #0
 8001b30:	d009      	beq.n	8001b46 <HAL_RCC_ClockConfig+0x176>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001b32:	4b14      	ldr	r3, [pc, #80]	; (8001b84 <HAL_RCC_ClockConfig+0x1b4>)
 8001b34:	689b      	ldr	r3, [r3, #8]
 8001b36:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8001b3a:	687b      	ldr	r3, [r7, #4]
 8001b3c:	691b      	ldr	r3, [r3, #16]
 8001b3e:	00db      	lsls	r3, r3, #3
 8001b40:	4910      	ldr	r1, [pc, #64]	; (8001b84 <HAL_RCC_ClockConfig+0x1b4>)
 8001b42:	4313      	orrs	r3, r2
 8001b44:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8001b46:	f000 f825 	bl	8001b94 <HAL_RCC_GetSysClockFreq>
 8001b4a:	4602      	mov	r2, r0
 8001b4c:	4b0d      	ldr	r3, [pc, #52]	; (8001b84 <HAL_RCC_ClockConfig+0x1b4>)
 8001b4e:	689b      	ldr	r3, [r3, #8]
 8001b50:	091b      	lsrs	r3, r3, #4
 8001b52:	f003 030f 	and.w	r3, r3, #15
 8001b56:	490c      	ldr	r1, [pc, #48]	; (8001b88 <HAL_RCC_ClockConfig+0x1b8>)
 8001b58:	5ccb      	ldrb	r3, [r1, r3]
 8001b5a:	f003 031f 	and.w	r3, r3, #31
 8001b5e:	fa22 f303 	lsr.w	r3, r2, r3
 8001b62:	4a0a      	ldr	r2, [pc, #40]	; (8001b8c <HAL_RCC_ClockConfig+0x1bc>)
 8001b64:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8001b66:	4b0a      	ldr	r3, [pc, #40]	; (8001b90 <HAL_RCC_ClockConfig+0x1c0>)
 8001b68:	681b      	ldr	r3, [r3, #0]
 8001b6a:	4618      	mov	r0, r3
 8001b6c:	f7fe ffbe 	bl	8000aec <HAL_InitTick>
 8001b70:	4603      	mov	r3, r0
 8001b72:	72fb      	strb	r3, [r7, #11]

  return status;
 8001b74:	7afb      	ldrb	r3, [r7, #11]
}
 8001b76:	4618      	mov	r0, r3
 8001b78:	3710      	adds	r7, #16
 8001b7a:	46bd      	mov	sp, r7
 8001b7c:	bd80      	pop	{r7, pc}
 8001b7e:	bf00      	nop
 8001b80:	40022000 	.word	0x40022000
 8001b84:	40021000 	.word	0x40021000
 8001b88:	08003d30 	.word	0x08003d30
 8001b8c:	20000000 	.word	0x20000000
 8001b90:	20000004 	.word	0x20000004

08001b94 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001b94:	b480      	push	{r7}
 8001b96:	b089      	sub	sp, #36	; 0x24
 8001b98:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8001b9a:	2300      	movs	r3, #0
 8001b9c:	61fb      	str	r3, [r7, #28]
 8001b9e:	2300      	movs	r3, #0
 8001ba0:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001ba2:	4b3e      	ldr	r3, [pc, #248]	; (8001c9c <HAL_RCC_GetSysClockFreq+0x108>)
 8001ba4:	689b      	ldr	r3, [r3, #8]
 8001ba6:	f003 030c 	and.w	r3, r3, #12
 8001baa:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001bac:	4b3b      	ldr	r3, [pc, #236]	; (8001c9c <HAL_RCC_GetSysClockFreq+0x108>)
 8001bae:	68db      	ldr	r3, [r3, #12]
 8001bb0:	f003 0303 	and.w	r3, r3, #3
 8001bb4:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8001bb6:	693b      	ldr	r3, [r7, #16]
 8001bb8:	2b00      	cmp	r3, #0
 8001bba:	d005      	beq.n	8001bc8 <HAL_RCC_GetSysClockFreq+0x34>
 8001bbc:	693b      	ldr	r3, [r7, #16]
 8001bbe:	2b0c      	cmp	r3, #12
 8001bc0:	d121      	bne.n	8001c06 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8001bc2:	68fb      	ldr	r3, [r7, #12]
 8001bc4:	2b01      	cmp	r3, #1
 8001bc6:	d11e      	bne.n	8001c06 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8001bc8:	4b34      	ldr	r3, [pc, #208]	; (8001c9c <HAL_RCC_GetSysClockFreq+0x108>)
 8001bca:	681b      	ldr	r3, [r3, #0]
 8001bcc:	f003 0308 	and.w	r3, r3, #8
 8001bd0:	2b00      	cmp	r3, #0
 8001bd2:	d107      	bne.n	8001be4 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8001bd4:	4b31      	ldr	r3, [pc, #196]	; (8001c9c <HAL_RCC_GetSysClockFreq+0x108>)
 8001bd6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001bda:	0a1b      	lsrs	r3, r3, #8
 8001bdc:	f003 030f 	and.w	r3, r3, #15
 8001be0:	61fb      	str	r3, [r7, #28]
 8001be2:	e005      	b.n	8001bf0 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8001be4:	4b2d      	ldr	r3, [pc, #180]	; (8001c9c <HAL_RCC_GetSysClockFreq+0x108>)
 8001be6:	681b      	ldr	r3, [r3, #0]
 8001be8:	091b      	lsrs	r3, r3, #4
 8001bea:	f003 030f 	and.w	r3, r3, #15
 8001bee:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8001bf0:	4a2b      	ldr	r2, [pc, #172]	; (8001ca0 <HAL_RCC_GetSysClockFreq+0x10c>)
 8001bf2:	69fb      	ldr	r3, [r7, #28]
 8001bf4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001bf8:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001bfa:	693b      	ldr	r3, [r7, #16]
 8001bfc:	2b00      	cmp	r3, #0
 8001bfe:	d10d      	bne.n	8001c1c <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8001c00:	69fb      	ldr	r3, [r7, #28]
 8001c02:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001c04:	e00a      	b.n	8001c1c <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8001c06:	693b      	ldr	r3, [r7, #16]
 8001c08:	2b04      	cmp	r3, #4
 8001c0a:	d102      	bne.n	8001c12 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8001c0c:	4b25      	ldr	r3, [pc, #148]	; (8001ca4 <HAL_RCC_GetSysClockFreq+0x110>)
 8001c0e:	61bb      	str	r3, [r7, #24]
 8001c10:	e004      	b.n	8001c1c <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8001c12:	693b      	ldr	r3, [r7, #16]
 8001c14:	2b08      	cmp	r3, #8
 8001c16:	d101      	bne.n	8001c1c <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8001c18:	4b23      	ldr	r3, [pc, #140]	; (8001ca8 <HAL_RCC_GetSysClockFreq+0x114>)
 8001c1a:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8001c1c:	693b      	ldr	r3, [r7, #16]
 8001c1e:	2b0c      	cmp	r3, #12
 8001c20:	d134      	bne.n	8001c8c <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8001c22:	4b1e      	ldr	r3, [pc, #120]	; (8001c9c <HAL_RCC_GetSysClockFreq+0x108>)
 8001c24:	68db      	ldr	r3, [r3, #12]
 8001c26:	f003 0303 	and.w	r3, r3, #3
 8001c2a:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8001c2c:	68bb      	ldr	r3, [r7, #8]
 8001c2e:	2b02      	cmp	r3, #2
 8001c30:	d003      	beq.n	8001c3a <HAL_RCC_GetSysClockFreq+0xa6>
 8001c32:	68bb      	ldr	r3, [r7, #8]
 8001c34:	2b03      	cmp	r3, #3
 8001c36:	d003      	beq.n	8001c40 <HAL_RCC_GetSysClockFreq+0xac>
 8001c38:	e005      	b.n	8001c46 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8001c3a:	4b1a      	ldr	r3, [pc, #104]	; (8001ca4 <HAL_RCC_GetSysClockFreq+0x110>)
 8001c3c:	617b      	str	r3, [r7, #20]
      break;
 8001c3e:	e005      	b.n	8001c4c <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8001c40:	4b19      	ldr	r3, [pc, #100]	; (8001ca8 <HAL_RCC_GetSysClockFreq+0x114>)
 8001c42:	617b      	str	r3, [r7, #20]
      break;
 8001c44:	e002      	b.n	8001c4c <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8001c46:	69fb      	ldr	r3, [r7, #28]
 8001c48:	617b      	str	r3, [r7, #20]
      break;
 8001c4a:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8001c4c:	4b13      	ldr	r3, [pc, #76]	; (8001c9c <HAL_RCC_GetSysClockFreq+0x108>)
 8001c4e:	68db      	ldr	r3, [r3, #12]
 8001c50:	091b      	lsrs	r3, r3, #4
 8001c52:	f003 0307 	and.w	r3, r3, #7
 8001c56:	3301      	adds	r3, #1
 8001c58:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8001c5a:	4b10      	ldr	r3, [pc, #64]	; (8001c9c <HAL_RCC_GetSysClockFreq+0x108>)
 8001c5c:	68db      	ldr	r3, [r3, #12]
 8001c5e:	0a1b      	lsrs	r3, r3, #8
 8001c60:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8001c64:	697a      	ldr	r2, [r7, #20]
 8001c66:	fb02 f203 	mul.w	r2, r2, r3
 8001c6a:	687b      	ldr	r3, [r7, #4]
 8001c6c:	fbb2 f3f3 	udiv	r3, r2, r3
 8001c70:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8001c72:	4b0a      	ldr	r3, [pc, #40]	; (8001c9c <HAL_RCC_GetSysClockFreq+0x108>)
 8001c74:	68db      	ldr	r3, [r3, #12]
 8001c76:	0e5b      	lsrs	r3, r3, #25
 8001c78:	f003 0303 	and.w	r3, r3, #3
 8001c7c:	3301      	adds	r3, #1
 8001c7e:	005b      	lsls	r3, r3, #1
 8001c80:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8001c82:	697a      	ldr	r2, [r7, #20]
 8001c84:	683b      	ldr	r3, [r7, #0]
 8001c86:	fbb2 f3f3 	udiv	r3, r2, r3
 8001c8a:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8001c8c:	69bb      	ldr	r3, [r7, #24]
}
 8001c8e:	4618      	mov	r0, r3
 8001c90:	3724      	adds	r7, #36	; 0x24
 8001c92:	46bd      	mov	sp, r7
 8001c94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c98:	4770      	bx	lr
 8001c9a:	bf00      	nop
 8001c9c:	40021000 	.word	0x40021000
 8001ca0:	08003d48 	.word	0x08003d48
 8001ca4:	00f42400 	.word	0x00f42400
 8001ca8:	007a1200 	.word	0x007a1200

08001cac <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001cac:	b480      	push	{r7}
 8001cae:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001cb0:	4b03      	ldr	r3, [pc, #12]	; (8001cc0 <HAL_RCC_GetHCLKFreq+0x14>)
 8001cb2:	681b      	ldr	r3, [r3, #0]
}
 8001cb4:	4618      	mov	r0, r3
 8001cb6:	46bd      	mov	sp, r7
 8001cb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cbc:	4770      	bx	lr
 8001cbe:	bf00      	nop
 8001cc0:	20000000 	.word	0x20000000

08001cc4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001cc4:	b580      	push	{r7, lr}
 8001cc6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8001cc8:	f7ff fff0 	bl	8001cac <HAL_RCC_GetHCLKFreq>
 8001ccc:	4602      	mov	r2, r0
 8001cce:	4b06      	ldr	r3, [pc, #24]	; (8001ce8 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001cd0:	689b      	ldr	r3, [r3, #8]
 8001cd2:	0a1b      	lsrs	r3, r3, #8
 8001cd4:	f003 0307 	and.w	r3, r3, #7
 8001cd8:	4904      	ldr	r1, [pc, #16]	; (8001cec <HAL_RCC_GetPCLK1Freq+0x28>)
 8001cda:	5ccb      	ldrb	r3, [r1, r3]
 8001cdc:	f003 031f 	and.w	r3, r3, #31
 8001ce0:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001ce4:	4618      	mov	r0, r3
 8001ce6:	bd80      	pop	{r7, pc}
 8001ce8:	40021000 	.word	0x40021000
 8001cec:	08003d40 	.word	0x08003d40

08001cf0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001cf0:	b580      	push	{r7, lr}
 8001cf2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8001cf4:	f7ff ffda 	bl	8001cac <HAL_RCC_GetHCLKFreq>
 8001cf8:	4602      	mov	r2, r0
 8001cfa:	4b06      	ldr	r3, [pc, #24]	; (8001d14 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001cfc:	689b      	ldr	r3, [r3, #8]
 8001cfe:	0adb      	lsrs	r3, r3, #11
 8001d00:	f003 0307 	and.w	r3, r3, #7
 8001d04:	4904      	ldr	r1, [pc, #16]	; (8001d18 <HAL_RCC_GetPCLK2Freq+0x28>)
 8001d06:	5ccb      	ldrb	r3, [r1, r3]
 8001d08:	f003 031f 	and.w	r3, r3, #31
 8001d0c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001d10:	4618      	mov	r0, r3
 8001d12:	bd80      	pop	{r7, pc}
 8001d14:	40021000 	.word	0x40021000
 8001d18:	08003d40 	.word	0x08003d40

08001d1c <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8001d1c:	b580      	push	{r7, lr}
 8001d1e:	b086      	sub	sp, #24
 8001d20:	af00      	add	r7, sp, #0
 8001d22:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8001d24:	2300      	movs	r3, #0
 8001d26:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8001d28:	4b2a      	ldr	r3, [pc, #168]	; (8001dd4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001d2a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001d2c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001d30:	2b00      	cmp	r3, #0
 8001d32:	d003      	beq.n	8001d3c <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8001d34:	f7ff fa02 	bl	800113c <HAL_PWREx_GetVoltageRange>
 8001d38:	6178      	str	r0, [r7, #20]
 8001d3a:	e014      	b.n	8001d66 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8001d3c:	4b25      	ldr	r3, [pc, #148]	; (8001dd4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001d3e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001d40:	4a24      	ldr	r2, [pc, #144]	; (8001dd4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001d42:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001d46:	6593      	str	r3, [r2, #88]	; 0x58
 8001d48:	4b22      	ldr	r3, [pc, #136]	; (8001dd4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001d4a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001d4c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001d50:	60fb      	str	r3, [r7, #12]
 8001d52:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8001d54:	f7ff f9f2 	bl	800113c <HAL_PWREx_GetVoltageRange>
 8001d58:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8001d5a:	4b1e      	ldr	r3, [pc, #120]	; (8001dd4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001d5c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001d5e:	4a1d      	ldr	r2, [pc, #116]	; (8001dd4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001d60:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001d64:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001d66:	697b      	ldr	r3, [r7, #20]
 8001d68:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001d6c:	d10b      	bne.n	8001d86 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8001d6e:	687b      	ldr	r3, [r7, #4]
 8001d70:	2b80      	cmp	r3, #128	; 0x80
 8001d72:	d919      	bls.n	8001da8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	2ba0      	cmp	r3, #160	; 0xa0
 8001d78:	d902      	bls.n	8001d80 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8001d7a:	2302      	movs	r3, #2
 8001d7c:	613b      	str	r3, [r7, #16]
 8001d7e:	e013      	b.n	8001da8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8001d80:	2301      	movs	r3, #1
 8001d82:	613b      	str	r3, [r7, #16]
 8001d84:	e010      	b.n	8001da8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8001d86:	687b      	ldr	r3, [r7, #4]
 8001d88:	2b80      	cmp	r3, #128	; 0x80
 8001d8a:	d902      	bls.n	8001d92 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8001d8c:	2303      	movs	r3, #3
 8001d8e:	613b      	str	r3, [r7, #16]
 8001d90:	e00a      	b.n	8001da8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8001d92:	687b      	ldr	r3, [r7, #4]
 8001d94:	2b80      	cmp	r3, #128	; 0x80
 8001d96:	d102      	bne.n	8001d9e <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8001d98:	2302      	movs	r3, #2
 8001d9a:	613b      	str	r3, [r7, #16]
 8001d9c:	e004      	b.n	8001da8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8001d9e:	687b      	ldr	r3, [r7, #4]
 8001da0:	2b70      	cmp	r3, #112	; 0x70
 8001da2:	d101      	bne.n	8001da8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8001da4:	2301      	movs	r3, #1
 8001da6:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8001da8:	4b0b      	ldr	r3, [pc, #44]	; (8001dd8 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8001daa:	681b      	ldr	r3, [r3, #0]
 8001dac:	f023 0207 	bic.w	r2, r3, #7
 8001db0:	4909      	ldr	r1, [pc, #36]	; (8001dd8 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8001db2:	693b      	ldr	r3, [r7, #16]
 8001db4:	4313      	orrs	r3, r2
 8001db6:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8001db8:	4b07      	ldr	r3, [pc, #28]	; (8001dd8 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8001dba:	681b      	ldr	r3, [r3, #0]
 8001dbc:	f003 0307 	and.w	r3, r3, #7
 8001dc0:	693a      	ldr	r2, [r7, #16]
 8001dc2:	429a      	cmp	r2, r3
 8001dc4:	d001      	beq.n	8001dca <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8001dc6:	2301      	movs	r3, #1
 8001dc8:	e000      	b.n	8001dcc <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8001dca:	2300      	movs	r3, #0
}
 8001dcc:	4618      	mov	r0, r3
 8001dce:	3718      	adds	r7, #24
 8001dd0:	46bd      	mov	sp, r7
 8001dd2:	bd80      	pop	{r7, pc}
 8001dd4:	40021000 	.word	0x40021000
 8001dd8:	40022000 	.word	0x40022000

08001ddc <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8001ddc:	b580      	push	{r7, lr}
 8001dde:	b086      	sub	sp, #24
 8001de0:	af00      	add	r7, sp, #0
 8001de2:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8001de4:	2300      	movs	r3, #0
 8001de6:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8001de8:	2300      	movs	r3, #0
 8001dea:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	681b      	ldr	r3, [r3, #0]
 8001df0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001df4:	2b00      	cmp	r3, #0
 8001df6:	d041      	beq.n	8001e7c <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8001dfc:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8001e00:	d02a      	beq.n	8001e58 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 8001e02:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8001e06:	d824      	bhi.n	8001e52 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8001e08:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8001e0c:	d008      	beq.n	8001e20 <HAL_RCCEx_PeriphCLKConfig+0x44>
 8001e0e:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8001e12:	d81e      	bhi.n	8001e52 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8001e14:	2b00      	cmp	r3, #0
 8001e16:	d00a      	beq.n	8001e2e <HAL_RCCEx_PeriphCLKConfig+0x52>
 8001e18:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001e1c:	d010      	beq.n	8001e40 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8001e1e:	e018      	b.n	8001e52 <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8001e20:	4b86      	ldr	r3, [pc, #536]	; (800203c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001e22:	68db      	ldr	r3, [r3, #12]
 8001e24:	4a85      	ldr	r2, [pc, #532]	; (800203c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001e26:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001e2a:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8001e2c:	e015      	b.n	8001e5a <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8001e2e:	687b      	ldr	r3, [r7, #4]
 8001e30:	3304      	adds	r3, #4
 8001e32:	2100      	movs	r1, #0
 8001e34:	4618      	mov	r0, r3
 8001e36:	f000 fabb 	bl	80023b0 <RCCEx_PLLSAI1_Config>
 8001e3a:	4603      	mov	r3, r0
 8001e3c:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8001e3e:	e00c      	b.n	8001e5a <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	3320      	adds	r3, #32
 8001e44:	2100      	movs	r1, #0
 8001e46:	4618      	mov	r0, r3
 8001e48:	f000 fba6 	bl	8002598 <RCCEx_PLLSAI2_Config>
 8001e4c:	4603      	mov	r3, r0
 8001e4e:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8001e50:	e003      	b.n	8001e5a <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8001e52:	2301      	movs	r3, #1
 8001e54:	74fb      	strb	r3, [r7, #19]
      break;
 8001e56:	e000      	b.n	8001e5a <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8001e58:	bf00      	nop
    }

    if(ret == HAL_OK)
 8001e5a:	7cfb      	ldrb	r3, [r7, #19]
 8001e5c:	2b00      	cmp	r3, #0
 8001e5e:	d10b      	bne.n	8001e78 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8001e60:	4b76      	ldr	r3, [pc, #472]	; (800203c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001e62:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001e66:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8001e6e:	4973      	ldr	r1, [pc, #460]	; (800203c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001e70:	4313      	orrs	r3, r2
 8001e72:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8001e76:	e001      	b.n	8001e7c <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8001e78:	7cfb      	ldrb	r3, [r7, #19]
 8001e7a:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	681b      	ldr	r3, [r3, #0]
 8001e80:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001e84:	2b00      	cmp	r3, #0
 8001e86:	d041      	beq.n	8001f0c <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8001e8c:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8001e90:	d02a      	beq.n	8001ee8 <HAL_RCCEx_PeriphCLKConfig+0x10c>
 8001e92:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8001e96:	d824      	bhi.n	8001ee2 <HAL_RCCEx_PeriphCLKConfig+0x106>
 8001e98:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8001e9c:	d008      	beq.n	8001eb0 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8001e9e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8001ea2:	d81e      	bhi.n	8001ee2 <HAL_RCCEx_PeriphCLKConfig+0x106>
 8001ea4:	2b00      	cmp	r3, #0
 8001ea6:	d00a      	beq.n	8001ebe <HAL_RCCEx_PeriphCLKConfig+0xe2>
 8001ea8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001eac:	d010      	beq.n	8001ed0 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8001eae:	e018      	b.n	8001ee2 <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8001eb0:	4b62      	ldr	r3, [pc, #392]	; (800203c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001eb2:	68db      	ldr	r3, [r3, #12]
 8001eb4:	4a61      	ldr	r2, [pc, #388]	; (800203c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001eb6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001eba:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8001ebc:	e015      	b.n	8001eea <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8001ebe:	687b      	ldr	r3, [r7, #4]
 8001ec0:	3304      	adds	r3, #4
 8001ec2:	2100      	movs	r1, #0
 8001ec4:	4618      	mov	r0, r3
 8001ec6:	f000 fa73 	bl	80023b0 <RCCEx_PLLSAI1_Config>
 8001eca:	4603      	mov	r3, r0
 8001ecc:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8001ece:	e00c      	b.n	8001eea <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	3320      	adds	r3, #32
 8001ed4:	2100      	movs	r1, #0
 8001ed6:	4618      	mov	r0, r3
 8001ed8:	f000 fb5e 	bl	8002598 <RCCEx_PLLSAI2_Config>
 8001edc:	4603      	mov	r3, r0
 8001ede:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8001ee0:	e003      	b.n	8001eea <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8001ee2:	2301      	movs	r3, #1
 8001ee4:	74fb      	strb	r3, [r7, #19]
      break;
 8001ee6:	e000      	b.n	8001eea <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 8001ee8:	bf00      	nop
    }

    if(ret == HAL_OK)
 8001eea:	7cfb      	ldrb	r3, [r7, #19]
 8001eec:	2b00      	cmp	r3, #0
 8001eee:	d10b      	bne.n	8001f08 <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8001ef0:	4b52      	ldr	r3, [pc, #328]	; (800203c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001ef2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001ef6:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8001efe:	494f      	ldr	r1, [pc, #316]	; (800203c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001f00:	4313      	orrs	r3, r2
 8001f02:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8001f06:	e001      	b.n	8001f0c <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8001f08:	7cfb      	ldrb	r3, [r7, #19]
 8001f0a:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	681b      	ldr	r3, [r3, #0]
 8001f10:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001f14:	2b00      	cmp	r3, #0
 8001f16:	f000 80a0 	beq.w	800205a <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001f1a:	2300      	movs	r3, #0
 8001f1c:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8001f1e:	4b47      	ldr	r3, [pc, #284]	; (800203c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001f20:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001f22:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001f26:	2b00      	cmp	r3, #0
 8001f28:	d101      	bne.n	8001f2e <HAL_RCCEx_PeriphCLKConfig+0x152>
 8001f2a:	2301      	movs	r3, #1
 8001f2c:	e000      	b.n	8001f30 <HAL_RCCEx_PeriphCLKConfig+0x154>
 8001f2e:	2300      	movs	r3, #0
 8001f30:	2b00      	cmp	r3, #0
 8001f32:	d00d      	beq.n	8001f50 <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001f34:	4b41      	ldr	r3, [pc, #260]	; (800203c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001f36:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001f38:	4a40      	ldr	r2, [pc, #256]	; (800203c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001f3a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001f3e:	6593      	str	r3, [r2, #88]	; 0x58
 8001f40:	4b3e      	ldr	r3, [pc, #248]	; (800203c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001f42:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001f44:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001f48:	60bb      	str	r3, [r7, #8]
 8001f4a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001f4c:	2301      	movs	r3, #1
 8001f4e:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001f50:	4b3b      	ldr	r3, [pc, #236]	; (8002040 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8001f52:	681b      	ldr	r3, [r3, #0]
 8001f54:	4a3a      	ldr	r2, [pc, #232]	; (8002040 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8001f56:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001f5a:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8001f5c:	f7fe fe16 	bl	8000b8c <HAL_GetTick>
 8001f60:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8001f62:	e009      	b.n	8001f78 <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001f64:	f7fe fe12 	bl	8000b8c <HAL_GetTick>
 8001f68:	4602      	mov	r2, r0
 8001f6a:	68fb      	ldr	r3, [r7, #12]
 8001f6c:	1ad3      	subs	r3, r2, r3
 8001f6e:	2b02      	cmp	r3, #2
 8001f70:	d902      	bls.n	8001f78 <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 8001f72:	2303      	movs	r3, #3
 8001f74:	74fb      	strb	r3, [r7, #19]
        break;
 8001f76:	e005      	b.n	8001f84 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8001f78:	4b31      	ldr	r3, [pc, #196]	; (8002040 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8001f7a:	681b      	ldr	r3, [r3, #0]
 8001f7c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001f80:	2b00      	cmp	r3, #0
 8001f82:	d0ef      	beq.n	8001f64 <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 8001f84:	7cfb      	ldrb	r3, [r7, #19]
 8001f86:	2b00      	cmp	r3, #0
 8001f88:	d15c      	bne.n	8002044 <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8001f8a:	4b2c      	ldr	r3, [pc, #176]	; (800203c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001f8c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001f90:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001f94:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8001f96:	697b      	ldr	r3, [r7, #20]
 8001f98:	2b00      	cmp	r3, #0
 8001f9a:	d01f      	beq.n	8001fdc <HAL_RCCEx_PeriphCLKConfig+0x200>
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8001fa2:	697a      	ldr	r2, [r7, #20]
 8001fa4:	429a      	cmp	r2, r3
 8001fa6:	d019      	beq.n	8001fdc <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8001fa8:	4b24      	ldr	r3, [pc, #144]	; (800203c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001faa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001fae:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001fb2:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8001fb4:	4b21      	ldr	r3, [pc, #132]	; (800203c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001fb6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001fba:	4a20      	ldr	r2, [pc, #128]	; (800203c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001fbc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001fc0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8001fc4:	4b1d      	ldr	r3, [pc, #116]	; (800203c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001fc6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001fca:	4a1c      	ldr	r2, [pc, #112]	; (800203c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001fcc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001fd0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8001fd4:	4a19      	ldr	r2, [pc, #100]	; (800203c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001fd6:	697b      	ldr	r3, [r7, #20]
 8001fd8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8001fdc:	697b      	ldr	r3, [r7, #20]
 8001fde:	f003 0301 	and.w	r3, r3, #1
 8001fe2:	2b00      	cmp	r3, #0
 8001fe4:	d016      	beq.n	8002014 <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001fe6:	f7fe fdd1 	bl	8000b8c <HAL_GetTick>
 8001fea:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001fec:	e00b      	b.n	8002006 <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001fee:	f7fe fdcd 	bl	8000b8c <HAL_GetTick>
 8001ff2:	4602      	mov	r2, r0
 8001ff4:	68fb      	ldr	r3, [r7, #12]
 8001ff6:	1ad3      	subs	r3, r2, r3
 8001ff8:	f241 3288 	movw	r2, #5000	; 0x1388
 8001ffc:	4293      	cmp	r3, r2
 8001ffe:	d902      	bls.n	8002006 <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 8002000:	2303      	movs	r3, #3
 8002002:	74fb      	strb	r3, [r7, #19]
            break;
 8002004:	e006      	b.n	8002014 <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002006:	4b0d      	ldr	r3, [pc, #52]	; (800203c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002008:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800200c:	f003 0302 	and.w	r3, r3, #2
 8002010:	2b00      	cmp	r3, #0
 8002012:	d0ec      	beq.n	8001fee <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 8002014:	7cfb      	ldrb	r3, [r7, #19]
 8002016:	2b00      	cmp	r3, #0
 8002018:	d10c      	bne.n	8002034 <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800201a:	4b08      	ldr	r3, [pc, #32]	; (800203c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800201c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002020:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800202a:	4904      	ldr	r1, [pc, #16]	; (800203c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800202c:	4313      	orrs	r3, r2
 800202e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8002032:	e009      	b.n	8002048 <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8002034:	7cfb      	ldrb	r3, [r7, #19]
 8002036:	74bb      	strb	r3, [r7, #18]
 8002038:	e006      	b.n	8002048 <HAL_RCCEx_PeriphCLKConfig+0x26c>
 800203a:	bf00      	nop
 800203c:	40021000 	.word	0x40021000
 8002040:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002044:	7cfb      	ldrb	r3, [r7, #19]
 8002046:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002048:	7c7b      	ldrb	r3, [r7, #17]
 800204a:	2b01      	cmp	r3, #1
 800204c:	d105      	bne.n	800205a <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800204e:	4b9e      	ldr	r3, [pc, #632]	; (80022c8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002050:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002052:	4a9d      	ldr	r2, [pc, #628]	; (80022c8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002054:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002058:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	681b      	ldr	r3, [r3, #0]
 800205e:	f003 0301 	and.w	r3, r3, #1
 8002062:	2b00      	cmp	r3, #0
 8002064:	d00a      	beq.n	800207c <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002066:	4b98      	ldr	r3, [pc, #608]	; (80022c8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002068:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800206c:	f023 0203 	bic.w	r2, r3, #3
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002074:	4994      	ldr	r1, [pc, #592]	; (80022c8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002076:	4313      	orrs	r3, r2
 8002078:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	681b      	ldr	r3, [r3, #0]
 8002080:	f003 0302 	and.w	r3, r3, #2
 8002084:	2b00      	cmp	r3, #0
 8002086:	d00a      	beq.n	800209e <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002088:	4b8f      	ldr	r3, [pc, #572]	; (80022c8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800208a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800208e:	f023 020c 	bic.w	r2, r3, #12
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002096:	498c      	ldr	r1, [pc, #560]	; (80022c8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002098:	4313      	orrs	r3, r2
 800209a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	681b      	ldr	r3, [r3, #0]
 80020a2:	f003 0304 	and.w	r3, r3, #4
 80020a6:	2b00      	cmp	r3, #0
 80020a8:	d00a      	beq.n	80020c0 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80020aa:	4b87      	ldr	r3, [pc, #540]	; (80022c8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80020ac:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80020b0:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020b8:	4983      	ldr	r1, [pc, #524]	; (80022c8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80020ba:	4313      	orrs	r3, r2
 80020bc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	681b      	ldr	r3, [r3, #0]
 80020c4:	f003 0308 	and.w	r3, r3, #8
 80020c8:	2b00      	cmp	r3, #0
 80020ca:	d00a      	beq.n	80020e2 <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80020cc:	4b7e      	ldr	r3, [pc, #504]	; (80022c8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80020ce:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80020d2:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80020da:	497b      	ldr	r1, [pc, #492]	; (80022c8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80020dc:	4313      	orrs	r3, r2
 80020de:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	681b      	ldr	r3, [r3, #0]
 80020e6:	f003 0310 	and.w	r3, r3, #16
 80020ea:	2b00      	cmp	r3, #0
 80020ec:	d00a      	beq.n	8002104 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80020ee:	4b76      	ldr	r3, [pc, #472]	; (80022c8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80020f0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80020f4:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80020fc:	4972      	ldr	r1, [pc, #456]	; (80022c8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80020fe:	4313      	orrs	r3, r2
 8002100:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	681b      	ldr	r3, [r3, #0]
 8002108:	f003 0320 	and.w	r3, r3, #32
 800210c:	2b00      	cmp	r3, #0
 800210e:	d00a      	beq.n	8002126 <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8002110:	4b6d      	ldr	r3, [pc, #436]	; (80022c8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002112:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002116:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800211e:	496a      	ldr	r1, [pc, #424]	; (80022c8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002120:	4313      	orrs	r3, r2
 8002122:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	681b      	ldr	r3, [r3, #0]
 800212a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800212e:	2b00      	cmp	r3, #0
 8002130:	d00a      	beq.n	8002148 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8002132:	4b65      	ldr	r3, [pc, #404]	; (80022c8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002134:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002138:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002140:	4961      	ldr	r1, [pc, #388]	; (80022c8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002142:	4313      	orrs	r3, r2
 8002144:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	681b      	ldr	r3, [r3, #0]
 800214c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002150:	2b00      	cmp	r3, #0
 8002152:	d00a      	beq.n	800216a <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8002154:	4b5c      	ldr	r3, [pc, #368]	; (80022c8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002156:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800215a:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002162:	4959      	ldr	r1, [pc, #356]	; (80022c8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002164:	4313      	orrs	r3, r2
 8002166:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	681b      	ldr	r3, [r3, #0]
 800216e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002172:	2b00      	cmp	r3, #0
 8002174:	d00a      	beq.n	800218c <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002176:	4b54      	ldr	r3, [pc, #336]	; (80022c8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002178:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800217c:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002184:	4950      	ldr	r1, [pc, #320]	; (80022c8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002186:	4313      	orrs	r3, r2
 8002188:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	681b      	ldr	r3, [r3, #0]
 8002190:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002194:	2b00      	cmp	r3, #0
 8002196:	d00a      	beq.n	80021ae <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8002198:	4b4b      	ldr	r3, [pc, #300]	; (80022c8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800219a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800219e:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80021a6:	4948      	ldr	r1, [pc, #288]	; (80022c8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80021a8:	4313      	orrs	r3, r2
 80021aa:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	681b      	ldr	r3, [r3, #0]
 80021b2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80021b6:	2b00      	cmp	r3, #0
 80021b8:	d00a      	beq.n	80021d0 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80021ba:	4b43      	ldr	r3, [pc, #268]	; (80022c8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80021bc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80021c0:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80021c8:	493f      	ldr	r1, [pc, #252]	; (80022c8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80021ca:	4313      	orrs	r3, r2
 80021cc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	681b      	ldr	r3, [r3, #0]
 80021d4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80021d8:	2b00      	cmp	r3, #0
 80021da:	d028      	beq.n	800222e <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80021dc:	4b3a      	ldr	r3, [pc, #232]	; (80022c8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80021de:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80021e2:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80021ea:	4937      	ldr	r1, [pc, #220]	; (80022c8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80021ec:	4313      	orrs	r3, r2
 80021ee:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80021f6:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80021fa:	d106      	bne.n	800220a <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80021fc:	4b32      	ldr	r3, [pc, #200]	; (80022c8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80021fe:	68db      	ldr	r3, [r3, #12]
 8002200:	4a31      	ldr	r2, [pc, #196]	; (80022c8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002202:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002206:	60d3      	str	r3, [r2, #12]
 8002208:	e011      	b.n	800222e <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800220e:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002212:	d10c      	bne.n	800222e <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	3304      	adds	r3, #4
 8002218:	2101      	movs	r1, #1
 800221a:	4618      	mov	r0, r3
 800221c:	f000 f8c8 	bl	80023b0 <RCCEx_PLLSAI1_Config>
 8002220:	4603      	mov	r3, r0
 8002222:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8002224:	7cfb      	ldrb	r3, [r7, #19]
 8002226:	2b00      	cmp	r3, #0
 8002228:	d001      	beq.n	800222e <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 800222a:	7cfb      	ldrb	r3, [r7, #19]
 800222c:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	681b      	ldr	r3, [r3, #0]
 8002232:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002236:	2b00      	cmp	r3, #0
 8002238:	d028      	beq.n	800228c <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 800223a:	4b23      	ldr	r3, [pc, #140]	; (80022c8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800223c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002240:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002248:	491f      	ldr	r1, [pc, #124]	; (80022c8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800224a:	4313      	orrs	r3, r2
 800224c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002254:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002258:	d106      	bne.n	8002268 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800225a:	4b1b      	ldr	r3, [pc, #108]	; (80022c8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800225c:	68db      	ldr	r3, [r3, #12]
 800225e:	4a1a      	ldr	r2, [pc, #104]	; (80022c8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002260:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002264:	60d3      	str	r3, [r2, #12]
 8002266:	e011      	b.n	800228c <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800226c:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002270:	d10c      	bne.n	800228c <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	3304      	adds	r3, #4
 8002276:	2101      	movs	r1, #1
 8002278:	4618      	mov	r0, r3
 800227a:	f000 f899 	bl	80023b0 <RCCEx_PLLSAI1_Config>
 800227e:	4603      	mov	r3, r0
 8002280:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002282:	7cfb      	ldrb	r3, [r7, #19]
 8002284:	2b00      	cmp	r3, #0
 8002286:	d001      	beq.n	800228c <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 8002288:	7cfb      	ldrb	r3, [r7, #19]
 800228a:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	681b      	ldr	r3, [r3, #0]
 8002290:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002294:	2b00      	cmp	r3, #0
 8002296:	d02b      	beq.n	80022f0 <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8002298:	4b0b      	ldr	r3, [pc, #44]	; (80022c8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800229a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800229e:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80022a6:	4908      	ldr	r1, [pc, #32]	; (80022c8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80022a8:	4313      	orrs	r3, r2
 80022aa:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80022b2:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80022b6:	d109      	bne.n	80022cc <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80022b8:	4b03      	ldr	r3, [pc, #12]	; (80022c8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80022ba:	68db      	ldr	r3, [r3, #12]
 80022bc:	4a02      	ldr	r2, [pc, #8]	; (80022c8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80022be:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80022c2:	60d3      	str	r3, [r2, #12]
 80022c4:	e014      	b.n	80022f0 <HAL_RCCEx_PeriphCLKConfig+0x514>
 80022c6:	bf00      	nop
 80022c8:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80022d0:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80022d4:	d10c      	bne.n	80022f0 <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	3304      	adds	r3, #4
 80022da:	2101      	movs	r1, #1
 80022dc:	4618      	mov	r0, r3
 80022de:	f000 f867 	bl	80023b0 <RCCEx_PLLSAI1_Config>
 80022e2:	4603      	mov	r3, r0
 80022e4:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80022e6:	7cfb      	ldrb	r3, [r7, #19]
 80022e8:	2b00      	cmp	r3, #0
 80022ea:	d001      	beq.n	80022f0 <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 80022ec:	7cfb      	ldrb	r3, [r7, #19]
 80022ee:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	681b      	ldr	r3, [r3, #0]
 80022f4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80022f8:	2b00      	cmp	r3, #0
 80022fa:	d02f      	beq.n	800235c <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80022fc:	4b2b      	ldr	r3, [pc, #172]	; (80023ac <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80022fe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002302:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800230a:	4928      	ldr	r1, [pc, #160]	; (80023ac <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 800230c:	4313      	orrs	r3, r2
 800230e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002316:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800231a:	d10d      	bne.n	8002338 <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	3304      	adds	r3, #4
 8002320:	2102      	movs	r1, #2
 8002322:	4618      	mov	r0, r3
 8002324:	f000 f844 	bl	80023b0 <RCCEx_PLLSAI1_Config>
 8002328:	4603      	mov	r3, r0
 800232a:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800232c:	7cfb      	ldrb	r3, [r7, #19]
 800232e:	2b00      	cmp	r3, #0
 8002330:	d014      	beq.n	800235c <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8002332:	7cfb      	ldrb	r3, [r7, #19]
 8002334:	74bb      	strb	r3, [r7, #18]
 8002336:	e011      	b.n	800235c <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800233c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002340:	d10c      	bne.n	800235c <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	3320      	adds	r3, #32
 8002346:	2102      	movs	r1, #2
 8002348:	4618      	mov	r0, r3
 800234a:	f000 f925 	bl	8002598 <RCCEx_PLLSAI2_Config>
 800234e:	4603      	mov	r3, r0
 8002350:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002352:	7cfb      	ldrb	r3, [r7, #19]
 8002354:	2b00      	cmp	r3, #0
 8002356:	d001      	beq.n	800235c <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8002358:	7cfb      	ldrb	r3, [r7, #19]
 800235a:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	681b      	ldr	r3, [r3, #0]
 8002360:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002364:	2b00      	cmp	r3, #0
 8002366:	d00a      	beq.n	800237e <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8002368:	4b10      	ldr	r3, [pc, #64]	; (80023ac <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 800236a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800236e:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002376:	490d      	ldr	r1, [pc, #52]	; (80023ac <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002378:	4313      	orrs	r3, r2
 800237a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	681b      	ldr	r3, [r3, #0]
 8002382:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002386:	2b00      	cmp	r3, #0
 8002388:	d00b      	beq.n	80023a2 <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800238a:	4b08      	ldr	r3, [pc, #32]	; (80023ac <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 800238c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002390:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800239a:	4904      	ldr	r1, [pc, #16]	; (80023ac <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 800239c:	4313      	orrs	r3, r2
 800239e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 80023a2:	7cbb      	ldrb	r3, [r7, #18]
}
 80023a4:	4618      	mov	r0, r3
 80023a6:	3718      	adds	r7, #24
 80023a8:	46bd      	mov	sp, r7
 80023aa:	bd80      	pop	{r7, pc}
 80023ac:	40021000 	.word	0x40021000

080023b0 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 80023b0:	b580      	push	{r7, lr}
 80023b2:	b084      	sub	sp, #16
 80023b4:	af00      	add	r7, sp, #0
 80023b6:	6078      	str	r0, [r7, #4]
 80023b8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80023ba:	2300      	movs	r3, #0
 80023bc:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80023be:	4b75      	ldr	r3, [pc, #468]	; (8002594 <RCCEx_PLLSAI1_Config+0x1e4>)
 80023c0:	68db      	ldr	r3, [r3, #12]
 80023c2:	f003 0303 	and.w	r3, r3, #3
 80023c6:	2b00      	cmp	r3, #0
 80023c8:	d018      	beq.n	80023fc <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 80023ca:	4b72      	ldr	r3, [pc, #456]	; (8002594 <RCCEx_PLLSAI1_Config+0x1e4>)
 80023cc:	68db      	ldr	r3, [r3, #12]
 80023ce:	f003 0203 	and.w	r2, r3, #3
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	681b      	ldr	r3, [r3, #0]
 80023d6:	429a      	cmp	r2, r3
 80023d8:	d10d      	bne.n	80023f6 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	681b      	ldr	r3, [r3, #0]
       ||
 80023de:	2b00      	cmp	r3, #0
 80023e0:	d009      	beq.n	80023f6 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 80023e2:	4b6c      	ldr	r3, [pc, #432]	; (8002594 <RCCEx_PLLSAI1_Config+0x1e4>)
 80023e4:	68db      	ldr	r3, [r3, #12]
 80023e6:	091b      	lsrs	r3, r3, #4
 80023e8:	f003 0307 	and.w	r3, r3, #7
 80023ec:	1c5a      	adds	r2, r3, #1
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	685b      	ldr	r3, [r3, #4]
       ||
 80023f2:	429a      	cmp	r2, r3
 80023f4:	d047      	beq.n	8002486 <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 80023f6:	2301      	movs	r3, #1
 80023f8:	73fb      	strb	r3, [r7, #15]
 80023fa:	e044      	b.n	8002486 <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	681b      	ldr	r3, [r3, #0]
 8002400:	2b03      	cmp	r3, #3
 8002402:	d018      	beq.n	8002436 <RCCEx_PLLSAI1_Config+0x86>
 8002404:	2b03      	cmp	r3, #3
 8002406:	d825      	bhi.n	8002454 <RCCEx_PLLSAI1_Config+0xa4>
 8002408:	2b01      	cmp	r3, #1
 800240a:	d002      	beq.n	8002412 <RCCEx_PLLSAI1_Config+0x62>
 800240c:	2b02      	cmp	r3, #2
 800240e:	d009      	beq.n	8002424 <RCCEx_PLLSAI1_Config+0x74>
 8002410:	e020      	b.n	8002454 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8002412:	4b60      	ldr	r3, [pc, #384]	; (8002594 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002414:	681b      	ldr	r3, [r3, #0]
 8002416:	f003 0302 	and.w	r3, r3, #2
 800241a:	2b00      	cmp	r3, #0
 800241c:	d11d      	bne.n	800245a <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 800241e:	2301      	movs	r3, #1
 8002420:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002422:	e01a      	b.n	800245a <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8002424:	4b5b      	ldr	r3, [pc, #364]	; (8002594 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002426:	681b      	ldr	r3, [r3, #0]
 8002428:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800242c:	2b00      	cmp	r3, #0
 800242e:	d116      	bne.n	800245e <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8002430:	2301      	movs	r3, #1
 8002432:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002434:	e013      	b.n	800245e <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8002436:	4b57      	ldr	r3, [pc, #348]	; (8002594 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002438:	681b      	ldr	r3, [r3, #0]
 800243a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800243e:	2b00      	cmp	r3, #0
 8002440:	d10f      	bne.n	8002462 <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8002442:	4b54      	ldr	r3, [pc, #336]	; (8002594 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002444:	681b      	ldr	r3, [r3, #0]
 8002446:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800244a:	2b00      	cmp	r3, #0
 800244c:	d109      	bne.n	8002462 <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 800244e:	2301      	movs	r3, #1
 8002450:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8002452:	e006      	b.n	8002462 <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8002454:	2301      	movs	r3, #1
 8002456:	73fb      	strb	r3, [r7, #15]
      break;
 8002458:	e004      	b.n	8002464 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800245a:	bf00      	nop
 800245c:	e002      	b.n	8002464 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800245e:	bf00      	nop
 8002460:	e000      	b.n	8002464 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8002462:	bf00      	nop
    }

    if(status == HAL_OK)
 8002464:	7bfb      	ldrb	r3, [r7, #15]
 8002466:	2b00      	cmp	r3, #0
 8002468:	d10d      	bne.n	8002486 <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 800246a:	4b4a      	ldr	r3, [pc, #296]	; (8002594 <RCCEx_PLLSAI1_Config+0x1e4>)
 800246c:	68db      	ldr	r3, [r3, #12]
 800246e:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	6819      	ldr	r1, [r3, #0]
 8002476:	687b      	ldr	r3, [r7, #4]
 8002478:	685b      	ldr	r3, [r3, #4]
 800247a:	3b01      	subs	r3, #1
 800247c:	011b      	lsls	r3, r3, #4
 800247e:	430b      	orrs	r3, r1
 8002480:	4944      	ldr	r1, [pc, #272]	; (8002594 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002482:	4313      	orrs	r3, r2
 8002484:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8002486:	7bfb      	ldrb	r3, [r7, #15]
 8002488:	2b00      	cmp	r3, #0
 800248a:	d17d      	bne.n	8002588 <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 800248c:	4b41      	ldr	r3, [pc, #260]	; (8002594 <RCCEx_PLLSAI1_Config+0x1e4>)
 800248e:	681b      	ldr	r3, [r3, #0]
 8002490:	4a40      	ldr	r2, [pc, #256]	; (8002594 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002492:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8002496:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002498:	f7fe fb78 	bl	8000b8c <HAL_GetTick>
 800249c:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 800249e:	e009      	b.n	80024b4 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80024a0:	f7fe fb74 	bl	8000b8c <HAL_GetTick>
 80024a4:	4602      	mov	r2, r0
 80024a6:	68bb      	ldr	r3, [r7, #8]
 80024a8:	1ad3      	subs	r3, r2, r3
 80024aa:	2b02      	cmp	r3, #2
 80024ac:	d902      	bls.n	80024b4 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 80024ae:	2303      	movs	r3, #3
 80024b0:	73fb      	strb	r3, [r7, #15]
        break;
 80024b2:	e005      	b.n	80024c0 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80024b4:	4b37      	ldr	r3, [pc, #220]	; (8002594 <RCCEx_PLLSAI1_Config+0x1e4>)
 80024b6:	681b      	ldr	r3, [r3, #0]
 80024b8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80024bc:	2b00      	cmp	r3, #0
 80024be:	d1ef      	bne.n	80024a0 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 80024c0:	7bfb      	ldrb	r3, [r7, #15]
 80024c2:	2b00      	cmp	r3, #0
 80024c4:	d160      	bne.n	8002588 <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 80024c6:	683b      	ldr	r3, [r7, #0]
 80024c8:	2b00      	cmp	r3, #0
 80024ca:	d111      	bne.n	80024f0 <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80024cc:	4b31      	ldr	r3, [pc, #196]	; (8002594 <RCCEx_PLLSAI1_Config+0x1e4>)
 80024ce:	691b      	ldr	r3, [r3, #16]
 80024d0:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 80024d4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80024d8:	687a      	ldr	r2, [r7, #4]
 80024da:	6892      	ldr	r2, [r2, #8]
 80024dc:	0211      	lsls	r1, r2, #8
 80024de:	687a      	ldr	r2, [r7, #4]
 80024e0:	68d2      	ldr	r2, [r2, #12]
 80024e2:	0912      	lsrs	r2, r2, #4
 80024e4:	0452      	lsls	r2, r2, #17
 80024e6:	430a      	orrs	r2, r1
 80024e8:	492a      	ldr	r1, [pc, #168]	; (8002594 <RCCEx_PLLSAI1_Config+0x1e4>)
 80024ea:	4313      	orrs	r3, r2
 80024ec:	610b      	str	r3, [r1, #16]
 80024ee:	e027      	b.n	8002540 <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 80024f0:	683b      	ldr	r3, [r7, #0]
 80024f2:	2b01      	cmp	r3, #1
 80024f4:	d112      	bne.n	800251c <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80024f6:	4b27      	ldr	r3, [pc, #156]	; (8002594 <RCCEx_PLLSAI1_Config+0x1e4>)
 80024f8:	691b      	ldr	r3, [r3, #16]
 80024fa:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 80024fe:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8002502:	687a      	ldr	r2, [r7, #4]
 8002504:	6892      	ldr	r2, [r2, #8]
 8002506:	0211      	lsls	r1, r2, #8
 8002508:	687a      	ldr	r2, [r7, #4]
 800250a:	6912      	ldr	r2, [r2, #16]
 800250c:	0852      	lsrs	r2, r2, #1
 800250e:	3a01      	subs	r2, #1
 8002510:	0552      	lsls	r2, r2, #21
 8002512:	430a      	orrs	r2, r1
 8002514:	491f      	ldr	r1, [pc, #124]	; (8002594 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002516:	4313      	orrs	r3, r2
 8002518:	610b      	str	r3, [r1, #16]
 800251a:	e011      	b.n	8002540 <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800251c:	4b1d      	ldr	r3, [pc, #116]	; (8002594 <RCCEx_PLLSAI1_Config+0x1e4>)
 800251e:	691b      	ldr	r3, [r3, #16]
 8002520:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8002524:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8002528:	687a      	ldr	r2, [r7, #4]
 800252a:	6892      	ldr	r2, [r2, #8]
 800252c:	0211      	lsls	r1, r2, #8
 800252e:	687a      	ldr	r2, [r7, #4]
 8002530:	6952      	ldr	r2, [r2, #20]
 8002532:	0852      	lsrs	r2, r2, #1
 8002534:	3a01      	subs	r2, #1
 8002536:	0652      	lsls	r2, r2, #25
 8002538:	430a      	orrs	r2, r1
 800253a:	4916      	ldr	r1, [pc, #88]	; (8002594 <RCCEx_PLLSAI1_Config+0x1e4>)
 800253c:	4313      	orrs	r3, r2
 800253e:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8002540:	4b14      	ldr	r3, [pc, #80]	; (8002594 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002542:	681b      	ldr	r3, [r3, #0]
 8002544:	4a13      	ldr	r2, [pc, #76]	; (8002594 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002546:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800254a:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800254c:	f7fe fb1e 	bl	8000b8c <HAL_GetTick>
 8002550:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8002552:	e009      	b.n	8002568 <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8002554:	f7fe fb1a 	bl	8000b8c <HAL_GetTick>
 8002558:	4602      	mov	r2, r0
 800255a:	68bb      	ldr	r3, [r7, #8]
 800255c:	1ad3      	subs	r3, r2, r3
 800255e:	2b02      	cmp	r3, #2
 8002560:	d902      	bls.n	8002568 <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 8002562:	2303      	movs	r3, #3
 8002564:	73fb      	strb	r3, [r7, #15]
          break;
 8002566:	e005      	b.n	8002574 <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8002568:	4b0a      	ldr	r3, [pc, #40]	; (8002594 <RCCEx_PLLSAI1_Config+0x1e4>)
 800256a:	681b      	ldr	r3, [r3, #0]
 800256c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002570:	2b00      	cmp	r3, #0
 8002572:	d0ef      	beq.n	8002554 <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 8002574:	7bfb      	ldrb	r3, [r7, #15]
 8002576:	2b00      	cmp	r3, #0
 8002578:	d106      	bne.n	8002588 <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 800257a:	4b06      	ldr	r3, [pc, #24]	; (8002594 <RCCEx_PLLSAI1_Config+0x1e4>)
 800257c:	691a      	ldr	r2, [r3, #16]
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	699b      	ldr	r3, [r3, #24]
 8002582:	4904      	ldr	r1, [pc, #16]	; (8002594 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002584:	4313      	orrs	r3, r2
 8002586:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8002588:	7bfb      	ldrb	r3, [r7, #15]
}
 800258a:	4618      	mov	r0, r3
 800258c:	3710      	adds	r7, #16
 800258e:	46bd      	mov	sp, r7
 8002590:	bd80      	pop	{r7, pc}
 8002592:	bf00      	nop
 8002594:	40021000 	.word	0x40021000

08002598 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8002598:	b580      	push	{r7, lr}
 800259a:	b084      	sub	sp, #16
 800259c:	af00      	add	r7, sp, #0
 800259e:	6078      	str	r0, [r7, #4]
 80025a0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80025a2:	2300      	movs	r3, #0
 80025a4:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80025a6:	4b6a      	ldr	r3, [pc, #424]	; (8002750 <RCCEx_PLLSAI2_Config+0x1b8>)
 80025a8:	68db      	ldr	r3, [r3, #12]
 80025aa:	f003 0303 	and.w	r3, r3, #3
 80025ae:	2b00      	cmp	r3, #0
 80025b0:	d018      	beq.n	80025e4 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 80025b2:	4b67      	ldr	r3, [pc, #412]	; (8002750 <RCCEx_PLLSAI2_Config+0x1b8>)
 80025b4:	68db      	ldr	r3, [r3, #12]
 80025b6:	f003 0203 	and.w	r2, r3, #3
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	681b      	ldr	r3, [r3, #0]
 80025be:	429a      	cmp	r2, r3
 80025c0:	d10d      	bne.n	80025de <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	681b      	ldr	r3, [r3, #0]
       ||
 80025c6:	2b00      	cmp	r3, #0
 80025c8:	d009      	beq.n	80025de <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 80025ca:	4b61      	ldr	r3, [pc, #388]	; (8002750 <RCCEx_PLLSAI2_Config+0x1b8>)
 80025cc:	68db      	ldr	r3, [r3, #12]
 80025ce:	091b      	lsrs	r3, r3, #4
 80025d0:	f003 0307 	and.w	r3, r3, #7
 80025d4:	1c5a      	adds	r2, r3, #1
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	685b      	ldr	r3, [r3, #4]
       ||
 80025da:	429a      	cmp	r2, r3
 80025dc:	d047      	beq.n	800266e <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 80025de:	2301      	movs	r3, #1
 80025e0:	73fb      	strb	r3, [r7, #15]
 80025e2:	e044      	b.n	800266e <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	681b      	ldr	r3, [r3, #0]
 80025e8:	2b03      	cmp	r3, #3
 80025ea:	d018      	beq.n	800261e <RCCEx_PLLSAI2_Config+0x86>
 80025ec:	2b03      	cmp	r3, #3
 80025ee:	d825      	bhi.n	800263c <RCCEx_PLLSAI2_Config+0xa4>
 80025f0:	2b01      	cmp	r3, #1
 80025f2:	d002      	beq.n	80025fa <RCCEx_PLLSAI2_Config+0x62>
 80025f4:	2b02      	cmp	r3, #2
 80025f6:	d009      	beq.n	800260c <RCCEx_PLLSAI2_Config+0x74>
 80025f8:	e020      	b.n	800263c <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80025fa:	4b55      	ldr	r3, [pc, #340]	; (8002750 <RCCEx_PLLSAI2_Config+0x1b8>)
 80025fc:	681b      	ldr	r3, [r3, #0]
 80025fe:	f003 0302 	and.w	r3, r3, #2
 8002602:	2b00      	cmp	r3, #0
 8002604:	d11d      	bne.n	8002642 <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 8002606:	2301      	movs	r3, #1
 8002608:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800260a:	e01a      	b.n	8002642 <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 800260c:	4b50      	ldr	r3, [pc, #320]	; (8002750 <RCCEx_PLLSAI2_Config+0x1b8>)
 800260e:	681b      	ldr	r3, [r3, #0]
 8002610:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002614:	2b00      	cmp	r3, #0
 8002616:	d116      	bne.n	8002646 <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 8002618:	2301      	movs	r3, #1
 800261a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800261c:	e013      	b.n	8002646 <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 800261e:	4b4c      	ldr	r3, [pc, #304]	; (8002750 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002620:	681b      	ldr	r3, [r3, #0]
 8002622:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002626:	2b00      	cmp	r3, #0
 8002628:	d10f      	bne.n	800264a <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 800262a:	4b49      	ldr	r3, [pc, #292]	; (8002750 <RCCEx_PLLSAI2_Config+0x1b8>)
 800262c:	681b      	ldr	r3, [r3, #0]
 800262e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002632:	2b00      	cmp	r3, #0
 8002634:	d109      	bne.n	800264a <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 8002636:	2301      	movs	r3, #1
 8002638:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800263a:	e006      	b.n	800264a <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 800263c:	2301      	movs	r3, #1
 800263e:	73fb      	strb	r3, [r7, #15]
      break;
 8002640:	e004      	b.n	800264c <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8002642:	bf00      	nop
 8002644:	e002      	b.n	800264c <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8002646:	bf00      	nop
 8002648:	e000      	b.n	800264c <RCCEx_PLLSAI2_Config+0xb4>
      break;
 800264a:	bf00      	nop
    }

    if(status == HAL_OK)
 800264c:	7bfb      	ldrb	r3, [r7, #15]
 800264e:	2b00      	cmp	r3, #0
 8002650:	d10d      	bne.n	800266e <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8002652:	4b3f      	ldr	r3, [pc, #252]	; (8002750 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002654:	68db      	ldr	r3, [r3, #12]
 8002656:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	6819      	ldr	r1, [r3, #0]
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	685b      	ldr	r3, [r3, #4]
 8002662:	3b01      	subs	r3, #1
 8002664:	011b      	lsls	r3, r3, #4
 8002666:	430b      	orrs	r3, r1
 8002668:	4939      	ldr	r1, [pc, #228]	; (8002750 <RCCEx_PLLSAI2_Config+0x1b8>)
 800266a:	4313      	orrs	r3, r2
 800266c:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 800266e:	7bfb      	ldrb	r3, [r7, #15]
 8002670:	2b00      	cmp	r3, #0
 8002672:	d167      	bne.n	8002744 <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8002674:	4b36      	ldr	r3, [pc, #216]	; (8002750 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002676:	681b      	ldr	r3, [r3, #0]
 8002678:	4a35      	ldr	r2, [pc, #212]	; (8002750 <RCCEx_PLLSAI2_Config+0x1b8>)
 800267a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800267e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002680:	f7fe fa84 	bl	8000b8c <HAL_GetTick>
 8002684:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8002686:	e009      	b.n	800269c <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8002688:	f7fe fa80 	bl	8000b8c <HAL_GetTick>
 800268c:	4602      	mov	r2, r0
 800268e:	68bb      	ldr	r3, [r7, #8]
 8002690:	1ad3      	subs	r3, r2, r3
 8002692:	2b02      	cmp	r3, #2
 8002694:	d902      	bls.n	800269c <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8002696:	2303      	movs	r3, #3
 8002698:	73fb      	strb	r3, [r7, #15]
        break;
 800269a:	e005      	b.n	80026a8 <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 800269c:	4b2c      	ldr	r3, [pc, #176]	; (8002750 <RCCEx_PLLSAI2_Config+0x1b8>)
 800269e:	681b      	ldr	r3, [r3, #0]
 80026a0:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80026a4:	2b00      	cmp	r3, #0
 80026a6:	d1ef      	bne.n	8002688 <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 80026a8:	7bfb      	ldrb	r3, [r7, #15]
 80026aa:	2b00      	cmp	r3, #0
 80026ac:	d14a      	bne.n	8002744 <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 80026ae:	683b      	ldr	r3, [r7, #0]
 80026b0:	2b00      	cmp	r3, #0
 80026b2:	d111      	bne.n	80026d8 <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 80026b4:	4b26      	ldr	r3, [pc, #152]	; (8002750 <RCCEx_PLLSAI2_Config+0x1b8>)
 80026b6:	695b      	ldr	r3, [r3, #20]
 80026b8:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 80026bc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80026c0:	687a      	ldr	r2, [r7, #4]
 80026c2:	6892      	ldr	r2, [r2, #8]
 80026c4:	0211      	lsls	r1, r2, #8
 80026c6:	687a      	ldr	r2, [r7, #4]
 80026c8:	68d2      	ldr	r2, [r2, #12]
 80026ca:	0912      	lsrs	r2, r2, #4
 80026cc:	0452      	lsls	r2, r2, #17
 80026ce:	430a      	orrs	r2, r1
 80026d0:	491f      	ldr	r1, [pc, #124]	; (8002750 <RCCEx_PLLSAI2_Config+0x1b8>)
 80026d2:	4313      	orrs	r3, r2
 80026d4:	614b      	str	r3, [r1, #20]
 80026d6:	e011      	b.n	80026fc <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 80026d8:	4b1d      	ldr	r3, [pc, #116]	; (8002750 <RCCEx_PLLSAI2_Config+0x1b8>)
 80026da:	695b      	ldr	r3, [r3, #20]
 80026dc:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 80026e0:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80026e4:	687a      	ldr	r2, [r7, #4]
 80026e6:	6892      	ldr	r2, [r2, #8]
 80026e8:	0211      	lsls	r1, r2, #8
 80026ea:	687a      	ldr	r2, [r7, #4]
 80026ec:	6912      	ldr	r2, [r2, #16]
 80026ee:	0852      	lsrs	r2, r2, #1
 80026f0:	3a01      	subs	r2, #1
 80026f2:	0652      	lsls	r2, r2, #25
 80026f4:	430a      	orrs	r2, r1
 80026f6:	4916      	ldr	r1, [pc, #88]	; (8002750 <RCCEx_PLLSAI2_Config+0x1b8>)
 80026f8:	4313      	orrs	r3, r2
 80026fa:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 80026fc:	4b14      	ldr	r3, [pc, #80]	; (8002750 <RCCEx_PLLSAI2_Config+0x1b8>)
 80026fe:	681b      	ldr	r3, [r3, #0]
 8002700:	4a13      	ldr	r2, [pc, #76]	; (8002750 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002702:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002706:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002708:	f7fe fa40 	bl	8000b8c <HAL_GetTick>
 800270c:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 800270e:	e009      	b.n	8002724 <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8002710:	f7fe fa3c 	bl	8000b8c <HAL_GetTick>
 8002714:	4602      	mov	r2, r0
 8002716:	68bb      	ldr	r3, [r7, #8]
 8002718:	1ad3      	subs	r3, r2, r3
 800271a:	2b02      	cmp	r3, #2
 800271c:	d902      	bls.n	8002724 <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 800271e:	2303      	movs	r3, #3
 8002720:	73fb      	strb	r3, [r7, #15]
          break;
 8002722:	e005      	b.n	8002730 <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8002724:	4b0a      	ldr	r3, [pc, #40]	; (8002750 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002726:	681b      	ldr	r3, [r3, #0]
 8002728:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800272c:	2b00      	cmp	r3, #0
 800272e:	d0ef      	beq.n	8002710 <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 8002730:	7bfb      	ldrb	r3, [r7, #15]
 8002732:	2b00      	cmp	r3, #0
 8002734:	d106      	bne.n	8002744 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8002736:	4b06      	ldr	r3, [pc, #24]	; (8002750 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002738:	695a      	ldr	r2, [r3, #20]
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	695b      	ldr	r3, [r3, #20]
 800273e:	4904      	ldr	r1, [pc, #16]	; (8002750 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002740:	4313      	orrs	r3, r2
 8002742:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8002744:	7bfb      	ldrb	r3, [r7, #15]
}
 8002746:	4618      	mov	r0, r3
 8002748:	3710      	adds	r7, #16
 800274a:	46bd      	mov	sp, r7
 800274c:	bd80      	pop	{r7, pc}
 800274e:	bf00      	nop
 8002750:	40021000 	.word	0x40021000

08002754 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002754:	b580      	push	{r7, lr}
 8002756:	b082      	sub	sp, #8
 8002758:	af00      	add	r7, sp, #0
 800275a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	2b00      	cmp	r3, #0
 8002760:	d101      	bne.n	8002766 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002762:	2301      	movs	r3, #1
 8002764:	e049      	b.n	80027fa <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800276c:	b2db      	uxtb	r3, r3
 800276e:	2b00      	cmp	r3, #0
 8002770:	d106      	bne.n	8002780 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	2200      	movs	r2, #0
 8002776:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800277a:	6878      	ldr	r0, [r7, #4]
 800277c:	f7fe f87e 	bl	800087c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	2202      	movs	r2, #2
 8002784:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	681a      	ldr	r2, [r3, #0]
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	3304      	adds	r3, #4
 8002790:	4619      	mov	r1, r3
 8002792:	4610      	mov	r0, r2
 8002794:	f000 f89e 	bl	80028d4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	2201      	movs	r2, #1
 800279c:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	2201      	movs	r2, #1
 80027a4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	2201      	movs	r2, #1
 80027ac:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	2201      	movs	r2, #1
 80027b4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	2201      	movs	r2, #1
 80027bc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	2201      	movs	r2, #1
 80027c4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	2201      	movs	r2, #1
 80027cc:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	2201      	movs	r2, #1
 80027d4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	2201      	movs	r2, #1
 80027dc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	2201      	movs	r2, #1
 80027e4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	2201      	movs	r2, #1
 80027ec:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	2201      	movs	r2, #1
 80027f4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80027f8:	2300      	movs	r3, #0
}
 80027fa:	4618      	mov	r0, r3
 80027fc:	3708      	adds	r7, #8
 80027fe:	46bd      	mov	sp, r7
 8002800:	bd80      	pop	{r7, pc}
	...

08002804 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8002804:	b480      	push	{r7}
 8002806:	b085      	sub	sp, #20
 8002808:	af00      	add	r7, sp, #0
 800280a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002812:	b2db      	uxtb	r3, r3
 8002814:	2b01      	cmp	r3, #1
 8002816:	d001      	beq.n	800281c <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8002818:	2301      	movs	r3, #1
 800281a:	e047      	b.n	80028ac <HAL_TIM_Base_Start+0xa8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	2202      	movs	r2, #2
 8002820:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	681b      	ldr	r3, [r3, #0]
 8002828:	4a23      	ldr	r2, [pc, #140]	; (80028b8 <HAL_TIM_Base_Start+0xb4>)
 800282a:	4293      	cmp	r3, r2
 800282c:	d01d      	beq.n	800286a <HAL_TIM_Base_Start+0x66>
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	681b      	ldr	r3, [r3, #0]
 8002832:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002836:	d018      	beq.n	800286a <HAL_TIM_Base_Start+0x66>
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	681b      	ldr	r3, [r3, #0]
 800283c:	4a1f      	ldr	r2, [pc, #124]	; (80028bc <HAL_TIM_Base_Start+0xb8>)
 800283e:	4293      	cmp	r3, r2
 8002840:	d013      	beq.n	800286a <HAL_TIM_Base_Start+0x66>
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	681b      	ldr	r3, [r3, #0]
 8002846:	4a1e      	ldr	r2, [pc, #120]	; (80028c0 <HAL_TIM_Base_Start+0xbc>)
 8002848:	4293      	cmp	r3, r2
 800284a:	d00e      	beq.n	800286a <HAL_TIM_Base_Start+0x66>
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	681b      	ldr	r3, [r3, #0]
 8002850:	4a1c      	ldr	r2, [pc, #112]	; (80028c4 <HAL_TIM_Base_Start+0xc0>)
 8002852:	4293      	cmp	r3, r2
 8002854:	d009      	beq.n	800286a <HAL_TIM_Base_Start+0x66>
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	681b      	ldr	r3, [r3, #0]
 800285a:	4a1b      	ldr	r2, [pc, #108]	; (80028c8 <HAL_TIM_Base_Start+0xc4>)
 800285c:	4293      	cmp	r3, r2
 800285e:	d004      	beq.n	800286a <HAL_TIM_Base_Start+0x66>
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	681b      	ldr	r3, [r3, #0]
 8002864:	4a19      	ldr	r2, [pc, #100]	; (80028cc <HAL_TIM_Base_Start+0xc8>)
 8002866:	4293      	cmp	r3, r2
 8002868:	d115      	bne.n	8002896 <HAL_TIM_Base_Start+0x92>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	681b      	ldr	r3, [r3, #0]
 800286e:	689a      	ldr	r2, [r3, #8]
 8002870:	4b17      	ldr	r3, [pc, #92]	; (80028d0 <HAL_TIM_Base_Start+0xcc>)
 8002872:	4013      	ands	r3, r2
 8002874:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002876:	68fb      	ldr	r3, [r7, #12]
 8002878:	2b06      	cmp	r3, #6
 800287a:	d015      	beq.n	80028a8 <HAL_TIM_Base_Start+0xa4>
 800287c:	68fb      	ldr	r3, [r7, #12]
 800287e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002882:	d011      	beq.n	80028a8 <HAL_TIM_Base_Start+0xa4>
    {
      __HAL_TIM_ENABLE(htim);
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	681b      	ldr	r3, [r3, #0]
 8002888:	681a      	ldr	r2, [r3, #0]
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	681b      	ldr	r3, [r3, #0]
 800288e:	f042 0201 	orr.w	r2, r2, #1
 8002892:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002894:	e008      	b.n	80028a8 <HAL_TIM_Base_Start+0xa4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	681b      	ldr	r3, [r3, #0]
 800289a:	681a      	ldr	r2, [r3, #0]
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	681b      	ldr	r3, [r3, #0]
 80028a0:	f042 0201 	orr.w	r2, r2, #1
 80028a4:	601a      	str	r2, [r3, #0]
 80028a6:	e000      	b.n	80028aa <HAL_TIM_Base_Start+0xa6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80028a8:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80028aa:	2300      	movs	r3, #0
}
 80028ac:	4618      	mov	r0, r3
 80028ae:	3714      	adds	r7, #20
 80028b0:	46bd      	mov	sp, r7
 80028b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028b6:	4770      	bx	lr
 80028b8:	40012c00 	.word	0x40012c00
 80028bc:	40000400 	.word	0x40000400
 80028c0:	40000800 	.word	0x40000800
 80028c4:	40000c00 	.word	0x40000c00
 80028c8:	40013400 	.word	0x40013400
 80028cc:	40014000 	.word	0x40014000
 80028d0:	00010007 	.word	0x00010007

080028d4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80028d4:	b480      	push	{r7}
 80028d6:	b085      	sub	sp, #20
 80028d8:	af00      	add	r7, sp, #0
 80028da:	6078      	str	r0, [r7, #4]
 80028dc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	681b      	ldr	r3, [r3, #0]
 80028e2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	4a40      	ldr	r2, [pc, #256]	; (80029e8 <TIM_Base_SetConfig+0x114>)
 80028e8:	4293      	cmp	r3, r2
 80028ea:	d013      	beq.n	8002914 <TIM_Base_SetConfig+0x40>
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80028f2:	d00f      	beq.n	8002914 <TIM_Base_SetConfig+0x40>
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	4a3d      	ldr	r2, [pc, #244]	; (80029ec <TIM_Base_SetConfig+0x118>)
 80028f8:	4293      	cmp	r3, r2
 80028fa:	d00b      	beq.n	8002914 <TIM_Base_SetConfig+0x40>
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	4a3c      	ldr	r2, [pc, #240]	; (80029f0 <TIM_Base_SetConfig+0x11c>)
 8002900:	4293      	cmp	r3, r2
 8002902:	d007      	beq.n	8002914 <TIM_Base_SetConfig+0x40>
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	4a3b      	ldr	r2, [pc, #236]	; (80029f4 <TIM_Base_SetConfig+0x120>)
 8002908:	4293      	cmp	r3, r2
 800290a:	d003      	beq.n	8002914 <TIM_Base_SetConfig+0x40>
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	4a3a      	ldr	r2, [pc, #232]	; (80029f8 <TIM_Base_SetConfig+0x124>)
 8002910:	4293      	cmp	r3, r2
 8002912:	d108      	bne.n	8002926 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002914:	68fb      	ldr	r3, [r7, #12]
 8002916:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800291a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800291c:	683b      	ldr	r3, [r7, #0]
 800291e:	685b      	ldr	r3, [r3, #4]
 8002920:	68fa      	ldr	r2, [r7, #12]
 8002922:	4313      	orrs	r3, r2
 8002924:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	4a2f      	ldr	r2, [pc, #188]	; (80029e8 <TIM_Base_SetConfig+0x114>)
 800292a:	4293      	cmp	r3, r2
 800292c:	d01f      	beq.n	800296e <TIM_Base_SetConfig+0x9a>
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002934:	d01b      	beq.n	800296e <TIM_Base_SetConfig+0x9a>
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	4a2c      	ldr	r2, [pc, #176]	; (80029ec <TIM_Base_SetConfig+0x118>)
 800293a:	4293      	cmp	r3, r2
 800293c:	d017      	beq.n	800296e <TIM_Base_SetConfig+0x9a>
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	4a2b      	ldr	r2, [pc, #172]	; (80029f0 <TIM_Base_SetConfig+0x11c>)
 8002942:	4293      	cmp	r3, r2
 8002944:	d013      	beq.n	800296e <TIM_Base_SetConfig+0x9a>
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	4a2a      	ldr	r2, [pc, #168]	; (80029f4 <TIM_Base_SetConfig+0x120>)
 800294a:	4293      	cmp	r3, r2
 800294c:	d00f      	beq.n	800296e <TIM_Base_SetConfig+0x9a>
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	4a29      	ldr	r2, [pc, #164]	; (80029f8 <TIM_Base_SetConfig+0x124>)
 8002952:	4293      	cmp	r3, r2
 8002954:	d00b      	beq.n	800296e <TIM_Base_SetConfig+0x9a>
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	4a28      	ldr	r2, [pc, #160]	; (80029fc <TIM_Base_SetConfig+0x128>)
 800295a:	4293      	cmp	r3, r2
 800295c:	d007      	beq.n	800296e <TIM_Base_SetConfig+0x9a>
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	4a27      	ldr	r2, [pc, #156]	; (8002a00 <TIM_Base_SetConfig+0x12c>)
 8002962:	4293      	cmp	r3, r2
 8002964:	d003      	beq.n	800296e <TIM_Base_SetConfig+0x9a>
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	4a26      	ldr	r2, [pc, #152]	; (8002a04 <TIM_Base_SetConfig+0x130>)
 800296a:	4293      	cmp	r3, r2
 800296c:	d108      	bne.n	8002980 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800296e:	68fb      	ldr	r3, [r7, #12]
 8002970:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002974:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002976:	683b      	ldr	r3, [r7, #0]
 8002978:	68db      	ldr	r3, [r3, #12]
 800297a:	68fa      	ldr	r2, [r7, #12]
 800297c:	4313      	orrs	r3, r2
 800297e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002980:	68fb      	ldr	r3, [r7, #12]
 8002982:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002986:	683b      	ldr	r3, [r7, #0]
 8002988:	695b      	ldr	r3, [r3, #20]
 800298a:	4313      	orrs	r3, r2
 800298c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	68fa      	ldr	r2, [r7, #12]
 8002992:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002994:	683b      	ldr	r3, [r7, #0]
 8002996:	689a      	ldr	r2, [r3, #8]
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800299c:	683b      	ldr	r3, [r7, #0]
 800299e:	681a      	ldr	r2, [r3, #0]
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	4a10      	ldr	r2, [pc, #64]	; (80029e8 <TIM_Base_SetConfig+0x114>)
 80029a8:	4293      	cmp	r3, r2
 80029aa:	d00f      	beq.n	80029cc <TIM_Base_SetConfig+0xf8>
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	4a12      	ldr	r2, [pc, #72]	; (80029f8 <TIM_Base_SetConfig+0x124>)
 80029b0:	4293      	cmp	r3, r2
 80029b2:	d00b      	beq.n	80029cc <TIM_Base_SetConfig+0xf8>
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	4a11      	ldr	r2, [pc, #68]	; (80029fc <TIM_Base_SetConfig+0x128>)
 80029b8:	4293      	cmp	r3, r2
 80029ba:	d007      	beq.n	80029cc <TIM_Base_SetConfig+0xf8>
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	4a10      	ldr	r2, [pc, #64]	; (8002a00 <TIM_Base_SetConfig+0x12c>)
 80029c0:	4293      	cmp	r3, r2
 80029c2:	d003      	beq.n	80029cc <TIM_Base_SetConfig+0xf8>
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	4a0f      	ldr	r2, [pc, #60]	; (8002a04 <TIM_Base_SetConfig+0x130>)
 80029c8:	4293      	cmp	r3, r2
 80029ca:	d103      	bne.n	80029d4 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80029cc:	683b      	ldr	r3, [r7, #0]
 80029ce:	691a      	ldr	r2, [r3, #16]
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	2201      	movs	r2, #1
 80029d8:	615a      	str	r2, [r3, #20]
}
 80029da:	bf00      	nop
 80029dc:	3714      	adds	r7, #20
 80029de:	46bd      	mov	sp, r7
 80029e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029e4:	4770      	bx	lr
 80029e6:	bf00      	nop
 80029e8:	40012c00 	.word	0x40012c00
 80029ec:	40000400 	.word	0x40000400
 80029f0:	40000800 	.word	0x40000800
 80029f4:	40000c00 	.word	0x40000c00
 80029f8:	40013400 	.word	0x40013400
 80029fc:	40014000 	.word	0x40014000
 8002a00:	40014400 	.word	0x40014400
 8002a04:	40014800 	.word	0x40014800

08002a08 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002a08:	b580      	push	{r7, lr}
 8002a0a:	b082      	sub	sp, #8
 8002a0c:	af00      	add	r7, sp, #0
 8002a0e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	2b00      	cmp	r3, #0
 8002a14:	d101      	bne.n	8002a1a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002a16:	2301      	movs	r3, #1
 8002a18:	e040      	b.n	8002a9c <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002a1e:	2b00      	cmp	r3, #0
 8002a20:	d106      	bne.n	8002a30 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	2200      	movs	r2, #0
 8002a26:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002a2a:	6878      	ldr	r0, [r7, #4]
 8002a2c:	f7fd ff46 	bl	80008bc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	2224      	movs	r2, #36	; 0x24
 8002a34:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	681b      	ldr	r3, [r3, #0]
 8002a3a:	681a      	ldr	r2, [r3, #0]
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	681b      	ldr	r3, [r3, #0]
 8002a40:	f022 0201 	bic.w	r2, r2, #1
 8002a44:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8002a46:	6878      	ldr	r0, [r7, #4]
 8002a48:	f000 f8c0 	bl	8002bcc <UART_SetConfig>
 8002a4c:	4603      	mov	r3, r0
 8002a4e:	2b01      	cmp	r3, #1
 8002a50:	d101      	bne.n	8002a56 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8002a52:	2301      	movs	r3, #1
 8002a54:	e022      	b.n	8002a9c <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a5a:	2b00      	cmp	r3, #0
 8002a5c:	d002      	beq.n	8002a64 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8002a5e:	6878      	ldr	r0, [r7, #4]
 8002a60:	f000 fb3e 	bl	80030e0 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	681b      	ldr	r3, [r3, #0]
 8002a68:	685a      	ldr	r2, [r3, #4]
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	681b      	ldr	r3, [r3, #0]
 8002a6e:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002a72:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	681b      	ldr	r3, [r3, #0]
 8002a78:	689a      	ldr	r2, [r3, #8]
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	681b      	ldr	r3, [r3, #0]
 8002a7e:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002a82:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	681b      	ldr	r3, [r3, #0]
 8002a88:	681a      	ldr	r2, [r3, #0]
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	681b      	ldr	r3, [r3, #0]
 8002a8e:	f042 0201 	orr.w	r2, r2, #1
 8002a92:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8002a94:	6878      	ldr	r0, [r7, #4]
 8002a96:	f000 fbc5 	bl	8003224 <UART_CheckIdleState>
 8002a9a:	4603      	mov	r3, r0
}
 8002a9c:	4618      	mov	r0, r3
 8002a9e:	3708      	adds	r7, #8
 8002aa0:	46bd      	mov	sp, r7
 8002aa2:	bd80      	pop	{r7, pc}

08002aa4 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002aa4:	b580      	push	{r7, lr}
 8002aa6:	b08a      	sub	sp, #40	; 0x28
 8002aa8:	af02      	add	r7, sp, #8
 8002aaa:	60f8      	str	r0, [r7, #12]
 8002aac:	60b9      	str	r1, [r7, #8]
 8002aae:	603b      	str	r3, [r7, #0]
 8002ab0:	4613      	mov	r3, r2
 8002ab2:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002ab4:	68fb      	ldr	r3, [r7, #12]
 8002ab6:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002ab8:	2b20      	cmp	r3, #32
 8002aba:	f040 8082 	bne.w	8002bc2 <HAL_UART_Transmit+0x11e>
  {
    if ((pData == NULL) || (Size == 0U))
 8002abe:	68bb      	ldr	r3, [r7, #8]
 8002ac0:	2b00      	cmp	r3, #0
 8002ac2:	d002      	beq.n	8002aca <HAL_UART_Transmit+0x26>
 8002ac4:	88fb      	ldrh	r3, [r7, #6]
 8002ac6:	2b00      	cmp	r3, #0
 8002ac8:	d101      	bne.n	8002ace <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8002aca:	2301      	movs	r3, #1
 8002acc:	e07a      	b.n	8002bc4 <HAL_UART_Transmit+0x120>
    }

    __HAL_LOCK(huart);
 8002ace:	68fb      	ldr	r3, [r7, #12]
 8002ad0:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8002ad4:	2b01      	cmp	r3, #1
 8002ad6:	d101      	bne.n	8002adc <HAL_UART_Transmit+0x38>
 8002ad8:	2302      	movs	r3, #2
 8002ada:	e073      	b.n	8002bc4 <HAL_UART_Transmit+0x120>
 8002adc:	68fb      	ldr	r3, [r7, #12]
 8002ade:	2201      	movs	r2, #1
 8002ae0:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002ae4:	68fb      	ldr	r3, [r7, #12]
 8002ae6:	2200      	movs	r2, #0
 8002ae8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002aec:	68fb      	ldr	r3, [r7, #12]
 8002aee:	2221      	movs	r2, #33	; 0x21
 8002af0:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8002af2:	f7fe f84b 	bl	8000b8c <HAL_GetTick>
 8002af6:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8002af8:	68fb      	ldr	r3, [r7, #12]
 8002afa:	88fa      	ldrh	r2, [r7, #6]
 8002afc:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8002b00:	68fb      	ldr	r3, [r7, #12]
 8002b02:	88fa      	ldrh	r2, [r7, #6]
 8002b04:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002b08:	68fb      	ldr	r3, [r7, #12]
 8002b0a:	689b      	ldr	r3, [r3, #8]
 8002b0c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002b10:	d108      	bne.n	8002b24 <HAL_UART_Transmit+0x80>
 8002b12:	68fb      	ldr	r3, [r7, #12]
 8002b14:	691b      	ldr	r3, [r3, #16]
 8002b16:	2b00      	cmp	r3, #0
 8002b18:	d104      	bne.n	8002b24 <HAL_UART_Transmit+0x80>
    {
      pdata8bits  = NULL;
 8002b1a:	2300      	movs	r3, #0
 8002b1c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8002b1e:	68bb      	ldr	r3, [r7, #8]
 8002b20:	61bb      	str	r3, [r7, #24]
 8002b22:	e003      	b.n	8002b2c <HAL_UART_Transmit+0x88>
    }
    else
    {
      pdata8bits  = pData;
 8002b24:	68bb      	ldr	r3, [r7, #8]
 8002b26:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002b28:	2300      	movs	r3, #0
 8002b2a:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8002b2c:	68fb      	ldr	r3, [r7, #12]
 8002b2e:	2200      	movs	r2, #0
 8002b30:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    while (huart->TxXferCount > 0U)
 8002b34:	e02d      	b.n	8002b92 <HAL_UART_Transmit+0xee>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002b36:	683b      	ldr	r3, [r7, #0]
 8002b38:	9300      	str	r3, [sp, #0]
 8002b3a:	697b      	ldr	r3, [r7, #20]
 8002b3c:	2200      	movs	r2, #0
 8002b3e:	2180      	movs	r1, #128	; 0x80
 8002b40:	68f8      	ldr	r0, [r7, #12]
 8002b42:	f000 fbb8 	bl	80032b6 <UART_WaitOnFlagUntilTimeout>
 8002b46:	4603      	mov	r3, r0
 8002b48:	2b00      	cmp	r3, #0
 8002b4a:	d001      	beq.n	8002b50 <HAL_UART_Transmit+0xac>
      {
        return HAL_TIMEOUT;
 8002b4c:	2303      	movs	r3, #3
 8002b4e:	e039      	b.n	8002bc4 <HAL_UART_Transmit+0x120>
      }
      if (pdata8bits == NULL)
 8002b50:	69fb      	ldr	r3, [r7, #28]
 8002b52:	2b00      	cmp	r3, #0
 8002b54:	d10b      	bne.n	8002b6e <HAL_UART_Transmit+0xca>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8002b56:	69bb      	ldr	r3, [r7, #24]
 8002b58:	881a      	ldrh	r2, [r3, #0]
 8002b5a:	68fb      	ldr	r3, [r7, #12]
 8002b5c:	681b      	ldr	r3, [r3, #0]
 8002b5e:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002b62:	b292      	uxth	r2, r2
 8002b64:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8002b66:	69bb      	ldr	r3, [r7, #24]
 8002b68:	3302      	adds	r3, #2
 8002b6a:	61bb      	str	r3, [r7, #24]
 8002b6c:	e008      	b.n	8002b80 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8002b6e:	69fb      	ldr	r3, [r7, #28]
 8002b70:	781a      	ldrb	r2, [r3, #0]
 8002b72:	68fb      	ldr	r3, [r7, #12]
 8002b74:	681b      	ldr	r3, [r3, #0]
 8002b76:	b292      	uxth	r2, r2
 8002b78:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8002b7a:	69fb      	ldr	r3, [r7, #28]
 8002b7c:	3301      	adds	r3, #1
 8002b7e:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8002b80:	68fb      	ldr	r3, [r7, #12]
 8002b82:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8002b86:	b29b      	uxth	r3, r3
 8002b88:	3b01      	subs	r3, #1
 8002b8a:	b29a      	uxth	r2, r3
 8002b8c:	68fb      	ldr	r3, [r7, #12]
 8002b8e:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8002b92:	68fb      	ldr	r3, [r7, #12]
 8002b94:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8002b98:	b29b      	uxth	r3, r3
 8002b9a:	2b00      	cmp	r3, #0
 8002b9c:	d1cb      	bne.n	8002b36 <HAL_UART_Transmit+0x92>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002b9e:	683b      	ldr	r3, [r7, #0]
 8002ba0:	9300      	str	r3, [sp, #0]
 8002ba2:	697b      	ldr	r3, [r7, #20]
 8002ba4:	2200      	movs	r2, #0
 8002ba6:	2140      	movs	r1, #64	; 0x40
 8002ba8:	68f8      	ldr	r0, [r7, #12]
 8002baa:	f000 fb84 	bl	80032b6 <UART_WaitOnFlagUntilTimeout>
 8002bae:	4603      	mov	r3, r0
 8002bb0:	2b00      	cmp	r3, #0
 8002bb2:	d001      	beq.n	8002bb8 <HAL_UART_Transmit+0x114>
    {
      return HAL_TIMEOUT;
 8002bb4:	2303      	movs	r3, #3
 8002bb6:	e005      	b.n	8002bc4 <HAL_UART_Transmit+0x120>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8002bb8:	68fb      	ldr	r3, [r7, #12]
 8002bba:	2220      	movs	r2, #32
 8002bbc:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 8002bbe:	2300      	movs	r3, #0
 8002bc0:	e000      	b.n	8002bc4 <HAL_UART_Transmit+0x120>
  }
  else
  {
    return HAL_BUSY;
 8002bc2:	2302      	movs	r3, #2
  }
}
 8002bc4:	4618      	mov	r0, r3
 8002bc6:	3720      	adds	r7, #32
 8002bc8:	46bd      	mov	sp, r7
 8002bca:	bd80      	pop	{r7, pc}

08002bcc <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002bcc:	b5b0      	push	{r4, r5, r7, lr}
 8002bce:	b088      	sub	sp, #32
 8002bd0:	af00      	add	r7, sp, #0
 8002bd2:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8002bd4:	2300      	movs	r3, #0
 8002bd6:	76bb      	strb	r3, [r7, #26]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	689a      	ldr	r2, [r3, #8]
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	691b      	ldr	r3, [r3, #16]
 8002be0:	431a      	orrs	r2, r3
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	695b      	ldr	r3, [r3, #20]
 8002be6:	431a      	orrs	r2, r3
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	69db      	ldr	r3, [r3, #28]
 8002bec:	4313      	orrs	r3, r2
 8002bee:	61fb      	str	r3, [r7, #28]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	681b      	ldr	r3, [r3, #0]
 8002bf4:	681a      	ldr	r2, [r3, #0]
 8002bf6:	4bad      	ldr	r3, [pc, #692]	; (8002eac <UART_SetConfig+0x2e0>)
 8002bf8:	4013      	ands	r3, r2
 8002bfa:	687a      	ldr	r2, [r7, #4]
 8002bfc:	6812      	ldr	r2, [r2, #0]
 8002bfe:	69f9      	ldr	r1, [r7, #28]
 8002c00:	430b      	orrs	r3, r1
 8002c02:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	681b      	ldr	r3, [r3, #0]
 8002c08:	685b      	ldr	r3, [r3, #4]
 8002c0a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	68da      	ldr	r2, [r3, #12]
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	681b      	ldr	r3, [r3, #0]
 8002c16:	430a      	orrs	r2, r1
 8002c18:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	699b      	ldr	r3, [r3, #24]
 8002c1e:	61fb      	str	r3, [r7, #28]

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	681b      	ldr	r3, [r3, #0]
 8002c24:	4aa2      	ldr	r2, [pc, #648]	; (8002eb0 <UART_SetConfig+0x2e4>)
 8002c26:	4293      	cmp	r3, r2
 8002c28:	d004      	beq.n	8002c34 <UART_SetConfig+0x68>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	6a1b      	ldr	r3, [r3, #32]
 8002c2e:	69fa      	ldr	r2, [r7, #28]
 8002c30:	4313      	orrs	r3, r2
 8002c32:	61fb      	str	r3, [r7, #28]
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	681b      	ldr	r3, [r3, #0]
 8002c38:	689b      	ldr	r3, [r3, #8]
 8002c3a:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	681b      	ldr	r3, [r3, #0]
 8002c42:	69fa      	ldr	r2, [r7, #28]
 8002c44:	430a      	orrs	r2, r1
 8002c46:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	681b      	ldr	r3, [r3, #0]
 8002c4c:	4a99      	ldr	r2, [pc, #612]	; (8002eb4 <UART_SetConfig+0x2e8>)
 8002c4e:	4293      	cmp	r3, r2
 8002c50:	d121      	bne.n	8002c96 <UART_SetConfig+0xca>
 8002c52:	4b99      	ldr	r3, [pc, #612]	; (8002eb8 <UART_SetConfig+0x2ec>)
 8002c54:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002c58:	f003 0303 	and.w	r3, r3, #3
 8002c5c:	2b03      	cmp	r3, #3
 8002c5e:	d817      	bhi.n	8002c90 <UART_SetConfig+0xc4>
 8002c60:	a201      	add	r2, pc, #4	; (adr r2, 8002c68 <UART_SetConfig+0x9c>)
 8002c62:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002c66:	bf00      	nop
 8002c68:	08002c79 	.word	0x08002c79
 8002c6c:	08002c85 	.word	0x08002c85
 8002c70:	08002c7f 	.word	0x08002c7f
 8002c74:	08002c8b 	.word	0x08002c8b
 8002c78:	2301      	movs	r3, #1
 8002c7a:	76fb      	strb	r3, [r7, #27]
 8002c7c:	e0e7      	b.n	8002e4e <UART_SetConfig+0x282>
 8002c7e:	2302      	movs	r3, #2
 8002c80:	76fb      	strb	r3, [r7, #27]
 8002c82:	e0e4      	b.n	8002e4e <UART_SetConfig+0x282>
 8002c84:	2304      	movs	r3, #4
 8002c86:	76fb      	strb	r3, [r7, #27]
 8002c88:	e0e1      	b.n	8002e4e <UART_SetConfig+0x282>
 8002c8a:	2308      	movs	r3, #8
 8002c8c:	76fb      	strb	r3, [r7, #27]
 8002c8e:	e0de      	b.n	8002e4e <UART_SetConfig+0x282>
 8002c90:	2310      	movs	r3, #16
 8002c92:	76fb      	strb	r3, [r7, #27]
 8002c94:	e0db      	b.n	8002e4e <UART_SetConfig+0x282>
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	681b      	ldr	r3, [r3, #0]
 8002c9a:	4a88      	ldr	r2, [pc, #544]	; (8002ebc <UART_SetConfig+0x2f0>)
 8002c9c:	4293      	cmp	r3, r2
 8002c9e:	d132      	bne.n	8002d06 <UART_SetConfig+0x13a>
 8002ca0:	4b85      	ldr	r3, [pc, #532]	; (8002eb8 <UART_SetConfig+0x2ec>)
 8002ca2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002ca6:	f003 030c 	and.w	r3, r3, #12
 8002caa:	2b0c      	cmp	r3, #12
 8002cac:	d828      	bhi.n	8002d00 <UART_SetConfig+0x134>
 8002cae:	a201      	add	r2, pc, #4	; (adr r2, 8002cb4 <UART_SetConfig+0xe8>)
 8002cb0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002cb4:	08002ce9 	.word	0x08002ce9
 8002cb8:	08002d01 	.word	0x08002d01
 8002cbc:	08002d01 	.word	0x08002d01
 8002cc0:	08002d01 	.word	0x08002d01
 8002cc4:	08002cf5 	.word	0x08002cf5
 8002cc8:	08002d01 	.word	0x08002d01
 8002ccc:	08002d01 	.word	0x08002d01
 8002cd0:	08002d01 	.word	0x08002d01
 8002cd4:	08002cef 	.word	0x08002cef
 8002cd8:	08002d01 	.word	0x08002d01
 8002cdc:	08002d01 	.word	0x08002d01
 8002ce0:	08002d01 	.word	0x08002d01
 8002ce4:	08002cfb 	.word	0x08002cfb
 8002ce8:	2300      	movs	r3, #0
 8002cea:	76fb      	strb	r3, [r7, #27]
 8002cec:	e0af      	b.n	8002e4e <UART_SetConfig+0x282>
 8002cee:	2302      	movs	r3, #2
 8002cf0:	76fb      	strb	r3, [r7, #27]
 8002cf2:	e0ac      	b.n	8002e4e <UART_SetConfig+0x282>
 8002cf4:	2304      	movs	r3, #4
 8002cf6:	76fb      	strb	r3, [r7, #27]
 8002cf8:	e0a9      	b.n	8002e4e <UART_SetConfig+0x282>
 8002cfa:	2308      	movs	r3, #8
 8002cfc:	76fb      	strb	r3, [r7, #27]
 8002cfe:	e0a6      	b.n	8002e4e <UART_SetConfig+0x282>
 8002d00:	2310      	movs	r3, #16
 8002d02:	76fb      	strb	r3, [r7, #27]
 8002d04:	e0a3      	b.n	8002e4e <UART_SetConfig+0x282>
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	681b      	ldr	r3, [r3, #0]
 8002d0a:	4a6d      	ldr	r2, [pc, #436]	; (8002ec0 <UART_SetConfig+0x2f4>)
 8002d0c:	4293      	cmp	r3, r2
 8002d0e:	d120      	bne.n	8002d52 <UART_SetConfig+0x186>
 8002d10:	4b69      	ldr	r3, [pc, #420]	; (8002eb8 <UART_SetConfig+0x2ec>)
 8002d12:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002d16:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8002d1a:	2b30      	cmp	r3, #48	; 0x30
 8002d1c:	d013      	beq.n	8002d46 <UART_SetConfig+0x17a>
 8002d1e:	2b30      	cmp	r3, #48	; 0x30
 8002d20:	d814      	bhi.n	8002d4c <UART_SetConfig+0x180>
 8002d22:	2b20      	cmp	r3, #32
 8002d24:	d009      	beq.n	8002d3a <UART_SetConfig+0x16e>
 8002d26:	2b20      	cmp	r3, #32
 8002d28:	d810      	bhi.n	8002d4c <UART_SetConfig+0x180>
 8002d2a:	2b00      	cmp	r3, #0
 8002d2c:	d002      	beq.n	8002d34 <UART_SetConfig+0x168>
 8002d2e:	2b10      	cmp	r3, #16
 8002d30:	d006      	beq.n	8002d40 <UART_SetConfig+0x174>
 8002d32:	e00b      	b.n	8002d4c <UART_SetConfig+0x180>
 8002d34:	2300      	movs	r3, #0
 8002d36:	76fb      	strb	r3, [r7, #27]
 8002d38:	e089      	b.n	8002e4e <UART_SetConfig+0x282>
 8002d3a:	2302      	movs	r3, #2
 8002d3c:	76fb      	strb	r3, [r7, #27]
 8002d3e:	e086      	b.n	8002e4e <UART_SetConfig+0x282>
 8002d40:	2304      	movs	r3, #4
 8002d42:	76fb      	strb	r3, [r7, #27]
 8002d44:	e083      	b.n	8002e4e <UART_SetConfig+0x282>
 8002d46:	2308      	movs	r3, #8
 8002d48:	76fb      	strb	r3, [r7, #27]
 8002d4a:	e080      	b.n	8002e4e <UART_SetConfig+0x282>
 8002d4c:	2310      	movs	r3, #16
 8002d4e:	76fb      	strb	r3, [r7, #27]
 8002d50:	e07d      	b.n	8002e4e <UART_SetConfig+0x282>
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	681b      	ldr	r3, [r3, #0]
 8002d56:	4a5b      	ldr	r2, [pc, #364]	; (8002ec4 <UART_SetConfig+0x2f8>)
 8002d58:	4293      	cmp	r3, r2
 8002d5a:	d120      	bne.n	8002d9e <UART_SetConfig+0x1d2>
 8002d5c:	4b56      	ldr	r3, [pc, #344]	; (8002eb8 <UART_SetConfig+0x2ec>)
 8002d5e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002d62:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8002d66:	2bc0      	cmp	r3, #192	; 0xc0
 8002d68:	d013      	beq.n	8002d92 <UART_SetConfig+0x1c6>
 8002d6a:	2bc0      	cmp	r3, #192	; 0xc0
 8002d6c:	d814      	bhi.n	8002d98 <UART_SetConfig+0x1cc>
 8002d6e:	2b80      	cmp	r3, #128	; 0x80
 8002d70:	d009      	beq.n	8002d86 <UART_SetConfig+0x1ba>
 8002d72:	2b80      	cmp	r3, #128	; 0x80
 8002d74:	d810      	bhi.n	8002d98 <UART_SetConfig+0x1cc>
 8002d76:	2b00      	cmp	r3, #0
 8002d78:	d002      	beq.n	8002d80 <UART_SetConfig+0x1b4>
 8002d7a:	2b40      	cmp	r3, #64	; 0x40
 8002d7c:	d006      	beq.n	8002d8c <UART_SetConfig+0x1c0>
 8002d7e:	e00b      	b.n	8002d98 <UART_SetConfig+0x1cc>
 8002d80:	2300      	movs	r3, #0
 8002d82:	76fb      	strb	r3, [r7, #27]
 8002d84:	e063      	b.n	8002e4e <UART_SetConfig+0x282>
 8002d86:	2302      	movs	r3, #2
 8002d88:	76fb      	strb	r3, [r7, #27]
 8002d8a:	e060      	b.n	8002e4e <UART_SetConfig+0x282>
 8002d8c:	2304      	movs	r3, #4
 8002d8e:	76fb      	strb	r3, [r7, #27]
 8002d90:	e05d      	b.n	8002e4e <UART_SetConfig+0x282>
 8002d92:	2308      	movs	r3, #8
 8002d94:	76fb      	strb	r3, [r7, #27]
 8002d96:	e05a      	b.n	8002e4e <UART_SetConfig+0x282>
 8002d98:	2310      	movs	r3, #16
 8002d9a:	76fb      	strb	r3, [r7, #27]
 8002d9c:	e057      	b.n	8002e4e <UART_SetConfig+0x282>
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	681b      	ldr	r3, [r3, #0]
 8002da2:	4a49      	ldr	r2, [pc, #292]	; (8002ec8 <UART_SetConfig+0x2fc>)
 8002da4:	4293      	cmp	r3, r2
 8002da6:	d125      	bne.n	8002df4 <UART_SetConfig+0x228>
 8002da8:	4b43      	ldr	r3, [pc, #268]	; (8002eb8 <UART_SetConfig+0x2ec>)
 8002daa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002dae:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002db2:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8002db6:	d017      	beq.n	8002de8 <UART_SetConfig+0x21c>
 8002db8:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8002dbc:	d817      	bhi.n	8002dee <UART_SetConfig+0x222>
 8002dbe:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002dc2:	d00b      	beq.n	8002ddc <UART_SetConfig+0x210>
 8002dc4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002dc8:	d811      	bhi.n	8002dee <UART_SetConfig+0x222>
 8002dca:	2b00      	cmp	r3, #0
 8002dcc:	d003      	beq.n	8002dd6 <UART_SetConfig+0x20a>
 8002dce:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002dd2:	d006      	beq.n	8002de2 <UART_SetConfig+0x216>
 8002dd4:	e00b      	b.n	8002dee <UART_SetConfig+0x222>
 8002dd6:	2300      	movs	r3, #0
 8002dd8:	76fb      	strb	r3, [r7, #27]
 8002dda:	e038      	b.n	8002e4e <UART_SetConfig+0x282>
 8002ddc:	2302      	movs	r3, #2
 8002dde:	76fb      	strb	r3, [r7, #27]
 8002de0:	e035      	b.n	8002e4e <UART_SetConfig+0x282>
 8002de2:	2304      	movs	r3, #4
 8002de4:	76fb      	strb	r3, [r7, #27]
 8002de6:	e032      	b.n	8002e4e <UART_SetConfig+0x282>
 8002de8:	2308      	movs	r3, #8
 8002dea:	76fb      	strb	r3, [r7, #27]
 8002dec:	e02f      	b.n	8002e4e <UART_SetConfig+0x282>
 8002dee:	2310      	movs	r3, #16
 8002df0:	76fb      	strb	r3, [r7, #27]
 8002df2:	e02c      	b.n	8002e4e <UART_SetConfig+0x282>
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	681b      	ldr	r3, [r3, #0]
 8002df8:	4a2d      	ldr	r2, [pc, #180]	; (8002eb0 <UART_SetConfig+0x2e4>)
 8002dfa:	4293      	cmp	r3, r2
 8002dfc:	d125      	bne.n	8002e4a <UART_SetConfig+0x27e>
 8002dfe:	4b2e      	ldr	r3, [pc, #184]	; (8002eb8 <UART_SetConfig+0x2ec>)
 8002e00:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002e04:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8002e08:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8002e0c:	d017      	beq.n	8002e3e <UART_SetConfig+0x272>
 8002e0e:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8002e12:	d817      	bhi.n	8002e44 <UART_SetConfig+0x278>
 8002e14:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002e18:	d00b      	beq.n	8002e32 <UART_SetConfig+0x266>
 8002e1a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002e1e:	d811      	bhi.n	8002e44 <UART_SetConfig+0x278>
 8002e20:	2b00      	cmp	r3, #0
 8002e22:	d003      	beq.n	8002e2c <UART_SetConfig+0x260>
 8002e24:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002e28:	d006      	beq.n	8002e38 <UART_SetConfig+0x26c>
 8002e2a:	e00b      	b.n	8002e44 <UART_SetConfig+0x278>
 8002e2c:	2300      	movs	r3, #0
 8002e2e:	76fb      	strb	r3, [r7, #27]
 8002e30:	e00d      	b.n	8002e4e <UART_SetConfig+0x282>
 8002e32:	2302      	movs	r3, #2
 8002e34:	76fb      	strb	r3, [r7, #27]
 8002e36:	e00a      	b.n	8002e4e <UART_SetConfig+0x282>
 8002e38:	2304      	movs	r3, #4
 8002e3a:	76fb      	strb	r3, [r7, #27]
 8002e3c:	e007      	b.n	8002e4e <UART_SetConfig+0x282>
 8002e3e:	2308      	movs	r3, #8
 8002e40:	76fb      	strb	r3, [r7, #27]
 8002e42:	e004      	b.n	8002e4e <UART_SetConfig+0x282>
 8002e44:	2310      	movs	r3, #16
 8002e46:	76fb      	strb	r3, [r7, #27]
 8002e48:	e001      	b.n	8002e4e <UART_SetConfig+0x282>
 8002e4a:	2310      	movs	r3, #16
 8002e4c:	76fb      	strb	r3, [r7, #27]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	681b      	ldr	r3, [r3, #0]
 8002e52:	4a17      	ldr	r2, [pc, #92]	; (8002eb0 <UART_SetConfig+0x2e4>)
 8002e54:	4293      	cmp	r3, r2
 8002e56:	f040 8087 	bne.w	8002f68 <UART_SetConfig+0x39c>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8002e5a:	7efb      	ldrb	r3, [r7, #27]
 8002e5c:	2b08      	cmp	r3, #8
 8002e5e:	d837      	bhi.n	8002ed0 <UART_SetConfig+0x304>
 8002e60:	a201      	add	r2, pc, #4	; (adr r2, 8002e68 <UART_SetConfig+0x29c>)
 8002e62:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002e66:	bf00      	nop
 8002e68:	08002e8d 	.word	0x08002e8d
 8002e6c:	08002ed1 	.word	0x08002ed1
 8002e70:	08002e95 	.word	0x08002e95
 8002e74:	08002ed1 	.word	0x08002ed1
 8002e78:	08002e9b 	.word	0x08002e9b
 8002e7c:	08002ed1 	.word	0x08002ed1
 8002e80:	08002ed1 	.word	0x08002ed1
 8002e84:	08002ed1 	.word	0x08002ed1
 8002e88:	08002ea3 	.word	0x08002ea3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8002e8c:	f7fe ff1a 	bl	8001cc4 <HAL_RCC_GetPCLK1Freq>
 8002e90:	6178      	str	r0, [r7, #20]
        break;
 8002e92:	e022      	b.n	8002eda <UART_SetConfig+0x30e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8002e94:	4b0d      	ldr	r3, [pc, #52]	; (8002ecc <UART_SetConfig+0x300>)
 8002e96:	617b      	str	r3, [r7, #20]
        break;
 8002e98:	e01f      	b.n	8002eda <UART_SetConfig+0x30e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8002e9a:	f7fe fe7b 	bl	8001b94 <HAL_RCC_GetSysClockFreq>
 8002e9e:	6178      	str	r0, [r7, #20]
        break;
 8002ea0:	e01b      	b.n	8002eda <UART_SetConfig+0x30e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8002ea2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002ea6:	617b      	str	r3, [r7, #20]
        break;
 8002ea8:	e017      	b.n	8002eda <UART_SetConfig+0x30e>
 8002eaa:	bf00      	nop
 8002eac:	efff69f3 	.word	0xefff69f3
 8002eb0:	40008000 	.word	0x40008000
 8002eb4:	40013800 	.word	0x40013800
 8002eb8:	40021000 	.word	0x40021000
 8002ebc:	40004400 	.word	0x40004400
 8002ec0:	40004800 	.word	0x40004800
 8002ec4:	40004c00 	.word	0x40004c00
 8002ec8:	40005000 	.word	0x40005000
 8002ecc:	00f42400 	.word	0x00f42400
      default:
        pclk = 0U;
 8002ed0:	2300      	movs	r3, #0
 8002ed2:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8002ed4:	2301      	movs	r3, #1
 8002ed6:	76bb      	strb	r3, [r7, #26]
        break;
 8002ed8:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8002eda:	697b      	ldr	r3, [r7, #20]
 8002edc:	2b00      	cmp	r3, #0
 8002ede:	f000 80f1 	beq.w	80030c4 <UART_SetConfig+0x4f8>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	685a      	ldr	r2, [r3, #4]
 8002ee6:	4613      	mov	r3, r2
 8002ee8:	005b      	lsls	r3, r3, #1
 8002eea:	4413      	add	r3, r2
 8002eec:	697a      	ldr	r2, [r7, #20]
 8002eee:	429a      	cmp	r2, r3
 8002ef0:	d305      	bcc.n	8002efe <UART_SetConfig+0x332>
          (pclk > (4096U * huart->Init.BaudRate)))
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	685b      	ldr	r3, [r3, #4]
 8002ef6:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8002ef8:	697a      	ldr	r2, [r7, #20]
 8002efa:	429a      	cmp	r2, r3
 8002efc:	d902      	bls.n	8002f04 <UART_SetConfig+0x338>
      {
        ret = HAL_ERROR;
 8002efe:	2301      	movs	r3, #1
 8002f00:	76bb      	strb	r3, [r7, #26]
 8002f02:	e0df      	b.n	80030c4 <UART_SetConfig+0x4f8>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8002f04:	697b      	ldr	r3, [r7, #20]
 8002f06:	4618      	mov	r0, r3
 8002f08:	f04f 0100 	mov.w	r1, #0
 8002f0c:	f04f 0200 	mov.w	r2, #0
 8002f10:	f04f 0300 	mov.w	r3, #0
 8002f14:	020b      	lsls	r3, r1, #8
 8002f16:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8002f1a:	0202      	lsls	r2, r0, #8
 8002f1c:	6879      	ldr	r1, [r7, #4]
 8002f1e:	6849      	ldr	r1, [r1, #4]
 8002f20:	0849      	lsrs	r1, r1, #1
 8002f22:	4608      	mov	r0, r1
 8002f24:	f04f 0100 	mov.w	r1, #0
 8002f28:	1814      	adds	r4, r2, r0
 8002f2a:	eb43 0501 	adc.w	r5, r3, r1
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	685b      	ldr	r3, [r3, #4]
 8002f32:	461a      	mov	r2, r3
 8002f34:	f04f 0300 	mov.w	r3, #0
 8002f38:	4620      	mov	r0, r4
 8002f3a:	4629      	mov	r1, r5
 8002f3c:	f7fd f998 	bl	8000270 <__aeabi_uldivmod>
 8002f40:	4602      	mov	r2, r0
 8002f42:	460b      	mov	r3, r1
 8002f44:	4613      	mov	r3, r2
 8002f46:	613b      	str	r3, [r7, #16]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8002f48:	693b      	ldr	r3, [r7, #16]
 8002f4a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8002f4e:	d308      	bcc.n	8002f62 <UART_SetConfig+0x396>
 8002f50:	693b      	ldr	r3, [r7, #16]
 8002f52:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002f56:	d204      	bcs.n	8002f62 <UART_SetConfig+0x396>
        {
          huart->Instance->BRR = usartdiv;
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	681b      	ldr	r3, [r3, #0]
 8002f5c:	693a      	ldr	r2, [r7, #16]
 8002f5e:	60da      	str	r2, [r3, #12]
 8002f60:	e0b0      	b.n	80030c4 <UART_SetConfig+0x4f8>
        }
        else
        {
          ret = HAL_ERROR;
 8002f62:	2301      	movs	r3, #1
 8002f64:	76bb      	strb	r3, [r7, #26]
 8002f66:	e0ad      	b.n	80030c4 <UART_SetConfig+0x4f8>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	69db      	ldr	r3, [r3, #28]
 8002f6c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002f70:	d15b      	bne.n	800302a <UART_SetConfig+0x45e>
  {
    switch (clocksource)
 8002f72:	7efb      	ldrb	r3, [r7, #27]
 8002f74:	2b08      	cmp	r3, #8
 8002f76:	d828      	bhi.n	8002fca <UART_SetConfig+0x3fe>
 8002f78:	a201      	add	r2, pc, #4	; (adr r2, 8002f80 <UART_SetConfig+0x3b4>)
 8002f7a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002f7e:	bf00      	nop
 8002f80:	08002fa5 	.word	0x08002fa5
 8002f84:	08002fad 	.word	0x08002fad
 8002f88:	08002fb5 	.word	0x08002fb5
 8002f8c:	08002fcb 	.word	0x08002fcb
 8002f90:	08002fbb 	.word	0x08002fbb
 8002f94:	08002fcb 	.word	0x08002fcb
 8002f98:	08002fcb 	.word	0x08002fcb
 8002f9c:	08002fcb 	.word	0x08002fcb
 8002fa0:	08002fc3 	.word	0x08002fc3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8002fa4:	f7fe fe8e 	bl	8001cc4 <HAL_RCC_GetPCLK1Freq>
 8002fa8:	6178      	str	r0, [r7, #20]
        break;
 8002faa:	e013      	b.n	8002fd4 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8002fac:	f7fe fea0 	bl	8001cf0 <HAL_RCC_GetPCLK2Freq>
 8002fb0:	6178      	str	r0, [r7, #20]
        break;
 8002fb2:	e00f      	b.n	8002fd4 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8002fb4:	4b49      	ldr	r3, [pc, #292]	; (80030dc <UART_SetConfig+0x510>)
 8002fb6:	617b      	str	r3, [r7, #20]
        break;
 8002fb8:	e00c      	b.n	8002fd4 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8002fba:	f7fe fdeb 	bl	8001b94 <HAL_RCC_GetSysClockFreq>
 8002fbe:	6178      	str	r0, [r7, #20]
        break;
 8002fc0:	e008      	b.n	8002fd4 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8002fc2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002fc6:	617b      	str	r3, [r7, #20]
        break;
 8002fc8:	e004      	b.n	8002fd4 <UART_SetConfig+0x408>
      default:
        pclk = 0U;
 8002fca:	2300      	movs	r3, #0
 8002fcc:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8002fce:	2301      	movs	r3, #1
 8002fd0:	76bb      	strb	r3, [r7, #26]
        break;
 8002fd2:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8002fd4:	697b      	ldr	r3, [r7, #20]
 8002fd6:	2b00      	cmp	r3, #0
 8002fd8:	d074      	beq.n	80030c4 <UART_SetConfig+0x4f8>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8002fda:	697b      	ldr	r3, [r7, #20]
 8002fdc:	005a      	lsls	r2, r3, #1
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	685b      	ldr	r3, [r3, #4]
 8002fe2:	085b      	lsrs	r3, r3, #1
 8002fe4:	441a      	add	r2, r3
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	685b      	ldr	r3, [r3, #4]
 8002fea:	fbb2 f3f3 	udiv	r3, r2, r3
 8002fee:	613b      	str	r3, [r7, #16]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8002ff0:	693b      	ldr	r3, [r7, #16]
 8002ff2:	2b0f      	cmp	r3, #15
 8002ff4:	d916      	bls.n	8003024 <UART_SetConfig+0x458>
 8002ff6:	693b      	ldr	r3, [r7, #16]
 8002ff8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002ffc:	d212      	bcs.n	8003024 <UART_SetConfig+0x458>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8002ffe:	693b      	ldr	r3, [r7, #16]
 8003000:	b29b      	uxth	r3, r3
 8003002:	f023 030f 	bic.w	r3, r3, #15
 8003006:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8003008:	693b      	ldr	r3, [r7, #16]
 800300a:	085b      	lsrs	r3, r3, #1
 800300c:	b29b      	uxth	r3, r3
 800300e:	f003 0307 	and.w	r3, r3, #7
 8003012:	b29a      	uxth	r2, r3
 8003014:	89fb      	ldrh	r3, [r7, #14]
 8003016:	4313      	orrs	r3, r2
 8003018:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	681b      	ldr	r3, [r3, #0]
 800301e:	89fa      	ldrh	r2, [r7, #14]
 8003020:	60da      	str	r2, [r3, #12]
 8003022:	e04f      	b.n	80030c4 <UART_SetConfig+0x4f8>
      }
      else
      {
        ret = HAL_ERROR;
 8003024:	2301      	movs	r3, #1
 8003026:	76bb      	strb	r3, [r7, #26]
 8003028:	e04c      	b.n	80030c4 <UART_SetConfig+0x4f8>
      }
    }
  }
  else
  {
    switch (clocksource)
 800302a:	7efb      	ldrb	r3, [r7, #27]
 800302c:	2b08      	cmp	r3, #8
 800302e:	d828      	bhi.n	8003082 <UART_SetConfig+0x4b6>
 8003030:	a201      	add	r2, pc, #4	; (adr r2, 8003038 <UART_SetConfig+0x46c>)
 8003032:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003036:	bf00      	nop
 8003038:	0800305d 	.word	0x0800305d
 800303c:	08003065 	.word	0x08003065
 8003040:	0800306d 	.word	0x0800306d
 8003044:	08003083 	.word	0x08003083
 8003048:	08003073 	.word	0x08003073
 800304c:	08003083 	.word	0x08003083
 8003050:	08003083 	.word	0x08003083
 8003054:	08003083 	.word	0x08003083
 8003058:	0800307b 	.word	0x0800307b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800305c:	f7fe fe32 	bl	8001cc4 <HAL_RCC_GetPCLK1Freq>
 8003060:	6178      	str	r0, [r7, #20]
        break;
 8003062:	e013      	b.n	800308c <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003064:	f7fe fe44 	bl	8001cf0 <HAL_RCC_GetPCLK2Freq>
 8003068:	6178      	str	r0, [r7, #20]
        break;
 800306a:	e00f      	b.n	800308c <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800306c:	4b1b      	ldr	r3, [pc, #108]	; (80030dc <UART_SetConfig+0x510>)
 800306e:	617b      	str	r3, [r7, #20]
        break;
 8003070:	e00c      	b.n	800308c <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003072:	f7fe fd8f 	bl	8001b94 <HAL_RCC_GetSysClockFreq>
 8003076:	6178      	str	r0, [r7, #20]
        break;
 8003078:	e008      	b.n	800308c <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800307a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800307e:	617b      	str	r3, [r7, #20]
        break;
 8003080:	e004      	b.n	800308c <UART_SetConfig+0x4c0>
      default:
        pclk = 0U;
 8003082:	2300      	movs	r3, #0
 8003084:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8003086:	2301      	movs	r3, #1
 8003088:	76bb      	strb	r3, [r7, #26]
        break;
 800308a:	bf00      	nop
    }

    if (pclk != 0U)
 800308c:	697b      	ldr	r3, [r7, #20]
 800308e:	2b00      	cmp	r3, #0
 8003090:	d018      	beq.n	80030c4 <UART_SetConfig+0x4f8>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	685b      	ldr	r3, [r3, #4]
 8003096:	085a      	lsrs	r2, r3, #1
 8003098:	697b      	ldr	r3, [r7, #20]
 800309a:	441a      	add	r2, r3
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	685b      	ldr	r3, [r3, #4]
 80030a0:	fbb2 f3f3 	udiv	r3, r2, r3
 80030a4:	613b      	str	r3, [r7, #16]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80030a6:	693b      	ldr	r3, [r7, #16]
 80030a8:	2b0f      	cmp	r3, #15
 80030aa:	d909      	bls.n	80030c0 <UART_SetConfig+0x4f4>
 80030ac:	693b      	ldr	r3, [r7, #16]
 80030ae:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80030b2:	d205      	bcs.n	80030c0 <UART_SetConfig+0x4f4>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80030b4:	693b      	ldr	r3, [r7, #16]
 80030b6:	b29a      	uxth	r2, r3
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	681b      	ldr	r3, [r3, #0]
 80030bc:	60da      	str	r2, [r3, #12]
 80030be:	e001      	b.n	80030c4 <UART_SetConfig+0x4f8>
      }
      else
      {
        ret = HAL_ERROR;
 80030c0:	2301      	movs	r3, #1
 80030c2:	76bb      	strb	r3, [r7, #26]
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	2200      	movs	r2, #0
 80030c8:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	2200      	movs	r2, #0
 80030ce:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 80030d0:	7ebb      	ldrb	r3, [r7, #26]
}
 80030d2:	4618      	mov	r0, r3
 80030d4:	3720      	adds	r7, #32
 80030d6:	46bd      	mov	sp, r7
 80030d8:	bdb0      	pop	{r4, r5, r7, pc}
 80030da:	bf00      	nop
 80030dc:	00f42400 	.word	0x00f42400

080030e0 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80030e0:	b480      	push	{r7}
 80030e2:	b083      	sub	sp, #12
 80030e4:	af00      	add	r7, sp, #0
 80030e6:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80030ec:	f003 0301 	and.w	r3, r3, #1
 80030f0:	2b00      	cmp	r3, #0
 80030f2:	d00a      	beq.n	800310a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	681b      	ldr	r3, [r3, #0]
 80030f8:	685b      	ldr	r3, [r3, #4]
 80030fa:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	681b      	ldr	r3, [r3, #0]
 8003106:	430a      	orrs	r2, r1
 8003108:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800310e:	f003 0302 	and.w	r3, r3, #2
 8003112:	2b00      	cmp	r3, #0
 8003114:	d00a      	beq.n	800312c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	681b      	ldr	r3, [r3, #0]
 800311a:	685b      	ldr	r3, [r3, #4]
 800311c:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	681b      	ldr	r3, [r3, #0]
 8003128:	430a      	orrs	r2, r1
 800312a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003130:	f003 0304 	and.w	r3, r3, #4
 8003134:	2b00      	cmp	r3, #0
 8003136:	d00a      	beq.n	800314e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	681b      	ldr	r3, [r3, #0]
 800313c:	685b      	ldr	r3, [r3, #4]
 800313e:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	681b      	ldr	r3, [r3, #0]
 800314a:	430a      	orrs	r2, r1
 800314c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003152:	f003 0308 	and.w	r3, r3, #8
 8003156:	2b00      	cmp	r3, #0
 8003158:	d00a      	beq.n	8003170 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	681b      	ldr	r3, [r3, #0]
 800315e:	685b      	ldr	r3, [r3, #4]
 8003160:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	681b      	ldr	r3, [r3, #0]
 800316c:	430a      	orrs	r2, r1
 800316e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003174:	f003 0310 	and.w	r3, r3, #16
 8003178:	2b00      	cmp	r3, #0
 800317a:	d00a      	beq.n	8003192 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	681b      	ldr	r3, [r3, #0]
 8003180:	689b      	ldr	r3, [r3, #8]
 8003182:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	681b      	ldr	r3, [r3, #0]
 800318e:	430a      	orrs	r2, r1
 8003190:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003196:	f003 0320 	and.w	r3, r3, #32
 800319a:	2b00      	cmp	r3, #0
 800319c:	d00a      	beq.n	80031b4 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	681b      	ldr	r3, [r3, #0]
 80031a2:	689b      	ldr	r3, [r3, #8]
 80031a4:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	681b      	ldr	r3, [r3, #0]
 80031b0:	430a      	orrs	r2, r1
 80031b2:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80031b8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80031bc:	2b00      	cmp	r3, #0
 80031be:	d01a      	beq.n	80031f6 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	681b      	ldr	r3, [r3, #0]
 80031c4:	685b      	ldr	r3, [r3, #4]
 80031c6:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	681b      	ldr	r3, [r3, #0]
 80031d2:	430a      	orrs	r2, r1
 80031d4:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031da:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80031de:	d10a      	bne.n	80031f6 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	681b      	ldr	r3, [r3, #0]
 80031e4:	685b      	ldr	r3, [r3, #4]
 80031e6:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	681b      	ldr	r3, [r3, #0]
 80031f2:	430a      	orrs	r2, r1
 80031f4:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80031fa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80031fe:	2b00      	cmp	r3, #0
 8003200:	d00a      	beq.n	8003218 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	681b      	ldr	r3, [r3, #0]
 8003206:	685b      	ldr	r3, [r3, #4]
 8003208:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	681b      	ldr	r3, [r3, #0]
 8003214:	430a      	orrs	r2, r1
 8003216:	605a      	str	r2, [r3, #4]
  }
}
 8003218:	bf00      	nop
 800321a:	370c      	adds	r7, #12
 800321c:	46bd      	mov	sp, r7
 800321e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003222:	4770      	bx	lr

08003224 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8003224:	b580      	push	{r7, lr}
 8003226:	b086      	sub	sp, #24
 8003228:	af02      	add	r7, sp, #8
 800322a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	2200      	movs	r2, #0
 8003230:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8003234:	f7fd fcaa 	bl	8000b8c <HAL_GetTick>
 8003238:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	681b      	ldr	r3, [r3, #0]
 800323e:	681b      	ldr	r3, [r3, #0]
 8003240:	f003 0308 	and.w	r3, r3, #8
 8003244:	2b08      	cmp	r3, #8
 8003246:	d10e      	bne.n	8003266 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003248:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800324c:	9300      	str	r3, [sp, #0]
 800324e:	68fb      	ldr	r3, [r7, #12]
 8003250:	2200      	movs	r2, #0
 8003252:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8003256:	6878      	ldr	r0, [r7, #4]
 8003258:	f000 f82d 	bl	80032b6 <UART_WaitOnFlagUntilTimeout>
 800325c:	4603      	mov	r3, r0
 800325e:	2b00      	cmp	r3, #0
 8003260:	d001      	beq.n	8003266 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003262:	2303      	movs	r3, #3
 8003264:	e023      	b.n	80032ae <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	681b      	ldr	r3, [r3, #0]
 800326a:	681b      	ldr	r3, [r3, #0]
 800326c:	f003 0304 	and.w	r3, r3, #4
 8003270:	2b04      	cmp	r3, #4
 8003272:	d10e      	bne.n	8003292 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003274:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8003278:	9300      	str	r3, [sp, #0]
 800327a:	68fb      	ldr	r3, [r7, #12]
 800327c:	2200      	movs	r2, #0
 800327e:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8003282:	6878      	ldr	r0, [r7, #4]
 8003284:	f000 f817 	bl	80032b6 <UART_WaitOnFlagUntilTimeout>
 8003288:	4603      	mov	r3, r0
 800328a:	2b00      	cmp	r3, #0
 800328c:	d001      	beq.n	8003292 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800328e:	2303      	movs	r3, #3
 8003290:	e00d      	b.n	80032ae <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	2220      	movs	r2, #32
 8003296:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	2220      	movs	r2, #32
 800329c:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	2200      	movs	r2, #0
 80032a2:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	2200      	movs	r2, #0
 80032a8:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 80032ac:	2300      	movs	r3, #0
}
 80032ae:	4618      	mov	r0, r3
 80032b0:	3710      	adds	r7, #16
 80032b2:	46bd      	mov	sp, r7
 80032b4:	bd80      	pop	{r7, pc}

080032b6 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80032b6:	b580      	push	{r7, lr}
 80032b8:	b09c      	sub	sp, #112	; 0x70
 80032ba:	af00      	add	r7, sp, #0
 80032bc:	60f8      	str	r0, [r7, #12]
 80032be:	60b9      	str	r1, [r7, #8]
 80032c0:	603b      	str	r3, [r7, #0]
 80032c2:	4613      	mov	r3, r2
 80032c4:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80032c6:	e0a5      	b.n	8003414 <UART_WaitOnFlagUntilTimeout+0x15e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80032c8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80032ca:	f1b3 3fff 	cmp.w	r3, #4294967295
 80032ce:	f000 80a1 	beq.w	8003414 <UART_WaitOnFlagUntilTimeout+0x15e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80032d2:	f7fd fc5b 	bl	8000b8c <HAL_GetTick>
 80032d6:	4602      	mov	r2, r0
 80032d8:	683b      	ldr	r3, [r7, #0]
 80032da:	1ad3      	subs	r3, r2, r3
 80032dc:	6fba      	ldr	r2, [r7, #120]	; 0x78
 80032de:	429a      	cmp	r2, r3
 80032e0:	d302      	bcc.n	80032e8 <UART_WaitOnFlagUntilTimeout+0x32>
 80032e2:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80032e4:	2b00      	cmp	r3, #0
 80032e6:	d13e      	bne.n	8003366 <UART_WaitOnFlagUntilTimeout+0xb0>
           interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                USART_CR1_TXEIE_TXFNFIE));
#else
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80032e8:	68fb      	ldr	r3, [r7, #12]
 80032ea:	681b      	ldr	r3, [r3, #0]
 80032ec:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80032ee:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80032f0:	e853 3f00 	ldrex	r3, [r3]
 80032f4:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 80032f6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80032f8:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80032fc:	667b      	str	r3, [r7, #100]	; 0x64
 80032fe:	68fb      	ldr	r3, [r7, #12]
 8003300:	681b      	ldr	r3, [r3, #0]
 8003302:	461a      	mov	r2, r3
 8003304:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003306:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003308:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800330a:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800330c:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800330e:	e841 2300 	strex	r3, r2, [r1]
 8003312:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8003314:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003316:	2b00      	cmp	r3, #0
 8003318:	d1e6      	bne.n	80032e8 <UART_WaitOnFlagUntilTimeout+0x32>
#endif /* USART_CR1_FIFOEN */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800331a:	68fb      	ldr	r3, [r7, #12]
 800331c:	681b      	ldr	r3, [r3, #0]
 800331e:	3308      	adds	r3, #8
 8003320:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003322:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003324:	e853 3f00 	ldrex	r3, [r3]
 8003328:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800332a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800332c:	f023 0301 	bic.w	r3, r3, #1
 8003330:	663b      	str	r3, [r7, #96]	; 0x60
 8003332:	68fb      	ldr	r3, [r7, #12]
 8003334:	681b      	ldr	r3, [r3, #0]
 8003336:	3308      	adds	r3, #8
 8003338:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800333a:	64ba      	str	r2, [r7, #72]	; 0x48
 800333c:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800333e:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8003340:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003342:	e841 2300 	strex	r3, r2, [r1]
 8003346:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8003348:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800334a:	2b00      	cmp	r3, #0
 800334c:	d1e5      	bne.n	800331a <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 800334e:	68fb      	ldr	r3, [r7, #12]
 8003350:	2220      	movs	r2, #32
 8003352:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8003354:	68fb      	ldr	r3, [r7, #12]
 8003356:	2220      	movs	r2, #32
 8003358:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 800335a:	68fb      	ldr	r3, [r7, #12]
 800335c:	2200      	movs	r2, #0
 800335e:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 8003362:	2303      	movs	r3, #3
 8003364:	e067      	b.n	8003436 <UART_WaitOnFlagUntilTimeout+0x180>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8003366:	68fb      	ldr	r3, [r7, #12]
 8003368:	681b      	ldr	r3, [r3, #0]
 800336a:	681b      	ldr	r3, [r3, #0]
 800336c:	f003 0304 	and.w	r3, r3, #4
 8003370:	2b00      	cmp	r3, #0
 8003372:	d04f      	beq.n	8003414 <UART_WaitOnFlagUntilTimeout+0x15e>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8003374:	68fb      	ldr	r3, [r7, #12]
 8003376:	681b      	ldr	r3, [r3, #0]
 8003378:	69db      	ldr	r3, [r3, #28]
 800337a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800337e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003382:	d147      	bne.n	8003414 <UART_WaitOnFlagUntilTimeout+0x15e>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003384:	68fb      	ldr	r3, [r7, #12]
 8003386:	681b      	ldr	r3, [r3, #0]
 8003388:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800338c:	621a      	str	r2, [r3, #32]
             interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                  USART_CR1_TXEIE_TXFNFIE));
#else
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800338e:	68fb      	ldr	r3, [r7, #12]
 8003390:	681b      	ldr	r3, [r3, #0]
 8003392:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003394:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003396:	e853 3f00 	ldrex	r3, [r3]
 800339a:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800339c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800339e:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80033a2:	66fb      	str	r3, [r7, #108]	; 0x6c
 80033a4:	68fb      	ldr	r3, [r7, #12]
 80033a6:	681b      	ldr	r3, [r3, #0]
 80033a8:	461a      	mov	r2, r3
 80033aa:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80033ac:	637b      	str	r3, [r7, #52]	; 0x34
 80033ae:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80033b0:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80033b2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80033b4:	e841 2300 	strex	r3, r2, [r1]
 80033b8:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80033ba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80033bc:	2b00      	cmp	r3, #0
 80033be:	d1e6      	bne.n	800338e <UART_WaitOnFlagUntilTimeout+0xd8>
#endif
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80033c0:	68fb      	ldr	r3, [r7, #12]
 80033c2:	681b      	ldr	r3, [r3, #0]
 80033c4:	3308      	adds	r3, #8
 80033c6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80033c8:	697b      	ldr	r3, [r7, #20]
 80033ca:	e853 3f00 	ldrex	r3, [r3]
 80033ce:	613b      	str	r3, [r7, #16]
   return(result);
 80033d0:	693b      	ldr	r3, [r7, #16]
 80033d2:	f023 0301 	bic.w	r3, r3, #1
 80033d6:	66bb      	str	r3, [r7, #104]	; 0x68
 80033d8:	68fb      	ldr	r3, [r7, #12]
 80033da:	681b      	ldr	r3, [r3, #0]
 80033dc:	3308      	adds	r3, #8
 80033de:	6eba      	ldr	r2, [r7, #104]	; 0x68
 80033e0:	623a      	str	r2, [r7, #32]
 80033e2:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80033e4:	69f9      	ldr	r1, [r7, #28]
 80033e6:	6a3a      	ldr	r2, [r7, #32]
 80033e8:	e841 2300 	strex	r3, r2, [r1]
 80033ec:	61bb      	str	r3, [r7, #24]
   return(result);
 80033ee:	69bb      	ldr	r3, [r7, #24]
 80033f0:	2b00      	cmp	r3, #0
 80033f2:	d1e5      	bne.n	80033c0 <UART_WaitOnFlagUntilTimeout+0x10a>

          huart->gState = HAL_UART_STATE_READY;
 80033f4:	68fb      	ldr	r3, [r7, #12]
 80033f6:	2220      	movs	r2, #32
 80033f8:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 80033fa:	68fb      	ldr	r3, [r7, #12]
 80033fc:	2220      	movs	r2, #32
 80033fe:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8003400:	68fb      	ldr	r3, [r7, #12]
 8003402:	2220      	movs	r2, #32
 8003404:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003408:	68fb      	ldr	r3, [r7, #12]
 800340a:	2200      	movs	r2, #0
 800340c:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 8003410:	2303      	movs	r3, #3
 8003412:	e010      	b.n	8003436 <UART_WaitOnFlagUntilTimeout+0x180>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003414:	68fb      	ldr	r3, [r7, #12]
 8003416:	681b      	ldr	r3, [r3, #0]
 8003418:	69da      	ldr	r2, [r3, #28]
 800341a:	68bb      	ldr	r3, [r7, #8]
 800341c:	4013      	ands	r3, r2
 800341e:	68ba      	ldr	r2, [r7, #8]
 8003420:	429a      	cmp	r2, r3
 8003422:	bf0c      	ite	eq
 8003424:	2301      	moveq	r3, #1
 8003426:	2300      	movne	r3, #0
 8003428:	b2db      	uxtb	r3, r3
 800342a:	461a      	mov	r2, r3
 800342c:	79fb      	ldrb	r3, [r7, #7]
 800342e:	429a      	cmp	r2, r3
 8003430:	f43f af4a 	beq.w	80032c8 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003434:	2300      	movs	r3, #0
}
 8003436:	4618      	mov	r0, r3
 8003438:	3770      	adds	r7, #112	; 0x70
 800343a:	46bd      	mov	sp, r7
 800343c:	bd80      	pop	{r7, pc}
	...

08003440 <__errno>:
 8003440:	4b01      	ldr	r3, [pc, #4]	; (8003448 <__errno+0x8>)
 8003442:	6818      	ldr	r0, [r3, #0]
 8003444:	4770      	bx	lr
 8003446:	bf00      	nop
 8003448:	2000000c 	.word	0x2000000c

0800344c <__libc_init_array>:
 800344c:	b570      	push	{r4, r5, r6, lr}
 800344e:	4d0d      	ldr	r5, [pc, #52]	; (8003484 <__libc_init_array+0x38>)
 8003450:	4c0d      	ldr	r4, [pc, #52]	; (8003488 <__libc_init_array+0x3c>)
 8003452:	1b64      	subs	r4, r4, r5
 8003454:	10a4      	asrs	r4, r4, #2
 8003456:	2600      	movs	r6, #0
 8003458:	42a6      	cmp	r6, r4
 800345a:	d109      	bne.n	8003470 <__libc_init_array+0x24>
 800345c:	4d0b      	ldr	r5, [pc, #44]	; (800348c <__libc_init_array+0x40>)
 800345e:	4c0c      	ldr	r4, [pc, #48]	; (8003490 <__libc_init_array+0x44>)
 8003460:	f000 fc4e 	bl	8003d00 <_init>
 8003464:	1b64      	subs	r4, r4, r5
 8003466:	10a4      	asrs	r4, r4, #2
 8003468:	2600      	movs	r6, #0
 800346a:	42a6      	cmp	r6, r4
 800346c:	d105      	bne.n	800347a <__libc_init_array+0x2e>
 800346e:	bd70      	pop	{r4, r5, r6, pc}
 8003470:	f855 3b04 	ldr.w	r3, [r5], #4
 8003474:	4798      	blx	r3
 8003476:	3601      	adds	r6, #1
 8003478:	e7ee      	b.n	8003458 <__libc_init_array+0xc>
 800347a:	f855 3b04 	ldr.w	r3, [r5], #4
 800347e:	4798      	blx	r3
 8003480:	3601      	adds	r6, #1
 8003482:	e7f2      	b.n	800346a <__libc_init_array+0x1e>
 8003484:	08003db4 	.word	0x08003db4
 8003488:	08003db4 	.word	0x08003db4
 800348c:	08003db4 	.word	0x08003db4
 8003490:	08003db8 	.word	0x08003db8

08003494 <memset>:
 8003494:	4402      	add	r2, r0
 8003496:	4603      	mov	r3, r0
 8003498:	4293      	cmp	r3, r2
 800349a:	d100      	bne.n	800349e <memset+0xa>
 800349c:	4770      	bx	lr
 800349e:	f803 1b01 	strb.w	r1, [r3], #1
 80034a2:	e7f9      	b.n	8003498 <memset+0x4>

080034a4 <siprintf>:
 80034a4:	b40e      	push	{r1, r2, r3}
 80034a6:	b500      	push	{lr}
 80034a8:	b09c      	sub	sp, #112	; 0x70
 80034aa:	ab1d      	add	r3, sp, #116	; 0x74
 80034ac:	9002      	str	r0, [sp, #8]
 80034ae:	9006      	str	r0, [sp, #24]
 80034b0:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80034b4:	4809      	ldr	r0, [pc, #36]	; (80034dc <siprintf+0x38>)
 80034b6:	9107      	str	r1, [sp, #28]
 80034b8:	9104      	str	r1, [sp, #16]
 80034ba:	4909      	ldr	r1, [pc, #36]	; (80034e0 <siprintf+0x3c>)
 80034bc:	f853 2b04 	ldr.w	r2, [r3], #4
 80034c0:	9105      	str	r1, [sp, #20]
 80034c2:	6800      	ldr	r0, [r0, #0]
 80034c4:	9301      	str	r3, [sp, #4]
 80034c6:	a902      	add	r1, sp, #8
 80034c8:	f000 f868 	bl	800359c <_svfiprintf_r>
 80034cc:	9b02      	ldr	r3, [sp, #8]
 80034ce:	2200      	movs	r2, #0
 80034d0:	701a      	strb	r2, [r3, #0]
 80034d2:	b01c      	add	sp, #112	; 0x70
 80034d4:	f85d eb04 	ldr.w	lr, [sp], #4
 80034d8:	b003      	add	sp, #12
 80034da:	4770      	bx	lr
 80034dc:	2000000c 	.word	0x2000000c
 80034e0:	ffff0208 	.word	0xffff0208

080034e4 <__ssputs_r>:
 80034e4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80034e8:	688e      	ldr	r6, [r1, #8]
 80034ea:	429e      	cmp	r6, r3
 80034ec:	4682      	mov	sl, r0
 80034ee:	460c      	mov	r4, r1
 80034f0:	4690      	mov	r8, r2
 80034f2:	461f      	mov	r7, r3
 80034f4:	d838      	bhi.n	8003568 <__ssputs_r+0x84>
 80034f6:	898a      	ldrh	r2, [r1, #12]
 80034f8:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80034fc:	d032      	beq.n	8003564 <__ssputs_r+0x80>
 80034fe:	6825      	ldr	r5, [r4, #0]
 8003500:	6909      	ldr	r1, [r1, #16]
 8003502:	eba5 0901 	sub.w	r9, r5, r1
 8003506:	6965      	ldr	r5, [r4, #20]
 8003508:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800350c:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8003510:	3301      	adds	r3, #1
 8003512:	444b      	add	r3, r9
 8003514:	106d      	asrs	r5, r5, #1
 8003516:	429d      	cmp	r5, r3
 8003518:	bf38      	it	cc
 800351a:	461d      	movcc	r5, r3
 800351c:	0553      	lsls	r3, r2, #21
 800351e:	d531      	bpl.n	8003584 <__ssputs_r+0xa0>
 8003520:	4629      	mov	r1, r5
 8003522:	f000 fb47 	bl	8003bb4 <_malloc_r>
 8003526:	4606      	mov	r6, r0
 8003528:	b950      	cbnz	r0, 8003540 <__ssputs_r+0x5c>
 800352a:	230c      	movs	r3, #12
 800352c:	f8ca 3000 	str.w	r3, [sl]
 8003530:	89a3      	ldrh	r3, [r4, #12]
 8003532:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003536:	81a3      	strh	r3, [r4, #12]
 8003538:	f04f 30ff 	mov.w	r0, #4294967295
 800353c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003540:	6921      	ldr	r1, [r4, #16]
 8003542:	464a      	mov	r2, r9
 8003544:	f000 fabe 	bl	8003ac4 <memcpy>
 8003548:	89a3      	ldrh	r3, [r4, #12]
 800354a:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800354e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003552:	81a3      	strh	r3, [r4, #12]
 8003554:	6126      	str	r6, [r4, #16]
 8003556:	6165      	str	r5, [r4, #20]
 8003558:	444e      	add	r6, r9
 800355a:	eba5 0509 	sub.w	r5, r5, r9
 800355e:	6026      	str	r6, [r4, #0]
 8003560:	60a5      	str	r5, [r4, #8]
 8003562:	463e      	mov	r6, r7
 8003564:	42be      	cmp	r6, r7
 8003566:	d900      	bls.n	800356a <__ssputs_r+0x86>
 8003568:	463e      	mov	r6, r7
 800356a:	4632      	mov	r2, r6
 800356c:	6820      	ldr	r0, [r4, #0]
 800356e:	4641      	mov	r1, r8
 8003570:	f000 fab6 	bl	8003ae0 <memmove>
 8003574:	68a3      	ldr	r3, [r4, #8]
 8003576:	6822      	ldr	r2, [r4, #0]
 8003578:	1b9b      	subs	r3, r3, r6
 800357a:	4432      	add	r2, r6
 800357c:	60a3      	str	r3, [r4, #8]
 800357e:	6022      	str	r2, [r4, #0]
 8003580:	2000      	movs	r0, #0
 8003582:	e7db      	b.n	800353c <__ssputs_r+0x58>
 8003584:	462a      	mov	r2, r5
 8003586:	f000 fb6f 	bl	8003c68 <_realloc_r>
 800358a:	4606      	mov	r6, r0
 800358c:	2800      	cmp	r0, #0
 800358e:	d1e1      	bne.n	8003554 <__ssputs_r+0x70>
 8003590:	6921      	ldr	r1, [r4, #16]
 8003592:	4650      	mov	r0, sl
 8003594:	f000 fabe 	bl	8003b14 <_free_r>
 8003598:	e7c7      	b.n	800352a <__ssputs_r+0x46>
	...

0800359c <_svfiprintf_r>:
 800359c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80035a0:	4698      	mov	r8, r3
 80035a2:	898b      	ldrh	r3, [r1, #12]
 80035a4:	061b      	lsls	r3, r3, #24
 80035a6:	b09d      	sub	sp, #116	; 0x74
 80035a8:	4607      	mov	r7, r0
 80035aa:	460d      	mov	r5, r1
 80035ac:	4614      	mov	r4, r2
 80035ae:	d50e      	bpl.n	80035ce <_svfiprintf_r+0x32>
 80035b0:	690b      	ldr	r3, [r1, #16]
 80035b2:	b963      	cbnz	r3, 80035ce <_svfiprintf_r+0x32>
 80035b4:	2140      	movs	r1, #64	; 0x40
 80035b6:	f000 fafd 	bl	8003bb4 <_malloc_r>
 80035ba:	6028      	str	r0, [r5, #0]
 80035bc:	6128      	str	r0, [r5, #16]
 80035be:	b920      	cbnz	r0, 80035ca <_svfiprintf_r+0x2e>
 80035c0:	230c      	movs	r3, #12
 80035c2:	603b      	str	r3, [r7, #0]
 80035c4:	f04f 30ff 	mov.w	r0, #4294967295
 80035c8:	e0d1      	b.n	800376e <_svfiprintf_r+0x1d2>
 80035ca:	2340      	movs	r3, #64	; 0x40
 80035cc:	616b      	str	r3, [r5, #20]
 80035ce:	2300      	movs	r3, #0
 80035d0:	9309      	str	r3, [sp, #36]	; 0x24
 80035d2:	2320      	movs	r3, #32
 80035d4:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80035d8:	f8cd 800c 	str.w	r8, [sp, #12]
 80035dc:	2330      	movs	r3, #48	; 0x30
 80035de:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8003788 <_svfiprintf_r+0x1ec>
 80035e2:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80035e6:	f04f 0901 	mov.w	r9, #1
 80035ea:	4623      	mov	r3, r4
 80035ec:	469a      	mov	sl, r3
 80035ee:	f813 2b01 	ldrb.w	r2, [r3], #1
 80035f2:	b10a      	cbz	r2, 80035f8 <_svfiprintf_r+0x5c>
 80035f4:	2a25      	cmp	r2, #37	; 0x25
 80035f6:	d1f9      	bne.n	80035ec <_svfiprintf_r+0x50>
 80035f8:	ebba 0b04 	subs.w	fp, sl, r4
 80035fc:	d00b      	beq.n	8003616 <_svfiprintf_r+0x7a>
 80035fe:	465b      	mov	r3, fp
 8003600:	4622      	mov	r2, r4
 8003602:	4629      	mov	r1, r5
 8003604:	4638      	mov	r0, r7
 8003606:	f7ff ff6d 	bl	80034e4 <__ssputs_r>
 800360a:	3001      	adds	r0, #1
 800360c:	f000 80aa 	beq.w	8003764 <_svfiprintf_r+0x1c8>
 8003610:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8003612:	445a      	add	r2, fp
 8003614:	9209      	str	r2, [sp, #36]	; 0x24
 8003616:	f89a 3000 	ldrb.w	r3, [sl]
 800361a:	2b00      	cmp	r3, #0
 800361c:	f000 80a2 	beq.w	8003764 <_svfiprintf_r+0x1c8>
 8003620:	2300      	movs	r3, #0
 8003622:	f04f 32ff 	mov.w	r2, #4294967295
 8003626:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800362a:	f10a 0a01 	add.w	sl, sl, #1
 800362e:	9304      	str	r3, [sp, #16]
 8003630:	9307      	str	r3, [sp, #28]
 8003632:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8003636:	931a      	str	r3, [sp, #104]	; 0x68
 8003638:	4654      	mov	r4, sl
 800363a:	2205      	movs	r2, #5
 800363c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003640:	4851      	ldr	r0, [pc, #324]	; (8003788 <_svfiprintf_r+0x1ec>)
 8003642:	f7fc fdc5 	bl	80001d0 <memchr>
 8003646:	9a04      	ldr	r2, [sp, #16]
 8003648:	b9d8      	cbnz	r0, 8003682 <_svfiprintf_r+0xe6>
 800364a:	06d0      	lsls	r0, r2, #27
 800364c:	bf44      	itt	mi
 800364e:	2320      	movmi	r3, #32
 8003650:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8003654:	0711      	lsls	r1, r2, #28
 8003656:	bf44      	itt	mi
 8003658:	232b      	movmi	r3, #43	; 0x2b
 800365a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800365e:	f89a 3000 	ldrb.w	r3, [sl]
 8003662:	2b2a      	cmp	r3, #42	; 0x2a
 8003664:	d015      	beq.n	8003692 <_svfiprintf_r+0xf6>
 8003666:	9a07      	ldr	r2, [sp, #28]
 8003668:	4654      	mov	r4, sl
 800366a:	2000      	movs	r0, #0
 800366c:	f04f 0c0a 	mov.w	ip, #10
 8003670:	4621      	mov	r1, r4
 8003672:	f811 3b01 	ldrb.w	r3, [r1], #1
 8003676:	3b30      	subs	r3, #48	; 0x30
 8003678:	2b09      	cmp	r3, #9
 800367a:	d94e      	bls.n	800371a <_svfiprintf_r+0x17e>
 800367c:	b1b0      	cbz	r0, 80036ac <_svfiprintf_r+0x110>
 800367e:	9207      	str	r2, [sp, #28]
 8003680:	e014      	b.n	80036ac <_svfiprintf_r+0x110>
 8003682:	eba0 0308 	sub.w	r3, r0, r8
 8003686:	fa09 f303 	lsl.w	r3, r9, r3
 800368a:	4313      	orrs	r3, r2
 800368c:	9304      	str	r3, [sp, #16]
 800368e:	46a2      	mov	sl, r4
 8003690:	e7d2      	b.n	8003638 <_svfiprintf_r+0x9c>
 8003692:	9b03      	ldr	r3, [sp, #12]
 8003694:	1d19      	adds	r1, r3, #4
 8003696:	681b      	ldr	r3, [r3, #0]
 8003698:	9103      	str	r1, [sp, #12]
 800369a:	2b00      	cmp	r3, #0
 800369c:	bfbb      	ittet	lt
 800369e:	425b      	neglt	r3, r3
 80036a0:	f042 0202 	orrlt.w	r2, r2, #2
 80036a4:	9307      	strge	r3, [sp, #28]
 80036a6:	9307      	strlt	r3, [sp, #28]
 80036a8:	bfb8      	it	lt
 80036aa:	9204      	strlt	r2, [sp, #16]
 80036ac:	7823      	ldrb	r3, [r4, #0]
 80036ae:	2b2e      	cmp	r3, #46	; 0x2e
 80036b0:	d10c      	bne.n	80036cc <_svfiprintf_r+0x130>
 80036b2:	7863      	ldrb	r3, [r4, #1]
 80036b4:	2b2a      	cmp	r3, #42	; 0x2a
 80036b6:	d135      	bne.n	8003724 <_svfiprintf_r+0x188>
 80036b8:	9b03      	ldr	r3, [sp, #12]
 80036ba:	1d1a      	adds	r2, r3, #4
 80036bc:	681b      	ldr	r3, [r3, #0]
 80036be:	9203      	str	r2, [sp, #12]
 80036c0:	2b00      	cmp	r3, #0
 80036c2:	bfb8      	it	lt
 80036c4:	f04f 33ff 	movlt.w	r3, #4294967295
 80036c8:	3402      	adds	r4, #2
 80036ca:	9305      	str	r3, [sp, #20]
 80036cc:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8003798 <_svfiprintf_r+0x1fc>
 80036d0:	7821      	ldrb	r1, [r4, #0]
 80036d2:	2203      	movs	r2, #3
 80036d4:	4650      	mov	r0, sl
 80036d6:	f7fc fd7b 	bl	80001d0 <memchr>
 80036da:	b140      	cbz	r0, 80036ee <_svfiprintf_r+0x152>
 80036dc:	2340      	movs	r3, #64	; 0x40
 80036de:	eba0 000a 	sub.w	r0, r0, sl
 80036e2:	fa03 f000 	lsl.w	r0, r3, r0
 80036e6:	9b04      	ldr	r3, [sp, #16]
 80036e8:	4303      	orrs	r3, r0
 80036ea:	3401      	adds	r4, #1
 80036ec:	9304      	str	r3, [sp, #16]
 80036ee:	f814 1b01 	ldrb.w	r1, [r4], #1
 80036f2:	4826      	ldr	r0, [pc, #152]	; (800378c <_svfiprintf_r+0x1f0>)
 80036f4:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80036f8:	2206      	movs	r2, #6
 80036fa:	f7fc fd69 	bl	80001d0 <memchr>
 80036fe:	2800      	cmp	r0, #0
 8003700:	d038      	beq.n	8003774 <_svfiprintf_r+0x1d8>
 8003702:	4b23      	ldr	r3, [pc, #140]	; (8003790 <_svfiprintf_r+0x1f4>)
 8003704:	bb1b      	cbnz	r3, 800374e <_svfiprintf_r+0x1b2>
 8003706:	9b03      	ldr	r3, [sp, #12]
 8003708:	3307      	adds	r3, #7
 800370a:	f023 0307 	bic.w	r3, r3, #7
 800370e:	3308      	adds	r3, #8
 8003710:	9303      	str	r3, [sp, #12]
 8003712:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003714:	4433      	add	r3, r6
 8003716:	9309      	str	r3, [sp, #36]	; 0x24
 8003718:	e767      	b.n	80035ea <_svfiprintf_r+0x4e>
 800371a:	fb0c 3202 	mla	r2, ip, r2, r3
 800371e:	460c      	mov	r4, r1
 8003720:	2001      	movs	r0, #1
 8003722:	e7a5      	b.n	8003670 <_svfiprintf_r+0xd4>
 8003724:	2300      	movs	r3, #0
 8003726:	3401      	adds	r4, #1
 8003728:	9305      	str	r3, [sp, #20]
 800372a:	4619      	mov	r1, r3
 800372c:	f04f 0c0a 	mov.w	ip, #10
 8003730:	4620      	mov	r0, r4
 8003732:	f810 2b01 	ldrb.w	r2, [r0], #1
 8003736:	3a30      	subs	r2, #48	; 0x30
 8003738:	2a09      	cmp	r2, #9
 800373a:	d903      	bls.n	8003744 <_svfiprintf_r+0x1a8>
 800373c:	2b00      	cmp	r3, #0
 800373e:	d0c5      	beq.n	80036cc <_svfiprintf_r+0x130>
 8003740:	9105      	str	r1, [sp, #20]
 8003742:	e7c3      	b.n	80036cc <_svfiprintf_r+0x130>
 8003744:	fb0c 2101 	mla	r1, ip, r1, r2
 8003748:	4604      	mov	r4, r0
 800374a:	2301      	movs	r3, #1
 800374c:	e7f0      	b.n	8003730 <_svfiprintf_r+0x194>
 800374e:	ab03      	add	r3, sp, #12
 8003750:	9300      	str	r3, [sp, #0]
 8003752:	462a      	mov	r2, r5
 8003754:	4b0f      	ldr	r3, [pc, #60]	; (8003794 <_svfiprintf_r+0x1f8>)
 8003756:	a904      	add	r1, sp, #16
 8003758:	4638      	mov	r0, r7
 800375a:	f3af 8000 	nop.w
 800375e:	1c42      	adds	r2, r0, #1
 8003760:	4606      	mov	r6, r0
 8003762:	d1d6      	bne.n	8003712 <_svfiprintf_r+0x176>
 8003764:	89ab      	ldrh	r3, [r5, #12]
 8003766:	065b      	lsls	r3, r3, #25
 8003768:	f53f af2c 	bmi.w	80035c4 <_svfiprintf_r+0x28>
 800376c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800376e:	b01d      	add	sp, #116	; 0x74
 8003770:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003774:	ab03      	add	r3, sp, #12
 8003776:	9300      	str	r3, [sp, #0]
 8003778:	462a      	mov	r2, r5
 800377a:	4b06      	ldr	r3, [pc, #24]	; (8003794 <_svfiprintf_r+0x1f8>)
 800377c:	a904      	add	r1, sp, #16
 800377e:	4638      	mov	r0, r7
 8003780:	f000 f87a 	bl	8003878 <_printf_i>
 8003784:	e7eb      	b.n	800375e <_svfiprintf_r+0x1c2>
 8003786:	bf00      	nop
 8003788:	08003d78 	.word	0x08003d78
 800378c:	08003d82 	.word	0x08003d82
 8003790:	00000000 	.word	0x00000000
 8003794:	080034e5 	.word	0x080034e5
 8003798:	08003d7e 	.word	0x08003d7e

0800379c <_printf_common>:
 800379c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80037a0:	4616      	mov	r6, r2
 80037a2:	4699      	mov	r9, r3
 80037a4:	688a      	ldr	r2, [r1, #8]
 80037a6:	690b      	ldr	r3, [r1, #16]
 80037a8:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80037ac:	4293      	cmp	r3, r2
 80037ae:	bfb8      	it	lt
 80037b0:	4613      	movlt	r3, r2
 80037b2:	6033      	str	r3, [r6, #0]
 80037b4:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80037b8:	4607      	mov	r7, r0
 80037ba:	460c      	mov	r4, r1
 80037bc:	b10a      	cbz	r2, 80037c2 <_printf_common+0x26>
 80037be:	3301      	adds	r3, #1
 80037c0:	6033      	str	r3, [r6, #0]
 80037c2:	6823      	ldr	r3, [r4, #0]
 80037c4:	0699      	lsls	r1, r3, #26
 80037c6:	bf42      	ittt	mi
 80037c8:	6833      	ldrmi	r3, [r6, #0]
 80037ca:	3302      	addmi	r3, #2
 80037cc:	6033      	strmi	r3, [r6, #0]
 80037ce:	6825      	ldr	r5, [r4, #0]
 80037d0:	f015 0506 	ands.w	r5, r5, #6
 80037d4:	d106      	bne.n	80037e4 <_printf_common+0x48>
 80037d6:	f104 0a19 	add.w	sl, r4, #25
 80037da:	68e3      	ldr	r3, [r4, #12]
 80037dc:	6832      	ldr	r2, [r6, #0]
 80037de:	1a9b      	subs	r3, r3, r2
 80037e0:	42ab      	cmp	r3, r5
 80037e2:	dc26      	bgt.n	8003832 <_printf_common+0x96>
 80037e4:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80037e8:	1e13      	subs	r3, r2, #0
 80037ea:	6822      	ldr	r2, [r4, #0]
 80037ec:	bf18      	it	ne
 80037ee:	2301      	movne	r3, #1
 80037f0:	0692      	lsls	r2, r2, #26
 80037f2:	d42b      	bmi.n	800384c <_printf_common+0xb0>
 80037f4:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80037f8:	4649      	mov	r1, r9
 80037fa:	4638      	mov	r0, r7
 80037fc:	47c0      	blx	r8
 80037fe:	3001      	adds	r0, #1
 8003800:	d01e      	beq.n	8003840 <_printf_common+0xa4>
 8003802:	6823      	ldr	r3, [r4, #0]
 8003804:	68e5      	ldr	r5, [r4, #12]
 8003806:	6832      	ldr	r2, [r6, #0]
 8003808:	f003 0306 	and.w	r3, r3, #6
 800380c:	2b04      	cmp	r3, #4
 800380e:	bf08      	it	eq
 8003810:	1aad      	subeq	r5, r5, r2
 8003812:	68a3      	ldr	r3, [r4, #8]
 8003814:	6922      	ldr	r2, [r4, #16]
 8003816:	bf0c      	ite	eq
 8003818:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800381c:	2500      	movne	r5, #0
 800381e:	4293      	cmp	r3, r2
 8003820:	bfc4      	itt	gt
 8003822:	1a9b      	subgt	r3, r3, r2
 8003824:	18ed      	addgt	r5, r5, r3
 8003826:	2600      	movs	r6, #0
 8003828:	341a      	adds	r4, #26
 800382a:	42b5      	cmp	r5, r6
 800382c:	d11a      	bne.n	8003864 <_printf_common+0xc8>
 800382e:	2000      	movs	r0, #0
 8003830:	e008      	b.n	8003844 <_printf_common+0xa8>
 8003832:	2301      	movs	r3, #1
 8003834:	4652      	mov	r2, sl
 8003836:	4649      	mov	r1, r9
 8003838:	4638      	mov	r0, r7
 800383a:	47c0      	blx	r8
 800383c:	3001      	adds	r0, #1
 800383e:	d103      	bne.n	8003848 <_printf_common+0xac>
 8003840:	f04f 30ff 	mov.w	r0, #4294967295
 8003844:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003848:	3501      	adds	r5, #1
 800384a:	e7c6      	b.n	80037da <_printf_common+0x3e>
 800384c:	18e1      	adds	r1, r4, r3
 800384e:	1c5a      	adds	r2, r3, #1
 8003850:	2030      	movs	r0, #48	; 0x30
 8003852:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8003856:	4422      	add	r2, r4
 8003858:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800385c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8003860:	3302      	adds	r3, #2
 8003862:	e7c7      	b.n	80037f4 <_printf_common+0x58>
 8003864:	2301      	movs	r3, #1
 8003866:	4622      	mov	r2, r4
 8003868:	4649      	mov	r1, r9
 800386a:	4638      	mov	r0, r7
 800386c:	47c0      	blx	r8
 800386e:	3001      	adds	r0, #1
 8003870:	d0e6      	beq.n	8003840 <_printf_common+0xa4>
 8003872:	3601      	adds	r6, #1
 8003874:	e7d9      	b.n	800382a <_printf_common+0x8e>
	...

08003878 <_printf_i>:
 8003878:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800387c:	460c      	mov	r4, r1
 800387e:	4691      	mov	r9, r2
 8003880:	7e27      	ldrb	r7, [r4, #24]
 8003882:	990c      	ldr	r1, [sp, #48]	; 0x30
 8003884:	2f78      	cmp	r7, #120	; 0x78
 8003886:	4680      	mov	r8, r0
 8003888:	469a      	mov	sl, r3
 800388a:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800388e:	d807      	bhi.n	80038a0 <_printf_i+0x28>
 8003890:	2f62      	cmp	r7, #98	; 0x62
 8003892:	d80a      	bhi.n	80038aa <_printf_i+0x32>
 8003894:	2f00      	cmp	r7, #0
 8003896:	f000 80d8 	beq.w	8003a4a <_printf_i+0x1d2>
 800389a:	2f58      	cmp	r7, #88	; 0x58
 800389c:	f000 80a3 	beq.w	80039e6 <_printf_i+0x16e>
 80038a0:	f104 0642 	add.w	r6, r4, #66	; 0x42
 80038a4:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80038a8:	e03a      	b.n	8003920 <_printf_i+0xa8>
 80038aa:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80038ae:	2b15      	cmp	r3, #21
 80038b0:	d8f6      	bhi.n	80038a0 <_printf_i+0x28>
 80038b2:	a001      	add	r0, pc, #4	; (adr r0, 80038b8 <_printf_i+0x40>)
 80038b4:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 80038b8:	08003911 	.word	0x08003911
 80038bc:	08003925 	.word	0x08003925
 80038c0:	080038a1 	.word	0x080038a1
 80038c4:	080038a1 	.word	0x080038a1
 80038c8:	080038a1 	.word	0x080038a1
 80038cc:	080038a1 	.word	0x080038a1
 80038d0:	08003925 	.word	0x08003925
 80038d4:	080038a1 	.word	0x080038a1
 80038d8:	080038a1 	.word	0x080038a1
 80038dc:	080038a1 	.word	0x080038a1
 80038e0:	080038a1 	.word	0x080038a1
 80038e4:	08003a31 	.word	0x08003a31
 80038e8:	08003955 	.word	0x08003955
 80038ec:	08003a13 	.word	0x08003a13
 80038f0:	080038a1 	.word	0x080038a1
 80038f4:	080038a1 	.word	0x080038a1
 80038f8:	08003a53 	.word	0x08003a53
 80038fc:	080038a1 	.word	0x080038a1
 8003900:	08003955 	.word	0x08003955
 8003904:	080038a1 	.word	0x080038a1
 8003908:	080038a1 	.word	0x080038a1
 800390c:	08003a1b 	.word	0x08003a1b
 8003910:	680b      	ldr	r3, [r1, #0]
 8003912:	1d1a      	adds	r2, r3, #4
 8003914:	681b      	ldr	r3, [r3, #0]
 8003916:	600a      	str	r2, [r1, #0]
 8003918:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800391c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8003920:	2301      	movs	r3, #1
 8003922:	e0a3      	b.n	8003a6c <_printf_i+0x1f4>
 8003924:	6825      	ldr	r5, [r4, #0]
 8003926:	6808      	ldr	r0, [r1, #0]
 8003928:	062e      	lsls	r6, r5, #24
 800392a:	f100 0304 	add.w	r3, r0, #4
 800392e:	d50a      	bpl.n	8003946 <_printf_i+0xce>
 8003930:	6805      	ldr	r5, [r0, #0]
 8003932:	600b      	str	r3, [r1, #0]
 8003934:	2d00      	cmp	r5, #0
 8003936:	da03      	bge.n	8003940 <_printf_i+0xc8>
 8003938:	232d      	movs	r3, #45	; 0x2d
 800393a:	426d      	negs	r5, r5
 800393c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003940:	485e      	ldr	r0, [pc, #376]	; (8003abc <_printf_i+0x244>)
 8003942:	230a      	movs	r3, #10
 8003944:	e019      	b.n	800397a <_printf_i+0x102>
 8003946:	f015 0f40 	tst.w	r5, #64	; 0x40
 800394a:	6805      	ldr	r5, [r0, #0]
 800394c:	600b      	str	r3, [r1, #0]
 800394e:	bf18      	it	ne
 8003950:	b22d      	sxthne	r5, r5
 8003952:	e7ef      	b.n	8003934 <_printf_i+0xbc>
 8003954:	680b      	ldr	r3, [r1, #0]
 8003956:	6825      	ldr	r5, [r4, #0]
 8003958:	1d18      	adds	r0, r3, #4
 800395a:	6008      	str	r0, [r1, #0]
 800395c:	0628      	lsls	r0, r5, #24
 800395e:	d501      	bpl.n	8003964 <_printf_i+0xec>
 8003960:	681d      	ldr	r5, [r3, #0]
 8003962:	e002      	b.n	800396a <_printf_i+0xf2>
 8003964:	0669      	lsls	r1, r5, #25
 8003966:	d5fb      	bpl.n	8003960 <_printf_i+0xe8>
 8003968:	881d      	ldrh	r5, [r3, #0]
 800396a:	4854      	ldr	r0, [pc, #336]	; (8003abc <_printf_i+0x244>)
 800396c:	2f6f      	cmp	r7, #111	; 0x6f
 800396e:	bf0c      	ite	eq
 8003970:	2308      	moveq	r3, #8
 8003972:	230a      	movne	r3, #10
 8003974:	2100      	movs	r1, #0
 8003976:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800397a:	6866      	ldr	r6, [r4, #4]
 800397c:	60a6      	str	r6, [r4, #8]
 800397e:	2e00      	cmp	r6, #0
 8003980:	bfa2      	ittt	ge
 8003982:	6821      	ldrge	r1, [r4, #0]
 8003984:	f021 0104 	bicge.w	r1, r1, #4
 8003988:	6021      	strge	r1, [r4, #0]
 800398a:	b90d      	cbnz	r5, 8003990 <_printf_i+0x118>
 800398c:	2e00      	cmp	r6, #0
 800398e:	d04d      	beq.n	8003a2c <_printf_i+0x1b4>
 8003990:	4616      	mov	r6, r2
 8003992:	fbb5 f1f3 	udiv	r1, r5, r3
 8003996:	fb03 5711 	mls	r7, r3, r1, r5
 800399a:	5dc7      	ldrb	r7, [r0, r7]
 800399c:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80039a0:	462f      	mov	r7, r5
 80039a2:	42bb      	cmp	r3, r7
 80039a4:	460d      	mov	r5, r1
 80039a6:	d9f4      	bls.n	8003992 <_printf_i+0x11a>
 80039a8:	2b08      	cmp	r3, #8
 80039aa:	d10b      	bne.n	80039c4 <_printf_i+0x14c>
 80039ac:	6823      	ldr	r3, [r4, #0]
 80039ae:	07df      	lsls	r7, r3, #31
 80039b0:	d508      	bpl.n	80039c4 <_printf_i+0x14c>
 80039b2:	6923      	ldr	r3, [r4, #16]
 80039b4:	6861      	ldr	r1, [r4, #4]
 80039b6:	4299      	cmp	r1, r3
 80039b8:	bfde      	ittt	le
 80039ba:	2330      	movle	r3, #48	; 0x30
 80039bc:	f806 3c01 	strble.w	r3, [r6, #-1]
 80039c0:	f106 36ff 	addle.w	r6, r6, #4294967295
 80039c4:	1b92      	subs	r2, r2, r6
 80039c6:	6122      	str	r2, [r4, #16]
 80039c8:	f8cd a000 	str.w	sl, [sp]
 80039cc:	464b      	mov	r3, r9
 80039ce:	aa03      	add	r2, sp, #12
 80039d0:	4621      	mov	r1, r4
 80039d2:	4640      	mov	r0, r8
 80039d4:	f7ff fee2 	bl	800379c <_printf_common>
 80039d8:	3001      	adds	r0, #1
 80039da:	d14c      	bne.n	8003a76 <_printf_i+0x1fe>
 80039dc:	f04f 30ff 	mov.w	r0, #4294967295
 80039e0:	b004      	add	sp, #16
 80039e2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80039e6:	4835      	ldr	r0, [pc, #212]	; (8003abc <_printf_i+0x244>)
 80039e8:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 80039ec:	6823      	ldr	r3, [r4, #0]
 80039ee:	680e      	ldr	r6, [r1, #0]
 80039f0:	061f      	lsls	r7, r3, #24
 80039f2:	f856 5b04 	ldr.w	r5, [r6], #4
 80039f6:	600e      	str	r6, [r1, #0]
 80039f8:	d514      	bpl.n	8003a24 <_printf_i+0x1ac>
 80039fa:	07d9      	lsls	r1, r3, #31
 80039fc:	bf44      	itt	mi
 80039fe:	f043 0320 	orrmi.w	r3, r3, #32
 8003a02:	6023      	strmi	r3, [r4, #0]
 8003a04:	b91d      	cbnz	r5, 8003a0e <_printf_i+0x196>
 8003a06:	6823      	ldr	r3, [r4, #0]
 8003a08:	f023 0320 	bic.w	r3, r3, #32
 8003a0c:	6023      	str	r3, [r4, #0]
 8003a0e:	2310      	movs	r3, #16
 8003a10:	e7b0      	b.n	8003974 <_printf_i+0xfc>
 8003a12:	6823      	ldr	r3, [r4, #0]
 8003a14:	f043 0320 	orr.w	r3, r3, #32
 8003a18:	6023      	str	r3, [r4, #0]
 8003a1a:	2378      	movs	r3, #120	; 0x78
 8003a1c:	4828      	ldr	r0, [pc, #160]	; (8003ac0 <_printf_i+0x248>)
 8003a1e:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8003a22:	e7e3      	b.n	80039ec <_printf_i+0x174>
 8003a24:	065e      	lsls	r6, r3, #25
 8003a26:	bf48      	it	mi
 8003a28:	b2ad      	uxthmi	r5, r5
 8003a2a:	e7e6      	b.n	80039fa <_printf_i+0x182>
 8003a2c:	4616      	mov	r6, r2
 8003a2e:	e7bb      	b.n	80039a8 <_printf_i+0x130>
 8003a30:	680b      	ldr	r3, [r1, #0]
 8003a32:	6826      	ldr	r6, [r4, #0]
 8003a34:	6960      	ldr	r0, [r4, #20]
 8003a36:	1d1d      	adds	r5, r3, #4
 8003a38:	600d      	str	r5, [r1, #0]
 8003a3a:	0635      	lsls	r5, r6, #24
 8003a3c:	681b      	ldr	r3, [r3, #0]
 8003a3e:	d501      	bpl.n	8003a44 <_printf_i+0x1cc>
 8003a40:	6018      	str	r0, [r3, #0]
 8003a42:	e002      	b.n	8003a4a <_printf_i+0x1d2>
 8003a44:	0671      	lsls	r1, r6, #25
 8003a46:	d5fb      	bpl.n	8003a40 <_printf_i+0x1c8>
 8003a48:	8018      	strh	r0, [r3, #0]
 8003a4a:	2300      	movs	r3, #0
 8003a4c:	6123      	str	r3, [r4, #16]
 8003a4e:	4616      	mov	r6, r2
 8003a50:	e7ba      	b.n	80039c8 <_printf_i+0x150>
 8003a52:	680b      	ldr	r3, [r1, #0]
 8003a54:	1d1a      	adds	r2, r3, #4
 8003a56:	600a      	str	r2, [r1, #0]
 8003a58:	681e      	ldr	r6, [r3, #0]
 8003a5a:	6862      	ldr	r2, [r4, #4]
 8003a5c:	2100      	movs	r1, #0
 8003a5e:	4630      	mov	r0, r6
 8003a60:	f7fc fbb6 	bl	80001d0 <memchr>
 8003a64:	b108      	cbz	r0, 8003a6a <_printf_i+0x1f2>
 8003a66:	1b80      	subs	r0, r0, r6
 8003a68:	6060      	str	r0, [r4, #4]
 8003a6a:	6863      	ldr	r3, [r4, #4]
 8003a6c:	6123      	str	r3, [r4, #16]
 8003a6e:	2300      	movs	r3, #0
 8003a70:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003a74:	e7a8      	b.n	80039c8 <_printf_i+0x150>
 8003a76:	6923      	ldr	r3, [r4, #16]
 8003a78:	4632      	mov	r2, r6
 8003a7a:	4649      	mov	r1, r9
 8003a7c:	4640      	mov	r0, r8
 8003a7e:	47d0      	blx	sl
 8003a80:	3001      	adds	r0, #1
 8003a82:	d0ab      	beq.n	80039dc <_printf_i+0x164>
 8003a84:	6823      	ldr	r3, [r4, #0]
 8003a86:	079b      	lsls	r3, r3, #30
 8003a88:	d413      	bmi.n	8003ab2 <_printf_i+0x23a>
 8003a8a:	68e0      	ldr	r0, [r4, #12]
 8003a8c:	9b03      	ldr	r3, [sp, #12]
 8003a8e:	4298      	cmp	r0, r3
 8003a90:	bfb8      	it	lt
 8003a92:	4618      	movlt	r0, r3
 8003a94:	e7a4      	b.n	80039e0 <_printf_i+0x168>
 8003a96:	2301      	movs	r3, #1
 8003a98:	4632      	mov	r2, r6
 8003a9a:	4649      	mov	r1, r9
 8003a9c:	4640      	mov	r0, r8
 8003a9e:	47d0      	blx	sl
 8003aa0:	3001      	adds	r0, #1
 8003aa2:	d09b      	beq.n	80039dc <_printf_i+0x164>
 8003aa4:	3501      	adds	r5, #1
 8003aa6:	68e3      	ldr	r3, [r4, #12]
 8003aa8:	9903      	ldr	r1, [sp, #12]
 8003aaa:	1a5b      	subs	r3, r3, r1
 8003aac:	42ab      	cmp	r3, r5
 8003aae:	dcf2      	bgt.n	8003a96 <_printf_i+0x21e>
 8003ab0:	e7eb      	b.n	8003a8a <_printf_i+0x212>
 8003ab2:	2500      	movs	r5, #0
 8003ab4:	f104 0619 	add.w	r6, r4, #25
 8003ab8:	e7f5      	b.n	8003aa6 <_printf_i+0x22e>
 8003aba:	bf00      	nop
 8003abc:	08003d89 	.word	0x08003d89
 8003ac0:	08003d9a 	.word	0x08003d9a

08003ac4 <memcpy>:
 8003ac4:	440a      	add	r2, r1
 8003ac6:	4291      	cmp	r1, r2
 8003ac8:	f100 33ff 	add.w	r3, r0, #4294967295
 8003acc:	d100      	bne.n	8003ad0 <memcpy+0xc>
 8003ace:	4770      	bx	lr
 8003ad0:	b510      	push	{r4, lr}
 8003ad2:	f811 4b01 	ldrb.w	r4, [r1], #1
 8003ad6:	f803 4f01 	strb.w	r4, [r3, #1]!
 8003ada:	4291      	cmp	r1, r2
 8003adc:	d1f9      	bne.n	8003ad2 <memcpy+0xe>
 8003ade:	bd10      	pop	{r4, pc}

08003ae0 <memmove>:
 8003ae0:	4288      	cmp	r0, r1
 8003ae2:	b510      	push	{r4, lr}
 8003ae4:	eb01 0402 	add.w	r4, r1, r2
 8003ae8:	d902      	bls.n	8003af0 <memmove+0x10>
 8003aea:	4284      	cmp	r4, r0
 8003aec:	4623      	mov	r3, r4
 8003aee:	d807      	bhi.n	8003b00 <memmove+0x20>
 8003af0:	1e43      	subs	r3, r0, #1
 8003af2:	42a1      	cmp	r1, r4
 8003af4:	d008      	beq.n	8003b08 <memmove+0x28>
 8003af6:	f811 2b01 	ldrb.w	r2, [r1], #1
 8003afa:	f803 2f01 	strb.w	r2, [r3, #1]!
 8003afe:	e7f8      	b.n	8003af2 <memmove+0x12>
 8003b00:	4402      	add	r2, r0
 8003b02:	4601      	mov	r1, r0
 8003b04:	428a      	cmp	r2, r1
 8003b06:	d100      	bne.n	8003b0a <memmove+0x2a>
 8003b08:	bd10      	pop	{r4, pc}
 8003b0a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8003b0e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8003b12:	e7f7      	b.n	8003b04 <memmove+0x24>

08003b14 <_free_r>:
 8003b14:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8003b16:	2900      	cmp	r1, #0
 8003b18:	d048      	beq.n	8003bac <_free_r+0x98>
 8003b1a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003b1e:	9001      	str	r0, [sp, #4]
 8003b20:	2b00      	cmp	r3, #0
 8003b22:	f1a1 0404 	sub.w	r4, r1, #4
 8003b26:	bfb8      	it	lt
 8003b28:	18e4      	addlt	r4, r4, r3
 8003b2a:	f000 f8d3 	bl	8003cd4 <__malloc_lock>
 8003b2e:	4a20      	ldr	r2, [pc, #128]	; (8003bb0 <_free_r+0x9c>)
 8003b30:	9801      	ldr	r0, [sp, #4]
 8003b32:	6813      	ldr	r3, [r2, #0]
 8003b34:	4615      	mov	r5, r2
 8003b36:	b933      	cbnz	r3, 8003b46 <_free_r+0x32>
 8003b38:	6063      	str	r3, [r4, #4]
 8003b3a:	6014      	str	r4, [r2, #0]
 8003b3c:	b003      	add	sp, #12
 8003b3e:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8003b42:	f000 b8cd 	b.w	8003ce0 <__malloc_unlock>
 8003b46:	42a3      	cmp	r3, r4
 8003b48:	d90b      	bls.n	8003b62 <_free_r+0x4e>
 8003b4a:	6821      	ldr	r1, [r4, #0]
 8003b4c:	1862      	adds	r2, r4, r1
 8003b4e:	4293      	cmp	r3, r2
 8003b50:	bf04      	itt	eq
 8003b52:	681a      	ldreq	r2, [r3, #0]
 8003b54:	685b      	ldreq	r3, [r3, #4]
 8003b56:	6063      	str	r3, [r4, #4]
 8003b58:	bf04      	itt	eq
 8003b5a:	1852      	addeq	r2, r2, r1
 8003b5c:	6022      	streq	r2, [r4, #0]
 8003b5e:	602c      	str	r4, [r5, #0]
 8003b60:	e7ec      	b.n	8003b3c <_free_r+0x28>
 8003b62:	461a      	mov	r2, r3
 8003b64:	685b      	ldr	r3, [r3, #4]
 8003b66:	b10b      	cbz	r3, 8003b6c <_free_r+0x58>
 8003b68:	42a3      	cmp	r3, r4
 8003b6a:	d9fa      	bls.n	8003b62 <_free_r+0x4e>
 8003b6c:	6811      	ldr	r1, [r2, #0]
 8003b6e:	1855      	adds	r5, r2, r1
 8003b70:	42a5      	cmp	r5, r4
 8003b72:	d10b      	bne.n	8003b8c <_free_r+0x78>
 8003b74:	6824      	ldr	r4, [r4, #0]
 8003b76:	4421      	add	r1, r4
 8003b78:	1854      	adds	r4, r2, r1
 8003b7a:	42a3      	cmp	r3, r4
 8003b7c:	6011      	str	r1, [r2, #0]
 8003b7e:	d1dd      	bne.n	8003b3c <_free_r+0x28>
 8003b80:	681c      	ldr	r4, [r3, #0]
 8003b82:	685b      	ldr	r3, [r3, #4]
 8003b84:	6053      	str	r3, [r2, #4]
 8003b86:	4421      	add	r1, r4
 8003b88:	6011      	str	r1, [r2, #0]
 8003b8a:	e7d7      	b.n	8003b3c <_free_r+0x28>
 8003b8c:	d902      	bls.n	8003b94 <_free_r+0x80>
 8003b8e:	230c      	movs	r3, #12
 8003b90:	6003      	str	r3, [r0, #0]
 8003b92:	e7d3      	b.n	8003b3c <_free_r+0x28>
 8003b94:	6825      	ldr	r5, [r4, #0]
 8003b96:	1961      	adds	r1, r4, r5
 8003b98:	428b      	cmp	r3, r1
 8003b9a:	bf04      	itt	eq
 8003b9c:	6819      	ldreq	r1, [r3, #0]
 8003b9e:	685b      	ldreq	r3, [r3, #4]
 8003ba0:	6063      	str	r3, [r4, #4]
 8003ba2:	bf04      	itt	eq
 8003ba4:	1949      	addeq	r1, r1, r5
 8003ba6:	6021      	streq	r1, [r4, #0]
 8003ba8:	6054      	str	r4, [r2, #4]
 8003baa:	e7c7      	b.n	8003b3c <_free_r+0x28>
 8003bac:	b003      	add	sp, #12
 8003bae:	bd30      	pop	{r4, r5, pc}
 8003bb0:	20000090 	.word	0x20000090

08003bb4 <_malloc_r>:
 8003bb4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003bb6:	1ccd      	adds	r5, r1, #3
 8003bb8:	f025 0503 	bic.w	r5, r5, #3
 8003bbc:	3508      	adds	r5, #8
 8003bbe:	2d0c      	cmp	r5, #12
 8003bc0:	bf38      	it	cc
 8003bc2:	250c      	movcc	r5, #12
 8003bc4:	2d00      	cmp	r5, #0
 8003bc6:	4606      	mov	r6, r0
 8003bc8:	db01      	blt.n	8003bce <_malloc_r+0x1a>
 8003bca:	42a9      	cmp	r1, r5
 8003bcc:	d903      	bls.n	8003bd6 <_malloc_r+0x22>
 8003bce:	230c      	movs	r3, #12
 8003bd0:	6033      	str	r3, [r6, #0]
 8003bd2:	2000      	movs	r0, #0
 8003bd4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003bd6:	f000 f87d 	bl	8003cd4 <__malloc_lock>
 8003bda:	4921      	ldr	r1, [pc, #132]	; (8003c60 <_malloc_r+0xac>)
 8003bdc:	680a      	ldr	r2, [r1, #0]
 8003bde:	4614      	mov	r4, r2
 8003be0:	b99c      	cbnz	r4, 8003c0a <_malloc_r+0x56>
 8003be2:	4f20      	ldr	r7, [pc, #128]	; (8003c64 <_malloc_r+0xb0>)
 8003be4:	683b      	ldr	r3, [r7, #0]
 8003be6:	b923      	cbnz	r3, 8003bf2 <_malloc_r+0x3e>
 8003be8:	4621      	mov	r1, r4
 8003bea:	4630      	mov	r0, r6
 8003bec:	f000 f862 	bl	8003cb4 <_sbrk_r>
 8003bf0:	6038      	str	r0, [r7, #0]
 8003bf2:	4629      	mov	r1, r5
 8003bf4:	4630      	mov	r0, r6
 8003bf6:	f000 f85d 	bl	8003cb4 <_sbrk_r>
 8003bfa:	1c43      	adds	r3, r0, #1
 8003bfc:	d123      	bne.n	8003c46 <_malloc_r+0x92>
 8003bfe:	230c      	movs	r3, #12
 8003c00:	6033      	str	r3, [r6, #0]
 8003c02:	4630      	mov	r0, r6
 8003c04:	f000 f86c 	bl	8003ce0 <__malloc_unlock>
 8003c08:	e7e3      	b.n	8003bd2 <_malloc_r+0x1e>
 8003c0a:	6823      	ldr	r3, [r4, #0]
 8003c0c:	1b5b      	subs	r3, r3, r5
 8003c0e:	d417      	bmi.n	8003c40 <_malloc_r+0x8c>
 8003c10:	2b0b      	cmp	r3, #11
 8003c12:	d903      	bls.n	8003c1c <_malloc_r+0x68>
 8003c14:	6023      	str	r3, [r4, #0]
 8003c16:	441c      	add	r4, r3
 8003c18:	6025      	str	r5, [r4, #0]
 8003c1a:	e004      	b.n	8003c26 <_malloc_r+0x72>
 8003c1c:	6863      	ldr	r3, [r4, #4]
 8003c1e:	42a2      	cmp	r2, r4
 8003c20:	bf0c      	ite	eq
 8003c22:	600b      	streq	r3, [r1, #0]
 8003c24:	6053      	strne	r3, [r2, #4]
 8003c26:	4630      	mov	r0, r6
 8003c28:	f000 f85a 	bl	8003ce0 <__malloc_unlock>
 8003c2c:	f104 000b 	add.w	r0, r4, #11
 8003c30:	1d23      	adds	r3, r4, #4
 8003c32:	f020 0007 	bic.w	r0, r0, #7
 8003c36:	1ac2      	subs	r2, r0, r3
 8003c38:	d0cc      	beq.n	8003bd4 <_malloc_r+0x20>
 8003c3a:	1a1b      	subs	r3, r3, r0
 8003c3c:	50a3      	str	r3, [r4, r2]
 8003c3e:	e7c9      	b.n	8003bd4 <_malloc_r+0x20>
 8003c40:	4622      	mov	r2, r4
 8003c42:	6864      	ldr	r4, [r4, #4]
 8003c44:	e7cc      	b.n	8003be0 <_malloc_r+0x2c>
 8003c46:	1cc4      	adds	r4, r0, #3
 8003c48:	f024 0403 	bic.w	r4, r4, #3
 8003c4c:	42a0      	cmp	r0, r4
 8003c4e:	d0e3      	beq.n	8003c18 <_malloc_r+0x64>
 8003c50:	1a21      	subs	r1, r4, r0
 8003c52:	4630      	mov	r0, r6
 8003c54:	f000 f82e 	bl	8003cb4 <_sbrk_r>
 8003c58:	3001      	adds	r0, #1
 8003c5a:	d1dd      	bne.n	8003c18 <_malloc_r+0x64>
 8003c5c:	e7cf      	b.n	8003bfe <_malloc_r+0x4a>
 8003c5e:	bf00      	nop
 8003c60:	20000090 	.word	0x20000090
 8003c64:	20000094 	.word	0x20000094

08003c68 <_realloc_r>:
 8003c68:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003c6a:	4607      	mov	r7, r0
 8003c6c:	4614      	mov	r4, r2
 8003c6e:	460e      	mov	r6, r1
 8003c70:	b921      	cbnz	r1, 8003c7c <_realloc_r+0x14>
 8003c72:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8003c76:	4611      	mov	r1, r2
 8003c78:	f7ff bf9c 	b.w	8003bb4 <_malloc_r>
 8003c7c:	b922      	cbnz	r2, 8003c88 <_realloc_r+0x20>
 8003c7e:	f7ff ff49 	bl	8003b14 <_free_r>
 8003c82:	4625      	mov	r5, r4
 8003c84:	4628      	mov	r0, r5
 8003c86:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003c88:	f000 f830 	bl	8003cec <_malloc_usable_size_r>
 8003c8c:	42a0      	cmp	r0, r4
 8003c8e:	d20f      	bcs.n	8003cb0 <_realloc_r+0x48>
 8003c90:	4621      	mov	r1, r4
 8003c92:	4638      	mov	r0, r7
 8003c94:	f7ff ff8e 	bl	8003bb4 <_malloc_r>
 8003c98:	4605      	mov	r5, r0
 8003c9a:	2800      	cmp	r0, #0
 8003c9c:	d0f2      	beq.n	8003c84 <_realloc_r+0x1c>
 8003c9e:	4631      	mov	r1, r6
 8003ca0:	4622      	mov	r2, r4
 8003ca2:	f7ff ff0f 	bl	8003ac4 <memcpy>
 8003ca6:	4631      	mov	r1, r6
 8003ca8:	4638      	mov	r0, r7
 8003caa:	f7ff ff33 	bl	8003b14 <_free_r>
 8003cae:	e7e9      	b.n	8003c84 <_realloc_r+0x1c>
 8003cb0:	4635      	mov	r5, r6
 8003cb2:	e7e7      	b.n	8003c84 <_realloc_r+0x1c>

08003cb4 <_sbrk_r>:
 8003cb4:	b538      	push	{r3, r4, r5, lr}
 8003cb6:	4d06      	ldr	r5, [pc, #24]	; (8003cd0 <_sbrk_r+0x1c>)
 8003cb8:	2300      	movs	r3, #0
 8003cba:	4604      	mov	r4, r0
 8003cbc:	4608      	mov	r0, r1
 8003cbe:	602b      	str	r3, [r5, #0]
 8003cc0:	f7fc fe82 	bl	80009c8 <_sbrk>
 8003cc4:	1c43      	adds	r3, r0, #1
 8003cc6:	d102      	bne.n	8003cce <_sbrk_r+0x1a>
 8003cc8:	682b      	ldr	r3, [r5, #0]
 8003cca:	b103      	cbz	r3, 8003cce <_sbrk_r+0x1a>
 8003ccc:	6023      	str	r3, [r4, #0]
 8003cce:	bd38      	pop	{r3, r4, r5, pc}
 8003cd0:	2000016c 	.word	0x2000016c

08003cd4 <__malloc_lock>:
 8003cd4:	4801      	ldr	r0, [pc, #4]	; (8003cdc <__malloc_lock+0x8>)
 8003cd6:	f000 b811 	b.w	8003cfc <__retarget_lock_acquire_recursive>
 8003cda:	bf00      	nop
 8003cdc:	20000174 	.word	0x20000174

08003ce0 <__malloc_unlock>:
 8003ce0:	4801      	ldr	r0, [pc, #4]	; (8003ce8 <__malloc_unlock+0x8>)
 8003ce2:	f000 b80c 	b.w	8003cfe <__retarget_lock_release_recursive>
 8003ce6:	bf00      	nop
 8003ce8:	20000174 	.word	0x20000174

08003cec <_malloc_usable_size_r>:
 8003cec:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003cf0:	1f18      	subs	r0, r3, #4
 8003cf2:	2b00      	cmp	r3, #0
 8003cf4:	bfbc      	itt	lt
 8003cf6:	580b      	ldrlt	r3, [r1, r0]
 8003cf8:	18c0      	addlt	r0, r0, r3
 8003cfa:	4770      	bx	lr

08003cfc <__retarget_lock_acquire_recursive>:
 8003cfc:	4770      	bx	lr

08003cfe <__retarget_lock_release_recursive>:
 8003cfe:	4770      	bx	lr

08003d00 <_init>:
 8003d00:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003d02:	bf00      	nop
 8003d04:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003d06:	bc08      	pop	{r3}
 8003d08:	469e      	mov	lr, r3
 8003d0a:	4770      	bx	lr

08003d0c <_fini>:
 8003d0c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003d0e:	bf00      	nop
 8003d10:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003d12:	bc08      	pop	{r3}
 8003d14:	469e      	mov	lr, r3
 8003d16:	4770      	bx	lr
